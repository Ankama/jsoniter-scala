[info] Loading settings from idea.sbt ...
[info] Loading global plugins from /home/andriy/.sbt/1.0/plugins
[info] Loading settings from plugins.sbt ...
[info] Loading project definition from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/project
[info] Loading settings from release.sbt,build.sbt,version.sbt ...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[info] Setting Scala version to 2.12.6 on 4 projects.
[info] Reapplying settings...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[success] Total time: 0 s, completed May 13, 2018 11:34:41 PM
[info] Updating core...
[info] Done updating.
[info] Updating macros...
[info] Done updating.
[info] Updating benchmark...
[info] Done updating.
[info] Compiling 5 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/classes ...
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1395:83: dead code following this construct
[warn]       yearDigits < 10 && ((b >= '0' && b <= '9') || (b != '-' && tokenOrDigitError('-')))
[warn]                                                                                   ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1423:86: dead code following this construct
[warn]           nanoDigits < 9 && ((b >= '0' && b <= '9') || (b != 'Z' && tokenOrDigitError('Z')))
[warn]                                                                                      ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1459:83: dead code following this construct
[warn]       yearDigits < 10 && ((b >= '0' && b <= '9') || (b != '-' && tokenOrDigitError('-')))
[warn]                                                                                   ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1490:83: dead code following this construct
[warn]       yearDigits < 10 && ((b >= '0' && b <= '9') || (b != '-' && tokenOrDigitError('-')))
[warn]                                                                                   ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1518:86: dead code following this construct
[warn]           nanoDigits < 9 && ((b >= '0' && b <= '9') || (b != '"' && tokenOrDigitError('"')))
[warn]                                                                                      ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1554:86: dead code following this construct
[warn]           nanoDigits < 9 && ((b >= '0' && b <= '9') || (b != '"' && tokenOrDigitError('"')))
[warn]                                                                                      ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1599:83: dead code following this construct
[warn]       yearDigits < 10 && ((b >= '0' && b <= '9') || (b != '-' && tokenOrDigitError('-')))
[warn]                                                                                   ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1902:83: dead code following this construct
[warn]       yearDigits < 10 && ((b >= '0' && b <= '9') || (b != '"' && tokenOrDigitError('"')))
[warn]                                                                                   ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1929:83: dead code following this construct
[warn]       yearDigits < 10 && ((b >= '0' && b <= '9') || (b != '-' && tokenOrDigitError('-')))
[warn]                                                                                   ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1958:83: dead code following this construct
[warn]       yearDigits < 10 && ((b >= '0' && b <= '9') || (b != '-' && tokenOrDigitError('-')))
[warn]                                                                                   ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:987:79: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private[this] def toDouble(pos: Int): Double = java.lang.Double.parseDouble(new String(buf, 0, mark, pos - mark))
[warn]                                                                               ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1073:75: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private[this] def toFloat(pos: Int): Float = java.lang.Float.parseFloat(new String(buf, 0, mark, pos - mark))
[warn]                                                                           ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:445:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:453:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos + 1)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:964:14: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]       zoneId.getBytes(0, len, buf, pos)
[warn]              ^
[warn] 15 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/core_2.12-0.25.5-SNAPSHOT.jar ...
[info] Compiling 1 Scala source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/classes ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/macros_2.12-0.25.5-SNAPSHOT.jar ...
[info] Compiling 57 Scala sources and 1 Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done packaging.
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:17:48: Generated JSON codec for type 'Int':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Int] {
[info]       def nullValue: Int = 0;
[info]       def decodeValue(in: JsonReader, default: Int): Int = in.readInt();
[info]       def encodeValue(x: Int, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val intCodec: JsonValueCodec[Int] = make[Int](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:18:57: Generated JSON codec for type 'String':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[String] {
[info]       def nullValue: String = null;
[info]       def decodeValue(in: JsonReader, default: String): String = in.readString(default);
[info]       def encodeValue(x: String, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val stringCodec: JsonValueCodec[String] = make[String](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:19:56: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("a");
[info]       private[this] val f1: Array[String] = Array("b");
[info]       private[this] val f2: Array[String] = Array("l", "r");
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.A): com.github.plokhotnyuk.jsoniter_scala.macros.A = if (in.isNextToken('{'))
[info]         {
[info]           var _a: Int = 0;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _a = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.A(a = _a)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.B): com.github.plokhotnyuk.jsoniter_scala.macros.B = if (in.isNextToken('{'))
[info]         {
[info]           var _b: String = null;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _b = in.readString(_b)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.B(b = _b)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.C): com.github.plokhotnyuk.jsoniter_scala.macros.C = if (in.isNextToken('{'))
[info]         {
[info]           var _l: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var _r: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var p0 = 3;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = d0(in, _l)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 114 => if (in.isCharBufEqualsTo(l, "r"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _r = d0(in, _r)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.C(l = _l, r = _r)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 65 => if (in.isCharBufEqualsTo(l, "A"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 66 => if (in.isCharBufEqualsTo(l, "B"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d2(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 67 => if (in.isCharBufEqualsTo(l, "C"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d3(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.A, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("A")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("a");
[info]           out.writeVal(x.a)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.B, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("B")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.C, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("C")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           e0(x.l, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("r");
[info]           e0(x.r, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.A)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.B)) => e2(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.C)) => e3(x, out)
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val adtCodec: JsonValueCodec[AdtBase] = make[AdtBase](CodecMakerConfig()) // don't define implicit for recursive structures
[info]                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:20:60: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON): com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("properties", "geometry");
[info]       private[this] val f1: Array[String] = Array("coordinates");
[info]       private[this] def d2(in: JsonReader, default: scala.collection.immutable.Map[String,String]): scala.collection.immutable.Map[String,String] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[String, String];
[info]             do 
[info]               x = x.updated(in.readKeyAsString(), in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d6(in: JsonReader, default: (Double, Double)): (Double, Double) = if (in.isNextToken('['))
[info]         {
[info]           val _1: Double = in.readDouble();
[info]           val _2: Double = if (in.isNextToken(','))
[info]             in.readDouble()
[info]           else
[info]             in.commaError();
[info]           if (in.isNextToken(']'))
[info]             new (Double, Double)(_1, _2)
[info]           else
[info]             in.arrayEndError()
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d5(in: JsonReader, default: IndexedSeq[(Double, Double)]): IndexedSeq[(Double, Double)] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[(Double, Double)];
[info]             do 
[info]               x.+=(d6(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d4(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.LineString): com.github.plokhotnyuk.jsoniter_scala.macros.LineString = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[(Double, Double)] = IndexedSeq.empty[(Double, Double)];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d5(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.LineString(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d7(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Point): com.github.plokhotnyuk.jsoniter_scala.macros.Point = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: (Double, Double) = null;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d6(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Point(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d9(in: JsonReader, default: IndexedSeq[IndexedSeq[(Double, Double)]]): IndexedSeq[IndexedSeq[(Double, Double)]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[IndexedSeq[(Double, Double)]];
[info]             do 
[info]               x.+=(d5(in, IndexedSeq.empty[(Double, Double)]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Polygon): com.github.plokhotnyuk.jsoniter_scala.macros.Polygon = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[(Double, Double)]] = IndexedSeq.empty[IndexedSeq[(Double, Double)]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Polygon(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d11(in: JsonReader, default: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]]): IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[IndexedSeq[IndexedSeq[(Double, Double)]]];
[info]             do 
[info]               x.+=(d9(in, IndexedSeq.empty[IndexedSeq[(Double, Double)]]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]] = IndexedSeq.empty[IndexedSeq[IndexedSeq[(Double, Double)]]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d11(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d13(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection): com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection = if (in.isNextToken('{'))
[info]         {
[info]           var _geometries: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 203916432 => if (in.isCharBufEqualsTo(l, "geometries"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geometries = d13(in, _geometries)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection(geometries = _geometries)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d14(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString): com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[(Double, Double)]] = IndexedSeq.empty[IndexedSeq[(Double, Double)]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d15(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[(Double, Double)] = IndexedSeq.empty[(Double, Double)];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d5(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry): com.github.plokhotnyuk.jsoniter_scala.macros.Geometry = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 1806700869 => if (in.isCharBufEqualsTo(l, "LineString"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d4(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 77292912 => if (in.isCharBufEqualsTo(l, "Point"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d7(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1267133722 => if (in.isCharBufEqualsTo(l, "Polygon"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d8(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -2116761119 => if (in.isCharBufEqualsTo(l, "MultiPolygon"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d10(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1950410960 => if (in.isCharBufEqualsTo(l, "GeometryCollection"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d12(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -627102946 => if (in.isCharBufEqualsTo(l, "MultiLineString"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d14(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -1065891849 => if (in.isCharBufEqualsTo(l, "MultiPoint"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d15(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Feature): com.github.plokhotnyuk.jsoniter_scala.macros.Feature = if (in.isNextToken('{'))
[info]         {
[info]           var _properties: scala.collection.immutable.Map[String,String] = Map.empty[String, String];
[info]           var _geometry: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry = null;
[info]           var p0 = 3;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -926053069 => if (in.isCharBufEqualsTo(l, "properties"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _properties = d2(in, _properties)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1846020210 => if (in.isCharBufEqualsTo(l, "geometry"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geometry = d3(in, _geometry)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(2).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Feature(properties = _properties, geometry = _geometry)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d17(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON];
[info]             do 
[info]               x.+=(d0(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d16(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection): com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection = if (in.isNextToken('{'))
[info]         {
[info]           var _features: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -290659267 => if (in.isCharBufEqualsTo(l, "features"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _features = d17(in, _features)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection(features = _features)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON): com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 685445846 => if (in.isCharBufEqualsTo(l, "Feature"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -1377727980 => if (in.isCharBufEqualsTo(l, "FeatureCollection"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d16(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e2(x: scala.collection.immutable.Map[String,String], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e6(x: (Double, Double), out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         {
[info]           out.writeComma();
[info]           out.writeVal(x._1)
[info]         };
[info]         {
[info]           out.writeComma();
[info]           out.writeVal(x._2)
[info]         };
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e5(x: IndexedSeq[(Double, Double)], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e6(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e4(x: com.github.plokhotnyuk.jsoniter_scala.macros.LineString, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("LineString")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e5(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e7(x: com.github.plokhotnyuk.jsoniter_scala.macros.Point, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Point")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("coordinates");
[info]           e6(x.coordinates, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e9(x: IndexedSeq[IndexedSeq[(Double, Double)]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e5(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.Polygon, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Polygon")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e9(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e11(x: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e9(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiPolygon")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e11(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e13(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e3(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("GeometryCollection")
[info]         };
[info]         {
[info]           val v = x.geometries;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geometries");
[info]               e13(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e14(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiLineString")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e9(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e15(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiPoint")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e5(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.LineString)) => e4(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Point)) => e7(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Polygon)) => e8(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon)) => e10(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection)) => e12(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString)) => e14(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint)) => e15(x, out)
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Feature, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Feature")
[info]         };
[info]         {
[info]           val v = x.properties;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("properties");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geometry");
[info]           e3(x.geometry, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e17(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e0(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e16(x: com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("FeatureCollection")
[info]         };
[info]         {
[info]           val v = x.features;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("features");
[info]               e17(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Feature)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection)) => e16(x, out)
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val geoJSONCodec: JsonValueCodec[GeoJSON] = make[GeoJSON](CodecMakerConfig()) // don't define implicit for recursive structures
[info]                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:21:69: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("s", "bd", "os");
[info]       private[this] def d1(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _bd: scala.math.BigDecimal = null;
[info]           var _os: Option[String] = None;
[info]           var p0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3138 => if (in.isCharBufEqualsTo(l, "bd"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _bd = in.readBigDecimal(_bd)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556 => if (in.isCharBufEqualsTo(l, "os"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _os = d1(in, _os)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs(s = _s, bd = _bd, os = _os)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bd");
[info]           out.writeVal(x.bd)
[info]         };
[info]         {
[info]           val v = x.os;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("os");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val anyRefsCodec: JsonValueCodec[AnyRefs] = make[AnyRefs](CodecMakerConfig())
[info]                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:22:97: Generated JSON codec for type 'Array[BigDecimal]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigDecimal]] {
[info]       def nullValue: Array[BigDecimal] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = d0(in, default);
[info]       def encodeValue(x: Array[BigDecimal], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[BigDecimal] = new Array[scala.math.BigDecimal](0);
[info]       private[this] def d0(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigDecimal](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigDecimal(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigDecimal], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigDecimalArrayCodec: JsonValueCodec[Array[BigDecimal]] = make[Array[BigDecimal]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:23:85: Generated JSON codec for type 'Array[BigInt]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigInt]] {
[info]       def nullValue: Array[BigInt] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigInt]): Array[BigInt] = d0(in, default);
[info]       def encodeValue(x: Array[BigInt], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private[this] def d0(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigInt](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigInt(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigInt], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigIntArrayCodec: JsonValueCodec[Array[BigInt]] = make[Array[BigInt]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:24:122: Generated JSON codec for type 'scala.collection.mutable.ArrayBuffer[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.ArrayBuffer[Boolean]] {
[info]       def nullValue: scala.collection.mutable.ArrayBuffer[Boolean] = ArrayBuffer.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[Boolean]): scala.collection.mutable.ArrayBuffer[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.ArrayBuffer[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[Boolean]): scala.collection.mutable.ArrayBuffer[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               ArrayBuffer.empty[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.ArrayBuffer[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayBufferCodec: JsonValueCodec[mutable.ArrayBuffer[Boolean]] = make[mutable.ArrayBuffer[Boolean]](CodecMakerConfig())
[info]                                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:25:88: Generated JSON codec for type 'Array[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Boolean]] {
[info]       def nullValue: Array[Boolean] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Boolean]): Array[Boolean] = d0(in, default);
[info]       def encodeValue(x: Array[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Boolean] = new Array[Boolean](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Boolean]): Array[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Boolean](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBoolean());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayCodec: JsonValueCodec[Array[Boolean]] = make[Array[Boolean]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:26:85: Generated JSON codec for type 'List[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[List[Boolean]] {
[info]       def nullValue: List[Boolean] = List.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: List[Boolean]): List[Boolean] = d0(in, default);
[info]       def encodeValue(x: List[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: List[Boolean]): List[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = List.newBuilder[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: List[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var l = x;
[info]         while (l.isEmpty.`unary_!`) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(l.head);
[info]             l = l.tail
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanListCodec: JsonValueCodec[List[Boolean]] = make[List[Boolean]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:27:91: Generated JSON codec for type 'scala.collection.immutable.Vector[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Vector[Boolean]] {
[info]       def nullValue: scala.collection.immutable.Vector[Boolean] = Vector.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Vector[Boolean]): scala.collection.immutable.Vector[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Vector[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Vector[Boolean]): scala.collection.immutable.Vector[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Vector.newBuilder[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.Vector[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanVectorCodec: JsonValueCodec[Vector[Boolean]] = make[Vector[Boolean]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:28:79: Generated JSON codec for type 'Array[Byte]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Byte]] {
[info]       def nullValue: Array[Byte] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Byte]): Array[Byte] = d0(in, default);
[info]       def encodeValue(x: Array[Byte], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Byte] = new Array[Byte](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Byte]): Array[Byte] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Byte](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readByte());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Byte], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val byteArrayCodec: JsonValueCodec[Array[Byte]] = make[Array[Byte]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:29:79: Generated JSON codec for type 'Array[Char]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Char]] {
[info]       def nullValue: Array[Char] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Char]): Array[Char] = d0(in, default);
[info]       def encodeValue(x: Array[Char], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Char] = new Array[Char](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Char]): Array[Char] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Char](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readChar());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Char], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val charArrayCodec: JsonValueCodec[Array[Char]] = make[Array[Char]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:30:85: Generated JSON codec for type 'Array[Double]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Double]] {
[info]       def nullValue: Array[Double] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Double]): Array[Double] = d0(in, default);
[info]       def encodeValue(x: Array[Double], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Double] = new Array[Double](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Double]): Array[Double] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Double](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDouble());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Double], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val doubleArrayCodec: JsonValueCodec[Array[Double]] = make[Array[Double]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:31:91: Generated JSON codec for type 'Array[java.time.Duration]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Duration]] {
[info]       def nullValue: Array[java.time.Duration] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Duration], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Duration] = new Array[java.time.Duration](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Duration](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDuration(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Duration], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val durationArrayCodec: JsonValueCodec[Array[Duration]] = make[Array[Duration]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:32:87: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](0);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value): com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val len = in.readStringAsCharBuf();
[info]           SuitEnum.values.iterator.find(((e) => in.isCharBufEqualsTo(len, e.toString))).getOrElse(in.enumValueError(len))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value, out: JsonWriter): Unit = out.writeVal(x.toString);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val enumArrayCodec: JsonValueCodec[Array[SuitEnum]] = make[Array[SuitEnum]](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:33:82: Generated JSON codec for type 'Array[Float]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Float]] {
[info]       def nullValue: Array[Float] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Float]): Array[Float] = d0(in, default);
[info]       def encodeValue(x: Array[Float], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Float] = new Array[Float](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Float]): Array[Float] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Float](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readFloat());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Float], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val floatArrayCodec: JsonValueCodec[Array[Float]] = make[Array[Float]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:34:88: Generated JSON codec for type 'Array[java.time.Instant]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Instant]] {
[info]       def nullValue: Array[java.time.Instant] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Instant], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Instant] = new Array[java.time.Instant](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Instant](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInstant(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Instant], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val instantArrayCodec: JsonValueCodec[Array[Instant]] = make[Array[Instant]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:35:76: Generated JSON codec for type 'Array[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Int]] {
[info]       def nullValue: Array[Int] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Int]): Array[Int] = d0(in, default);
[info]       def encodeValue(x: Array[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Int] = new Array[Int](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Int](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInt());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intArrayCodec: JsonValueCodec[Array[Int]] = make[Array[Int]](CodecMakerConfig())
[info]                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:36:83: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](0);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Suit): com.github.plokhotnyuk.jsoniter_scala.macros.Suit = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val v = in.readString(null);
[info]           try {
[info]             Suit.valueOf(v)
[info]           } catch {
[info]             case ((_): IllegalArgumentException) => in.enumValueError(v)
[info]           }
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Suit, out: JsonWriter): Unit = out.writeVal(x.name);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val javaEnumArrayCodec: JsonValueCodec[Array[Suit]] = make[Array[Suit]](CodecMakerConfig())
[info]                                                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:37:79: Generated JSON codec for type 'Array[Long]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Long]] {
[info]       def nullValue: Array[Long] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Long]): Array[Long] = d0(in, default);
[info]       def encodeValue(x: Array[Long], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Long] = new Array[Long](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Long]): Array[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLong());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val longArrayCodec: JsonValueCodec[Array[Long]] = make[Array[Long]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:38:94: Generated JSON codec for type 'Array[java.time.LocalDate]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDate]] {
[info]       def nullValue: Array[java.time.LocalDate] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDate], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalDate] = new Array[java.time.LocalDate](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDate](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDate(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDate], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateArrayCodec: JsonValueCodec[Array[LocalDate]] = make[Array[LocalDate]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:39:106: Generated JSON codec for type 'Array[java.time.LocalDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDateTime]] {
[info]       def nullValue: Array[java.time.LocalDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalDateTime] = new Array[java.time.LocalDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateTimeArrayCodec: JsonValueCodec[Array[LocalDateTime]] = make[Array[LocalDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:40:94: Generated JSON codec for type 'Array[java.time.LocalTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalTime]] {
[info]       def nullValue: Array[java.time.LocalTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalTime] = new Array[java.time.LocalTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localTimeArrayCodec: JsonValueCodec[Array[LocalTime]] = make[Array[LocalTime]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:41:109: Generated JSON codec for type 'Array[java.time.OffsetDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetDateTime]] {
[info]       def nullValue: Array[java.time.OffsetDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.OffsetDateTime] = new Array[java.time.OffsetDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetDateTimeArrayCodec: JsonValueCodec[Array[OffsetDateTime]] = make[Array[OffsetDateTime]](CodecMakerConfig())
[info]                                                                                                             ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:42:97: Generated JSON codec for type 'Array[java.time.OffsetTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetTime]] {
[info]       def nullValue: Array[java.time.OffsetTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.OffsetTime] = new Array[java.time.OffsetTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetTimeArrayCodec: JsonValueCodec[Array[OffsetTime]] = make[Array[OffsetTime]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:43:85: Generated JSON codec for type 'Array[java.time.Period]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Period]] {
[info]       def nullValue: Array[java.time.Period] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Period], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Period] = new Array[java.time.Period](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Period](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readPeriod(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Period], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val periodArrayCodec: JsonValueCodec[Array[Period]] = make[Array[Period]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:44:82: Generated JSON codec for type 'Array[Short]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Short]] {
[info]       def nullValue: Array[Short] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Short]): Array[Short] = d0(in, default);
[info]       def encodeValue(x: Array[Short], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Short] = new Array[Short](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Short]): Array[Short] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Short](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readShort());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Short], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val shortArrayCodec: JsonValueCodec[Array[Short]] = make[Array[Short]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:45:79: Generated JSON codec for type 'Array[java.util.UUID]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.util.UUID]] {
[info]       def nullValue: Array[java.util.UUID] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = d0(in, default);
[info]       def encodeValue(x: Array[java.util.UUID], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.util.UUID] = new Array[java.util.UUID](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.util.UUID](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readUUID(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.util.UUID], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val uuidArrayCodec: JsonValueCodec[Array[UUID]] = make[Array[UUID]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:46:79: Generated JSON codec for type 'Array[java.time.Year]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Year]] {
[info]       def nullValue: Array[java.time.Year] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Year]): Array[java.time.Year] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Year], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Year] = new Array[java.time.Year](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Year]): Array[java.time.Year] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Year](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readYear(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Year], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val yearArrayCodec: JsonValueCodec[Array[Year]] = make[Array[Year]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:47:94: Generated JSON codec for type 'Array[java.time.YearMonth]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.YearMonth]] {
[info]       def nullValue: Array[java.time.YearMonth] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.YearMonth]): Array[java.time.YearMonth] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.YearMonth], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.YearMonth] = new Array[java.time.YearMonth](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.YearMonth]): Array[java.time.YearMonth] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.YearMonth](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readYearMonth(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.YearMonth], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val yearMonthArrayCodec: JsonValueCodec[Array[YearMonth]] = make[Array[YearMonth]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:48:106: Generated JSON codec for type 'Array[java.time.ZonedDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZonedDateTime]] {
[info]       def nullValue: Array[java.time.ZonedDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZonedDateTime] = new Array[java.time.ZonedDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZonedDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZonedDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zonedDateTimeArrayCodec: JsonValueCodec[Array[ZonedDateTime]] = make[Array[ZonedDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:49:85: Generated JSON codec for type 'Array[java.time.ZoneId]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneId]] {
[info]       def nullValue: Array[java.time.ZoneId] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneId], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZoneId] = new Array[java.time.ZoneId](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneId](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneId(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneId], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneIdArrayCodec: JsonValueCodec[Array[ZoneId]] = make[Array[ZoneId]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:50:97: Generated JSON codec for type 'Array[java.time.ZoneOffset]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneOffset]] {
[info]       def nullValue: Array[java.time.ZoneOffset] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZoneOffset] = new Array[java.time.ZoneOffset](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneOffset](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneOffset(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneOffsetArrayCodec: JsonValueCodec[Array[ZoneOffset]] = make[Array[ZoneOffset]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:51:66: Generated JSON codec for type 'scala.collection.immutable.BitSet':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.BitSet] {
[info]       def nullValue: scala.collection.immutable.BitSet = BitSet.empty;
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](2);
[info]             var mi = 0;
[info]             do 
[info]               {
[info]                 val v = in.readInt();
[info]                 if (v.<(0).||(v.>=(2147483647)))
[info]                   in.decodeError("illegal value for bit set")
[info]                 else
[info]                   ();
[info]                 val i = v.>>>(6);
[info]                 if (i.>(mi))
[info]                   {
[info]                     mi = i;
[info]                     if (i.>=(x.length))
[info]                       x = java.util.Arrays.copyOf(x, java.lang.Integer.highestOneBit(i).<<(1))
[info]                     else
[info]                       ()
[info]                   }
[info]                 else
[info]                   ();
[info]                 x(i).|=(1L.<<(v.&(63)))
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               {
[info]                 if (mi.>(1).&&(mi.+(1).!=(x.length)))
[info]                   x = java.util.Arrays.copyOf(x, mi.+(1))
[info]                 else
[info]                   ();
[info]                 BitSet.fromBitMaskNoCopy(x)
[info]               }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bitSetCodec: JsonValueCodec[BitSet] = make[BitSet](CodecMakerConfig(bitSetValueLimit = Int.MaxValue /*WARNING: don't do this for open-system*/))
[info]                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:52:87: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("s", "l");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _l: Long = 0L;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields(s = _s, l = _l)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val extractFieldsCodec: JsonValueCodec[ExtractFields] = make[ExtractFields](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:53:94: Generated JSON codec for type 'scala.collection.immutable.IntMap[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.IntMap[Boolean]] {
[info]       def nullValue: scala.collection.immutable.IntMap[Boolean] = IntMap.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.IntMap[Boolean]): scala.collection.immutable.IntMap[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.IntMap[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.IntMap[Boolean]): scala.collection.immutable.IntMap[Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = IntMap.empty[Boolean];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.immutable.IntMap[Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intMapOfBooleansCodec: JsonValueCodec[IntMap[Boolean]] = make[IntMap[Boolean]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:54:89: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("destination_addresses", "origin_addresses", "rows", "status");
[info]       private[this] val f1: Array[String] = Array("distance", "duration", "status");
[info]       private[this] val f2: Array[String] = Array("text", "value");
[info]       private[this] def d1(in: JsonReader, default: IndexedSeq[String]): IndexedSeq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Value): com.github.plokhotnyuk.jsoniter_scala.macros.Value = if (in.isNextToken('{'))
[info]         {
[info]           var _text: String = null;
[info]           var _value: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 111972721 => if (in.isCharBufEqualsTo(l, "value"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _value = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Value(text = _text, value = _value)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Elements): com.github.plokhotnyuk.jsoniter_scala.macros.Elements = if (in.isNextToken('{'))
[info]         {
[info]           var _distance: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _duration: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _status: String = null;
[info]           var p0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 288459765 => if (in.isCharBufEqualsTo(l, "distance"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _distance = d6(in, _distance)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1992012396 => if (in.isCharBufEqualsTo(l, "duration"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _duration = d6(in, _duration)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _status = in.readString(_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(7).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Elements(distance = _distance, duration = _duration, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Rows): com.github.plokhotnyuk.jsoniter_scala.macros.Rows = if (in.isNextToken('{'))
[info]         {
[info]           var _elements: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -8339209 => if (in.isCharBufEqualsTo(l, "elements"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _elements = d4(in, _elements)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Rows(elements = _elements)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = if (in.isNextToken('{'))
[info]         {
[info]           var _destination_addresses: IndexedSeq[String] = IndexedSeq.empty[String];
[info]           var _origin_addresses: IndexedSeq[String] = IndexedSeq.empty[String];
[info]           var _rows: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]           var _status: String = null;
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 715423921 => if (in.isCharBufEqualsTo(l, "destination_addresses"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _destination_addresses = d1(in, _destination_addresses)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1780936137 => if (in.isCharBufEqualsTo(l, "origin_addresses"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _origin_addresses = d1(in, _origin_addresses)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3506649 => if (in.isCharBufEqualsTo(l, "rows"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _rows = d2(in, _rows)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _status = in.readString(_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(8).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix(destination_addresses = _destination_addresses, origin_addresses = _origin_addresses, rows = _rows, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: IndexedSeq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: com.github.plokhotnyuk.jsoniter_scala.macros.Value, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("value");
[info]           out.writeVal(x.value)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.Elements, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("distance");
[info]           e6(x.distance, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("duration");
[info]           e6(x.duration, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e5(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Rows, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.elements;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("elements");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e3(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.destination_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("destination_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.origin_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("origin_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.rows;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("rows");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val googleMapsAPICodec: JsonValueCodec[DistanceMatrix] = make[DistanceMatrix](CodecMakerConfig())
[info]                                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:55:101: Generated JSON codec for type 'scala.collection.immutable.Map[Int,Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Map[Int,Boolean]] {
[info]       def nullValue: scala.collection.immutable.Map[Int,Boolean] = Map.empty[Int, Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Map[Int,Boolean]): scala.collection.immutable.Map[Int,Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Map[Int,Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Map[Int,Boolean]): scala.collection.immutable.Map[Int,Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[Int, Boolean];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.immutable.Map[Int,Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mapOfIntsToBooleansCodec: JsonValueCodec[Map[Int, Boolean]] = make[Map[Int, Boolean]](CodecMakerConfig())
[info]                                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:56:95: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("s", "i");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields(s = _s, i = _i)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val missingReqFieldCodec: JsonValueCodec[MissingReqFields] = make[MissingReqFields](CodecMakerConfig())
[info]                                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:57:89: Generated JSON codec for type 'scala.collection.mutable.BitSet':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.BitSet] {
[info]       def nullValue: scala.collection.mutable.BitSet = BitSet.empty;
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](2);
[info]             do 
[info]               {
[info]                 val v = in.readInt();
[info]                 if (v.<(0).||(v.>=(2147483647)))
[info]                   in.decodeError("illegal value for bit set")
[info]                 else
[info]                   ();
[info]                 val i = v.>>>(6);
[info]                 if (i.>=(x.length))
[info]                   x = java.util.Arrays.copyOf(x, java.lang.Integer.highestOneBit(i).<<(1))
[info]                 else
[info]                   ();
[info]                 x(i).|=(1L.<<(v.&(63)))
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               BitSet.fromBitMaskNoCopy(x)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableBitSetCodec: JsonValueCodec[mutable.BitSet] = make[mutable.BitSet](CodecMakerConfig(bitSetValueLimit = Int.MaxValue /*WARNING: don't do this for open-system*/))
[info]                                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:58:120: Generated JSON codec for type 'scala.collection.mutable.LongMap[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.LongMap[Boolean]] {
[info]       def nullValue: scala.collection.mutable.LongMap[Boolean] = LongMap.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.LongMap[Boolean]): scala.collection.mutable.LongMap[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.LongMap[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.LongMap[Boolean]): scala.collection.mutable.LongMap[Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               LongMap.empty[Boolean];
[info]             do 
[info]               x.update(in.readKeyAsLong(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.mutable.LongMap[Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableLongMapOfBooleansCodec: JsonValueCodec[mutable.LongMap[Boolean]] = make[mutable.LongMap[Boolean]](CodecMakerConfig())
[info]                                                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:59:124: Generated JSON codec for type 'scala.collection.mutable.Map[Int,Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.Map[Int,Boolean]] {
[info]       def nullValue: scala.collection.mutable.Map[Int,Boolean] = Map.empty[Int, Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.Map[Int,Boolean]): scala.collection.mutable.Map[Int,Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.Map[Int,Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.Map[Int,Boolean]): scala.collection.mutable.Map[Int,Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Map.empty[Int, Boolean];
[info]             do 
[info]               x.update(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.mutable.Map[Int,Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableMapOfIntsToBooleansCodec: JsonValueCodec[mutable.Map[Int, Boolean]] = make[mutable.Map[Int, Boolean]](CodecMakerConfig())
[info]                                                                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:60:96: Generated JSON codec for type 'scala.collection.mutable.Set[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.Set[Int]] {
[info]       def nullValue: scala.collection.mutable.Set[Int] = Set.empty[Int];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.Set[Int]): scala.collection.mutable.Set[Int] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.Set[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.Set[Int]): scala.collection.mutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Set.empty[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableSetOfIntsCodec: JsonValueCodec[mutable.Set[Int]] = make[mutable.Set[Int]](CodecMakerConfig())
[info]                                                                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:61:78: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Primitives':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Primitives] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("b", "s", "i", "l", "bl", "ch", "dbl", "f");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = if (in.isNextToken('{'))
[info]         {
[info]           var _b: Byte = ((0): Byte);
[info]           var _s: Short = ((0): Short);
[info]           var _i: Int = 0;
[info]           var _l: Long = 0L;
[info]           var _bl: Boolean = false;
[info]           var _ch: Char = '\u0000';
[info]           var _dbl: Double = 0.0;
[info]           var _f: Float = 0.0F;
[info]           var p0 = 255;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _b = in.readByte()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readShort()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3146 => if (in.isCharBufEqualsTo(l, "bl"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _bl = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3173 => if (in.isCharBufEqualsTo(l, "ch"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _ch = in.readChar()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 99246 => if (in.isCharBufEqualsTo(l, "dbl"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _dbl = in.readDouble()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102 => if (in.isCharBufEqualsTo(l, "f"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _f = in.readFloat()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(255).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Primitives(b = _b, s = _s, i = _i, l = _l, bl = _bl, ch = _ch, dbl = _dbl, f = _f)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bl");
[info]           out.writeVal(x.bl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("ch");
[info]           out.writeVal(x.ch)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("dbl");
[info]           out.writeVal(x.dbl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("f");
[info]           out.writeVal(x.f)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val primitivesCodec: JsonValueCodec[Primitives] = make[Primitives](CodecMakerConfig())
[info]                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:62:73: Generated JSON codec for type 'scala.collection.immutable.Set[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Set[Int]] {
[info]       def nullValue: scala.collection.immutable.Set[Int] = Set.empty[Int];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Set.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val setOfIntsCodec: JsonValueCodec[Set[Int]] = make[Set[Int]](CodecMakerConfig())
[info]                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:63:78: Generated JSON codec for type 'Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]] {
[info]       def nullValue: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]       def decodeValue(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = d0(in, default);
[info]       def encodeValue(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "in_reply_to_status_id", "in_reply_to_status_id_str", "in_reply_to_user_id", "in_reply_to_user_id_str", "in_reply_to_screen_name", "user", "geo", "coordinates", "place", "contributors", "retweeted_status", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private[this] val f1: Array[String] = Array("screen_name", "name", "id", "id_str", "indices");
[info]       private[this] val f2: Array[String] = Array("url", "expanded_url", "display_url", "indices");
[info]       private[this] val f3: Array[String] = Array("id", "id_str", "name", "screen_name", "location", "description", "url", "entities", "protected", "followers_count", "friends_count", "listed_count", "created_at", "favourites_count", "utc_offset", "time_zone", "geo_enabled", "verified", "statuses_count", "lang", "contributors_enabled", "is_translator", "is_translation_enabled", "profile_background_color", "profile_background_image_url", "profile_background_image_url_https", "profile_background_tile", "profile_image_url", "profile_image_url_https", "profile_banner_url", "profile_link_color", "profile_sidebar_border_color", "profile_sidebar_fill_color", "profile_text_color", "profile_use_background_image", "has_extended_profile", "default_profile", "default_profile_image", "following", "follow_request_sent", "notifications", "translator_type");
[info]       private[this] val f4: Array[String] = Array("url", "description");
[info]       private[this] val f5: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "in_reply_to_status_id", "in_reply_to_status_id_str", "in_reply_to_user_id", "in_reply_to_user_id_str", "in_reply_to_screen_name", "user", "geo", "coordinates", "place", "contributors", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private[this] def d3(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: Seq[Int]): Seq[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions): com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions = if (in.isNextToken('{'))
[info]         {
[info]           var _screen_name: String = null;
[info]           var _name: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var p0 = 31;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _screen_name = in.readString(_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _name = in.readString(_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _indices = d6(in, _indices)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(15).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions(screen_name = _screen_name, name = _name, id = _id, id_str = _id_str, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Urls): com.github.plokhotnyuk.jsoniter_scala.macros.Urls = if (in.isNextToken('{'))
[info]         {
[info]           var _url: String = null;
[info]           var _expanded_url: String = null;
[info]           var _display_url: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = in.readString(_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -518939415 => if (in.isCharBufEqualsTo(l, "expanded_url"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _expanded_url = in.readString(_expanded_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1714674802 => if (in.isCharBufEqualsTo(l, "display_url"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _display_url = in.readString(_display_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _indices = d6(in, _indices)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(7).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Urls(url = _url, expanded_url = _expanded_url, display_url = _display_url, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d7(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]             do 
[info]               x.+=(d8(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Entities): com.github.plokhotnyuk.jsoniter_scala.macros.Entities = if (in.isNextToken('{'))
[info]         {
[info]           var _hashtags: Seq[String] = Seq.empty[String];
[info]           var _symbols: Seq[String] = Seq.empty[String];
[info]           var _user_mentions: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 149143079 => if (in.isCharBufEqualsTo(l, "hashtags"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _hashtags = d3(in, _hashtags)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1743438373 => if (in.isCharBufEqualsTo(l, "symbols"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _symbols = d3(in, _symbols)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -553518659 => if (in.isCharBufEqualsTo(l, "user_mentions"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user_mentions = d4(in, _user_mentions)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _urls = d7(in, _urls)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Entities(hashtags = _hashtags, symbols = _symbols, user_mentions = _user_mentions, urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d9(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Url): com.github.plokhotnyuk.jsoniter_scala.macros.Url = if (in.isNextToken('{'))
[info]         {
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _urls = d7(in, _urls)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Url(urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities): com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = if (in.isNextToken('{'))
[info]         {
[info]           var _url: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var _description: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = d12(in, _url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _description = d12(in, _description)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f4(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities(url = _url, description = _description)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.User): com.github.plokhotnyuk.jsoniter_scala.macros.User = if (in.isNextToken('{'))
[info]         {
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _name: String = null;
[info]           var _screen_name: String = null;
[info]           var _location: String = null;
[info]           var _description: String = null;
[info]           var _url: String = null;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = null;
[info]           var _protected: Boolean = false;
[info]           var _followers_count: Int = 0;
[info]           var _friends_count: Int = 0;
[info]           var _listed_count: Int = 0;
[info]           var _created_at: String = null;
[info]           var _favourites_count: Int = 0;
[info]           var _utc_offset: Int = 0;
[info]           var _time_zone: String = null;
[info]           var _geo_enabled: Boolean = false;
[info]           var _verified: Boolean = false;
[info]           var _statuses_count: Int = 0;
[info]           var _lang: String = null;
[info]           var _contributors_enabled: Boolean = false;
[info]           var _is_translator: Boolean = false;
[info]           var _is_translation_enabled: Boolean = false;
[info]           var _profile_background_color: String = null;
[info]           var _profile_background_image_url: String = null;
[info]           var _profile_background_image_url_https: String = null;
[info]           var _profile_background_tile: Boolean = false;
[info]           var _profile_image_url: String = null;
[info]           var _profile_image_url_https: String = null;
[info]           var _profile_banner_url: String = null;
[info]           var _profile_link_color: String = null;
[info]           var _profile_sidebar_border_color: String = null;
[info]           var _profile_sidebar_fill_color: String = null;
[info]           var _profile_text_color: String = null;
[info]           var _profile_use_background_image: Boolean = false;
[info]           var _has_extended_profile: Boolean = false;
[info]           var _default_profile: Boolean = false;
[info]           var _default_profile_image: Boolean = false;
[info]           var _following: Boolean = false;
[info]           var _follow_request_sent: Boolean = false;
[info]           var _notifications: Boolean = false;
[info]           var _translator_type: String = null;
[info]           var p0 = -1;
[info]           var p1 = 1023;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _name = in.readString(_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _screen_name = in.readString(_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1901043637 => if (in.isCharBufEqualsTo(l, "location"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _location = in.readString(_location)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _description = in.readString(_description)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = in.readString(_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d11(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -608539730 => if (in.isCharBufEqualsTo(l, "protected"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _protected = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -460163995 => if (in.isCharBufEqualsTo(l, "followers_count"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _followers_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1666926107 => if (in.isCharBufEqualsTo(l, "friends_count"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _friends_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1974943731 => if (in.isCharBufEqualsTo(l, "listed_count"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _listed_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 226316666 => if (in.isCharBufEqualsTo(l, "favourites_count"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favourites_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1699658638 => if (in.isCharBufEqualsTo(l, "utc_offset"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _utc_offset = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 36848094 => if (in.isCharBufEqualsTo(l, "time_zone"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _time_zone = in.readString(_time_zone)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1085743021 => if (in.isCharBufEqualsTo(l, "geo_enabled"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1994383672 => if (in.isCharBufEqualsTo(l, "verified"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _verified = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1824078800 => if (in.isCharBufEqualsTo(l, "statuses_count"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _statuses_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 647263482 => if (in.isCharBufEqualsTo(l, "contributors_enabled"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 583435343 => if (in.isCharBufEqualsTo(l, "is_translator"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_translator = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1690715422 => if (in.isCharBufEqualsTo(l, "is_translation_enabled"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_translation_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1592986856 => if (in.isCharBufEqualsTo(l, "profile_background_color"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_color = in.readString(_profile_background_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1189803120 => if (in.isCharBufEqualsTo(l, "profile_background_image_url"))
[info]                       {
[info]                         if (p0.&(16777216).!=(0))
[info]                           p0.^=(16777216)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_image_url = in.readString(_profile_background_image_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 594447228 => if (in.isCharBufEqualsTo(l, "profile_background_image_url_https"))
[info]                       {
[info]                         if (p0.&(33554432).!=(0))
[info]                           p0.^=(33554432)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_image_url_https = in.readString(_profile_background_image_url_https)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1021718665 => if (in.isCharBufEqualsTo(l, "profile_background_tile"))
[info]                       {
[info]                         if (p0.&(67108864).!=(0))
[info]                           p0.^=(67108864)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_tile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -174080651 => if (in.isCharBufEqualsTo(l, "profile_image_url"))
[info]                       {
[info]                         if (p0.&(134217728).!=(0))
[info]                           p0.^=(134217728)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_image_url = in.readString(_profile_image_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -782008927 => if (in.isCharBufEqualsTo(l, "profile_image_url_https"))
[info]                       {
[info]                         if (p0.&(268435456).!=(0))
[info]                           p0.^=(268435456)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_image_url_https = in.readString(_profile_image_url_https)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -690137550 => if (in.isCharBufEqualsTo(l, "profile_banner_url"))
[info]                       {
[info]                         if (p0.&(536870912).!=(0))
[info]                           p0.^=(536870912)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_banner_url = in.readString(_profile_banner_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1512257332 => if (in.isCharBufEqualsTo(l, "profile_link_color"))
[info]                       {
[info]                         if (p0.&(1073741824).!=(0))
[info]                           p0.^=(1073741824)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_link_color = in.readString(_profile_link_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1412739479 => if (in.isCharBufEqualsTo(l, "profile_sidebar_border_color"))
[info]                       {
[info]                         if (p0.&(-2147483648).!=(0))
[info]                           p0.^=(-2147483648)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_sidebar_border_color = in.readString(_profile_sidebar_border_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 486184128 => if (in.isCharBufEqualsTo(l, "profile_sidebar_fill_color"))
[info]                       {
[info]                         if (p1.&(1).!=(0))
[info]                           p1.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_sidebar_fill_color = in.readString(_profile_sidebar_fill_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1774134745 => if (in.isCharBufEqualsTo(l, "profile_text_color"))
[info]                       {
[info]                         if (p1.&(2).!=(0))
[info]                           p1.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_text_color = in.readString(_profile_text_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -101767272 => if (in.isCharBufEqualsTo(l, "profile_use_background_image"))
[info]                       {
[info]                         if (p1.&(4).!=(0))
[info]                           p1.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_use_background_image = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 284519336 => if (in.isCharBufEqualsTo(l, "has_extended_profile"))
[info]                       {
[info]                         if (p1.&(8).!=(0))
[info]                           p1.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _has_extended_profile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -312724053 => if (in.isCharBufEqualsTo(l, "default_profile"))
[info]                       {
[info]                         if (p1.&(16).!=(0))
[info]                           p1.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _default_profile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 545330631 => if (in.isCharBufEqualsTo(l, "default_profile_image"))
[info]                       {
[info]                         if (p1.&(32).!=(0))
[info]                           p1.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _default_profile_image = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 765915793 => if (in.isCharBufEqualsTo(l, "following"))
[info]                       {
[info]                         if (p1.&(64).!=(0))
[info]                           p1.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _following = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 585125142 => if (in.isCharBufEqualsTo(l, "follow_request_sent"))
[info]                       {
[info]                         if (p1.&(128).!=(0))
[info]                           p1.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _follow_request_sent = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1272354024 => if (in.isCharBufEqualsTo(l, "notifications"))
[info]                       {
[info]                         if (p1.&(256).!=(0))
[info]                           p1.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _notifications = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -475640257 => if (in.isCharBufEqualsTo(l, "translator_type"))
[info]                       {
[info]                         if (p1.&(512).!=(0))
[info]                           p1.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _translator_type = in.readString(_translator_type)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(-1).!=(0))
[info]             in.requiredFieldError(f3(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           if (p1.&(1023).!=(0))
[info]             in.requiredFieldError(f3(Integer.numberOfTrailingZeros(p1).+(32)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.User(id = _id, id_str = _id_str, name = _name, screen_name = _screen_name, location = _location, description = _description, url = _url, entities = _entities, `protected` = _protected, followers_count = _followers_count, friends_count = _friends_count, listed_count = _listed_count, created_at = _created_at, favourites_count = _favourites_count, utc_offset = _utc_offset, time_zone = _time_zone, geo_enabled = _geo_enabled, verified = _verified, statuses_count = _statuses_count, lang = _lang, contributors_enabled = _contributors_enabled, is_translator = _is_translator, is_translation_enabled = _is_translation_enabled, profile_background_color = _profile_background_color, profile_background_image_url = _profile_background_image_url, profile_background_image_url_https = _profile_background_image_url_https, profile_background_tile = _profile_background_tile, profile_image_url = _profile_image_url, profile_image_url_https = _profile_image_url_https, profile_banner_url = _profile_banner_url, profile_link_color = _profile_link_color, profile_sidebar_border_color = _profile_sidebar_border_color, profile_sidebar_fill_color = _profile_sidebar_fill_color, profile_text_color = _profile_text_color, profile_use_background_image = _profile_use_background_image, has_extended_profile = _has_extended_profile, default_profile = _default_profile, default_profile_image = _default_profile_image, following = _following, follow_request_sent = _follow_request_sent, notifications = _notifications, translator_type = _translator_type)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus): com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var p0 = 16777215;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _truncated = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d2(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _source = in.readString(_source)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user = d10(in, _user)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo = d9(in, _geo)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _place = d9(in, _place)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors = d9(in, _contributors)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_quote_status = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweet_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorite_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorited = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _possibly_sensitive = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(16650367).!=(0))
[info]             in.requiredFieldError(f5(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet): com.github.plokhotnyuk.jsoniter_scala.macros.Tweet = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _retweeted_status: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = null;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var p0 = 33554431;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _truncated = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d2(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _source = in.readString(_source)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user = d10(in, _user)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo = d9(in, _geo)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _place = d9(in, _place)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors = d9(in, _contributors)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 364396852 => if (in.isCharBufEqualsTo(l, "retweeted_status"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted_status = d13(in, _retweeted_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_quote_status = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweet_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorite_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorited = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _possibly_sensitive = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(16777216).!=(0))
[info]                           p0.^=(16777216)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(33427583).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Tweet(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, retweeted_status = _retweeted_status, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]             do 
[info]               x.+=(d1(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e3(x: Seq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: Seq[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e5(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.Urls, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("expanded_url");
[info]           out.writeVal(x.expanded_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("display_url");
[info]           out.writeVal(x.display_url)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e7(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e8(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.Entities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.hashtags;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("hashtags");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.symbols;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("symbols");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.user_mentions;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("user_mentions");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.Url, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           e11(x.url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           e11(x.description, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e9(x: com.github.plokhotnyuk.jsoniter_scala.macros.User, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("location");
[info]           out.writeVal(x.location)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           out.writeVal(x.description)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e10(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("protected");
[info]           out.writeVal(x.`protected`)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("followers_count");
[info]           out.writeVal(x.followers_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("friends_count");
[info]           out.writeVal(x.friends_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("listed_count");
[info]           out.writeVal(x.listed_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favourites_count");
[info]           out.writeVal(x.favourites_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("utc_offset");
[info]           out.writeVal(x.utc_offset)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("time_zone");
[info]           out.writeVal(x.time_zone)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geo_enabled");
[info]           out.writeVal(x.geo_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("verified");
[info]           out.writeVal(x.verified)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("statuses_count");
[info]           out.writeVal(x.statuses_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("contributors_enabled");
[info]           out.writeVal(x.contributors_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translator");
[info]           out.writeVal(x.is_translator)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translation_enabled");
[info]           out.writeVal(x.is_translation_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_color");
[info]           out.writeVal(x.profile_background_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url");
[info]           out.writeVal(x.profile_background_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url_https");
[info]           out.writeVal(x.profile_background_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_tile");
[info]           out.writeVal(x.profile_background_tile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url");
[info]           out.writeVal(x.profile_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url_https");
[info]           out.writeVal(x.profile_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_banner_url");
[info]           out.writeVal(x.profile_banner_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_link_color");
[info]           out.writeVal(x.profile_link_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_border_color");
[info]           out.writeVal(x.profile_sidebar_border_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_fill_color");
[info]           out.writeVal(x.profile_sidebar_fill_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_text_color");
[info]           out.writeVal(x.profile_text_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_use_background_image");
[info]           out.writeVal(x.profile_use_background_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("has_extended_profile");
[info]           out.writeVal(x.has_extended_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile");
[info]           out.writeVal(x.default_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile_image");
[info]           out.writeVal(x.default_profile_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("following");
[info]           out.writeVal(x.following)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("follow_request_sent");
[info]           out.writeVal(x.follow_request_sent)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("notifications");
[info]           out.writeVal(x.notifications)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("translator_type");
[info]           out.writeVal(x.translator_type)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted_status");
[info]           e12(x.retweeted_status, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e1(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val twitterAPICodec: JsonValueCodec[Seq[Tweet]] = make[Seq[Tweet]](CodecMakerConfig())
[info]                                                                              ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:35:18: local val v1 in value primitivesFormat is never used
[warn]     implicit val v1: Format[Char] = Format(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:42:23: local val v1 in value adtFormat is never used
[warn]     implicit lazy val v1: OFormat[A] = Json.format[A]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:43:23: local val v2 in value adtFormat is never used
[warn]     implicit lazy val v2: OFormat[B] = Json.format[B]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:44:23: local val v3 in value adtFormat is never used
[warn]     implicit lazy val v3: OFormat[C] = Json.format[C]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:64:18: local val v1 in value googleMapsAPIFormat is never used
[warn]     implicit val v1: OFormat[Value] = Json.format[Value]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:65:18: local val v2 in value googleMapsAPIFormat is never used
[warn]     implicit val v2: OFormat[Elements] = Json.format[Elements]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:66:18: local val v3 in value googleMapsAPIFormat is never used
[warn]     implicit val v3: OFormat[Rows] = Json.format[Rows]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:70:18: local val v1 in value twitterAPIFormat is never used
[warn]     implicit val v1: OFormat[Urls] = Json.format[Urls]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:71:18: local val v2 in value twitterAPIFormat is never used
[warn]     implicit val v2: OFormat[Url] = Json.format[Url]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:72:18: local val v3 in value twitterAPIFormat is never used
[warn]     implicit val v3: OFormat[UserEntities] = Json.format[UserEntities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:73:18: local val v4 in value twitterAPIFormat is never used
[warn]     implicit val v4: OFormat[UserMentions] = Json.format[UserMentions]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:74:18: local val v5 in value twitterAPIFormat is never used
[warn]     implicit val v5: OFormat[Entities] = Json.format[Entities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:75:18: local val v6 in value twitterAPIFormat is never used
[warn]     implicit val v6: Format[User] = Jsonx.formatCaseClass[User]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:76:18: local val v7 in value twitterAPIFormat is never used
[warn]     implicit val v7: Format[RetweetedStatus] = Jsonx.formatCaseClass[RetweetedStatus]
[warn]                  ^
[warn] 14 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.25.5-SNAPSHOT.jar ...
Processing 421 classes from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes with "reflection" generator
Writing out Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/src_managed/jmh and resources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/resource_managed/jmh
[info] Compiling 49 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/test-classes ...
[info] Done packaging.
[info] Compiling 617 Java sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.25.5-SNAPSHOT-tests.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.25.5-SNAPSHOT-jmh.jar ...
[info] Done packaging.
[info] Running (fork) org.openjdk.jmh.Main -p size=128 -jvm /usr/lib/jvm/jdk-10/bin/java -prof gc -rf json -rff jdk10.json .*Benchmark.*
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce
[info] # Run progress: 0.00% complete, ETA 01:10:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 312230.213 ops/s
[info] # Warmup Iteration   2: 669562.989 ops/s
[info] # Warmup Iteration   3: 683771.662 ops/s
[info] # Warmup Iteration   4: 675108.747 ops/s
[info] # Warmup Iteration   5: 679406.891 ops/s
[info] Iteration   1: 675844.668 ops/s
[info]                  ·gc.alloc.rate:            1796.509 MB/sec
[info]                  ·gc.alloc.rate.norm:       4184.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2034.141 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4737.437 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 699185.750 ops/s
[info]                  ·gc.alloc.rate:                                  1859.183 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4184.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.022 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.051 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2038.235 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4586.949 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                7.497 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 702617.574 ops/s
[info]                  ·gc.alloc.rate:                                  1868.280 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4184.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.112 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.250 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.871 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4579.475 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 703748.431 ops/s
[info]                  ·gc.alloc.rate:            1871.006 MB/sec
[info]                  ·gc.alloc.rate.norm:       4184.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1363.076 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3048.151 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 700879.846 ops/s
[info]                  ·gc.alloc.rate:            1863.027 MB/sec
[info]                  ·gc.alloc.rate.norm:       4184.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.227 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4590.941 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce":
[info]   696455.254 ±(99.9%) 44864.277 ops/s [Average]
[info]   (min, avg, max) = (675844.668, 696455.254, 703748.431), stdev = 11651.110
[info]   CI (99.9%): [651590.976, 741319.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate":
[info]   1851.601 ±(99.9%) 119.895 MB/sec [Average]
[info]   (min, avg, max) = (1796.509, 1851.601, 1871.006), stdev = 31.136
[info]   CI (99.9%): [1731.706, 1971.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4184.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4184.001, 4184.001, 4184.001), stdev = 0.001
[info]   CI (99.9%): [4184.001, 4184.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.027 ±(99.9%) 0.186 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.112), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.060 ±(99.9%) 0.417 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.060, 0.250), stdev = 0.108
[info]   CI (99.9%): [≈ 0, 0.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1904.910 ±(99.9%) 1166.464 MB/sec [Average]
[info]   (min, avg, max) = (1363.076, 1904.910, 2044.871), stdev = 302.927
[info]   CI (99.9%): [738.446, 3071.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   4308.591 ±(99.9%) 2724.994 B/op [Average]
[info]   (min, avg, max) = (3048.151, 4308.591, 4737.437), stdev = 707.672
[info]   CI (99.9%): [1583.597, 7033.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.332), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.499 ±(99.9%) 12.911 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.499, 7.497), stdev = 3.353
[info]   CI (99.9%): [≈ 0, 14.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 12.000), stdev = 3.912
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala
[info] # Run progress: 0.24% complete, ETA 01:51:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 389488.272 ops/s
[info] # Warmup Iteration   2: 1379396.076 ops/s
[info] # Warmup Iteration   3: 1388563.358 ops/s
[info] # Warmup Iteration   4: 1353914.402 ops/s
[info] # Warmup Iteration   5: 1361020.862 ops/s
[info] Iteration   1: 1368450.104 ops/s
[info]                  ·gc.alloc.rate:                   1098.851 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.011 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1557.509 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.766 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 1356282.115 ops/s
[info]                  ·gc.alloc.rate:                   1089.053 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.992 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1571.500 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.773 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 1360218.715 ops/s
[info]                  ·gc.alloc.rate:            1092.199 MB/sec
[info]                  ·gc.alloc.rate.norm:       1264.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.305 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 783.843 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 1400190.819 ops/s
[info]                  ·gc.alloc.rate:                   1124.528 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.236 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1522.199 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.749 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 1394515.171 ops/s
[info]                  ·gc.alloc.rate:                   1119.740 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.249 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1527.593 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.262 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala":
[info]   1375931.385 ±(99.9%) 77560.338 ops/s [Average]
[info]   (min, avg, max) = (1356282.115, 1375931.385, 1400190.819), stdev = 20142.173
[info]   CI (99.9%): [1298371.047, 1453491.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1104.874 ±(99.9%) 62.521 MB/sec [Average]
[info]   (min, avg, max) = (1089.053, 1104.874, 1124.528), stdev = 16.237
[info]   CI (99.9%): [1042.353, 1167.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1264.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1264.000, 1264.000, 1264.000), stdev = 0.001
[info]   CI (99.9%): [1264.000, 1264.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1218.559 ±(99.9%) 1165.091 MB/sec [Average]
[info]   (min, avg, max) = (677.305, 1218.559, 1354.236), stdev = 302.570
[info]   CI (99.9%): [53.468, 2383.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1392.529 ±(99.9%) 1312.617 B/op [Average]
[info]   (min, avg, max) = (783.843, 1392.529, 1571.500), stdev = 340.883
[info]   CI (99.9%): [79.912, 2705.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.332 ±(99.9%) 7.253 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.332, 4.662), stdev = 1.884
[info]   CI (99.9%): [≈ 0, 8.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.510 ±(99.9%) 8.177 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.510, 5.262), stdev = 2.123
[info]   CI (99.9%): [≈ 0, 9.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 8.800, 10.000), stdev = 2.168
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala
[info] # Run progress: 0.47% complete, ETA 01:51:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2671724.644 ops/s
[info] # Warmup Iteration   2: 3658493.876 ops/s
[info] # Warmup Iteration   3: 3586894.178 ops/s
[info] # Warmup Iteration   4: 3463814.225 ops/s
[info] # Warmup Iteration   5: 3597163.479 ops/s
[info] Iteration   1: 3583090.310 ops/s
[info]                  ·gc.alloc.rate:            236.750 MB/sec
[info]                  ·gc.alloc.rate.norm:       104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.756 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 298.166 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 3696492.707 ops/s
[info]                  ·gc.alloc.rate:      244.315 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3693179.560 ops/s
[info]                  ·gc.alloc.rate:      243.994 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3682853.156 ops/s
[info]                  ·gc.alloc.rate:            243.372 MB/sec
[info]                  ·gc.alloc.rate.norm:       104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.813 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 290.077 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 3581292.832 ops/s
[info]                  ·gc.alloc.rate:      236.641 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala":
[info]   3647381.713 ±(99.9%) 229982.755 ops/s [Average]
[info]   (min, avg, max) = (3581292.832, 3647381.713, 3696492.707), stdev = 59725.791
[info]   CI (99.9%): [3417398.959, 3877364.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   241.014 ±(99.9%) 15.238 MB/sec [Average]
[info]   (min, avg, max) = (236.641, 241.014, 244.315), stdev = 3.957
[info]   CI (99.9%): [225.776, 256.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (104.000, 104.000, 104.000), stdev = 0.001
[info]   CI (99.9%): [104.000, 104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   271.514 ±(99.9%) 1431.614 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 271.514, 678.813), stdev = 371.786
[info]   CI (99.9%): [≈ 0, 1703.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   117.649 ±(99.9%) 620.425 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 117.649, 298.166), stdev = 161.122
[info]   CI (99.9%): [≈ 0, 738.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.643
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson
[info] # Run progress: 0.71% complete, ETA 01:51:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26283.768 ops/s
[info] # Warmup Iteration   2: 149653.322 ops/s
[info] # Warmup Iteration   3: 151890.733 ops/s
[info] # Warmup Iteration   4: 154319.685 ops/s
[info] # Warmup Iteration   5: 155922.126 ops/s
[info] Iteration   1: 156854.545 ops/s
[info]                  ·gc.alloc.rate:                   1328.899 MB/sec
[info]                  ·gc.alloc.rate.norm:              13336.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.677 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        6790.707 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 6.684 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 155456.536 ops/s
[info]                  ·gc.alloc.rate:            1317.564 MB/sec
[info]                  ·gc.alloc.rate.norm:       13336.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.207 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13717.014 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 153634.186 ops/s
[info]                  ·gc.alloc.rate:                   1301.668 MB/sec
[info]                  ·gc.alloc.rate.norm:              13336.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.145 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        13873.646 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 6.824 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 153008.568 ops/s
[info]                  ·gc.alloc.rate:                   1296.370 MB/sec
[info]                  ·gc.alloc.rate.norm:              13336.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.097 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        13929.853 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 47.963 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 154532.198 ops/s
[info]                  ·gc.alloc.rate:                                  1309.547 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13336.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.116 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.185 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.043 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       13880.786 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson":
[info]   154697.207 ±(99.9%) 5852.291 ops/s [Average]
[info]   (min, avg, max) = (153008.568, 154697.207, 156854.545), stdev = 1519.822
[info]   CI (99.9%): [148844.915, 160549.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1310.810 ±(99.9%) 49.706 MB/sec [Average]
[info]   (min, avg, max) = (1296.370, 1310.810, 1328.899), stdev = 12.909
[info]   CI (99.9%): [1261.104, 1360.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   13336.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13336.003, 13336.003, 13336.003), stdev = 0.001
[info]   CI (99.9%): [13336.002, 13336.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.023 ±(99.9%) 0.200 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.116), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.237 ±(99.9%) 2.041 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.237, 1.185), stdev = 0.530
[info]   CI (99.9%): [≈ 0, 2.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1220.634 ±(99.9%) 1170.997 MB/sec [Average]
[info]   (min, avg, max) = (676.677, 1220.634, 1363.043), stdev = 304.104
[info]   CI (99.9%): [49.637, 2391.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   12438.401 ±(99.9%) 12160.985 B/op [Average]
[info]   (min, avg, max) = (6790.707, 12438.401, 13929.853), stdev = 3158.169
[info]   CI (99.9%): [277.416, 24599.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 7.565 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 4.662), stdev = 1.965
[info]   CI (99.9%): [≈ 0, 8.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   12.294 ±(99.9%) 77.874 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.294, 47.963), stdev = 20.224
[info]   CI (99.9%): [≈ 0, 90.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.800, 10.000), stdev = 3.033
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce
[info] # Run progress: 0.94% complete, ETA 01:51:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 176681.207 ops/s
[info] # Warmup Iteration   2: 485468.981 ops/s
[info] # Warmup Iteration   3: 520688.489 ops/s
[info] # Warmup Iteration   4: 514349.596 ops/s
[info] # Warmup Iteration   5: 524154.488 ops/s
[info] Iteration   1: 517047.378 ops/s
[info]                  ·gc.alloc.rate:            1568.995 MB/sec
[info]                  ·gc.alloc.rate.norm:       4776.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2034.342 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6192.510 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 511876.197 ops/s
[info]                  ·gc.alloc.rate:                   1553.128 MB/sec
[info]                  ·gc.alloc.rate.norm:              4776.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.372 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4167.884 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.048 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 515042.102 ops/s
[info]                  ·gc.alloc.rate:                   1562.741 MB/sec
[info]                  ·gc.alloc.rate.norm:              4776.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1356.011 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4144.199 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 10.177 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 526796.714 ops/s
[info]                  ·gc.alloc.rate:                                  1598.380 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4776.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.158 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.472 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.125 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6107.897 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 525268.107 ops/s
[info]                  ·gc.alloc.rate:            1593.768 MB/sec
[info]                  ·gc.alloc.rate.norm:       4776.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.772 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4083.782 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce":
[info]   519206.100 ±(99.9%) 25109.903 ops/s [Average]
[info]   (min, avg, max) = (511876.197, 519206.100, 526796.714), stdev = 6520.962
[info]   CI (99.9%): [494096.196, 544316.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate":
[info]   1575.403 ±(99.9%) 76.112 MB/sec [Average]
[info]   (min, avg, max) = (1553.128, 1575.403, 1598.380), stdev = 19.766
[info]   CI (99.9%): [1499.290, 1651.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   4776.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4776.001, 4776.001, 4776.001), stdev = 0.001
[info]   CI (99.9%): [4776.001, 4776.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.032 ±(99.9%) 0.272 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.158), stdev = 0.071
[info]   CI (99.9%): [≈ 0, 0.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.094 ±(99.9%) 0.814 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.094, 0.472), stdev = 0.211
[info]   CI (99.9%): [≈ 0, 0.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1630.524 ±(99.9%) 1436.775 MB/sec [Average]
[info]   (min, avg, max) = (1355.372, 1630.524, 2044.125), stdev = 373.126
[info]   CI (99.9%): [193.750, 3067.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   4939.254 ±(99.9%) 4259.851 B/op [Average]
[info]   (min, avg, max) = (4083.782, 4939.254, 6192.510), stdev = 1106.270
[info]   CI (99.9%): [679.403, 9199.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   2.445 ±(99.9%) 16.991 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.445, 10.177), stdev = 4.412
[info]   CI (99.9%): [≈ 0, 19.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.600, 11.000), stdev = 3.578
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala
[info] # Run progress: 1.18% complete, ETA 01:50:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_5cbb92e4/target/1bdf7fe1/jackson-module-afterburner-2.9.5.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 448659.880 ops/s
[info] # Warmup Iteration   2: 1671123.397 ops/s
[info] # Warmup Iteration   3: 1694172.393 ops/s
[info] # Warmup Iteration   4: 1697482.734 ops/s
[info] # Warmup Iteration   5: 1695187.058 ops/s
[info] Iteration   1: 1708237.010 ops/s
[info]                  ·gc.alloc.rate:            711.898 MB/sec
[info]                  ·gc.alloc.rate.norm:       656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.682 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 623.549 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 1700689.395 ops/s
[info]                  ·gc.alloc.rate:            708.769 MB/sec
[info]                  ·gc.alloc.rate.norm:       656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.719 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 626.336 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 1694636.603 ops/s
[info]                  ·gc.alloc.rate:            706.337 MB/sec
[info]                  ·gc.alloc.rate.norm:       656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.758 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 628.529 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 1695553.919 ops/s
[info]                  ·gc.alloc.rate:            706.655 MB/sec
[info]                  ·gc.alloc.rate.norm:       656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.707 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 628.199 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 1647132.461 ops/s
[info]                  ·gc.alloc.rate:            686.457 MB/sec
[info]                  ·gc.alloc.rate.norm:       656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.694 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 646.670 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala":
[info]   1689249.878 ±(99.9%) 93015.336 ops/s [Average]
[info]   (min, avg, max) = (1647132.461, 1689249.878, 1708237.010), stdev = 24155.787
[info]   CI (99.9%): [1596234.542, 1782265.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   704.023 ±(99.9%) 38.765 MB/sec [Average]
[info]   (min, avg, max) = (686.457, 704.023, 711.898), stdev = 10.067
[info]   CI (99.9%): [665.258, 742.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   656.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (656.000, 656.000, 656.000), stdev = 0.001
[info]   CI (99.9%): [656.000, 656.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   676.712 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (676.682, 676.712, 676.758), stdev = 0.029
[info]   CI (99.9%): [676.599, 676.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   630.657 ±(99.9%) 35.302 B/op [Average]
[info]   (min, avg, max) = (623.549, 630.657, 646.670), stdev = 9.168
[info]   CI (99.9%): [595.355, 665.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala
[info] # Run progress: 1.41% complete, ETA 01:50:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9647807.590 ops/s
[info] # Warmup Iteration   2: 14167813.997 ops/s
[info] # Warmup Iteration   3: 14215041.447 ops/s
[info] # Warmup Iteration   4: 14426850.587 ops/s
[info] # Warmup Iteration   5: 14386296.534 ops/s
[info] Iteration   1: 13359057.588 ops/s
[info]                  ·gc.alloc.rate:            679.057 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.494 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 79.816 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 13758544.324 ops/s
[info]                  ·gc.alloc.rate:                   699.254 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.388 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        77.498 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.076 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 14183923.764 ops/s
[info]                  ·gc.alloc.rate:            721.008 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.159 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 75.246 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 14469322.519 ops/s
[info]                  ·gc.alloc.rate:            735.498 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.493 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 73.691 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 14231620.664 ops/s
[info]                  ·gc.alloc.rate:                   723.559 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.610 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        74.920 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.074 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala":
[info]   14000493.772 ±(99.9%) 1696957.536 ops/s [Average]
[info]   (min, avg, max) = (13359057.588, 14000493.772, 14469322.519), stdev = 440694.483
[info]   CI (99.9%): [12303536.236, 15697451.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   711.675 ±(99.9%) 86.407 MB/sec [Average]
[info]   (min, avg, max) = (679.057, 711.675, 735.498), stdev = 22.440
[info]   CI (99.9%): [625.269, 798.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   80.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (80.000, 80.000, 80.000), stdev = 0.001
[info]   CI (99.9%): [80.000, 80.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   677.629 ±(99.9%) 1.181 MB/sec [Average]
[info]   (min, avg, max) = (677.388, 677.629, 678.159), stdev = 0.307
[info]   CI (99.9%): [676.447, 678.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   76.234 ±(99.9%) 9.353 B/op [Average]
[info]   (min, avg, max) = (73.691, 76.234, 79.816), stdev = 2.429
[info]   CI (99.9%): [66.881, 85.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.030 ±(99.9%) 0.158 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.076), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 1.65% complete, ETA 01:50:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9571802.746 ops/s
[info] # Warmup Iteration   2: 14232374.878 ops/s
[info] # Warmup Iteration   3: 14253043.714 ops/s
[info] # Warmup Iteration   4: 14240096.101 ops/s
[info] # Warmup Iteration   5: 14252495.912 ops/s
[info] Iteration   1: 14159335.835 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 14225678.137 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 14243756.213 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 14273263.604 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 14282399.261 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc":
[info]   14236886.610 ±(99.9%) 188461.692 ops/s [Average]
[info]   (min, avg, max) = (14159335.835, 14236886.610, 14282399.261), stdev = 48942.903
[info]   CI (99.9%): [14048424.918, 14425348.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson
[info] # Run progress: 1.88% complete, ETA 01:49:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 58274.492 ops/s
[info] # Warmup Iteration   2: 290280.851 ops/s
[info] # Warmup Iteration   3: 288550.577 ops/s
[info] # Warmup Iteration   4: 301520.737 ops/s
[info] # Warmup Iteration   5: 300436.206 ops/s
[info] Iteration   1: 302571.300 ops/s
[info]                  ·gc.alloc.rate:            1025.698 MB/sec
[info]                  ·gc.alloc.rate.norm:       5336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.719 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3520.502 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 298708.217 ops/s
[info]                  ·gc.alloc.rate:                   1012.527 MB/sec
[info]                  ·gc.alloc.rate.norm:              5336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.977 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        7135.438 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.510 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 301954.081 ops/s
[info]                  ·gc.alloc.rate:                   1023.813 MB/sec
[info]                  ·gc.alloc.rate.norm:              5336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.826 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3527.543 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.472 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 300470.450 ops/s
[info]                  ·gc.alloc.rate:                   1018.597 MB/sec
[info]                  ·gc.alloc.rate.norm:              5336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.122 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        7093.673 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.489 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 304135.532 ops/s
[info]                  ·gc.alloc.rate:            1031.032 MB/sec
[info]                  ·gc.alloc.rate.norm:       5336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.400 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3505.813 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson":
[info]   301567.916 ±(99.9%) 7968.802 ops/s [Average]
[info]   (min, avg, max) = (298708.217, 301567.916, 304135.532), stdev = 2069.473
[info]   CI (99.9%): [293599.114, 309536.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1022.334 ±(99.9%) 27.181 MB/sec [Average]
[info]   (min, avg, max) = (1012.527, 1022.334, 1031.032), stdev = 7.059
[info]   CI (99.9%): [995.153, 1049.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5336.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5336.001, 5336.001, 5336.001), stdev = 0.001
[info]   CI (99.9%): [5336.001, 5336.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   947.809 ±(99.9%) 1427.994 MB/sec [Average]
[info]   (min, avg, max) = (676.719, 947.809, 1354.122), stdev = 370.845
[info]   CI (99.9%): [≈ 0, 2375.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   4956.594 ±(99.9%) 7585.812 B/op [Average]
[info]   (min, avg, max) = (3505.813, 4956.594, 7135.438), stdev = 1970.011
[info]   CI (99.9%): [≈ 0, 12542.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.400 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.400, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   2.094 ±(99.9%) 7.362 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.094, 3.510), stdev = 1.912
[info]   CI (99.9%): [≈ 0, 9.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.800, 10.000), stdev = 2.490
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce
[info] # Run progress: 2.12% complete, ETA 01:49:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 851060.801 ops/s
[info] # Warmup Iteration   2: 1418187.173 ops/s
[info] # Warmup Iteration   3: 1439257.721 ops/s
[info] # Warmup Iteration   4: 1426690.527 ops/s
[info] # Warmup Iteration   5: 1429400.046 ops/s
[info] Iteration   1: 1440961.443 ops/s
[info]                  ·gc.alloc.rate:                                  2241.111 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2448.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.121 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.132 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2040.815 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2229.214 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                3.638 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 1445784.962 ops/s
[info]                  ·gc.alloc.rate:                                  2249.071 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2448.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.015 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.595 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2225.438 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 1452411.702 ops/s
[info]                  ·gc.alloc.rate:            2259.139 MB/sec
[info]                  ·gc.alloc.rate.norm:       2448.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.935 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2953.821 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 1434069.693 ops/s
[info]                  ·gc.alloc.rate:            2230.836 MB/sec
[info]                  ·gc.alloc.rate.norm:       2448.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.610 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2243.646 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 1452650.804 ops/s
[info]                  ·gc.alloc.rate:                                  2259.036 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2448.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2043.960 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2214.934 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce":
[info]   1445175.721 ±(99.9%) 30424.440 ops/s [Average]
[info]   (min, avg, max) = (1434069.693, 1445175.721, 1452650.804), stdev = 7901.130
[info]   CI (99.9%): [1414751.281, 1475600.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate":
[info]   2247.839 ±(99.9%) 46.724 MB/sec [Average]
[info]   (min, avg, max) = (2230.836, 2247.839, 2259.139), stdev = 12.134
[info]   CI (99.9%): [2201.115, 2294.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2448.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2448.000, 2448.000, 2448.000), stdev = 0.001
[info]   CI (99.9%): [2448.000, 2448.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.027 ±(99.9%) 0.203 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.121), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.030 ±(99.9%) 0.222 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.132), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2179.983 ±(99.9%) 1175.218 MB/sec [Average]
[info]   (min, avg, max) = (2040.815, 2179.983, 2725.935), stdev = 305.200
[info]   CI (99.9%): [1004.765, 3355.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2373.411 ±(99.9%) 1250.004 B/op [Average]
[info]   (min, avg, max) = (2214.934, 2373.411, 2953.821), stdev = 324.622
[info]   CI (99.9%): [1123.407, 3623.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   0.728 ±(99.9%) 6.264 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.728, 3.638), stdev = 1.627
[info]   CI (99.9%): [≈ 0, 6.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 6.000), stdev = 0.894
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava
[info] # Run progress: 2.35% complete, ETA 01:49:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.964 ops/s
[info] # Warmup Iteration   2: 8630831.748 ops/s
[info] # Warmup Iteration   3: 8597570.668 ops/s
[info] # Warmup Iteration   4: 9195212.617 ops/s
[info] # Warmup Iteration   5: 9202176.472 ops/s
[info] Iteration   1: 9414866.636 ops/s
[info]                  ·gc.alloc.rate:            1148.364 MB/sec
[info]                  ·gc.alloc.rate.norm:       192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1349.410 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 225.614 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 9444624.069 ops/s
[info]                  ·gc.alloc.rate:            1152.291 MB/sec
[info]                  ·gc.alloc.rate.norm:       192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.866 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 112.449 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 9401615.093 ops/s
[info]                  ·gc.alloc.rate:            1146.913 MB/sec
[info]                  ·gc.alloc.rate.norm:       192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1349.517 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 225.917 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   4: 9360479.331 ops/s
[info]                  ·gc.alloc.rate:                   1142.026 MB/sec
[info]                  ·gc.alloc.rate.norm:              192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.959 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        226.790 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.112 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 9131507.034 ops/s
[info]                  ·gc.alloc.rate:            1114.095 MB/sec
[info]                  ·gc.alloc.rate.norm:       192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.879 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 116.307 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava":
[info]   9350618.432 ±(99.9%) 485824.746 ops/s [Average]
[info]   (min, avg, max) = (9131507.034, 9350618.432, 9444624.069), stdev = 126167.144
[info]   CI (99.9%): [8864793.686, 9836443.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   1140.738 ±(99.9%) 59.069 MB/sec [Average]
[info]   (min, avg, max) = (1114.095, 1140.738, 1152.291), stdev = 15.340
[info]   CI (99.9%): [1081.669, 1199.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   192.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (192.000, 192.000, 192.000), stdev = 0.001
[info]   CI (99.9%): [192.000, 192.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   1079.526 ±(99.9%) 1422.415 MB/sec [Average]
[info]   (min, avg, max) = (674.866, 1079.526, 1349.517), stdev = 369.397
[info]   CI (99.9%): [≈ 0, 2501.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   181.415 ±(99.9%) 235.710 B/op [Average]
[info]   (min, avg, max) = (112.449, 181.415, 226.790), stdev = 61.213
[info]   CI (99.9%): [≈ 0, 417.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.022 ±(99.9%) 0.193 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.112), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 8.600, 11.000), stdev = 2.881
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala
[info] # Run progress: 2.59% complete, ETA 01:49:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 656422.821 ops/s
[info] # Warmup Iteration   2: 2112557.619 ops/s
[info] # Warmup Iteration   3: 2155629.762 ops/s
[info] # Warmup Iteration   4: 2162653.201 ops/s
[info] # Warmup Iteration   5: 2163603.416 ops/s
[info] Iteration   1: 2115358.161 ops/s
[info]                  ·gc.alloc.rate:            1483.676 MB/sec
[info]                  ·gc.alloc.rate.norm:       1104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.775 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1008.085 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 2106961.235 ops/s
[info]                  ·gc.alloc.rate:                   1479.418 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2026.913 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1512.563 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.665 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.496 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   3: 2139884.268 ops/s
[info]                  ·gc.alloc.rate:                                  1501.255 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1104.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.073 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.054 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1359.141 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       999.492 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                2.940 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 2157471.363 ops/s
[info]                  ·gc.alloc.rate:                                  1513.234 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1104.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.146 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.107 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.801 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       994.250 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 2159727.267 ops/s
[info]                  ·gc.alloc.rate:                                  1514.756 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1104.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.754 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       993.217 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala":
[info]   2135880.459 ±(99.9%) 92502.736 ops/s [Average]
[info]   (min, avg, max) = (2106961.235, 2135880.459, 2159727.267), stdev = 24022.667
[info]   CI (99.9%): [2043377.723, 2228383.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1498.468 ±(99.9%) 63.062 MB/sec [Average]
[info]   (min, avg, max) = (1479.418, 1498.468, 1514.756), stdev = 16.377
[info]   CI (99.9%): [1435.406, 1561.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1104.000, 1104.000, 1104.000), stdev = 0.001
[info]   CI (99.9%): [1104.000, 1104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.044 ±(99.9%) 0.251 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.044, 0.146), stdev = 0.065
[info]   CI (99.9%): [≈ 0, 0.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.032 ±(99.9%) 0.184 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.107), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1493.277 ±(99.9%) 1148.762 MB/sec [Average]
[info]   (min, avg, max) = (1354.775, 1493.277, 2026.913), stdev = 298.330
[info]   CI (99.9%): [344.515, 2642.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1101.521 ±(99.9%) 885.088 B/op [Average]
[info]   (min, avg, max) = (993.217, 1101.521, 1512.563), stdev = 229.855
[info]   CI (99.9%): [216.433, 1986.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.690 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.997), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.687 ±(99.9%) 4.919 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.687, 2.940), stdev = 1.277
[info]   CI (99.9%): [≈ 0, 5.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.400, 15.000), stdev = 5.320
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala
[info] # Run progress: 2.82% complete, ETA 01:48:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8740476.989 ops/s
[info] # Warmup Iteration   2: 9574780.478 ops/s
[info] # Warmup Iteration   3: 9782313.827 ops/s
[info] # Warmup Iteration   4: 9500625.975 ops/s
[info] # Warmup Iteration   5: 9764160.116 ops/s
[info] Iteration   1: 9855650.208 ops/s
[info]                  ·gc.alloc.rate:            1252.788 MB/sec
[info]                  ·gc.alloc.rate.norm:       200.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.652 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 216.581 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 9889540.063 ops/s
[info]                  ·gc.alloc.rate:            1256.822 MB/sec
[info]                  ·gc.alloc.rate.norm:       200.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.387 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 215.844 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 9872086.671 ops/s
[info]                  ·gc.alloc.rate:            1254.433 MB/sec
[info]                  ·gc.alloc.rate.norm:       200.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.188 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 216.223 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 9757494.473 ops/s
[info]                  ·gc.alloc.rate:                   1239.796 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1356.037 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        218.752 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.537 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 9249590.681 ops/s
[info]                  ·gc.alloc.rate:                                  1175.285 MB/sec
[info]                  ·gc.alloc.rate.norm:                             200.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.145 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.817 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       231.913 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala":
[info]   9724872.419 ±(99.9%) 1041894.928 ops/s [Average]
[info]   (min, avg, max) = (9249590.681, 9724872.419, 9889540.063), stdev = 270576.804
[info]   CI (99.9%): [8682977.491, 10766767.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1235.825 ±(99.9%) 132.774 MB/sec [Average]
[info]   (min, avg, max) = (1175.285, 1235.825, 1256.822), stdev = 34.481
[info]   CI (99.9%): [1103.051, 1368.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   200.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (200.000, 200.000, 200.000), stdev = 0.001
[info]   CI (99.9%): [200.000, 200.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.029 ±(99.9%) 0.249 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.145), stdev = 0.065
[info]   CI (99.9%): [≈ 0, 0.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.005 ±(99.9%) 0.042 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.025), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1357.616 ±(99.9%) 11.231 MB/sec [Average]
[info]   (min, avg, max) = (1356.037, 1357.616, 1362.817), stdev = 2.917
[info]   CI (99.9%): [1346.385, 1368.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   219.863 ±(99.9%) 26.300 B/op [Average]
[info]   (min, avg, max) = (215.844, 219.863, 231.913), stdev = 6.830
[info]   CI (99.9%): [193.562, 246.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.107 ±(99.9%) 0.925 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.107, 0.537), stdev = 0.240
[info]   CI (99.9%): [≈ 0, 1.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 7.000), stdev = 1.643
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson
[info] # Run progress: 3.06% complete, ETA 01:48:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 120684.482 ops/s
[info] # Warmup Iteration   2: 607541.341 ops/s
[info] # Warmup Iteration   3: 600351.694 ops/s
[info] # Warmup Iteration   4: 600571.446 ops/s
[info] # Warmup Iteration   5: 611190.789 ops/s
[info] Iteration   1: 605902.025 ops/s
[info]                  ·gc.alloc.rate:            1558.244 MB/sec
[info]                  ·gc.alloc.rate.norm:       4048.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2030.516 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5274.868 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   2: 610562.344 ops/s
[info]                  ·gc.alloc.rate:                   1570.696 MB/sec
[info]                  ·gc.alloc.rate.norm:              4048.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.815 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3489.055 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.717 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 613543.179 ops/s
[info]                  ·gc.alloc.rate:                   1577.843 MB/sec
[info]                  ·gc.alloc.rate.norm:              4048.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1358.047 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3484.107 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 10.252 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 619162.352 ops/s
[info]                  ·gc.alloc.rate:                                  1592.800 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4048.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.143 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.364 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.167 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3464.402 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 617567.228 ops/s
[info]                  ·gc.alloc.rate:            1588.432 MB/sec
[info]                  ·gc.alloc.rate.norm:       4048.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.412 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5210.031 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson":
[info]   613347.426 ±(99.9%) 20633.227 ops/s [Average]
[info]   (min, avg, max) = (605902.025, 613347.426, 619162.352), stdev = 5358.383
[info]   CI (99.9%): [592714.199, 633980.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1577.603 ±(99.9%) 53.453 MB/sec [Average]
[info]   (min, avg, max) = (1558.244, 1577.603, 1592.800), stdev = 13.881
[info]   CI (99.9%): [1524.150, 1631.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   4048.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4048.001, 4048.001, 4048.001), stdev = 0.001
[info]   CI (99.9%): [4048.001, 4048.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.029 ±(99.9%) 0.246 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.143), stdev = 0.064
[info]   CI (99.9%): [≈ 0, 0.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.073 ±(99.9%) 0.626 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.073, 0.364), stdev = 0.163
[info]   CI (99.9%): [≈ 0, 0.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1629.991 ±(99.9%) 1432.505 MB/sec [Average]
[info]   (min, avg, max) = (1353.815, 1629.991, 2044.412), stdev = 372.017
[info]   CI (99.9%): [197.486, 3062.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   4184.493 ±(99.9%) 3720.085 B/op [Average]
[info]   (min, avg, max) = (3464.402, 4184.493, 5274.868), stdev = 966.094
[info]   CI (99.9%): [464.408, 7904.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   2.394 ±(99.9%) 17.157 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.394, 10.252), stdev = 4.456
[info]   CI (99.9%): [≈ 0, 19.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.600, 15.000), stdev = 4.775
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce
[info] # Run progress: 3.29% complete, ETA 01:48:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 916158.143 ops/s
[info] # Warmup Iteration   2: 1651701.246 ops/s
[info] # Warmup Iteration   3: 1664462.412 ops/s
[info] # Warmup Iteration   4: 1644808.184 ops/s
[info] # Warmup Iteration   5: 1637122.619 ops/s
[info] Iteration   1: 1635007.158 ops/s
[info]                  ·gc.alloc.rate:            1421.321 MB/sec
[info]                  ·gc.alloc.rate.norm:       1368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.401 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1305.516 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 1622252.650 ops/s
[info]                  ·gc.alloc.rate:            1410.061 MB/sec
[info]                  ·gc.alloc.rate.norm:       1368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.236 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1315.781 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 1644842.278 ops/s
[info]                  ·gc.alloc.rate:            1429.584 MB/sec
[info]                  ·gc.alloc.rate.norm:       1368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.129 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1297.709 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 1650067.635 ops/s
[info]                  ·gc.alloc.rate:                                  1434.029 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1368.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.106 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.101 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2040.693 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1946.731 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                3.177 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        13.000 ms
[info] Iteration   5: 1663273.725 ops/s
[info]                  ·gc.alloc.rate:                                  1445.488 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1368.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.687 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1289.637 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce":
[info]   1643088.689 ±(99.9%) 59612.523 ops/s [Average]
[info]   (min, avg, max) = (1622252.650, 1643088.689, 1663273.725), stdev = 15481.183
[info]   CI (99.9%): [1583476.166, 1702701.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1428.097 ±(99.9%) 51.341 MB/sec [Average]
[info]   (min, avg, max) = (1410.061, 1428.097, 1445.488), stdev = 13.333
[info]   CI (99.9%): [1376.756, 1479.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1368.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1368.000, 1368.000, 1368.000), stdev = 0.001
[info]   CI (99.9%): [1368.000, 1368.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.182 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.106), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.020 ±(99.9%) 0.173 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.101), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1494.429 ±(99.9%) 1175.923 MB/sec [Average]
[info]   (min, avg, max) = (1356.129, 1494.429, 2040.693), stdev = 305.384
[info]   CI (99.9%): [318.506, 2670.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   1431.075 ±(99.9%) 1110.613 B/op [Average]
[info]   (min, avg, max) = (1289.637, 1431.075, 1946.731), stdev = 288.423
[info]   CI (99.9%): [320.462, 2541.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   0.635 ±(99.9%) 5.471 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.635, 3.177), stdev = 1.421
[info]   CI (99.9%): [≈ 0, 6.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.800, 13.000), stdev = 3.899
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava
[info] # Run progress: 3.53% complete, ETA 01:48:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.961 ops/s
[info] # Warmup Iteration   2: 16620308.004 ops/s
[info] # Warmup Iteration   3: 16629360.907 ops/s
[info] # Warmup Iteration   4: 17232256.168 ops/s
[info] # Warmup Iteration   5: 17213581.007 ops/s
[info] Iteration   1: 17318780.839 ops/s
[info]                  ·gc.alloc.rate:      528.146 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 17088163.305 ops/s
[info]                  ·gc.alloc.rate:            521.102 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.723 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 62.150 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 17099741.243 ops/s
[info]                  ·gc.alloc.rate:            521.460 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.731 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 62.109 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 17180913.917 ops/s
[info]                  ·gc.alloc.rate:            524.022 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.841 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 61.815 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 17265071.115 ops/s
[info]                  ·gc.alloc.rate:      526.597 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava":
[info]   17190534.084 ±(99.9%) 388984.909 ops/s [Average]
[info]   (min, avg, max) = (17088163.305, 17190534.084, 17318780.839), stdev = 101018.146
[info]   CI (99.9%): [16801549.174, 17579518.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   524.265 ±(99.9%) 11.935 MB/sec [Average]
[info]   (min, avg, max) = (521.102, 524.265, 528.146), stdev = 3.100
[info]   CI (99.9%): [512.330, 536.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   404.859 ±(99.9%) 1423.136 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.859, 674.841), stdev = 369.584
[info]   CI (99.9%): [≈ 0, 1827.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   37.215 ±(99.9%) 130.816 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 37.215, 62.150), stdev = 33.973
[info]   CI (99.9%): [≈ 0, 168.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.200, 6.000), stdev = 2.950
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala
[info] # Run progress: 3.76% complete, ETA 01:47:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_5cbb92e4/target/1bdf7fe1/jackson-module-afterburner-2.9.5.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 1571081.954 ops/s
[info] # Warmup Iteration   2: 4564467.791 ops/s
[info] # Warmup Iteration   3: 4577335.372 ops/s
[info] # Warmup Iteration   4: 4588280.752 ops/s
[info] # Warmup Iteration   5: 4607101.710 ops/s
[info] Iteration   1: 4616853.745 ops/s
[info]                  ·gc.alloc.rate:            1267.074 MB/sec
[info]                  ·gc.alloc.rate.norm:       432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.694 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 230.714 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 4598296.961 ops/s
[info]                  ·gc.alloc.rate:            1262.572 MB/sec
[info]                  ·gc.alloc.rate.norm:       432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.030 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 463.293 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 4596511.842 ops/s
[info]                  ·gc.alloc.rate:            1261.454 MB/sec
[info]                  ·gc.alloc.rate.norm:       432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.296 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 463.452 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 4583651.242 ops/s
[info]                  ·gc.alloc.rate:                   1258.487 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.959 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        464.773 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.372 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 4648837.315 ops/s
[info]                  ·gc.alloc.rate:                                  1276.063 MB/sec
[info]                  ·gc.alloc.rate.norm:                             432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.155 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.052 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.276 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       461.187 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.226 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala":
[info]   4608830.221 ±(99.9%) 97445.212 ops/s [Average]
[info]   (min, avg, max) = (4583651.242, 4608830.221, 4648837.315), stdev = 25306.212
[info]   CI (99.9%): [4511385.009, 4706275.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1265.130 ±(99.9%) 26.362 MB/sec [Average]
[info]   (min, avg, max) = (1258.487, 1265.130, 1276.063), stdev = 6.846
[info]   CI (99.9%): [1238.768, 1291.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (432.000, 432.000, 432.000), stdev = 0.001
[info]   CI (99.9%): [432.000, 432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.031 ±(99.9%) 0.267 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.155), stdev = 0.069
[info]   CI (99.9%): [≈ 0, 0.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.010 ±(99.9%) 0.090 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.052), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1220.051 ±(99.9%) 1169.703 MB/sec [Average]
[info]   (min, avg, max) = (676.694, 1220.051, 1362.276), stdev = 303.768
[info]   CI (99.9%): [50.348, 2389.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   416.684 ±(99.9%) 400.344 B/op [Average]
[info]   (min, avg, max) = (230.714, 416.684, 464.773), stdev = 103.968
[info]   CI (99.9%): [16.340, 817.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.691 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.998), stdev = 1.738
[info]   CI (99.9%): [≈ 0, 7.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.320 ±(99.9%) 2.297 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.320, 1.372), stdev = 0.597
[info]   CI (99.9%): [≈ 0, 2.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.800, 10.000), stdev = 3.033
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala
[info] # Run progress: 4.00% complete, ETA 01:47:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15511633.783 ops/s
[info] # Warmup Iteration   2: 20915873.195 ops/s
[info] # Warmup Iteration   3: 21840696.510 ops/s
[info] # Warmup Iteration   4: 21806868.138 ops/s
[info] # Warmup Iteration   5: 21815607.472 ops/s
[info] Iteration   1: 21771670.503 ops/s
[info]                  ·gc.alloc.rate:            663.971 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.424 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 48.973 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 21759376.065 ops/s
[info]                  ·gc.alloc.rate:            663.528 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.329 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 48.998 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 21782238.353 ops/s
[info]                  ·gc.alloc.rate:                   664.328 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.468 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        48.949 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 21865422.720 ops/s
[info]                  ·gc.alloc.rate:            666.838 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.093 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 48.810 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 21693066.324 ops/s
[info]                  ·gc.alloc.rate:            661.500 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.373 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 49.152 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala":
[info]   21774354.793 ±(99.9%) 237329.814 ops/s [Average]
[info]   (min, avg, max) = (21693066.324, 21774354.793, 21865422.720), stdev = 61633.799
[info]   CI (99.9%): [21537024.979, 22011684.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   664.033 ±(99.9%) 7.364 MB/sec [Average]
[info]   (min, avg, max) = (661.500, 664.033, 666.838), stdev = 1.912
[info]   CI (99.9%): [656.669, 671.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   677.538 ±(99.9%) 1.212 MB/sec [Average]
[info]   (min, avg, max) = (677.329, 677.538, 678.093), stdev = 0.315
[info]   CI (99.9%): [676.325, 678.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   48.976 ±(99.9%) 0.470 B/op [Average]
[info]   (min, avg, max) = (48.810, 48.976, 49.152), stdev = 0.122
[info]   CI (99.9%): [48.506, 49.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.010 ±(99.9%) 0.083 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.048), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 4.24% complete, ETA 01:47:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14242065.447 ops/s
[info] # Warmup Iteration   2: 19878648.652 ops/s
[info] # Warmup Iteration   3: 19418515.657 ops/s
[info] # Warmup Iteration   4: 19414928.155 ops/s
[info] # Warmup Iteration   5: 19350863.613 ops/s
[info] Iteration   1: 19308288.807 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 19400299.736 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 18954795.988 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 19168250.860 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 19409567.330 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc":
[info]   19248240.544 ±(99.9%) 733803.274 ops/s [Average]
[info]   (min, avg, max) = (18954795.988, 19248240.544, 19409567.330), stdev = 190566.380
[info]   CI (99.9%): [18514437.270, 19982043.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson
[info] # Run progress: 4.47% complete, ETA 01:47:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 292928.168 ops/s
[info] # Warmup Iteration   2: 1192876.288 ops/s
[info] # Warmup Iteration   3: 1240621.809 ops/s
[info] # Warmup Iteration   4: 1245200.095 ops/s
[info] # Warmup Iteration   5: 1237099.982 ops/s
[info] Iteration   1: 1232984.065 ops/s
[info]                  ·gc.alloc.rate:            1823.443 MB/sec
[info]                  ·gc.alloc.rate.norm:       2328.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2029.962 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2591.665 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 1240217.210 ops/s
[info]                  ·gc.alloc.rate:                                  1834.467 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2328.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.017 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.190 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1723.589 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                5.917 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 1241635.271 ops/s
[info]                  ·gc.alloc.rate:                                  1836.326 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2328.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.186 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.236 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.067 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2591.364 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 1242330.257 ops/s
[info]                  ·gc.alloc.rate:            1837.747 MB/sec
[info]                  ·gc.alloc.rate.norm:       2328.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.401 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2589.783 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 1236558.647 ops/s
[info]                  ·gc.alloc.rate:            1828.690 MB/sec
[info]                  ·gc.alloc.rate.norm:       2328.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.644 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1734.704 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson":
[info]   1238745.090 ±(99.9%) 15079.542 ops/s [Average]
[info]   (min, avg, max) = (1232984.065, 1238745.090, 1242330.257), stdev = 3916.109
[info]   CI (99.9%): [1223665.548, 1253824.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1832.135 ±(99.9%) 22.936 MB/sec [Average]
[info]   (min, avg, max) = (1823.443, 1832.135, 1837.747), stdev = 5.956
[info]   CI (99.9%): [1809.198, 1855.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2328.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2328.000, 2328.000, 2328.000), stdev = 0.001
[info]   CI (99.9%): [2328.000, 2328.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.041 ±(99.9%) 0.315 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.041, 0.186), stdev = 0.082
[info]   CI (99.9%): [≈ 0, 0.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.051 ±(99.9%) 0.399 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.051, 0.236), stdev = 0.104
[info]   CI (99.9%): [≈ 0, 0.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1767.853 ±(99.9%) 1432.382 MB/sec [Average]
[info]   (min, avg, max) = (1358.190, 1767.853, 2044.401), stdev = 371.985
[info]   CI (99.9%): [335.471, 3200.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   2246.221 ±(99.9%) 1817.655 B/op [Average]
[info]   (min, avg, max) = (1723.589, 2246.221, 2591.665), stdev = 472.039
[info]   CI (99.9%): [428.566, 4063.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.030 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.663), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.183 ±(99.9%) 10.190 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.183, 5.917), stdev = 2.646
[info]   CI (99.9%): [≈ 0, 11.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.200, 14.000), stdev = 4.712
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 4.71% complete, ETA 01:46:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 282856.830 ops/s
[info] # Warmup Iteration   2: 340326.732 ops/s
[info] # Warmup Iteration   3: 340999.844 ops/s
[info] # Warmup Iteration   4: 341572.324 ops/s
[info] # Warmup Iteration   5: 341643.243 ops/s
[info] Iteration   1: 342050.019 ops/s
[info]                  ·gc.alloc.rate:                   1883.248 MB/sec
[info]                  ·gc.alloc.rate.norm:              8664.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2034.667 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        9360.616 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 15.325 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 348971.112 ops/s
[info]                  ·gc.alloc.rate:                                  1921.002 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8664.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.086 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.386 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.359 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9220.357 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 348300.808 ops/s
[info]                  ·gc.alloc.rate:                                  1917.195 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8664.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.840 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6158.816 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 348428.970 ops/s
[info]                  ·gc.alloc.rate:            1918.247 MB/sec
[info]                  ·gc.alloc.rate.norm:       8664.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.596 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9234.671 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 348482.583 ops/s
[info]                  ·gc.alloc.rate:            1918.243 MB/sec
[info]                  ·gc.alloc.rate.norm:       8664.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.222 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9233.002 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce":
[info]   347246.698 ±(99.9%) 11229.002 ops/s [Average]
[info]   (min, avg, max) = (342050.019, 347246.698, 348971.112), stdev = 2916.136
[info]   CI (99.9%): [336017.697, 358475.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1911.587 ±(99.9%) 61.245 MB/sec [Average]
[info]   (min, avg, max) = (1883.248, 1911.587, 1921.002), stdev = 15.905
[info]   CI (99.9%): [1850.342, 1972.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   8664.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8664.001, 8664.001, 8664.001), stdev = 0.001
[info]   CI (99.9%): [8664.001, 8664.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.086), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.079 ±(99.9%) 0.661 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.079, 0.386), stdev = 0.172
[info]   CI (99.9%): [≈ 0, 0.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1906.137 ±(99.9%) 1169.599 MB/sec [Average]
[info]   (min, avg, max) = (1362.840, 1906.137, 2044.596), stdev = 303.741
[info]   CI (99.9%): [736.538, 3075.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   8641.492 ±(99.9%) 5348.672 B/op [Average]
[info]   (min, avg, max) = (6158.816, 8641.492, 9360.616), stdev = 1389.033
[info]   CI (99.9%): [3292.821, 13990.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   3.065 ±(99.9%) 26.391 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.065, 15.325), stdev = 6.854
[info]   CI (99.9%): [≈ 0, 29.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 11.000), stdev = 3.114
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 4.94% complete, ETA 01:46:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 208826.113 ops/s
[info] # Warmup Iteration   2: 425834.497 ops/s
[info] # Warmup Iteration   3: 426690.268 ops/s
[info] # Warmup Iteration   4: 430309.182 ops/s
[info] # Warmup Iteration   5: 432673.811 ops/s
[info] Iteration   1: 429721.994 ops/s
[info]                  ·gc.alloc.rate:            585.289 MB/sec
[info]                  ·gc.alloc.rate.norm:       2144.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.347 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2481.222 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 429308.161 ops/s
[info]                  ·gc.alloc.rate:                   584.738 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.700 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2481.189 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.442 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 430001.228 ops/s
[info]                  ·gc.alloc.rate:            585.753 MB/sec
[info]                  ·gc.alloc.rate.norm:       2144.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.409 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2479.485 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 429668.826 ops/s
[info]                  ·gc.alloc.rate:            585.366 MB/sec
[info]                  ·gc.alloc.rate.norm:       2144.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.521 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2481.533 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 429641.333 ops/s
[info]                  ·gc.alloc.rate:            585.279 MB/sec
[info]                  ·gc.alloc.rate.norm:       2144.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.464 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2481.695 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala":
[info]   429668.309 ±(99.9%) 951.334 ops/s [Average]
[info]   (min, avg, max) = (429308.161, 429668.309, 430001.228), stdev = 247.059
[info]   CI (99.9%): [428716.974, 430619.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   585.285 ±(99.9%) 1.395 MB/sec [Average]
[info]   (min, avg, max) = (584.738, 585.285, 585.753), stdev = 0.362
[info]   CI (99.9%): [583.889, 586.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2144.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2144.001, 2144.001, 2144.001), stdev = 0.001
[info]   CI (99.9%): [2144.001, 2144.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   677.288 ±(99.9%) 1.291 MB/sec [Average]
[info]   (min, avg, max) = (676.700, 677.288, 677.521), stdev = 0.335
[info]   CI (99.9%): [675.997, 678.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   2481.025 ±(99.9%) 3.414 B/op [Average]
[info]   (min, avg, max) = (2479.485, 2481.025, 2481.695), stdev = 0.887
[info]   CI (99.9%): [2477.611, 2484.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.488 ±(99.9%) 4.205 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.488, 2.442), stdev = 1.092
[info]   CI (99.9%): [≈ 0, 4.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 5.18% complete, ETA 01:46:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 939960.040 ops/s
[info] # Warmup Iteration   2: 989811.508 ops/s
[info] # Warmup Iteration   3: 1017629.741 ops/s
[info] # Warmup Iteration   4: 1015207.943 ops/s
[info] # Warmup Iteration   5: 1026375.141 ops/s
[info] Iteration   1: 1026569.987 ops/s
[info]                  ·gc.alloc.rate:            683.569 MB/sec
[info]                  ·gc.alloc.rate.norm:       1048.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.124 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1039.652 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 1019653.433 ops/s
[info]                  ·gc.alloc.rate:            678.902 MB/sec
[info]                  ·gc.alloc.rate.norm:       1048.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.062 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1046.704 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 1022414.514 ops/s
[info]                  ·gc.alloc.rate:            680.663 MB/sec
[info]                  ·gc.alloc.rate.norm:       1048.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.985 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1043.879 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 1025872.921 ops/s
[info]                  ·gc.alloc.rate:            683.132 MB/sec
[info]                  ·gc.alloc.rate.norm:       1048.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.107 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1040.291 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 1025748.632 ops/s
[info]                  ·gc.alloc.rate:            683.019 MB/sec
[info]                  ·gc.alloc.rate.norm:       1048.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.119 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1040.481 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala":
[info]   1024051.898 ±(99.9%) 11319.080 ops/s [Average]
[info]   (min, avg, max) = (1019653.433, 1024051.898, 1026569.987), stdev = 2939.529
[info]   CI (99.9%): [1012732.818, 1035370.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   681.857 ±(99.9%) 7.717 MB/sec [Average]
[info]   (min, avg, max) = (678.902, 681.857, 683.569), stdev = 2.004
[info]   CI (99.9%): [674.140, 689.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1048.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1048.000, 1048.000, 1048.000), stdev = 0.001
[info]   CI (99.9%): [1048.000, 1048.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   678.079 ±(99.9%) 0.223 MB/sec [Average]
[info]   (min, avg, max) = (677.985, 678.079, 678.124), stdev = 0.058
[info]   CI (99.9%): [677.856, 678.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1042.201 ±(99.9%) 11.582 B/op [Average]
[info]   (min, avg, max) = (1039.652, 1042.201, 1046.704), stdev = 3.008
[info]   CI (99.9%): [1030.619, 1053.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 5.41% complete, ETA 01:46:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 59051.825 ops/s
[info] # Warmup Iteration   2: 96515.534 ops/s
[info] # Warmup Iteration   3: 94549.745 ops/s
[info] # Warmup Iteration   4: 99420.653 ops/s
[info] # Warmup Iteration   5: 100998.617 ops/s
[info] Iteration   1: 100895.217 ops/s
[info]                  ·gc.alloc.rate:                                  3493.235 MB/sec
[info]                  ·gc.alloc.rate.norm:                             54496.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3406.951 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       53149.935 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 97668.081 ops/s
[info]                  ·gc.alloc.rate:                                  3381.257 MB/sec
[info]                  ·gc.alloc.rate.norm:                             54496.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3406.714 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       54906.292 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 101107.011 ops/s
[info]                  ·gc.alloc.rate:                                  3500.305 MB/sec
[info]                  ·gc.alloc.rate.norm:                             54496.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3406.690 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       53038.510 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 99902.424 ops/s
[info]                  ·gc.alloc.rate:                                  3458.839 MB/sec
[info]                  ·gc.alloc.rate.norm:                             54496.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.041 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3406.895 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       53677.604 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 101041.839 ops/s
[info]                  ·gc.alloc.rate:            3498.120 MB/sec
[info]                  ·gc.alloc.rate.norm:       54496.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      3406.651 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 53071.048 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson":
[info]   100122.915 ±(99.9%) 5607.991 ops/s [Average]
[info]   (min, avg, max) = (97668.081, 100122.915, 101107.011), stdev = 1456.377
[info]   CI (99.9%): [94514.924, 105730.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3466.351 ±(99.9%) 194.279 MB/sec [Average]
[info]   (min, avg, max) = (3381.257, 3466.351, 3500.305), stdev = 50.454
[info]   CI (99.9%): [3272.072, 3660.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   54496.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (54496.004, 54496.004, 54496.004), stdev = 0.001
[info]   CI (99.9%): [54496.004, 54496.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.004 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.018 ±(99.9%) 0.061 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.041), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   3406.780 ±(99.9%) 0.515 MB/sec [Average]
[info]   (min, avg, max) = (3406.651, 3406.780, 3406.951), stdev = 0.134
[info]   CI (99.9%): [3406.265, 3407.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   53568.678 ±(99.9%) 3047.327 B/op [Average]
[info]   (min, avg, max) = (53038.510, 53568.678, 54906.292), stdev = 791.381
[info]   CI (99.9%): [50521.351, 56616.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 5.65% complete, ETA 01:45:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 288871.651 ops/s
[info] # Warmup Iteration   2: 371910.167 ops/s
[info] # Warmup Iteration   3: 385098.516 ops/s
[info] # Warmup Iteration   4: 383689.351 ops/s
[info] # Warmup Iteration   5: 381599.884 ops/s
[info] Iteration   1: 385665.164 ops/s
[info]                  ·gc.alloc.rate:            603.693 MB/sec
[info]                  ·gc.alloc.rate.norm:       2464.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.017 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2767.358 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 387030.679 ops/s
[info]                  ·gc.alloc.rate:            605.856 MB/sec
[info]                  ·gc.alloc.rate.norm:       2464.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.052 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2757.621 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 381778.804 ops/s
[info]                  ·gc.alloc.rate:      597.602 MB/sec
[info]                  ·gc.alloc.rate.norm: 2464.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 383333.475 ops/s
[info]                  ·gc.alloc.rate:            600.058 MB/sec
[info]                  ·gc.alloc.rate.norm:       2464.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.014 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2784.111 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 387756.361 ops/s
[info]                  ·gc.alloc.rate:            607.250 MB/sec
[info]                  ·gc.alloc.rate.norm:       2464.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.342 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2752.466 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce":
[info]   385112.897 ±(99.9%) 9675.256 ops/s [Average]
[info]   (min, avg, max) = (381778.804, 385112.897, 387756.361), stdev = 2512.633
[info]   CI (99.9%): [375437.641, 394788.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   602.892 ±(99.9%) 15.456 MB/sec [Average]
[info]   (min, avg, max) = (597.602, 602.892, 607.250), stdev = 4.014
[info]   CI (99.9%): [587.436, 618.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2464.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2464.001, 2464.001, 2464.001), stdev = 0.001
[info]   CI (99.9%): [2464.001, 2464.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   542.485 ±(99.9%) 1167.740 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 542.485, 678.342), stdev = 303.258
[info]   CI (99.9%): [≈ 0, 1710.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2212.311 ±(99.9%) 4762.393 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2212.311, 2784.111), stdev = 1236.778
[info]   CI (99.9%): [≈ 0, 6974.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 4.000), stdev = 1.732
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 5.88% complete, ETA 01:45:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 344576.222 ops/s
[info] # Warmup Iteration   2: 605811.536 ops/s
[info] # Warmup Iteration   3: 616685.013 ops/s
[info] # Warmup Iteration   4: 613670.209 ops/s
[info] # Warmup Iteration   5: 609438.857 ops/s
[info] Iteration   1: 617480.005 ops/s
[info]                  ·gc.alloc.rate:      455.035 MB/sec
[info]                  ·gc.alloc.rate.norm: 1160.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 615170.011 ops/s
[info]                  ·gc.alloc.rate:            453.342 MB/sec
[info]                  ·gc.alloc.rate.norm:       1160.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.694 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1731.510 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 615169.524 ops/s
[info]                  ·gc.alloc.rate:                   453.366 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.722 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1731.488 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.704 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 619405.342 ops/s
[info]                  ·gc.alloc.rate:      456.530 MB/sec
[info]                  ·gc.alloc.rate.norm: 1160.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 616530.910 ops/s
[info]                  ·gc.alloc.rate:            454.392 MB/sec
[info]                  ·gc.alloc.rate.norm:       1160.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.408 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1729.330 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala":
[info]   616751.159 ±(99.9%) 6841.265 ops/s [Average]
[info]   (min, avg, max) = (615169.524, 616751.159, 619405.342), stdev = 1776.655
[info]   CI (99.9%): [609909.893, 623592.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   454.533 ±(99.9%) 5.109 MB/sec [Average]
[info]   (min, avg, max) = (453.342, 454.533, 456.530), stdev = 1.327
[info]   CI (99.9%): [449.424, 459.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1160.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1160.001, 1160.001, 1160.001), stdev = 0.001
[info]   CI (99.9%): [1160.001, 1160.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   406.165 ±(99.9%) 1427.727 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 406.165, 677.408), stdev = 370.776
[info]   CI (99.9%): [≈ 0, 1833.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1038.466 ±(99.9%) 3650.355 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1038.466, 1731.510), stdev = 947.985
[info]   CI (99.9%): [≈ 0, 4688.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.341 ±(99.9%) 2.935 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.341, 1.704), stdev = 0.762
[info]   CI (99.9%): [≈ 0, 3.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 5.000), stdev = 2.588
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 6.12% complete, ETA 01:45:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2451768.493 ops/s
[info] # Warmup Iteration   2: 2660687.224 ops/s
[info] # Warmup Iteration   3: 2714794.938 ops/s
[info] # Warmup Iteration   4: 2779468.573 ops/s
[info] # Warmup Iteration   5: 2781480.543 ops/s
[info] Iteration   1: 2790758.938 ops/s
[info]                  ·gc.alloc.rate:                   1290.688 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.392 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        764.496 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.376 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 2787879.476 ops/s
[info]                  ·gc.alloc.rate:            1290.066 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.173 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 765.305 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 2790805.412 ops/s
[info]                  ·gc.alloc.rate:            1291.051 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.534 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 382.049 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 2760047.602 ops/s
[info]                  ·gc.alloc.rate:                   1276.820 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.068 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        772.614 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.279 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 2723392.562 ops/s
[info]                  ·gc.alloc.rate:                                  1259.600 MB/sec
[info]                  ·gc.alloc.rate.norm:                             728.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.169 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.098 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.731 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       787.606 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala":
[info]   2770576.798 ±(99.9%) 113138.090 ops/s [Average]
[info]   (min, avg, max) = (2723392.562, 2770576.798, 2790805.412), stdev = 29381.603
[info]   CI (99.9%): [2657438.708, 2883714.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1281.645 ±(99.9%) 52.742 MB/sec [Average]
[info]   (min, avg, max) = (1259.600, 1281.645, 1291.051), stdev = 13.697
[info]   CI (99.9%): [1228.903, 1334.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (728.000, 728.000, 728.000), stdev = 0.001
[info]   CI (99.9%): [728.000, 728.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.034 ±(99.9%) 0.291 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.034, 0.169), stdev = 0.076
[info]   CI (99.9%): [≈ 0, 0.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.020 ±(99.9%) 0.168 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.098), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1221.379 ±(99.9%) 1170.731 MB/sec [Average]
[info]   (min, avg, max) = (677.534, 1221.379, 1362.731), stdev = 304.035
[info]   CI (99.9%): [50.648, 2392.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   694.414 ±(99.9%) 673.337 B/op [Average]
[info]   (min, avg, max) = (382.049, 694.414, 787.606), stdev = 174.863
[info]   CI (99.9%): [21.077, 1367.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.690 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.997), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.531 ±(99.9%) 3.815 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.531, 2.279), stdev = 0.991
[info]   CI (99.9%): [≈ 0, 4.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 8.000), stdev = 2.168
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 6.35% complete, ETA 01:45:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2738642.095 ops/s
[info] # Warmup Iteration   2: 2994585.382 ops/s
[info] # Warmup Iteration   3: 2998171.843 ops/s
[info] # Warmup Iteration   4: 2998350.208 ops/s
[info] # Warmup Iteration   5: 2991920.539 ops/s
[info] Iteration   1: 2950231.003 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3000104.119 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2998458.687 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2982462.588 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2998341.762 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2985919.632 ±(99.9%) 81647.416 ops/s [Average]
[info]   (min, avg, max) = (2950231.003, 2985919.632, 3000104.119), stdev = 21203.575
[info]   CI (99.9%): [2904272.216, 3067567.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 6.59% complete, ETA 01:45:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 322624.545 ops/s
[info] # Warmup Iteration   2: 407728.731 ops/s
[info] # Warmup Iteration   3: 411001.961 ops/s
[info] # Warmup Iteration   4: 404298.714 ops/s
[info] # Warmup Iteration   5: 410747.468 ops/s
[info] Iteration   1: 410881.425 ops/s
[info]                  ·gc.alloc.rate:            590.978 MB/sec
[info]                  ·gc.alloc.rate.norm:       2264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.369 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2594.961 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 414510.986 ops/s
[info]                  ·gc.alloc.rate:      596.268 MB/sec
[info]                  ·gc.alloc.rate.norm: 2264.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 395732.754 ops/s
[info]                  ·gc.alloc.rate:            569.181 MB/sec
[info]                  ·gc.alloc.rate.norm:       2264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.354 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2694.274 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 404796.752 ops/s
[info]                  ·gc.alloc.rate:            582.177 MB/sec
[info]                  ·gc.alloc.rate.norm:       2264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.304 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2633.936 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 408548.113 ops/s
[info]                  ·gc.alloc.rate:            587.619 MB/sec
[info]                  ·gc.alloc.rate.norm:       2264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.339 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2609.675 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson":
[info]   406894.006 ±(99.9%) 27608.472 ops/s [Average]
[info]   (min, avg, max) = (395732.754, 406894.006, 414510.986), stdev = 7169.832
[info]   CI (99.9%): [379285.534, 434502.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   585.245 ±(99.9%) 39.807 MB/sec [Average]
[info]   (min, avg, max) = (569.181, 585.245, 596.268), stdev = 10.338
[info]   CI (99.9%): [545.438, 625.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2264.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2264.001, 2264.001, 2264.001), stdev = 0.001
[info]   CI (99.9%): [2264.001, 2264.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   541.873 ±(99.9%) 1166.423 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 541.873, 677.369), stdev = 302.916
[info]   CI (99.9%): [≈ 0, 1708.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   2106.569 ±(99.9%) 4536.897 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2106.569, 2694.274), stdev = 1178.218
[info]   CI (99.9%): [≈ 0, 6643.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.600, 5.000), stdev = 2.074
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 6.82% complete, ETA 01:44:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15833.800 ops/s
[info] # Warmup Iteration   2: 19981.477 ops/s
[info] # Warmup Iteration   3: 20095.866 ops/s
[info] # Warmup Iteration   4: 20162.828 ops/s
[info] # Warmup Iteration   5: 20136.856 ops/s
[info] Iteration   1: 19868.341 ops/s
[info]                  ·gc.alloc.rate:            1217.207 MB/sec
[info]                  ·gc.alloc.rate.norm:       96432.050 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.061 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 107432.605 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 20358.964 ops/s
[info]                  ·gc.alloc.rate:            1247.533 MB/sec
[info]                  ·gc.alloc.rate.norm:       96432.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.334 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 104842.152 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 20251.746 ops/s
[info]                  ·gc.alloc.rate:            1240.691 MB/sec
[info]                  ·gc.alloc.rate.norm:       96432.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.021 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 105395.968 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 19338.665 ops/s
[info]                  ·gc.alloc.rate:            1184.708 MB/sec
[info]                  ·gc.alloc.rate.norm:       96432.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.940 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 55182.505 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 20247.469 ops/s
[info]                  ·gc.alloc.rate:                                  1240.668 MB/sec
[info]                  ·gc.alloc.rate.norm:                             96432.020 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.033 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.557 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1359.662 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       105680.886 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                258.895 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce":
[info]   20013.037 ±(99.9%) 1619.241 ops/s [Average]
[info]   (min, avg, max) = (19338.665, 20013.037, 20358.964), stdev = 420.512
[info]   CI (99.9%): [18393.796, 21632.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate":
[info]   1226.162 ±(99.9%) 99.613 MB/sec [Average]
[info]   (min, avg, max) = (1184.708, 1226.162, 1247.533), stdev = 25.869
[info]   CI (99.9%): [1126.549, 1325.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   96432.027 ±(99.9%) 0.050 B/op [Average]
[info]   (min, avg, max) = (96432.020, 96432.027, 96432.050), stdev = 0.013
[info]   CI (99.9%): [96431.976, 96432.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.007 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.033), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.511 ±(99.9%) 4.403 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.511, 2.557), stdev = 1.143
[info]   CI (99.9%): [≈ 0, 4.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1221.204 ±(99.9%) 1169.430 MB/sec [Average]
[info]   (min, avg, max) = (677.940, 1221.204, 1359.662), stdev = 303.697
[info]   CI (99.9%): [51.774, 2390.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   95706.823 ±(99.9%) 87311.389 B/op [Average]
[info]   (min, avg, max) = (55182.505, 95706.823, 107432.605), stdev = 22674.490
[info]   CI (99.9%): [8395.434, 183018.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   51.779 ±(99.9%) 445.833 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 51.779, 258.895), stdev = 115.781
[info]   CI (99.9%): [≈ 0, 497.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 9.000), stdev = 2.191
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 7.06% complete, ETA 01:44:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19349.114 ops/s
[info] # Warmup Iteration   2: 31053.635 ops/s
[info] # Warmup Iteration   3: 31320.194 ops/s
[info] # Warmup Iteration   4: 31525.714 ops/s
[info] # Warmup Iteration   5: 31558.506 ops/s
[info] Iteration   1: 31560.394 ops/s
[info]                  ·gc.alloc.rate:            791.205 MB/sec
[info]                  ·gc.alloc.rate.norm:       39456.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.428 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 33782.171 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 31568.770 ops/s
[info]                  ·gc.alloc.rate:            791.409 MB/sec
[info]                  ·gc.alloc.rate.norm:       39456.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.453 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 33774.681 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 32329.321 ops/s
[info]                  ·gc.alloc.rate:            810.431 MB/sec
[info]                  ·gc.alloc.rate.norm:       39456.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.388 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 32978.779 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 32204.828 ops/s
[info]                  ·gc.alloc.rate:            807.227 MB/sec
[info]                  ·gc.alloc.rate.norm:       39456.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.699 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 66215.572 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 32193.361 ops/s
[info]                  ·gc.alloc.rate:                   807.319 MB/sec
[info]                  ·gc.alloc.rate.norm:              39456.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.950 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        33084.476 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 32.563 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala":
[info]   31971.335 ±(99.9%) 1444.504 ops/s [Average]
[info]   (min, avg, max) = (31560.394, 31971.335, 32329.321), stdev = 375.133
[info]   CI (99.9%): [30526.831, 33415.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   801.518 ±(99.9%) 36.237 MB/sec [Average]
[info]   (min, avg, max) = (791.205, 801.518, 810.431), stdev = 9.411
[info]   CI (99.9%): [765.281, 837.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   39456.013 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (39456.013, 39456.013, 39456.014), stdev = 0.001
[info]   CI (99.9%): [39456.011, 39456.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   812.784 ±(99.9%) 1166.513 MB/sec [Average]
[info]   (min, avg, max) = (676.950, 812.784, 1354.699), stdev = 302.940
[info]   CI (99.9%): [≈ 0, 1979.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   39967.136 ±(99.9%) 56520.214 B/op [Average]
[info]   (min, avg, max) = (32978.779, 39967.136, 66215.572), stdev = 14678.120
[info]   CI (99.9%): [≈ 0, 96487.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   6.513 ±(99.9%) 56.076 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.513, 32.563), stdev = 14.563
[info]   CI (99.9%): [≈ 0, 62.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 9.000), stdev = 1.949
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 7.29% complete, ETA 01:44:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37721.877 ops/s
[info] # Warmup Iteration   2: 42935.811 ops/s
[info] # Warmup Iteration   3: 43981.871 ops/s
[info] # Warmup Iteration   4: 44984.139 ops/s
[info] # Warmup Iteration   5: 44969.006 ops/s
[info] Iteration   1: 44930.633 ops/s
[info]                  ·gc.alloc.rate:            603.557 MB/sec
[info]                  ·gc.alloc.rate.norm:       21144.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.040 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23753.318 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 45027.709 ops/s
[info]                  ·gc.alloc.rate:            604.983 MB/sec
[info]                  ·gc.alloc.rate.norm:       21144.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.193 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23702.684 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 45171.154 ops/s
[info]                  ·gc.alloc.rate:      606.735 MB/sec
[info]                  ·gc.alloc.rate.norm: 21144.009 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 45122.223 ops/s
[info]                  ·gc.alloc.rate:            606.081 MB/sec
[info]                  ·gc.alloc.rate.norm:       21144.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.979 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23652.265 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 44949.884 ops/s
[info]                  ·gc.alloc.rate:            603.785 MB/sec
[info]                  ·gc.alloc.rate.norm:       21144.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.009 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23743.280 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala":
[info]   45040.321 ±(99.9%) 404.750 ops/s [Average]
[info]   (min, avg, max) = (44930.633, 45040.321, 45171.154), stdev = 105.112
[info]   CI (99.9%): [44635.571, 45445.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   605.028 ±(99.9%) 5.355 MB/sec [Average]
[info]   (min, avg, max) = (603.557, 605.028, 606.735), stdev = 1.391
[info]   CI (99.9%): [599.673, 610.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   21144.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (21144.009, 21144.009, 21144.009), stdev = 0.001
[info]   CI (99.9%): [21144.009, 21144.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   542.444 ±(99.9%) 1167.652 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 542.444, 678.193), stdev = 303.235
[info]   CI (99.9%): [≈ 0, 1710.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   18970.309 ±(99.9%) 40835.309 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18970.309, 23753.318), stdev = 10604.800
[info]   CI (99.9%): [≈ 0, 59805.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 7.53% complete, ETA 01:44:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13383.870 ops/s
[info] # Warmup Iteration   2: 25069.968 ops/s
[info] # Warmup Iteration   3: 25173.722 ops/s
[info] # Warmup Iteration   4: 25218.453 ops/s
[info] # Warmup Iteration   5: 24379.909 ops/s
[info] Iteration   1: 25104.020 ops/s
[info]                  ·gc.alloc.rate:            1330.152 MB/sec
[info]                  ·gc.alloc.rate.norm:       83400.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.742 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 84941.797 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 25054.918 ops/s
[info]                  ·gc.alloc.rate:            1327.629 MB/sec
[info]                  ·gc.alloc.rate.norm:       83400.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.816 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 85107.884 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 24648.199 ops/s
[info]                  ·gc.alloc.rate:            1306.261 MB/sec
[info]                  ·gc.alloc.rate.norm:       83400.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.963 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 86509.434 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 25162.897 ops/s
[info]                  ·gc.alloc.rate:                                  1333.264 MB/sec
[info]                  ·gc.alloc.rate.norm:                             83400.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.092 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.752 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.725 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       84992.651 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                249.978 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 25273.579 ops/s
[info]                  ·gc.alloc.rate:                                  1339.336 MB/sec
[info]                  ·gc.alloc.rate.norm:                             83400.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.047 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.927 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.862 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       84864.972 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson":
[info]   25048.723 ±(99.9%) 917.535 ops/s [Average]
[info]   (min, avg, max) = (24648.199, 25048.723, 25273.579), stdev = 238.281
[info]   CI (99.9%): [24131.188, 25966.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1327.329 ±(99.9%) 48.376 MB/sec [Average]
[info]   (min, avg, max) = (1306.261, 1327.329, 1339.336), stdev = 12.563
[info]   CI (99.9%): [1278.953, 1375.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   83400.017 ±(99.9%) 0.003 B/op [Average]
[info]   (min, avg, max) = (83400.016, 83400.017, 83400.018), stdev = 0.001
[info]   CI (99.9%): [83400.014, 83400.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.028 ±(99.9%) 0.159 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.092), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.736 ±(99.9%) 9.928 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.736, 5.752), stdev = 2.578
[info]   CI (99.9%): [≈ 0, 11.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1357.222 ±(99.9%) 13.765 MB/sec [Average]
[info]   (min, avg, max) = (1354.742, 1357.222, 1362.862), stdev = 3.575
[info]   CI (99.9%): [1343.457, 1370.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   85283.348 ±(99.9%) 2661.039 B/op [Average]
[info]   (min, avg, max) = (84864.972, 85283.348, 86509.434), stdev = 691.063
[info]   CI (99.9%): [82622.309, 87944.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   49.996 ±(99.9%) 430.478 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 49.996, 249.978), stdev = 111.794
[info]   CI (99.9%): [≈ 0, 480.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.400, 9.000), stdev = 2.608
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 7.76% complete, ETA 01:43:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16248.282 ops/s
[info] # Warmup Iteration   2: 27622.658 ops/s
[info] # Warmup Iteration   3: 27405.249 ops/s
[info] # Warmup Iteration   4: 27605.270 ops/s
[info] # Warmup Iteration   5: 27931.828 ops/s
[info] Iteration   1: 28003.657 ops/s
[info]                  ·gc.alloc.rate:            1591.069 MB/sec
[info]                  ·gc.alloc.rate.norm:       89408.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2034.623 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 114332.932 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 28220.988 ops/s
[info]                  ·gc.alloc.rate:            1603.048 MB/sec
[info]                  ·gc.alloc.rate.norm:       89408.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.121 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 75635.965 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 28239.274 ops/s
[info]                  ·gc.alloc.rate:                                  1603.993 MB/sec
[info]                  ·gc.alloc.rate.norm:                             89408.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.059 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.315 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1359.338 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       75770.707 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                185.622 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 28183.741 ops/s
[info]                  ·gc.alloc.rate:                                  1600.909 MB/sec
[info]                  ·gc.alloc.rate.norm:                             89408.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.109 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 6.107 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.270 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       114168.934 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 28342.437 ops/s
[info]                  ·gc.alloc.rate:                                  1609.952 MB/sec
[info]                  ·gc.alloc.rate.norm:                             89408.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.055 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.809 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       75683.017 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce":
[info]   28198.019 ±(99.9%) 475.779 ops/s [Average]
[info]   (min, avg, max) = (28003.657, 28198.019, 28342.437), stdev = 123.558
[info]   CI (99.9%): [27722.240, 28673.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1601.794 ±(99.9%) 26.453 MB/sec [Average]
[info]   (min, avg, max) = (1591.069, 1601.794, 1609.952), stdev = 6.870
[info]   CI (99.9%): [1575.342, 1628.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   89408.015 ±(99.9%) 0.003 B/op [Average]
[info]   (min, avg, max) = (89408.014, 89408.015, 89408.016), stdev = 0.001
[info]   CI (99.9%): [89408.012, 89408.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.034 ±(99.9%) 0.190 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.034, 0.109), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.896 ±(99.9%) 10.602 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.896, 6.107), stdev = 2.753
[info]   CI (99.9%): [≈ 0, 12.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1631.432 ±(99.9%) 1434.317 MB/sec [Average]
[info]   (min, avg, max) = (1356.121, 1631.432, 2044.270), stdev = 372.487
[info]   CI (99.9%): [197.115, 3065.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   91118.311 ±(99.9%) 81314.946 B/op [Average]
[info]   (min, avg, max) = (75635.965, 91118.311, 114332.932), stdev = 21117.233
[info]   CI (99.9%): [9803.365, 172433.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   37.124 ±(99.9%) 319.651 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 37.124, 185.622), stdev = 83.012
[info]   CI (99.9%): [≈ 0, 356.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 12.000), stdev = 3.507
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8.00% complete, ETA 01:43:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12389.646 ops/s
[info] # Warmup Iteration   2: 27385.674 ops/s
[info] # Warmup Iteration   3: 27740.263 ops/s
[info] # Warmup Iteration   4: 28116.023 ops/s
[info] # Warmup Iteration   5: 27872.758 ops/s
[info] Iteration   1: 28039.071 ops/s
[info]                  ·gc.alloc.rate:                   1535.631 MB/sec
[info]                  ·gc.alloc.rate.norm:              86208.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.007 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        76011.945 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 37.389 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 27792.459 ops/s
[info]                  ·gc.alloc.rate:            1522.133 MB/sec
[info]                  ·gc.alloc.rate.norm:       86208.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.031 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 76687.352 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 28169.455 ops/s
[info]                  ·gc.alloc.rate:                                  1543.572 MB/sec
[info]                  ·gc.alloc.rate.norm:                             86208.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.018 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.024 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.728 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       75884.524 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.665 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                260.516 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 28250.551 ops/s
[info]                  ·gc.alloc.rate:                                  1547.234 MB/sec
[info]                  ·gc.alloc.rate.norm:                             86208.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.034 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.870 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.064 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       113890.138 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 28320.562 ops/s
[info]                  ·gc.alloc.rate:            1551.764 MB/sec
[info]                  ·gc.alloc.rate.norm:       86208.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1363.321 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 75739.126 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala":
[info]   28114.420 ±(99.9%) 801.708 ops/s [Average]
[info]   (min, avg, max) = (27792.459, 28114.420, 28320.562), stdev = 208.201
[info]   CI (99.9%): [27312.711, 28916.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1540.067 ±(99.9%) 44.815 MB/sec [Average]
[info]   (min, avg, max) = (1522.133, 1540.067, 1551.764), stdev = 11.638
[info]   CI (99.9%): [1495.252, 1584.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   86208.015 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (86208.014, 86208.015, 86208.016), stdev = 0.001
[info]   CI (99.9%): [86208.012, 86208.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.010 ±(99.9%) 0.059 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.034), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.579 ±(99.9%) 3.263 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.579, 1.870), stdev = 0.847
[info]   CI (99.9%): [≈ 0, 3.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1494.830 ±(99.9%) 1182.361 MB/sec [Average]
[info]   (min, avg, max) = (1354.007, 1494.830, 2044.064), stdev = 307.055
[info]   CI (99.9%): [312.469, 2677.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   83642.617 ±(99.9%) 65125.095 B/op [Average]
[info]   (min, avg, max) = (75739.126, 83642.617, 113890.138), stdev = 16912.780
[info]   CI (99.9%): [18517.522, 148767.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.825 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.665), stdev = 2.032
[info]   CI (99.9%): [≈ 0, 8.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   59.581 ±(99.9%) 436.997 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 59.581, 260.516), stdev = 113.487
[info]   CI (99.9%): [≈ 0, 496.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.800, 10.000), stdev = 2.775
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8.24% complete, ETA 01:43:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24378.976 ops/s
[info] # Warmup Iteration   2: 30631.645 ops/s
[info] # Warmup Iteration   3: 30016.309 ops/s
[info] # Warmup Iteration   4: 30443.151 ops/s
[info] # Warmup Iteration   5: 30995.625 ops/s
[info] Iteration   1: 31035.064 ops/s
[info]                  ·gc.alloc.rate:            1601.758 MB/sec
[info]                  ·gc.alloc.rate.norm:       81224.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.007 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 68711.456 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 31062.595 ops/s
[info]                  ·gc.alloc.rate:                   1602.926 MB/sec
[info]                  ·gc.alloc.rate.norm:              81224.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.395 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        68681.070 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 33.750 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 30494.146 ops/s
[info]                  ·gc.alloc.rate:                                  1573.422 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81224.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.159 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 8.205 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2039.829 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       105301.082 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                206.270 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 30533.837 ops/s
[info]                  ·gc.alloc.rate:                                  1575.661 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81224.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.021 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.096 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.790 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       70250.712 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 30447.250 ops/s
[info]                  ·gc.alloc.rate:            1571.211 MB/sec
[info]                  ·gc.alloc.rate.norm:       81224.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.824 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 70451.415 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala":
[info]   30714.578 ±(99.9%) 1181.446 ops/s [Average]
[info]   (min, avg, max) = (30447.250, 30714.578, 31062.595), stdev = 306.818
[info]   CI (99.9%): [29533.132, 31896.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1584.996 ±(99.9%) 61.296 MB/sec [Average]
[info]   (min, avg, max) = (1571.211, 1584.996, 1602.926), stdev = 15.918
[info]   CI (99.9%): [1523.700, 1646.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   81224.013 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (81224.013, 81224.013, 81224.014), stdev = 0.001
[info]   CI (99.9%): [81224.012, 81224.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.036 ±(99.9%) 0.267 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.036, 0.159), stdev = 0.069
[info]   CI (99.9%): [≈ 0, 0.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.860 ±(99.9%) 13.780 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.860, 8.205), stdev = 3.579
[info]   CI (99.9%): [≈ 0, 15.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1495.169 ±(99.9%) 1172.512 MB/sec [Average]
[info]   (min, avg, max) = (1355.007, 1495.169, 2039.829), stdev = 304.498
[info]   CI (99.9%): [322.657, 2667.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   76679.147 ±(99.9%) 61693.814 B/op [Average]
[info]   (min, avg, max) = (68681.070, 76679.147, 105301.082), stdev = 16021.688
[info]   CI (99.9%): [14985.333, 138372.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.687 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   48.004 ±(99.9%) 345.297 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 48.004, 206.270), stdev = 89.672
[info]   CI (99.9%): [≈ 0, 393.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.200, 7.000), stdev = 2.490
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 8.47% complete, ETA 01:43:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23609.811 ops/s
[info] # Warmup Iteration   2: 30440.792 ops/s
[info] # Warmup Iteration   3: 30625.223 ops/s
[info] # Warmup Iteration   4: 30787.571 ops/s
[info] # Warmup Iteration   5: 30775.513 ops/s
[info] Iteration   1: 30848.343 ops/s
[info]                  ·gc.alloc.rate:            1532.251 MB/sec
[info]                  ·gc.alloc.rate.norm:       78168.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2032.570 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 103691.874 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 30866.893 ops/s
[info]                  ·gc.alloc.rate:            1533.068 MB/sec
[info]                  ·gc.alloc.rate.norm:       78168.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.891 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 69083.134 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 30874.958 ops/s
[info]                  ·gc.alloc.rate:                                  1533.199 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78168.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.046 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.330 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.740 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       69273.456 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                203.745 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 30923.804 ops/s
[info]                  ·gc.alloc.rate:                                  1535.748 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78168.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.112 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.684 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.839 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       69367.127 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 30672.983 ops/s
[info]                  ·gc.alloc.rate:                                  1523.329 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78168.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.225 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.318 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       104902.036 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc":
[info]   30837.396 ±(99.9%) 369.836 ops/s [Average]
[info]   (min, avg, max) = (30672.983, 30837.396, 30923.804), stdev = 96.045
[info]   CI (99.9%): [30467.560, 31207.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1531.519 ±(99.9%) 18.338 MB/sec [Average]
[info]   (min, avg, max) = (1523.329, 1531.519, 1535.748), stdev = 4.762
[info]   CI (99.9%): [1513.181, 1549.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   78168.013 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (78168.013, 78168.013, 78168.013), stdev = 0.001
[info]   CI (99.9%): [78168.013, 78168.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.032 ±(99.9%) 0.186 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.112), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.648 ±(99.9%) 9.474 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.648, 5.684), stdev = 2.460
[info]   CI (99.9%): [≈ 0, 11.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   1630.672 ±(99.9%) 1433.507 MB/sec [Average]
[info]   (min, avg, max) = (1354.891, 1630.672, 2044.318), stdev = 372.277
[info]   CI (99.9%): [197.164, 3064.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   83263.525 ±(99.9%) 73954.872 B/op [Average]
[info]   (min, avg, max) = (69083.134, 83263.525, 104902.036), stdev = 19205.845
[info]   CI (99.9%): [9308.653, 157218.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm":
[info]   40.749 ±(99.9%) 350.862 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 40.749, 203.745), stdev = 91.118
[info]   CI (99.9%): [≈ 0, 391.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.800, 11.000), stdev = 3.347
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 8.71% complete, ETA 01:42:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4545.402 ops/s
[info] # Warmup Iteration   2: 7568.229 ops/s
[info] # Warmup Iteration   3: 8097.564 ops/s
[info] # Warmup Iteration   4: 8117.100 ops/s
[info] # Warmup Iteration   5: 8120.703 ops/s
[info] Iteration   1: 8175.753 ops/s
[info]                  ·gc.alloc.rate:            1063.589 MB/sec
[info]                  ·gc.alloc.rate.norm:       204776.050 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.280 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 130398.850 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 8117.664 ops/s
[info]                  ·gc.alloc.rate:            1056.175 MB/sec
[info]                  ·gc.alloc.rate.norm:       204776.054 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.893 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 262692.891 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 8177.258 ops/s
[info]                  ·gc.alloc.rate:            1063.803 MB/sec
[info]                  ·gc.alloc.rate.norm:       204776.050 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.251 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 130366.967 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 8160.432 ops/s
[info]                  ·gc.alloc.rate:            1061.709 MB/sec
[info]                  ·gc.alloc.rate.norm:       204776.050 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.651 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 261276.931 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 8214.280 ops/s
[info]                  ·gc.alloc.rate:            1068.841 MB/sec
[info]                  ·gc.alloc.rate.norm:       204776.050 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.394 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 129779.943 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson":
[info]   8169.077 ±(99.9%) 134.399 ops/s [Average]
[info]   (min, avg, max) = (8117.664, 8169.077, 8214.280), stdev = 34.903
[info]   CI (99.9%): [8034.679, 8303.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1062.823 ±(99.9%) 17.562 MB/sec [Average]
[info]   (min, avg, max) = (1056.175, 1062.823, 1068.841), stdev = 4.561
[info]   CI (99.9%): [1045.262, 1080.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   204776.051 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (204776.050, 204776.051, 204776.054), stdev = 0.002
[info]   CI (99.9%): [204776.043, 204776.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   948.294 ±(99.9%) 1428.827 MB/sec [Average]
[info]   (min, avg, max) = (677.251, 948.294, 1354.893), stdev = 371.062
[info]   CI (99.9%): [≈ 0, 2377.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   182903.116 ±(99.9%) 277991.954 B/op [Average]
[info]   (min, avg, max) = (129779.943, 182903.116, 262692.891), stdev = 72193.628
[info]   CI (99.9%): [≈ 0, 460895.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 9.000), stdev = 2.345
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 8.94% complete, ETA 01:42:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13881.216 ops/s
[info] # Warmup Iteration   2: 18824.297 ops/s
[info] # Warmup Iteration   3: 19105.213 ops/s
[info] # Warmup Iteration   4: 19211.676 ops/s
[info] # Warmup Iteration   5: 19303.926 ops/s
[info] Iteration   1: 19607.857 ops/s
[info]                  ·gc.alloc.rate:            1523.568 MB/sec
[info]                  ·gc.alloc.rate.norm:       122287.550 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.236 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 108856.860 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 19685.224 ops/s
[info]                  ·gc.alloc.rate:            1529.390 MB/sec
[info]                  ·gc.alloc.rate.norm:       122264.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.356 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 108431.141 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 19574.321 ops/s
[info]                  ·gc.alloc.rate:                                  1520.459 MB/sec
[info]                  ·gc.alloc.rate.norm:                             122264.021 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.057 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.569 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2037.347 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       163828.285 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                267.781 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 19775.502 ops/s
[info]                  ·gc.alloc.rate:                                  1536.264 MB/sec
[info]                  ·gc.alloc.rate.norm:                             122264.021 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.090 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 7.148 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.913 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       108467.895 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 19657.775 ops/s
[info]                  ·gc.alloc.rate:                                  1526.917 MB/sec
[info]                  ·gc.alloc.rate.norm:                             122264.022 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.210 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.683 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       109113.340 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce":
[info]   19660.136 ±(99.9%) 298.528 ops/s [Average]
[info]   (min, avg, max) = (19574.321, 19660.136, 19775.502), stdev = 77.527
[info]   CI (99.9%): [19361.608, 19958.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1527.319 ±(99.9%) 23.231 MB/sec [Average]
[info]   (min, avg, max) = (1520.459, 1527.319, 1536.264), stdev = 6.033
[info]   CI (99.9%): [1504.089, 1550.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   122268.727 ±(99.9%) 40.518 B/op [Average]
[info]   (min, avg, max) = (122264.021, 122268.727, 122287.550), stdev = 10.522
[info]   CI (99.9%): [122228.210, 122309.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.030 ±(99.9%) 0.159 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.090), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.385 ±(99.9%) 12.708 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.385, 7.148), stdev = 3.300
[info]   CI (99.9%): [≈ 0, 15.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1495.107 ±(99.9%) 1167.279 MB/sec [Average]
[info]   (min, avg, max) = (1356.236, 1495.107, 2037.347), stdev = 303.139
[info]   CI (99.9%): [327.828, 2662.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   119739.504 ±(99.9%) 94910.681 B/op [Average]
[info]   (min, avg, max) = (108431.141, 119739.504, 163828.285), stdev = 24648.003
[info]   CI (99.9%): [24828.823, 214650.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   53.556 ±(99.9%) 461.135 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 53.556, 267.781), stdev = 119.755
[info]   CI (99.9%): [≈ 0, 514.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.600, 9.000), stdev = 2.966
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.18% complete, ETA 01:42:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24124.770 ops/s
[info] # Warmup Iteration   2: 37695.282 ops/s
[info] # Warmup Iteration   3: 37966.978 ops/s
[info] # Warmup Iteration   4: 37901.252 ops/s
[info] # Warmup Iteration   5: 38648.747 ops/s
[info] Iteration   1: 38658.671 ops/s
[info]                  ·gc.alloc.rate:            953.494 MB/sec
[info]                  ·gc.alloc.rate.norm:       38824.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.344 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27579.832 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 39208.996 ops/s
[info]                  ·gc.alloc.rate:            967.063 MB/sec
[info]                  ·gc.alloc.rate.norm:       38824.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.662 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 54384.670 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 39428.518 ops/s
[info]                  ·gc.alloc.rate:            972.508 MB/sec
[info]                  ·gc.alloc.rate.norm:       38824.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.362 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27041.328 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 39203.520 ops/s
[info]                  ·gc.alloc.rate:            966.917 MB/sec
[info]                  ·gc.alloc.rate.norm:       38824.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.698 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 54394.379 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 39405.864 ops/s
[info]                  ·gc.alloc.rate:            971.902 MB/sec
[info]                  ·gc.alloc.rate.norm:       38824.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.335 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27057.108 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala":
[info]   39181.114 ±(99.9%) 1196.100 ops/s [Average]
[info]   (min, avg, max) = (38658.671, 39181.114, 39428.518), stdev = 310.623
[info]   CI (99.9%): [37985.014, 40377.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   966.377 ±(99.9%) 29.505 MB/sec [Average]
[info]   (min, avg, max) = (953.494, 966.377, 972.508), stdev = 7.662
[info]   CI (99.9%): [936.872, 995.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   38824.011 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (38824.010, 38824.011, 38824.011), stdev = 0.001
[info]   CI (99.9%): [38824.009, 38824.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   948.280 ±(99.9%) 1428.553 MB/sec [Average]
[info]   (min, avg, max) = (677.335, 948.280, 1354.698), stdev = 370.991
[info]   CI (99.9%): [≈ 0, 2376.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   38091.463 ±(99.9%) 57296.058 B/op [Average]
[info]   (min, avg, max) = (27041.328, 38091.463, 54394.379), stdev = 14879.604
[info]   CI (99.9%): [≈ 0, 95387.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 9.000), stdev = 2.168
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.41% complete, ETA 01:42:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 50935.267 ops/s
[info] # Warmup Iteration   2: 52195.589 ops/s
[info] # Warmup Iteration   3: 53776.341 ops/s
[info] # Warmup Iteration   4: 53879.342 ops/s
[info] # Warmup Iteration   5: 55211.124 ops/s
[info] Iteration   1: 55179.789 ops/s
[info]                  ·gc.alloc.rate:            712.877 MB/sec
[info]                  ·gc.alloc.rate.norm:       20336.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.023 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19341.723 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 55285.673 ops/s
[info]                  ·gc.alloc.rate:            714.525 MB/sec
[info]                  ·gc.alloc.rate.norm:       20336.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.287 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19304.645 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 55149.577 ops/s
[info]                  ·gc.alloc.rate:            712.467 MB/sec
[info]                  ·gc.alloc.rate.norm:       20336.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.001 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19352.243 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 55298.724 ops/s
[info]                  ·gc.alloc.rate:            714.381 MB/sec
[info]                  ·gc.alloc.rate.norm:       20336.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.967 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19299.410 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 55250.044 ops/s
[info]                  ·gc.alloc.rate:            713.791 MB/sec
[info]                  ·gc.alloc.rate.norm:       20336.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.032 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19317.222 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala":
[info]   55232.761 ±(99.9%) 252.321 ops/s [Average]
[info]   (min, avg, max) = (55149.577, 55232.761, 55298.724), stdev = 65.527
[info]   CI (99.9%): [54980.441, 55485.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   713.608 ±(99.9%) 3.502 MB/sec [Average]
[info]   (min, avg, max) = (712.467, 713.608, 714.525), stdev = 0.910
[info]   CI (99.9%): [710.106, 717.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   20336.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (20336.007, 20336.008, 20336.008), stdev = 0.001
[info]   CI (99.9%): [20336.007, 20336.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   678.062 ±(99.9%) 0.495 MB/sec [Average]
[info]   (min, avg, max) = (677.967, 678.062, 678.287), stdev = 0.128
[info]   CI (99.9%): [677.567, 678.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   19323.049 ±(99.9%) 88.909 B/op [Average]
[info]   (min, avg, max) = (19299.410, 19323.049, 19352.243), stdev = 23.089
[info]   CI (99.9%): [19234.140, 19411.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 9.65% complete, ETA 01:41:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12312.991 ops/s
[info] # Warmup Iteration   2: 28699.798 ops/s
[info] # Warmup Iteration   3: 28758.901 ops/s
[info] # Warmup Iteration   4: 28767.239 ops/s
[info] # Warmup Iteration   5: 28589.314 ops/s
[info] Iteration   1: 29016.765 ops/s
[info]                  ·gc.alloc.rate:                   1937.785 MB/sec
[info]                  ·gc.alloc.rate.norm:              105120.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2030.055 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        110125.410 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 252.913 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   2: 30019.009 ops/s
[info]                  ·gc.alloc.rate:                                  2004.994 MB/sec
[info]                  ·gc.alloc.rate.norm:                             105120.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.061 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.222 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.285 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       107180.008 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 30028.943 ops/s
[info]                  ·gc.alloc.rate:                                  2005.880 MB/sec
[info]                  ·gc.alloc.rate.norm:                             105120.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.335 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.439 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       107140.756 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 29715.486 ops/s
[info]                  ·gc.alloc.rate:            1984.576 MB/sec
[info]                  ·gc.alloc.rate.norm:       105120.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.095 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 108272.651 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 29578.581 ops/s
[info]                  ·gc.alloc.rate:                                  1975.361 MB/sec
[info]                  ·gc.alloc.rate.norm:                             105120.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.288 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.094 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       108777.709 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson":
[info]   29671.757 ±(99.9%) 1596.711 ops/s [Average]
[info]   (min, avg, max) = (29016.765, 29671.757, 30028.943), stdev = 414.661
[info]   CI (99.9%): [28075.046, 31268.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1981.719 ±(99.9%) 107.271 MB/sec [Average]
[info]   (min, avg, max) = (1937.785, 1981.719, 2005.880), stdev = 27.858
[info]   CI (99.9%): [1874.448, 2088.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   105120.014 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (105120.014, 105120.014, 105120.015), stdev = 0.001
[info]   CI (99.9%): [105120.012, 105120.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.101 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.061), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.769 ±(99.9%) 5.315 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.769, 3.222), stdev = 1.380
[info]   CI (99.9%): [≈ 0, 6.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2041.394 ±(99.9%) 24.414 MB/sec [Average]
[info]   (min, avg, max) = (2030.055, 2041.394, 2044.439), stdev = 6.340
[info]   CI (99.9%): [2016.979, 2065.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   108299.307 ±(99.9%) 4778.253 B/op [Average]
[info]   (min, avg, max) = (107140.756, 108299.307, 110125.410), stdev = 1240.897
[info]   CI (99.9%): [103521.054, 113077.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   50.583 ±(99.9%) 435.531 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 50.583, 252.913), stdev = 113.106
[info]   CI (99.9%): [≈ 0, 486.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.600, 15.000), stdev = 4.827
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.88% complete, ETA 01:41:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16120.871 ops/s
[info] # Warmup Iteration   2: 32553.986 ops/s
[info] # Warmup Iteration   3: 32484.237 ops/s
[info] # Warmup Iteration   4: 32502.096 ops/s
[info] # Warmup Iteration   5: 32763.290 ops/s
[info] Iteration   1: 32393.215 ops/s
[info]                  ·gc.alloc.rate:            1771.343 MB/sec
[info]                  ·gc.alloc.rate.norm:       86072.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2032.065 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 98740.907 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 33599.550 ops/s
[info]                  ·gc.alloc.rate:                                  1837.486 MB/sec
[info]                  ·gc.alloc.rate.norm:                             86072.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.076 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.542 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2040.231 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       95569.027 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                187.207 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 33818.999 ops/s
[info]                  ·gc.alloc.rate:                                  1849.967 MB/sec
[info]                  ·gc.alloc.rate.norm:                             86072.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.029 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.352 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.192 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       63424.185 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   4: 33518.419 ops/s
[info]                  ·gc.alloc.rate:            1832.855 MB/sec
[info]                  ·gc.alloc.rate.norm:       86072.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.062 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 95990.447 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 33677.852 ops/s
[info]                  ·gc.alloc.rate:            1841.581 MB/sec
[info]                  ·gc.alloc.rate.norm:       86072.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2043.978 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 95531.667 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala":
[info]   33401.607 ±(99.9%) 2212.201 ops/s [Average]
[info]   (min, avg, max) = (32393.215, 33401.607, 33818.999), stdev = 574.501
[info]   CI (99.9%): [31189.406, 35613.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1826.646 ±(99.9%) 121.485 MB/sec [Average]
[info]   (min, avg, max) = (1771.343, 1826.646, 1849.967), stdev = 31.549
[info]   CI (99.9%): [1705.161, 1948.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   86072.012 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (86072.012, 86072.012, 86072.013), stdev = 0.001
[info]   CI (99.9%): [86072.011, 86072.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.076), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.979 ±(99.9%) 5.960 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.979, 3.542), stdev = 1.548
[info]   CI (99.9%): [≈ 0, 6.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1904.706 ±(99.9%) 1165.801 MB/sec [Average]
[info]   (min, avg, max) = (1363.192, 1904.706, 2044.062), stdev = 302.755
[info]   CI (99.9%): [738.905, 3070.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   89851.247 ±(99.9%) 57116.408 B/op [Average]
[info]   (min, avg, max) = (63424.185, 89851.247, 98740.907), stdev = 14832.950
[info]   CI (99.9%): [32734.839, 146967.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   37.441 ±(99.9%) 322.381 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 37.441, 187.207), stdev = 83.721
[info]   CI (99.9%): [≈ 0, 359.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.600, 14.000), stdev = 4.775
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 10.12% complete, ETA 01:41:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36607.007 ops/s
[info] # Warmup Iteration   2: 43804.755 ops/s
[info] # Warmup Iteration   3: 43790.884 ops/s
[info] # Warmup Iteration   4: 43900.113 ops/s
[info] # Warmup Iteration   5: 42486.053 ops/s
[info] Iteration   1: 43979.647 ops/s
[info]                  ·gc.alloc.rate:            1832.900 MB/sec
[info]                  ·gc.alloc.rate.norm:       65600.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.787 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 48488.237 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 43993.071 ops/s
[info]                  ·gc.alloc.rate:                                  1833.801 MB/sec
[info]                  ·gc.alloc.rate.norm:                             65600.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.071 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.553 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2040.574 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       72996.847 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                142.991 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 44131.045 ops/s
[info]                  ·gc.alloc.rate:                                  1839.289 MB/sec
[info]                  ·gc.alloc.rate.norm:                             65600.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.020 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.702 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.278 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       72911.157 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 44227.627 ops/s
[info]                  ·gc.alloc.rate:            1843.336 MB/sec
[info]                  ·gc.alloc.rate.norm:       65600.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.795 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 48498.655 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 44119.296 ops/s
[info]                  ·gc.alloc.rate:            1838.903 MB/sec
[info]                  ·gc.alloc.rate.norm:       65600.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.359 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 72929.333 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala":
[info]   44090.137 ±(99.9%) 399.508 ops/s [Average]
[info]   (min, avg, max) = (43979.647, 44090.137, 44227.627), stdev = 103.751
[info]   CI (99.9%): [43690.629, 44489.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1837.646 ±(99.9%) 16.559 MB/sec [Average]
[info]   (min, avg, max) = (1832.900, 1837.646, 1843.336), stdev = 4.300
[info]   CI (99.9%): [1821.086, 1854.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   65600.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (65600.009, 65600.009, 65600.010), stdev = 0.001
[info]   CI (99.9%): [65600.008, 65600.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.071), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.651 ±(99.9%) 4.258 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.651, 2.553), stdev = 1.106
[info]   CI (99.9%): [≈ 0, 4.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1769.359 ±(99.9%) 1443.256 MB/sec [Average]
[info]   (min, avg, max) = (1354.787, 1769.359, 2044.359), stdev = 374.809
[info]   CI (99.9%): [326.103, 3212.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   63164.846 ±(99.9%) 51572.187 B/op [Average]
[info]   (min, avg, max) = (48488.237, 63164.846, 72996.847), stdev = 13393.133
[info]   CI (99.9%): [11592.659, 114737.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   28.598 ±(99.9%) 246.239 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 28.598, 142.991), stdev = 63.947
[info]   CI (99.9%): [≈ 0, 274.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.400, 7.000), stdev = 2.074
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 10.35% complete, ETA 01:41:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36764.567 ops/s
[info] # Warmup Iteration   2: 44051.319 ops/s
[info] # Warmup Iteration   3: 43626.370 ops/s
[info] # Warmup Iteration   4: 43863.551 ops/s
[info] # Warmup Iteration   5: 44077.397 ops/s
[info] Iteration   1: 44854.943 ops/s
[info]                  ·gc.alloc.rate:                   1645.230 MB/sec
[info]                  ·gc.alloc.rate.norm:              57736.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2032.668 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        71332.337 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 23.372 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 44947.995 ops/s
[info]                  ·gc.alloc.rate:                   1648.921 MB/sec
[info]                  ·gc.alloc.rate.norm:              57736.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.959 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        47443.078 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 139.950 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 44980.758 ops/s
[info]                  ·gc.alloc.rate:                                  1650.148 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57736.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.102 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.575 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.906 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       47685.852 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 45219.716 ops/s
[info]                  ·gc.alloc.rate:                                  1658.729 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57736.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.016 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.552 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.175 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       71152.378 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 45245.485 ops/s
[info]                  ·gc.alloc.rate:                                  1660.077 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57736.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.030 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.017 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       47404.523 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   45049.779 ±(99.9%) 667.684 ops/s [Average]
[info]   (min, avg, max) = (44854.943, 45049.779, 45245.485), stdev = 173.395
[info]   CI (99.9%): [44382.095, 45717.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1652.621 ±(99.9%) 24.904 MB/sec [Average]
[info]   (min, avg, max) = (1645.230, 1652.621, 1660.077), stdev = 6.467
[info]   CI (99.9%): [1627.717, 1677.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   57736.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (57736.009, 57736.009, 57736.010), stdev = 0.001
[info]   CI (99.9%): [57736.008, 57736.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.024 ±(99.9%) 0.171 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.102), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.831 ±(99.9%) 5.974 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.831, 3.575), stdev = 1.552
[info]   CI (99.9%): [≈ 0, 6.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   1631.545 ±(99.9%) 1430.370 MB/sec [Average]
[info]   (min, avg, max) = (1354.959, 1631.545, 2044.175), stdev = 371.463
[info]   CI (99.9%): [201.175, 3061.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   57003.634 ±(99.9%) 50053.442 B/op [Average]
[info]   (min, avg, max) = (47404.523, 57003.634, 71332.337), stdev = 12998.720
[info]   CI (99.9%): [6950.191, 107057.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.689 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.997), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm":
[info]   32.664 ±(99.9%) 234.205 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 32.664, 139.950), stdev = 60.822
[info]   CI (99.9%): [≈ 0, 266.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.200, 10.000), stdev = 3.271
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 10.59% complete, ETA 01:40:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 305036.776 ops/s
[info] # Warmup Iteration   2: 366482.675 ops/s
[info] # Warmup Iteration   3: 374250.978 ops/s
[info] # Warmup Iteration   4: 372992.596 ops/s
[info] # Warmup Iteration   5: 372781.040 ops/s
[info] Iteration   1: 365361.911 ops/s
[info]                  ·gc.alloc.rate:                   1847.796 MB/sec
[info]                  ·gc.alloc.rate.norm:              7960.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2034.356 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        8763.673 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 14.348 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 366443.621 ops/s
[info]                  ·gc.alloc.rate:                                  1853.611 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7960.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.059 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.252 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.114 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5853.651 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   3: 365147.058 ops/s
[info]                  ·gc.alloc.rate:                                  1846.491 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7960.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.017 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.073 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.096 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8811.853 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 365966.968 ops/s
[info]                  ·gc.alloc.rate:                                  1851.379 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7960.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.848 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8791.823 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 373954.679 ops/s
[info]                  ·gc.alloc.rate:                                  1891.948 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7960.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.858 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8603.341 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce":
[info]   367374.847 ±(99.9%) 14299.123 ops/s [Average]
[info]   (min, avg, max) = (365147.058, 367374.847, 373954.679), stdev = 3713.437
[info]   CI (99.9%): [353075.724, 381673.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1858.245 ±(99.9%) 73.360 MB/sec [Average]
[info]   (min, avg, max) = (1846.491, 1858.245, 1891.948), stdev = 19.051
[info]   CI (99.9%): [1784.885, 1931.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   7960.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7960.001, 7960.001, 7960.001), stdev = 0.001
[info]   CI (99.9%): [7960.001, 7960.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.096 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.059), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.069 ±(99.9%) 0.411 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.069, 0.252), stdev = 0.107
[info]   CI (99.9%): [≈ 0, 0.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1906.255 ±(99.9%) 1169.276 MB/sec [Average]
[info]   (min, avg, max) = (1363.114, 1906.255, 2044.858), stdev = 303.657
[info]   CI (99.9%): [736.979, 3075.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   8164.868 ±(99.9%) 4985.138 B/op [Average]
[info]   (min, avg, max) = (5853.651, 8164.868, 8811.853), stdev = 1294.625
[info]   CI (99.9%): [3179.730, 13150.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   2.870 ±(99.9%) 24.708 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.870, 14.348), stdev = 6.417
[info]   CI (99.9%): [≈ 0, 27.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 11.000), stdev = 3.209
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 10.82% complete, ETA 01:40:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 49196.706 ops/s
[info] # Warmup Iteration   2: 1466837.884 ops/s
[info] # Warmup Iteration   3: 1453061.265 ops/s
[info] # Warmup Iteration   4: 1463138.211 ops/s
[info] # Warmup Iteration   5: 1477531.984 ops/s
[info] Iteration   1: 1467715.207 ops/s
[info]                  ·gc.alloc.rate:            462.486 MB/sec
[info]                  ·gc.alloc.rate.norm:       496.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.706 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 723.599 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 1468464.668 ops/s
[info]                  ·gc.alloc.rate:            462.748 MB/sec
[info]                  ·gc.alloc.rate.norm:       496.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.745 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 723.232 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 1528631.899 ops/s
[info]                  ·gc.alloc.rate:      481.799 MB/sec
[info]                  ·gc.alloc.rate.norm: 496.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1467649.464 ops/s
[info]                  ·gc.alloc.rate:            462.507 MB/sec
[info]                  ·gc.alloc.rate.norm:       496.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.782 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 723.648 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 1494555.037 ops/s
[info]                  ·gc.alloc.rate:            470.987 MB/sec
[info]                  ·gc.alloc.rate.norm:       496.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.794 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 710.631 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava":
[info]   1485403.255 ±(99.9%) 103098.261 ops/s [Average]
[info]   (min, avg, max) = (1467649.464, 1485403.255, 1528631.899), stdev = 26774.291
[info]   CI (99.9%): [1382304.994, 1588501.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   468.105 ±(99.9%) 32.642 MB/sec [Average]
[info]   (min, avg, max) = (462.486, 468.105, 481.799), stdev = 8.477
[info]   CI (99.9%): [435.463, 500.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   496.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (496.000, 496.000, 496.000), stdev = 0.001
[info]   CI (99.9%): [496.000, 496.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   539.806 ±(99.9%) 1161.972 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.806, 674.794), stdev = 301.761
[info]   CI (99.9%): [≈ 0, 1701.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   576.222 ±(99.9%) 1240.546 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 576.222, 723.648), stdev = 322.166
[info]   CI (99.9%): [≈ 0, 1816.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.200, 6.000), stdev = 2.387
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 11.06% complete, ETA 01:40:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 369254.943 ops/s
[info] # Warmup Iteration   2: 583402.204 ops/s
[info] # Warmup Iteration   3: 589039.677 ops/s
[info] # Warmup Iteration   4: 578143.549 ops/s
[info] # Warmup Iteration   5: 575203.262 ops/s
[info] Iteration   1: 586674.508 ops/s
[info]                  ·gc.alloc.rate:            497.967 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.422 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1817.460 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 589545.732 ops/s
[info]                  ·gc.alloc.rate:      500.493 MB/sec
[info]                  ·gc.alloc.rate.norm: 1336.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 586319.407 ops/s
[info]                  ·gc.alloc.rate:            497.794 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.595 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1818.557 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 587031.932 ops/s
[info]                  ·gc.alloc.rate:                   498.468 MB/sec
[info]                  ·gc.alloc.rate.norm:              1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.975 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1814.439 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.786 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 583795.265 ops/s
[info]                  ·gc.alloc.rate:            495.594 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.490 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1826.349 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala":
[info]   586673.369 ±(99.9%) 7888.608 ops/s [Average]
[info]   (min, avg, max) = (583795.265, 586673.369, 589545.732), stdev = 2048.646
[info]   CI (99.9%): [578784.761, 594561.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   498.063 ±(99.9%) 6.738 MB/sec [Average]
[info]   (min, avg, max) = (495.594, 498.063, 500.493), stdev = 1.750
[info]   CI (99.9%): [491.325, 504.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1336.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1336.001, 1336.001, 1336.001), stdev = 0.001
[info]   CI (99.9%): [1336.001, 1336.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   541.896 ±(99.9%) 1166.473 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 541.896, 677.595), stdev = 302.929
[info]   CI (99.9%): [≈ 0, 1708.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1455.361 ±(99.9%) 3132.820 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1455.361, 1826.349), stdev = 813.583
[info]   CI (99.9%): [≈ 0, 4588.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.357 ±(99.9%) 3.075 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.357, 1.786), stdev = 0.799
[info]   CI (99.9%): [≈ 0, 3.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.600, 5.000), stdev = 2.074
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 11.29% complete, ETA 01:40:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1646398.021 ops/s
[info] # Warmup Iteration   2: 1734083.736 ops/s
[info] # Warmup Iteration   3: 1645153.946 ops/s
[info] # Warmup Iteration   4: 1746618.796 ops/s
[info] # Warmup Iteration   5: 1741363.778 ops/s
[info] Iteration   1: 1747712.703 ops/s
[info]                  ·gc.alloc.rate:      337.548 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1657747.610 ops/s
[info]                  ·gc.alloc.rate:            320.161 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.033 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 643.809 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 1747546.533 ops/s
[info]                  ·gc.alloc.rate:      337.477 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1734830.729 ops/s
[info]                  ·gc.alloc.rate:            335.085 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.108 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 615.203 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 1746889.647 ops/s
[info]                  ·gc.alloc.rate:      337.445 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala":
[info]   1726945.444 ±(99.9%) 150421.415 ops/s [Average]
[info]   (min, avg, max) = (1657747.610, 1726945.444, 1747712.703), stdev = 39063.964
[info]   CI (99.9%): [1576524.030, 1877366.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   333.543 ±(99.9%) 29.085 MB/sec [Average]
[info]   (min, avg, max) = (320.161, 333.543, 337.548), stdev = 7.553
[info]   CI (99.9%): [304.458, 362.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   304.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (304.000, 304.000, 304.000), stdev = 0.001
[info]   CI (99.9%): [304.000, 304.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   271.228 ±(99.9%) 1430.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 271.228, 678.108), stdev = 371.395
[info]   CI (99.9%): [≈ 0, 1701.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   251.802 ±(99.9%) 1328.252 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 251.802, 643.809), stdev = 344.943
[info]   CI (99.9%): [≈ 0, 1580.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 4.000), stdev = 1.949
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 11.53% complete, ETA 01:39:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 53523.100 ops/s
[info] # Warmup Iteration   2: 87791.143 ops/s
[info] # Warmup Iteration   3: 88819.835 ops/s
[info] # Warmup Iteration   4: 91170.800 ops/s
[info] # Warmup Iteration   5: 92177.217 ops/s
[info] Iteration   1: 91341.176 ops/s
[info]                  ·gc.alloc.rate:                                  3317.984 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57176.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.037 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3406.975 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       58709.513 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 91496.905 ops/s
[info]                  ·gc.alloc.rate:            3324.407 MB/sec
[info]                  ·gc.alloc.rate.norm:       57176.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2726.201 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 46887.545 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 91010.494 ops/s
[info]                  ·gc.alloc.rate:                                  3305.759 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57176.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3406.729 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       58922.354 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 91235.973 ops/s
[info]                  ·gc.alloc.rate:                                  3314.094 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57176.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3406.747 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       58774.492 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 91077.528 ops/s
[info]                  ·gc.alloc.rate:                                  3308.676 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57176.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.045 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3407.189 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       58878.370 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson":
[info]   91232.415 ±(99.9%) 758.087 ops/s [Average]
[info]   (min, avg, max) = (91010.494, 91232.415, 91496.905), stdev = 196.873
[info]   CI (99.9%): [90474.328, 91990.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3314.184 ±(99.9%) 28.574 MB/sec [Average]
[info]   (min, avg, max) = (3305.759, 3314.184, 3324.407), stdev = 7.421
[info]   CI (99.9%): [3285.610, 3342.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   57176.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (57176.004, 57176.004, 57176.004), stdev = 0.001
[info]   CI (99.9%): [57176.004, 57176.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.004 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.026 ±(99.9%) 0.067 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.045), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   3270.768 ±(99.9%) 1172.222 MB/sec [Average]
[info]   (min, avg, max) = (2726.201, 3270.768, 3407.189), stdev = 304.422
[info]   CI (99.9%): [2098.546, 4442.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   56434.455 ±(99.9%) 20552.983 B/op [Average]
[info]   (min, avg, max) = (46887.545, 56434.455, 58922.354), stdev = 5337.544
[info]   CI (99.9%): [35881.472, 76987.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.800, 9.000), stdev = 1.483
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 11.76% complete, ETA 01:39:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 245890.346 ops/s
[info] # Warmup Iteration   2: 309889.901 ops/s
[info] # Warmup Iteration   3: 317757.568 ops/s
[info] # Warmup Iteration   4: 322414.176 ops/s
[info] # Warmup Iteration   5: 321456.506 ops/s
[info] Iteration   1: 321441.333 ops/s
[info]                  ·gc.alloc.rate:            499.861 MB/sec
[info]                  ·gc.alloc.rate.norm:       2448.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.974 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3320.281 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 320228.137 ops/s
[info]                  ·gc.alloc.rate:            498.033 MB/sec
[info]                  ·gc.alloc.rate.norm:       2448.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.054 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3332.866 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 324404.058 ops/s
[info]                  ·gc.alloc.rate:      504.542 MB/sec
[info]                  ·gc.alloc.rate.norm: 2448.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 322603.859 ops/s
[info]                  ·gc.alloc.rate:            501.943 MB/sec
[info]                  ·gc.alloc.rate.norm:       2448.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.356 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3308.375 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 322284.193 ops/s
[info]                  ·gc.alloc.rate:            501.409 MB/sec
[info]                  ·gc.alloc.rate.norm:       2448.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.279 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3311.525 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce":
[info]   322192.316 ±(99.9%) 5931.612 ops/s [Average]
[info]   (min, avg, max) = (320228.137, 322192.316, 324404.058), stdev = 1540.421
[info]   CI (99.9%): [316260.704, 328123.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   501.158 ±(99.9%) 9.349 MB/sec [Average]
[info]   (min, avg, max) = (498.033, 501.158, 504.542), stdev = 2.428
[info]   CI (99.9%): [491.808, 510.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2448.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2448.001, 2448.001, 2448.001), stdev = 0.001
[info]   CI (99.9%): [2448.001, 2448.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   542.532 ±(99.9%) 1167.842 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 542.532, 678.356), stdev = 303.285
[info]   CI (99.9%): [≈ 0, 1710.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2654.609 ±(99.9%) 5714.364 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2654.609, 3332.866), stdev = 1484.002
[info]   CI (99.9%): [≈ 0, 8368.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 4.000), stdev = 1.732
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 12.00% complete, ETA 01:39:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 71022.243 ops/s
[info] # Warmup Iteration   2: 1223791.973 ops/s
[info] # Warmup Iteration   3: 1218108.976 ops/s
[info] # Warmup Iteration   4: 1223982.252 ops/s
[info] # Warmup Iteration   5: 1191812.910 ops/s
[info] Iteration   1: 1160826.742 ops/s
[info]                  ·gc.alloc.rate:            536.994 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.888 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 914.944 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 1139289.575 ops/s
[info]                  ·gc.alloc.rate:            527.157 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.732 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 931.800 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 1208983.124 ops/s
[info]                  ·gc.alloc.rate:      559.337 MB/sec
[info]                  ·gc.alloc.rate.norm: 728.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1150973.387 ops/s
[info]                  ·gc.alloc.rate:            532.481 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.945 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 922.774 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 1173571.584 ops/s
[info]                  ·gc.alloc.rate:            542.779 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.750 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 905.007 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava":
[info]   1166728.882 ±(99.9%) 103112.271 ops/s [Average]
[info]   (min, avg, max) = (1139289.575, 1166728.882, 1208983.124), stdev = 26777.929
[info]   CI (99.9%): [1063616.611, 1269841.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   539.749 ±(99.9%) 47.624 MB/sec [Average]
[info]   (min, avg, max) = (527.157, 539.749, 559.337), stdev = 12.368
[info]   CI (99.9%): [492.126, 587.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   728.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (728.000, 728.000, 728.000), stdev = 0.001
[info]   CI (99.9%): [728.000, 728.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   539.863 ±(99.9%) 1162.096 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.863, 674.945), stdev = 301.793
[info]   CI (99.9%): [≈ 0, 1701.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   734.905 ±(99.9%) 1582.395 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 734.905, 931.800), stdev = 410.943
[info]   CI (99.9%): [≈ 0, 2317.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.200, 6.000), stdev = 2.387
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 12.24% complete, ETA 01:39:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 629838.457 ops/s
[info] # Warmup Iteration   2: 955949.281 ops/s
[info] # Warmup Iteration   3: 994497.739 ops/s
[info] # Warmup Iteration   4: 995232.119 ops/s
[info] # Warmup Iteration   5: 991885.078 ops/s
[info] Iteration   1: 986625.887 ops/s
[info]                  ·gc.alloc.rate:            696.991 MB/sec
[info]                  ·gc.alloc.rate.norm:       1112.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.360 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1080.681 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 995915.923 ops/s
[info]                  ·gc.alloc.rate:            703.651 MB/sec
[info]                  ·gc.alloc.rate.norm:       1112.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.451 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1070.595 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 995111.708 ops/s
[info]                  ·gc.alloc.rate:                   702.942 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.650 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1070.409 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.054 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 968211.300 ops/s
[info]                  ·gc.alloc.rate:            684.038 MB/sec
[info]                  ·gc.alloc.rate.norm:       1112.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.430 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1101.259 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 995339.491 ops/s
[info]                  ·gc.alloc.rate:            703.243 MB/sec
[info]                  ·gc.alloc.rate.norm:       1112.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.456 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1071.226 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala":
[info]   988240.862 ±(99.9%) 45573.518 ops/s [Average]
[info]   (min, avg, max) = (968211.300, 988240.862, 995915.923), stdev = 11835.298
[info]   CI (99.9%): [942667.344, 1033814.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   698.173 ±(99.9%) 32.197 MB/sec [Average]
[info]   (min, avg, max) = (684.038, 698.173, 703.651), stdev = 8.361
[info]   CI (99.9%): [665.976, 730.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1112.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1112.000, 1112.000, 1112.000), stdev = 0.001
[info]   CI (99.9%): [1112.000, 1112.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   677.270 ±(99.9%) 1.341 MB/sec [Average]
[info]   (min, avg, max) = (676.650, 677.270, 677.456), stdev = 0.348
[info]   CI (99.9%): [675.929, 678.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1078.834 ±(99.9%) 51.049 B/op [Average]
[info]   (min, avg, max) = (1070.409, 1078.834, 1101.259), stdev = 13.257
[info]   CI (99.9%): [1027.784, 1129.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.211 ±(99.9%) 1.814 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.211, 1.054), stdev = 0.471
[info]   CI (99.9%): [≈ 0, 2.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 12.47% complete, ETA 01:38:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2132201.482 ops/s
[info] # Warmup Iteration   2: 2385334.539 ops/s
[info] # Warmup Iteration   3: 2425136.164 ops/s
[info] # Warmup Iteration   4: 2491797.921 ops/s
[info] # Warmup Iteration   5: 2482640.789 ops/s
[info] Iteration   1: 2507972.975 ops/s
[info]                  ·gc.alloc.rate:            1159.993 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.075 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 425.554 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 2481832.056 ops/s
[info]                  ·gc.alloc.rate:            1147.995 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.932 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 859.229 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 2484068.580 ops/s
[info]                  ·gc.alloc.rate:                   1148.977 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.528 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        858.872 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.422 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 2489189.385 ops/s
[info]                  ·gc.alloc.rate:            1152.830 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1351.841 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 853.673 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 2486234.062 ops/s
[info]                  ·gc.alloc.rate:                   1150.080 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.498 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        428.856 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.530 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala":
[info]   2489859.412 ±(99.9%) 40370.538 ops/s [Average]
[info]   (min, avg, max) = (2481832.056, 2489859.412, 2507972.975), stdev = 10484.101
[info]   CI (99.9%): [2449488.873, 2530229.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1151.975 ±(99.9%) 18.610 MB/sec [Average]
[info]   (min, avg, max) = (1147.995, 1151.975, 1159.993), stdev = 4.833
[info]   CI (99.9%): [1133.365, 1170.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (728.000, 728.000, 728.000), stdev = 0.001
[info]   CI (99.9%): [728.000, 728.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1083.575 ±(99.9%) 1426.413 MB/sec [Average]
[info]   (min, avg, max) = (677.498, 1083.575, 1355.528), stdev = 370.435
[info]   CI (99.9%): [≈ 0, 2509.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   685.237 ±(99.9%) 907.070 B/op [Average]
[info]   (min, avg, max) = (425.554, 685.237, 859.229), stdev = 235.563
[info]   CI (99.9%): [≈ 0, 1592.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.689 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.997), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.590 ±(99.9%) 4.234 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.590, 2.530), stdev = 1.100
[info]   CI (99.9%): [≈ 0, 4.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 11.000), stdev = 2.881
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 12.71% complete, ETA 01:38:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1804991.684 ops/s
[info] # Warmup Iteration   2: 1979519.697 ops/s
[info] # Warmup Iteration   3: 1983603.603 ops/s
[info] # Warmup Iteration   4: 1984094.479 ops/s
[info] # Warmup Iteration   5: 1982906.035 ops/s
[info] Iteration   1: 1983294.688 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1983429.383 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1989858.952 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1991895.915 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1990151.516 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   1987726.091 ±(99.9%) 15631.700 ops/s [Average]
[info]   (min, avg, max) = (1983294.688, 1987726.091, 1991895.915), stdev = 4059.503
[info]   CI (99.9%): [1972094.391, 2003357.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 12.94% complete, ETA 01:38:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 305175.839 ops/s
[info] # Warmup Iteration   2: 401499.920 ops/s
[info] # Warmup Iteration   3: 418618.508 ops/s
[info] # Warmup Iteration   4: 415987.890 ops/s
[info] # Warmup Iteration   5: 404073.878 ops/s
[info] Iteration   1: 417187.383 ops/s
[info]                  ·gc.alloc.rate:            487.673 MB/sec
[info]                  ·gc.alloc.rate.norm:       1840.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.372 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2555.737 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 419402.708 ops/s
[info]                  ·gc.alloc.rate:      490.243 MB/sec
[info]                  ·gc.alloc.rate.norm: 1840.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 417593.540 ops/s
[info]                  ·gc.alloc.rate:            488.106 MB/sec
[info]                  ·gc.alloc.rate.norm:       1840.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.315 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2553.259 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 418151.869 ops/s
[info]                  ·gc.alloc.rate:            488.750 MB/sec
[info]                  ·gc.alloc.rate.norm:       1840.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.298 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2549.828 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 413777.250 ops/s
[info]                  ·gc.alloc.rate:            483.704 MB/sec
[info]                  ·gc.alloc.rate.norm:       1840.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.373 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2576.715 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson":
[info]   417222.550 ±(99.9%) 8083.071 ops/s [Average]
[info]   (min, avg, max) = (413777.250, 417222.550, 419402.708), stdev = 2099.148
[info]   CI (99.9%): [409139.479, 425305.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   487.695 ±(99.9%) 9.373 MB/sec [Average]
[info]   (min, avg, max) = (483.704, 487.695, 490.243), stdev = 2.434
[info]   CI (99.9%): [478.322, 497.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1840.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1840.001, 1840.001, 1840.001), stdev = 0.001
[info]   CI (99.9%): [1840.001, 1840.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   541.872 ±(99.9%) 1166.420 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 541.872, 677.373), stdev = 302.915
[info]   CI (99.9%): [≈ 0, 1708.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   2047.108 ±(99.9%) 4406.740 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2047.108, 2576.715), stdev = 1144.416
[info]   CI (99.9%): [≈ 0, 6453.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.400, 5.000), stdev = 1.949
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 13.18% complete, ETA 01:38:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 117887.803 ops/s
[info] # Warmup Iteration   2: 140435.815 ops/s
[info] # Warmup Iteration   3: 140403.538 ops/s
[info] # Warmup Iteration   4: 138602.761 ops/s
[info] # Warmup Iteration   5: 140555.034 ops/s
[info] Iteration   1: 141092.107 ops/s
[info]                  ·gc.alloc.rate:            1695.972 MB/sec
[info]                  ·gc.alloc.rate.norm:       18920.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.161 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 15129.123 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 140552.765 ops/s
[info]                  ·gc.alloc.rate:                   1689.938 MB/sec
[info]                  ·gc.alloc.rate.norm:              18920.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2038.151 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        22818.482 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 37.297 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 141814.701 ops/s
[info]                  ·gc.alloc.rate:                                  1704.658 MB/sec
[info]                  ·gc.alloc.rate.norm:                             18920.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.015 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.168 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.848 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       15126.251 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 141687.216 ops/s
[info]                  ·gc.alloc.rate:                                  1703.148 MB/sec
[info]                  ·gc.alloc.rate.norm:                             18920.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.037 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.291 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       22709.712 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 142066.786 ops/s
[info]                  ·gc.alloc.rate:            1707.717 MB/sec
[info]                  ·gc.alloc.rate.norm:       18920.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.853 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 15099.211 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce":
[info]   141442.715 ±(99.9%) 2360.037 ops/s [Average]
[info]   (min, avg, max) = (140552.765, 141442.715, 142066.786), stdev = 612.894
[info]   CI (99.9%): [139082.678, 143802.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate":
[info]   1700.287 ±(99.9%) 27.782 MB/sec [Average]
[info]   (min, avg, max) = (1689.938, 1700.287, 1707.717), stdev = 7.215
[info]   CI (99.9%): [1672.505, 1728.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   18920.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (18920.003, 18920.003, 18920.003), stdev = 0.001
[info]   CI (99.9%): [18920.003, 18920.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.004 ±(99.9%) 0.025 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.015), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.041 ±(99.9%) 0.281 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.041, 0.168), stdev = 0.073
[info]   CI (99.9%): [≈ 0, 0.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1632.861 ±(99.9%) 1435.507 MB/sec [Average]
[info]   (min, avg, max) = (1356.161, 1632.861, 2044.291), stdev = 372.797
[info]   CI (99.9%): [197.354, 3068.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   18176.556 ±(99.9%) 16126.596 B/op [Average]
[info]   (min, avg, max) = (15099.211, 18176.556, 22818.482), stdev = 4188.026
[info]   CI (99.9%): [2049.960, 34303.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   7.459 ±(99.9%) 64.228 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.459, 37.297), stdev = 16.680
[info]   CI (99.9%): [≈ 0, 71.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 9.000), stdev = 2.828
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 13.41% complete, ETA 01:37:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 236389.544 ops/s
[info] # Warmup Iteration   2: 369259.660 ops/s
[info] # Warmup Iteration   3: 359597.477 ops/s
[info] # Warmup Iteration   4: 370342.609 ops/s
[info] # Warmup Iteration   5: 362120.389 ops/s
[info] Iteration   1: 370140.878 ops/s
[info]                  ·gc.alloc.rate:      314.167 MB/sec
[info]                  ·gc.alloc.rate.norm: 1336.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 368451.418 ops/s
[info]                  ·gc.alloc.rate:            312.735 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.426 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2893.954 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 370217.541 ops/s
[info]                  ·gc.alloc.rate:      314.289 MB/sec
[info]                  ·gc.alloc.rate.norm: 1336.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 370309.047 ops/s
[info]                  ·gc.alloc.rate:      314.312 MB/sec
[info]                  ·gc.alloc.rate.norm: 1336.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 367980.552 ops/s
[info]                  ·gc.alloc.rate:            312.387 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.514 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2897.555 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala":
[info]   369419.887 ±(99.9%) 4286.297 ops/s [Average]
[info]   (min, avg, max) = (367980.552, 369419.887, 370309.047), stdev = 1113.138
[info]   CI (99.9%): [365133.590, 373706.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   313.578 ±(99.9%) 3.612 MB/sec [Average]
[info]   (min, avg, max) = (312.387, 313.578, 314.312), stdev = 0.938
[info]   CI (99.9%): [309.966, 317.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1336.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1336.001, 1336.001, 1336.001), stdev = 0.001
[info]   CI (99.9%): [1336.001, 1336.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   270.988 ±(99.9%) 1428.841 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 270.988, 677.514), stdev = 371.066
[info]   CI (99.9%): [≈ 0, 1699.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1158.302 ±(99.9%) 6107.393 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1158.302, 2897.555), stdev = 1586.071
[info]   CI (99.9%): [≈ 0, 7265.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 5.000), stdev = 2.490
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 13.65% complete, ETA 01:37:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 774515.105 ops/s
[info] # Warmup Iteration   2: 817208.907 ops/s
[info] # Warmup Iteration   3: 811054.841 ops/s
[info] # Warmup Iteration   4: 812884.672 ops/s
[info] # Warmup Iteration   5: 808763.466 ops/s
[info] Iteration   1: 819459.065 ops/s
[info]                  ·gc.alloc.rate:      158.275 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 820390.657 ops/s
[info]                  ·gc.alloc.rate:      158.462 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 820054.947 ops/s
[info]                  ·gc.alloc.rate:      158.383 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 803622.472 ops/s
[info]                  ·gc.alloc.rate:            155.257 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.929 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1329.377 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 815475.032 ops/s
[info]                  ·gc.alloc.rate:      157.533 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala":
[info]   815800.434 ±(99.9%) 27293.791 ops/s [Average]
[info]   (min, avg, max) = (803622.472, 815800.434, 820390.657), stdev = 7088.111
[info]   CI (99.9%): [788506.644, 843094.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   157.582 ±(99.9%) 5.204 MB/sec [Average]
[info]   (min, avg, max) = (155.257, 157.582, 158.462), stdev = 1.351
[info]   CI (99.9%): [152.378, 162.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   304.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (304.000, 304.001, 304.001), stdev = 0.001
[info]   CI (99.9%): [304.000, 304.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   135.786 ±(99.9%) 1169.156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 135.786, 678.929), stdev = 303.626
[info]   CI (99.9%): [≈ 0, 1304.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   265.875 ±(99.9%) 2289.268 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 265.875, 1329.377), stdev = 594.516
[info]   CI (99.9%): [≈ 0, 2555.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.time":
[info]   3.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 3.000), stdev = 1.342
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 13.88% complete, ETA 01:37:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42173.165 ops/s
[info] # Warmup Iteration   2: 75893.200 ops/s
[info] # Warmup Iteration   3: 75614.447 ops/s
[info] # Warmup Iteration   4: 76526.142 ops/s
[info] # Warmup Iteration   5: 76852.083 ops/s
[info] Iteration   1: 76729.002 ops/s
[info]                  ·gc.alloc.rate:                                  3267.430 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67016.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.098 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3407.623 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       69891.403 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 76877.512 ops/s
[info]                  ·gc.alloc.rate:                                  3273.314 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67016.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.054 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3407.144 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       69755.963 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 76813.688 ops/s
[info]                  ·gc.alloc.rate:                                  3271.901 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67016.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.107 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3408.599 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       69815.892 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 76865.158 ops/s
[info]                  ·gc.alloc.rate:                                  3272.740 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67016.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.107 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3407.167 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       69768.667 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 76917.021 ops/s
[info]                  ·gc.alloc.rate:                                  3274.852 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67016.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.161 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.436 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       55772.854 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson":
[info]   76840.476 ±(99.9%) 278.901 ops/s [Average]
[info]   (min, avg, max) = (76729.002, 76840.476, 76917.021), stdev = 72.430
[info]   CI (99.9%): [76561.576, 77119.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3272.048 ±(99.9%) 10.769 MB/sec [Average]
[info]   (min, avg, max) = (3267.430, 3272.048, 3274.852), stdev = 2.797
[info]   CI (99.9%): [3261.278, 3282.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   67016.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (67016.005, 67016.005, 67016.005), stdev = 0.001
[info]   CI (99.9%): [67016.005, 67016.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.005 ±(99.9%) 0.007 MB/sec [Average]
[info]   (min, avg, max) = (0.003, 0.005, 0.008), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.106 ±(99.9%) 0.147 B/op [Average]
[info]   (min, avg, max) = (0.054, 0.106, 0.161), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   3271.194 ±(99.9%) 1174.787 MB/sec [Average]
[info]   (min, avg, max) = (2725.436, 3271.194, 3408.599), stdev = 305.088
[info]   CI (99.9%): [2096.407, 4445.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   67000.956 ±(99.9%) 24170.199 B/op [Average]
[info]   (min, avg, max) = (55772.854, 67000.956, 69891.403), stdev = 6276.924
[info]   CI (99.9%): [42830.756, 91171.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 14.12% complete, ETA 01:36:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 207868.251 ops/s
[info] # Warmup Iteration   2: 264903.425 ops/s
[info] # Warmup Iteration   3: 267278.513 ops/s
[info] # Warmup Iteration   4: 266309.423 ops/s
[info] # Warmup Iteration   5: 266090.078 ops/s
[info] Iteration   1: 266148.706 ops/s
[info]                  ·gc.alloc.rate:            1178.138 MB/sec
[info]                  ·gc.alloc.rate.norm:       6968.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.080 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8020.425 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 257384.913 ops/s
[info]                  ·gc.alloc.rate:            1139.618 MB/sec
[info]                  ·gc.alloc.rate.norm:       6968.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.164 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4146.517 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 257968.735 ops/s
[info]                  ·gc.alloc.rate:            1142.402 MB/sec
[info]                  ·gc.alloc.rate.norm:       6968.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.590 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8274.424 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 257517.456 ops/s
[info]                  ·gc.alloc.rate:            1140.080 MB/sec
[info]                  ·gc.alloc.rate.norm:       6968.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.214 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8288.977 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 258716.086 ops/s
[info]                  ·gc.alloc.rate:                   1145.617 MB/sec
[info]                  ·gc.alloc.rate.norm:              6968.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             678.235 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4125.237 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 20.261 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce":
[info]   259547.179 ±(99.9%) 14350.758 ops/s [Average]
[info]   (min, avg, max) = (257384.913, 259547.179, 266148.706), stdev = 3726.846
[info]   CI (99.9%): [245196.422, 273897.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1149.171 ±(99.9%) 63.021 MB/sec [Average]
[info]   (min, avg, max) = (1139.618, 1149.171, 1178.138), stdev = 16.366
[info]   CI (99.9%): [1086.150, 1212.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   6968.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6968.002, 6968.002, 6968.002), stdev = 0.001
[info]   CI (99.9%): [6968.001, 6968.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1085.056 ±(99.9%) 1430.161 MB/sec [Average]
[info]   (min, avg, max) = (678.164, 1085.056, 1356.590), stdev = 371.408
[info]   CI (99.9%): [≈ 0, 2515.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   6571.116 ±(99.9%) 8570.129 B/op [Average]
[info]   (min, avg, max) = (4125.237, 6571.116, 8288.977), stdev = 2225.635
[info]   CI (99.9%): [≈ 0, 15141.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   4.052 ±(99.9%) 34.891 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.052, 20.261), stdev = 9.061
[info]   CI (99.9%): [≈ 0, 38.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 8.000), stdev = 2.049
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 14.35% complete, ETA 01:36:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1098285.260 ops/s
[info] # Warmup Iteration   2: 1847147.272 ops/s
[info] # Warmup Iteration   3: 1873134.228 ops/s
[info] # Warmup Iteration   4: 1865227.648 ops/s
[info] # Warmup Iteration   5: 1861609.026 ops/s
[info] Iteration   1: 1857335.286 ops/s
[info]                  ·gc.alloc.rate:            953.316 MB/sec
[info]                  ·gc.alloc.rate.norm:       808.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.284 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 574.044 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 1848574.211 ops/s
[info]                  ·gc.alloc.rate:            949.158 MB/sec
[info]                  ·gc.alloc.rate.norm:       808.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.065 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1153.541 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 1833469.811 ops/s
[info]                  ·gc.alloc.rate:            941.087 MB/sec
[info]                  ·gc.alloc.rate.norm:       808.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.318 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 581.533 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 1818995.727 ops/s
[info]                  ·gc.alloc.rate:            934.023 MB/sec
[info]                  ·gc.alloc.rate.norm:       808.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.168 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1172.322 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 1830018.764 ops/s
[info]                  ·gc.alloc.rate:            939.438 MB/sec
[info]                  ·gc.alloc.rate.norm:       808.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.380 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 582.607 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala":
[info]   1837678.760 ±(99.9%) 58731.359 ops/s [Average]
[info]   (min, avg, max) = (1818995.727, 1837678.760, 1857335.286), stdev = 15252.348
[info]   CI (99.9%): [1778947.400, 1896410.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   943.404 ±(99.9%) 29.855 MB/sec [Average]
[info]   (min, avg, max) = (934.023, 943.404, 953.316), stdev = 7.753
[info]   CI (99.9%): [913.549, 973.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   808.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (808.000, 808.000, 808.000), stdev = 0.001
[info]   CI (99.9%): [808.000, 808.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   948.443 ±(99.9%) 1429.514 MB/sec [Average]
[info]   (min, avg, max) = (677.284, 948.443, 1355.168), stdev = 371.240
[info]   CI (99.9%): [≈ 0, 2377.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   812.810 ±(99.9%) 1231.059 B/op [Average]
[info]   (min, avg, max) = (574.044, 812.810, 1172.322), stdev = 319.702
[info]   CI (99.9%): [≈ 0, 2043.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 9.000), stdev = 2.588
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 14.59% complete, ETA 01:36:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1900839.825 ops/s
[info] # Warmup Iteration   2: 2092477.355 ops/s
[info] # Warmup Iteration   3: 2103055.360 ops/s
[info] # Warmup Iteration   4: 2128770.757 ops/s
[info] # Warmup Iteration   5: 2113377.406 ops/s
[info] Iteration   1: 2140695.396 ops/s
[info]                  ·gc.alloc.rate:      576.689 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2101397.204 ops/s
[info]                  ·gc.alloc.rate:            566.159 MB/sec
[info]                  ·gc.alloc.rate.norm:       424.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.171 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 507.887 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 2132784.094 ops/s
[info]                  ·gc.alloc.rate:            574.469 MB/sec
[info]                  ·gc.alloc.rate.norm:       424.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.335 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 499.923 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 2135860.629 ops/s
[info]                  ·gc.alloc.rate:            575.404 MB/sec
[info]                  ·gc.alloc.rate.norm:       424.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.472 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 499.212 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 2137233.777 ops/s
[info]                  ·gc.alloc.rate:                   575.703 MB/sec
[info]                  ·gc.alloc.rate.norm:              424.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.357 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        498.868 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.491 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala":
[info]   2129594.220 ±(99.9%) 61673.862 ops/s [Average]
[info]   (min, avg, max) = (2101397.204, 2129594.220, 2140695.396), stdev = 16016.506
[info]   CI (99.9%): [2067920.358, 2191268.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   573.685 ±(99.9%) 16.485 MB/sec [Average]
[info]   (min, avg, max) = (566.159, 573.685, 576.689), stdev = 4.281
[info]   CI (99.9%): [557.200, 590.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   424.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (424.000, 424.000, 424.000), stdev = 0.001
[info]   CI (99.9%): [424.000, 424.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   542.067 ±(99.9%) 1166.841 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 542.067, 678.171), stdev = 303.025
[info]   CI (99.9%): [≈ 0, 1708.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   401.178 ±(99.9%) 863.685 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 401.178, 507.887), stdev = 224.296
[info]   CI (99.9%): [≈ 0, 1264.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.098 ±(99.9%) 0.845 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.098, 0.491), stdev = 0.219
[info]   CI (99.9%): [≈ 0, 0.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 14.82% complete, ETA 01:36:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2229062.885 ops/s
[info] # Warmup Iteration   2: 2434448.535 ops/s
[info] # Warmup Iteration   3: 2215165.445 ops/s
[info] # Warmup Iteration   4: 2437806.531 ops/s
[info] # Warmup Iteration   5: 2410625.403 ops/s
[info] Iteration   1: 2449394.253 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2401786.609 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2436044.742 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2449338.972 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2439829.555 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc":
[info]   2435278.826 ±(99.9%) 75554.044 ops/s [Average]
[info]   (min, avg, max) = (2401786.609, 2435278.826, 2449394.253), stdev = 19621.145
[info]   CI (99.9%): [2359724.783, 2510832.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 15.06% complete, ETA 01:35:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26231.042 ops/s
[info] # Warmup Iteration   2: 39368.574 ops/s
[info] # Warmup Iteration   3: 39667.356 ops/s
[info] # Warmup Iteration   4: 38898.280 ops/s
[info] # Warmup Iteration   5: 38724.227 ops/s
[info] Iteration   1: 39782.620 ops/s
[info]                  ·gc.alloc.rate:            1683.509 MB/sec
[info]                  ·gc.alloc.rate.norm:       66608.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.805 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 53602.845 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 39665.252 ops/s
[info]                  ·gc.alloc.rate:                   1678.313 MB/sec
[info]                  ·gc.alloc.rate.norm:              66608.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2031.961 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        80643.427 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 158.591 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 40026.182 ops/s
[info]                  ·gc.alloc.rate:                                  1693.717 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66608.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.181 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 7.136 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.636 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       53587.773 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 39762.846 ops/s
[info]                  ·gc.alloc.rate:                                  1682.654 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66608.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.016 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.635 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.135 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       80917.268 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   5: 40112.907 ops/s
[info]                  ·gc.alloc.rate:            1697.729 MB/sec
[info]                  ·gc.alloc.rate.norm:       66608.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.971 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 53474.240 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson":
[info]   39869.961 ±(99.9%) 731.713 ops/s [Average]
[info]   (min, avg, max) = (39665.252, 39869.961, 40112.907), stdev = 190.024
[info]   CI (99.9%): [39138.248, 40601.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1687.184 ±(99.9%) 31.436 MB/sec [Average]
[info]   (min, avg, max) = (1678.313, 1687.184, 1697.729), stdev = 8.164
[info]   CI (99.9%): [1655.749, 1718.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   66608.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (66608.010, 66608.010, 66608.010), stdev = 0.001
[info]   CI (99.9%): [66608.010, 66608.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.040 ±(99.9%) 0.307 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.040, 0.181), stdev = 0.080
[info]   CI (99.9%): [≈ 0, 0.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.554 ±(99.9%) 12.062 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.554, 7.136), stdev = 3.132
[info]   CI (99.9%): [≈ 0, 13.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1631.302 ±(99.9%) 1429.923 MB/sec [Average]
[info]   (min, avg, max) = (1354.805, 1631.302, 2044.135), stdev = 371.346
[info]   CI (99.9%): [201.379, 3061.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   64445.110 ±(99.9%) 57422.189 B/op [Average]
[info]   (min, avg, max) = (53474.240, 64445.110, 80917.268), stdev = 14912.360
[info]   CI (99.9%): [7022.922, 121867.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   31.718 ±(99.9%) 273.103 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 31.718, 158.591), stdev = 70.924
[info]   CI (99.9%): [≈ 0, 304.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.800, 14.000), stdev = 4.764
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 15.29% complete, ETA 01:35:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 181933.558 ops/s
[info] # Warmup Iteration   2: 213360.850 ops/s
[info] # Warmup Iteration   3: 214899.927 ops/s
[info] # Warmup Iteration   4: 212595.154 ops/s
[info] # Warmup Iteration   5: 213779.617 ops/s
[info] Iteration   1: 214034.219 ops/s
[info]                  ·gc.alloc.rate:                                  2202.772 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16200.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.111 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.819 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.120 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       20019.480 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                24.492 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   2: 215296.282 ops/s
[info]                  ·gc.alloc.rate:                                  2215.806 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16200.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.031 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.123 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       14944.805 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 215456.475 ops/s
[info]                  ·gc.alloc.rate:            2217.398 MB/sec
[info]                  ·gc.alloc.rate.norm:       16200.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.063 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14933.639 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 212565.033 ops/s
[info]                  ·gc.alloc.rate:                                  2188.031 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16200.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.447 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       15136.924 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 215133.624 ops/s
[info]                  ·gc.alloc.rate:                                  2214.111 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16200.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.259 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       19939.926 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce":
[info]   214497.127 ±(99.9%) 4681.105 ops/s [Average]
[info]   (min, avg, max) = (212565.033, 214497.127, 215456.475), stdev = 1215.668
[info]   CI (99.9%): [209816.021, 219178.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   2207.624 ±(99.9%) 47.630 MB/sec [Average]
[info]   (min, avg, max) = (2188.031, 2207.624, 2217.398), stdev = 12.369
[info]   CI (99.9%): [2159.993, 2255.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   16200.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16200.002, 16200.002, 16200.002), stdev = 0.001
[info]   CI (99.9%): [16200.002, 16200.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.024 ±(99.9%) 0.188 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.111), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.177 ±(99.9%) 1.384 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.177, 0.819), stdev = 0.359
[info]   CI (99.9%): [≈ 0, 1.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2316.002 ±(99.9%) 1433.084 MB/sec [Average]
[info]   (min, avg, max) = (2044.063, 2316.002, 2725.259), stdev = 372.167
[info]   CI (99.9%): [882.918, 3749.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   16994.955 ±(99.9%) 10496.983 B/op [Average]
[info]   (min, avg, max) = (14933.639, 16994.955, 20019.480), stdev = 2726.033
[info]   CI (99.9%): [6497.972, 27491.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   4.898 ±(99.9%) 42.176 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.898, 24.492), stdev = 10.953
[info]   CI (99.9%): [≈ 0, 47.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 8.000), stdev = 2.280
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 15.53% complete, ETA 01:35:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 185580.579 ops/s
[info] # Warmup Iteration   2: 292496.898 ops/s
[info] # Warmup Iteration   3: 291950.086 ops/s
[info] # Warmup Iteration   4: 298008.261 ops/s
[info] # Warmup Iteration   5: 303131.499 ops/s
[info] Iteration   1: 301886.295 ops/s
[info]                  ·gc.alloc.rate:            1460.706 MB/sec
[info]                  ·gc.alloc.rate.norm:       7616.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.776 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7063.690 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 297488.104 ops/s
[info]                  ·gc.alloc.rate:            1439.300 MB/sec
[info]                  ·gc.alloc.rate.norm:       7616.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2032.015 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10752.330 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 300389.042 ops/s
[info]                  ·gc.alloc.rate:                                  1453.433 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7616.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.075 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.391 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.113 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7116.526 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                24.431 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 296761.194 ops/s
[info]                  ·gc.alloc.rate:                                  1435.955 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7616.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.044 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.233 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.846 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7228.245 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 297285.926 ops/s
[info]                  ·gc.alloc.rate:                                  1438.494 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7616.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.836 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7215.434 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala":
[info]   298762.112 ±(99.9%) 8656.098 ops/s [Average]
[info]   (min, avg, max) = (296761.194, 298762.112, 301886.295), stdev = 2247.961
[info]   CI (99.9%): [290106.015, 307418.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1445.578 ±(99.9%) 41.862 MB/sec [Average]
[info]   (min, avg, max) = (1435.955, 1445.578, 1460.706), stdev = 10.871
[info]   CI (99.9%): [1403.715, 1487.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   7616.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7616.001, 7616.001, 7616.001), stdev = 0.001
[info]   CI (99.9%): [7616.001, 7616.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.024 ±(99.9%) 0.131 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.075), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.125 ±(99.9%) 0.691 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.125, 0.391), stdev = 0.179
[info]   CI (99.9%): [≈ 0, 0.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1494.117 ±(99.9%) 1157.939 MB/sec [Average]
[info]   (min, avg, max) = (1354.776, 1494.117, 2032.015), stdev = 300.713
[info]   CI (99.9%): [336.178, 2652.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   7875.245 ±(99.9%) 6198.776 B/op [Average]
[info]   (min, avg, max) = (7063.690, 7875.245, 10752.330), stdev = 1609.802
[info]   CI (99.9%): [1676.469, 14074.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   4.886 ±(99.9%) 42.072 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.886, 24.431), stdev = 10.926
[info]   CI (99.9%): [≈ 0, 46.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.000, 13.000), stdev = 4.416
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 15.76% complete, ETA 01:35:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1207788.560 ops/s
[info] # Warmup Iteration   2: 1235400.484 ops/s
[info] # Warmup Iteration   3: 1276752.847 ops/s
[info] # Warmup Iteration   4: 1273945.259 ops/s
[info] # Warmup Iteration   5: 1251054.908 ops/s
[info] Iteration   1: 1232451.576 ops/s
[info]                  ·gc.alloc.rate:      425.912 MB/sec
[info]                  ·gc.alloc.rate.norm: 544.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1216802.310 ops/s
[info]                  ·gc.alloc.rate:            420.566 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.110 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 877.132 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 1230917.499 ops/s
[info]                  ·gc.alloc.rate:            425.448 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.093 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 867.046 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 1279562.701 ops/s
[info]                  ·gc.alloc.rate:      442.317 MB/sec
[info]                  ·gc.alloc.rate.norm: 544.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1275794.802 ops/s
[info]                  ·gc.alloc.rate:            441.012 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.185 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 836.560 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala":
[info]   1247105.778 ±(99.9%) 110124.683 ops/s [Average]
[info]   (min, avg, max) = (1216802.310, 1247105.778, 1279562.701), stdev = 28599.030
[info]   CI (99.9%): [1136981.095, 1357230.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   431.051 ±(99.9%) 38.211 MB/sec [Average]
[info]   (min, avg, max) = (420.566, 431.051, 442.317), stdev = 9.923
[info]   CI (99.9%): [392.840, 469.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   544.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (544.000, 544.000, 544.000), stdev = 0.001
[info]   CI (99.9%): [544.000, 544.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   406.878 ±(99.9%) 1430.232 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 406.878, 678.185), stdev = 371.427
[info]   CI (99.9%): [≈ 0, 1837.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   516.148 ±(99.9%) 1815.243 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 516.148, 877.132), stdev = 471.413
[info]   CI (99.9%): [≈ 0, 2331.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 16.00% complete, ETA 01:34:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31673.605 ops/s
[info] # Warmup Iteration   2: 70797.551 ops/s
[info] # Warmup Iteration   3: 72967.409 ops/s
[info] # Warmup Iteration   4: 72430.843 ops/s
[info] # Warmup Iteration   5: 74176.940 ops/s
[info] Iteration   1: 74211.237 ops/s
[info]                  ·gc.alloc.rate:                                  3118.476 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66144.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.052 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.407 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       57806.873 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   2: 74411.558 ops/s
[info]                  ·gc.alloc.rate:                                  3127.278 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66144.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.187 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3407.286 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       72066.353 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 74361.862 ops/s
[info]                  ·gc.alloc.rate:            3125.705 MB/sec
[info]                  ·gc.alloc.rate.norm:       66144.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2726.069 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 57687.187 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 73438.331 ops/s
[info]                  ·gc.alloc.rate:                                  3086.195 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66144.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.169 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3407.067 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       73021.010 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 74500.061 ops/s
[info]                  ·gc.alloc.rate:                                  3130.999 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66144.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.111 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.775 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       57583.447 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson":
[info]   74184.610 ±(99.9%) 1656.308 ops/s [Average]
[info]   (min, avg, max) = (73438.331, 74184.610, 74500.061), stdev = 430.138
[info]   CI (99.9%): [72528.302, 75840.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3117.730 ±(99.9%) 70.105 MB/sec [Average]
[info]   (min, avg, max) = (3086.195, 3117.730, 3130.999), stdev = 18.206
[info]   CI (99.9%): [3047.625, 3187.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66144.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (66144.005, 66144.006, 66144.006), stdev = 0.001
[info]   CI (99.9%): [66144.005, 66144.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.005 ±(99.9%) 0.014 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.009), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.104 ±(99.9%) 0.302 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.104, 0.187), stdev = 0.079
[info]   CI (99.9%): [≈ 0, 0.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2998.321 ±(99.9%) 1437.185 MB/sec [Average]
[info]   (min, avg, max) = (2725.407, 2998.321, 3407.286), stdev = 373.232
[info]   CI (99.9%): [1561.135, 4435.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   63632.974 ±(99.9%) 31350.823 B/op [Average]
[info]   (min, avg, max) = (57583.447, 63632.974, 73021.010), stdev = 8141.709
[info]   CI (99.9%): [32282.152, 94983.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 8.000), stdev = 0.894
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 16.24% complete, ETA 01:34:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 151710.917 ops/s
[info] # Warmup Iteration   2: 209644.377 ops/s
[info] # Warmup Iteration   3: 210928.078 ops/s
[info] # Warmup Iteration   4: 215396.706 ops/s
[info] # Warmup Iteration   5: 214753.430 ops/s
[info] Iteration   1: 214328.090 ops/s
[info]                  ·gc.alloc.rate:            1819.086 MB/sec
[info]                  ·gc.alloc.rate.norm:       13360.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2034.070 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14938.917 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 215064.336 ops/s
[info]                  ·gc.alloc.rate:                                  1826.205 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13360.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.038 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1360.021 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9949.529 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                24.374 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   3: 215913.895 ops/s
[info]                  ·gc.alloc.rate:                                  1832.475 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13360.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.112 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.819 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2043.907 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       14901.484 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 217162.767 ops/s
[info]                  ·gc.alloc.rate:            1843.158 MB/sec
[info]                  ·gc.alloc.rate.norm:       13360.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.085 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14816.410 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 216175.608 ops/s
[info]                  ·gc.alloc.rate:                                  1835.514 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13360.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.863 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       14883.771 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce":
[info]   215728.939 ±(99.9%) 4171.182 ops/s [Average]
[info]   (min, avg, max) = (214328.090, 215728.939, 217162.767), stdev = 1083.243
[info]   CI (99.9%): [211557.757, 219900.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1831.288 ±(99.9%) 35.233 MB/sec [Average]
[info]   (min, avg, max) = (1819.086, 1831.288, 1843.158), stdev = 9.150
[info]   CI (99.9%): [1796.055, 1866.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   13360.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13360.002, 13360.002, 13360.002), stdev = 0.001
[info]   CI (99.9%): [13360.002, 13360.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.024 ±(99.9%) 0.190 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.112), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.175 ±(99.9%) 1.388 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.175, 0.819), stdev = 0.361
[info]   CI (99.9%): [≈ 0, 1.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1905.389 ±(99.9%) 1174.071 MB/sec [Average]
[info]   (min, avg, max) = (1360.021, 1905.389, 2044.863), stdev = 304.903
[info]   CI (99.9%): [731.318, 3079.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   13898.022 ±(99.9%) 8501.149 B/op [Average]
[info]   (min, avg, max) = (9949.529, 13898.022, 14938.917), stdev = 2207.721
[info]   CI (99.9%): [5396.873, 22399.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.332), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   4.875 ±(99.9%) 41.974 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.875, 24.374), stdev = 10.900
[info]   CI (99.9%): [≈ 0, 46.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.600, 12.000), stdev = 3.507
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 16.47% complete, ETA 01:34:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 725598.048 ops/s
[info] # Warmup Iteration   2: 1095657.073 ops/s
[info] # Warmup Iteration   3: 1099180.674 ops/s
[info] # Warmup Iteration   4: 1098858.465 ops/s
[info] # Warmup Iteration   5: 1109114.460 ops/s
[info] Iteration   1: 1126761.583 ops/s
[info]                  ·gc.alloc.rate:            658.563 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.373 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 946.278 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 1143627.437 ops/s
[info]                  ·gc.alloc.rate:            668.480 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.432 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 932.321 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 1143382.972 ops/s
[info]                  ·gc.alloc.rate:            668.245 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.335 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 932.514 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 1145168.849 ops/s
[info]                  ·gc.alloc.rate:            669.587 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.645 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 931.071 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 1142957.194 ops/s
[info]                  ·gc.alloc.rate:            668.023 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.373 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 932.878 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala":
[info]   1140379.607 ±(99.9%) 29489.496 ops/s [Average]
[info]   (min, avg, max) = (1126761.583, 1140379.607, 1145168.849), stdev = 7658.328
[info]   CI (99.9%): [1110890.111, 1169869.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   666.580 ±(99.9%) 17.410 MB/sec [Average]
[info]   (min, avg, max) = (658.563, 666.580, 669.587), stdev = 4.521
[info]   CI (99.9%): [649.169, 683.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   920.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (920.000, 920.000, 920.000), stdev = 0.001
[info]   CI (99.9%): [920.000, 920.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   677.432 ±(99.9%) 0.478 MB/sec [Average]
[info]   (min, avg, max) = (677.335, 677.432, 677.645), stdev = 0.124
[info]   CI (99.9%): [676.954, 677.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   935.012 ±(99.9%) 24.390 B/op [Average]
[info]   (min, avg, max) = (931.071, 935.012, 946.278), stdev = 6.334
[info]   CI (99.9%): [910.623, 959.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 16.71% complete, ETA 01:34:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2730744.520 ops/s
[info] # Warmup Iteration   2: 3048560.097 ops/s
[info] # Warmup Iteration   3: 2964892.526 ops/s
[info] # Warmup Iteration   4: 3088434.282 ops/s
[info] # Warmup Iteration   5: 3086251.823 ops/s
[info] Iteration   1: 3084734.714 ops/s
[info]                  ·gc.alloc.rate:            1050.456 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.137 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 691.975 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 3101424.937 ops/s
[info]                  ·gc.alloc.rate:            1056.360 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.541 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 343.786 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 3065655.123 ops/s
[info]                  ·gc.alloc.rate:                   1044.077 MB/sec
[info]                  ·gc.alloc.rate.norm:              536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.624 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        695.940 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.342 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 3022371.237 ops/s
[info]                  ·gc.alloc.rate:            1029.365 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.495 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 352.778 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 3085941.358 ops/s
[info]                  ·gc.alloc.rate:            1050.850 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.754 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 691.010 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala":
[info]   3072025.474 ±(99.9%) 117517.679 ops/s [Average]
[info]   (min, avg, max) = (3022371.237, 3072025.474, 3101424.937), stdev = 30518.968
[info]   CI (99.9%): [2954507.795, 3189543.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1046.222 ±(99.9%) 39.966 MB/sec [Average]
[info]   (min, avg, max) = (1029.365, 1046.222, 1056.360), stdev = 10.379
[info]   CI (99.9%): [1006.256, 1086.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   536.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (536.000, 536.000, 536.000), stdev = 0.001
[info]   CI (99.9%): [536.000, 536.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1084.310 ±(99.9%) 1429.934 MB/sec [Average]
[info]   (min, avg, max) = (677.495, 1084.310, 1356.137), stdev = 371.349
[info]   CI (99.9%): [≈ 0, 2514.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   555.098 ±(99.9%) 727.125 B/op [Average]
[info]   (min, avg, max) = (343.786, 555.098, 695.940), stdev = 188.832
[info]   CI (99.9%): [≈ 0, 1282.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.068 ±(99.9%) 0.589 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.068, 0.342), stdev = 0.153
[info]   CI (99.9%): [≈ 0, 0.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 8.000), stdev = 2.588
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 16.94% complete, ETA 01:33:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2967090.215 ops/s
[info] # Warmup Iteration   2: 3310317.606 ops/s
[info] # Warmup Iteration   3: 3259020.985 ops/s
[info] # Warmup Iteration   4: 3262201.552 ops/s
[info] # Warmup Iteration   5: 3199047.915 ops/s
[info] Iteration   1: 3267282.915 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3271315.508 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3264030.618 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3261818.128 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3263824.808 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   3265654.395 ±(99.9%) 14330.560 ops/s [Average]
[info]   (min, avg, max) = (3261818.128, 3265654.395, 3271315.508), stdev = 3721.601
[info]   CI (99.9%): [3251323.835, 3279984.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 17.18% complete, ETA 01:33:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 146381.721 ops/s
[info] # Warmup Iteration   2: 265706.848 ops/s
[info] # Warmup Iteration   3: 266088.503 ops/s
[info] # Warmup Iteration   4: 267578.280 ops/s
[info] # Warmup Iteration   5: 266487.859 ops/s
[info] Iteration   1: 267917.994 ops/s
[info]                  ·gc.alloc.rate:                                  2190.255 MB/sec
[info]                  ·gc.alloc.rate.norm:                             12864.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.080 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.471 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2040.081 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11981.982 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                27.392 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   2: 270308.872 ops/s
[info]                  ·gc.alloc.rate:                                  2209.010 MB/sec
[info]                  ·gc.alloc.rate.norm:                             12864.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.035 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.203 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.363 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       15870.943 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 270612.784 ops/s
[info]                  ·gc.alloc.rate:            2211.465 MB/sec
[info]                  ·gc.alloc.rate.norm:       12864.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2043.988 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11889.794 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 270718.783 ops/s
[info]                  ·gc.alloc.rate:            2212.567 MB/sec
[info]                  ·gc.alloc.rate.norm:       12864.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.213 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11885.183 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 265780.774 ops/s
[info]                  ·gc.alloc.rate:                                  2172.050 MB/sec
[info]                  ·gc.alloc.rate.norm:                             12864.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.026 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12105.781 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson":
[info]   269067.841 ±(99.9%) 8343.460 ops/s [Average]
[info]   (min, avg, max) = (265780.774, 269067.841, 270718.783), stdev = 2166.770
[info]   CI (99.9%): [260724.382, 277411.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2199.069 ±(99.9%) 67.863 MB/sec [Average]
[info]   (min, avg, max) = (2172.050, 2199.069, 2212.567), stdev = 17.624
[info]   CI (99.9%): [2131.206, 2266.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   12864.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (12864.002, 12864.002, 12864.002), stdev = 0.001
[info]   CI (99.9%): [12864.001, 12864.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.024 ±(99.9%) 0.135 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.080), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.138 ±(99.9%) 0.789 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.138, 0.471), stdev = 0.205
[info]   CI (99.9%): [≈ 0, 0.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   2179.534 ±(99.9%) 1174.958 MB/sec [Average]
[info]   (min, avg, max) = (2040.081, 2179.534, 2725.363), stdev = 305.133
[info]   CI (99.9%): [1004.577, 3354.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   12746.737 ±(99.9%) 6733.940 B/op [Average]
[info]   (min, avg, max) = (11885.183, 12746.737, 15870.943), stdev = 1748.783
[info]   CI (99.9%): [6012.796, 19480.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.031 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.664), stdev = 2.086
[info]   CI (99.9%): [≈ 0, 8.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   5.478 ±(99.9%) 47.170 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.478, 27.392), stdev = 12.250
[info]   CI (99.9%): [≈ 0, 52.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 8.000), stdev = 1.732
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 17.41% complete, ETA 01:33:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18217.615 ops/s
[info] # Warmup Iteration   2: 25633.024 ops/s
[info] # Warmup Iteration   3: 25293.574 ops/s
[info] # Warmup Iteration   4: 25602.791 ops/s
[info] # Warmup Iteration   5: 25608.882 ops/s
[info] Iteration   1: 25805.350 ops/s
[info]                  ·gc.alloc.rate:            1511.419 MB/sec
[info]                  ·gc.alloc.rate.norm:       92192.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.067 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 82716.030 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 25896.681 ops/s
[info]                  ·gc.alloc.rate:            1517.051 MB/sec
[info]                  ·gc.alloc.rate.norm:       92192.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.286 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 82422.235 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 25916.808 ops/s
[info]                  ·gc.alloc.rate:                                  1517.717 MB/sec
[info]                  ·gc.alloc.rate.norm:                             92192.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.048 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.943 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2037.081 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       123740.220 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                202.256 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 26107.461 ops/s
[info]                  ·gc.alloc.rate:                                  1529.241 MB/sec
[info]                  ·gc.alloc.rate.norm:                             92192.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.097 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.873 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.850 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       82160.941 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 26155.002 ops/s
[info]                  ·gc.alloc.rate:            1532.125 MB/sec
[info]                  ·gc.alloc.rate.norm:       92192.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.863 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 82007.052 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce":
[info]   25976.261 ±(99.9%) 571.921 ops/s [Average]
[info]   (min, avg, max) = (25805.350, 25976.261, 26155.002), stdev = 148.526
[info]   CI (99.9%): [25404.340, 26548.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate":
[info]   1521.510 ±(99.9%) 33.819 MB/sec [Average]
[info]   (min, avg, max) = (1511.419, 1521.510, 1532.125), stdev = 8.783
[info]   CI (99.9%): [1487.691, 1555.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   92192.016 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (92192.016, 92192.016, 92192.017), stdev = 0.001
[info]   CI (99.9%): [92192.014, 92192.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.029 ±(99.9%) 0.168 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.097), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.763 ±(99.9%) 10.116 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.763, 5.873), stdev = 2.627
[info]   CI (99.9%): [≈ 0, 11.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1495.029 ±(99.9%) 1166.878 MB/sec [Average]
[info]   (min, avg, max) = (1356.067, 1495.029, 2037.081), stdev = 303.035
[info]   CI (99.9%): [328.151, 2661.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   90609.296 ±(99.9%) 71324.358 B/op [Average]
[info]   (min, avg, max) = (82007.052, 90609.296, 123740.220), stdev = 18522.709
[info]   CI (99.9%): [19284.938, 161933.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   40.451 ±(99.9%) 348.297 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 40.451, 202.256), stdev = 90.452
[info]   CI (99.9%): [≈ 0, 388.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 8.000), stdev = 2.408
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 17.65% complete, ETA 01:33:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1687.202 ops/s
[info] # Warmup Iteration   2: 89113.669 ops/s
[info] # Warmup Iteration   3: 92998.163 ops/s
[info] # Warmup Iteration   4: 92350.992 ops/s
[info] # Warmup Iteration   5: 94821.273 ops/s
[info] Iteration   1: 95109.561 ops/s
[info]                  ·gc.alloc.rate:            856.598 MB/sec
[info]                  ·gc.alloc.rate.norm:       14176.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.756 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11166.674 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 94269.781 ops/s
[info]                  ·gc.alloc.rate:            849.112 MB/sec
[info]                  ·gc.alloc.rate.norm:       14176.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.804 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11265.922 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 94844.399 ops/s
[info]                  ·gc.alloc.rate:            854.181 MB/sec
[info]                  ·gc.alloc.rate.norm:       14176.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.739 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11197.987 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 94435.342 ops/s
[info]                  ·gc.alloc.rate:            850.877 MB/sec
[info]                  ·gc.alloc.rate.norm:       14176.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1350.080 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 22492.959 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   5: 94881.051 ops/s
[info]                  ·gc.alloc.rate:            854.617 MB/sec
[info]                  ·gc.alloc.rate.norm:       14176.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.806 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11193.385 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava":
[info]   94708.027 ±(99.9%) 1328.585 ops/s [Average]
[info]   (min, avg, max) = (94269.781, 94708.027, 95109.561), stdev = 345.029
[info]   CI (99.9%): [93379.442, 96036.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   853.077 ±(99.9%) 11.640 MB/sec [Average]
[info]   (min, avg, max) = (849.112, 853.077, 856.598), stdev = 3.023
[info]   CI (99.9%): [841.437, 864.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   14176.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (14176.004, 14176.004, 14176.005), stdev = 0.001
[info]   CI (99.9%): [14176.004, 14176.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   809.837 ±(99.9%) 1162.914 MB/sec [Average]
[info]   (min, avg, max) = (674.739, 809.837, 1350.080), stdev = 302.005
[info]   CI (99.9%): [≈ 0, 1972.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   13463.385 ±(99.9%) 19437.349 B/op [Average]
[info]   (min, avg, max) = (11166.674, 13463.385, 22492.959), stdev = 5047.818
[info]   CI (99.9%): [≈ 0, 32900.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 11.000), stdev = 2.683
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 17.88% complete, ETA 01:32:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36200.034 ops/s
[info] # Warmup Iteration   2: 59466.699 ops/s
[info] # Warmup Iteration   3: 59960.137 ops/s
[info] # Warmup Iteration   4: 59687.067 ops/s
[info] # Warmup Iteration   5: 60055.874 ops/s
[info] Iteration   1: 58615.936 ops/s
[info]                  ·gc.alloc.rate:            968.522 MB/sec
[info]                  ·gc.alloc.rate.norm:       26008.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.808 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 36381.066 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 60022.061 ops/s
[info]                  ·gc.alloc.rate:            992.087 MB/sec
[info]                  ·gc.alloc.rate.norm:       26008.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.623 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17764.185 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 59518.542 ops/s
[info]                  ·gc.alloc.rate:            983.353 MB/sec
[info]                  ·gc.alloc.rate.norm:       26008.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.688 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 35829.180 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 58947.460 ops/s
[info]                  ·gc.alloc.rate:            974.283 MB/sec
[info]                  ·gc.alloc.rate.norm:       26008.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.539 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18086.562 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 59991.696 ops/s
[info]                  ·gc.alloc.rate:            991.296 MB/sec
[info]                  ·gc.alloc.rate.norm:       26008.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.387 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17772.178 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala":
[info]   59419.139 ±(99.9%) 2411.524 ops/s [Average]
[info]   (min, avg, max) = (58615.936, 59419.139, 60022.061), stdev = 626.265
[info]   CI (99.9%): [57007.615, 61830.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   981.908 ±(99.9%) 39.979 MB/sec [Average]
[info]   (min, avg, max) = (968.522, 981.908, 992.087), stdev = 10.382
[info]   CI (99.9%): [941.930, 1021.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   26008.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (26008.007, 26008.007, 26008.007), stdev = 0.001
[info]   CI (99.9%): [26008.006, 26008.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   948.409 ±(99.9%) 1428.339 MB/sec [Average]
[info]   (min, avg, max) = (677.387, 948.409, 1354.808), stdev = 370.935
[info]   CI (99.9%): [≈ 0, 2376.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   25166.634 ±(99.9%) 38460.927 B/op [Average]
[info]   (min, avg, max) = (17764.185, 25166.634, 36381.066), stdev = 9988.180
[info]   CI (99.9%): [≈ 0, 63627.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 9.000), stdev = 2.408
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 18.12% complete, ETA 01:32:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 112904.834 ops/s
[info] # Warmup Iteration   2: 128152.558 ops/s
[info] # Warmup Iteration   3: 129105.845 ops/s
[info] # Warmup Iteration   4: 124748.704 ops/s
[info] # Warmup Iteration   5: 126437.214 ops/s
[info] Iteration   1: 126088.236 ops/s
[info]                  ·gc.alloc.rate:            812.622 MB/sec
[info]                  ·gc.alloc.rate.norm:       10144.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.160 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16929.012 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 126336.873 ops/s
[info]                  ·gc.alloc.rate:            814.525 MB/sec
[info]                  ·gc.alloc.rate.norm:       10144.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.328 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8447.826 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 126250.991 ops/s
[info]                  ·gc.alloc.rate:            813.828 MB/sec
[info]                  ·gc.alloc.rate.norm:       10144.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.193 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8453.378 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 126325.823 ops/s
[info]                  ·gc.alloc.rate:            814.041 MB/sec
[info]                  ·gc.alloc.rate.norm:       10144.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.963 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8448.294 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 126281.740 ops/s
[info]                  ·gc.alloc.rate:            813.934 MB/sec
[info]                  ·gc.alloc.rate.norm:       10144.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.115 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8451.304 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala":
[info]   126256.733 ±(99.9%) 386.245 ops/s [Average]
[info]   (min, avg, max) = (126088.236, 126256.733, 126336.873), stdev = 100.307
[info]   CI (99.9%): [125870.488, 126642.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   813.790 ±(99.9%) 2.716 MB/sec [Average]
[info]   (min, avg, max) = (812.622, 813.790, 814.525), stdev = 0.705
[info]   CI (99.9%): [811.074, 816.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10144.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10144.003, 10144.003, 10144.003), stdev = 0.001
[info]   CI (99.9%): [10144.003, 10144.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   813.752 ±(99.9%) 1167.574 MB/sec [Average]
[info]   (min, avg, max) = (677.963, 813.752, 1356.160), stdev = 303.215
[info]   CI (99.9%): [≈ 0, 1981.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   10145.963 ±(99.9%) 14601.027 B/op [Average]
[info]   (min, avg, max) = (8447.826, 10145.963, 16929.012), stdev = 3791.840
[info]   CI (99.9%): [≈ 0, 24746.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 8.000), stdev = 2.168
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 18.35% complete, ETA 01:32:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15262.721 ops/s
[info] # Warmup Iteration   2: 32879.119 ops/s
[info] # Warmup Iteration   3: 32689.807 ops/s
[info] # Warmup Iteration   4: 32871.670 ops/s
[info] # Warmup Iteration   5: 32248.492 ops/s
[info] Iteration   1: 32353.644 ops/s
[info]                  ·gc.alloc.rate:            1689.859 MB/sec
[info]                  ·gc.alloc.rate.norm:       82216.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.679 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 65908.640 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 33029.833 ops/s
[info]                  ·gc.alloc.rate:                                  1725.160 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82216.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.085 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.057 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2036.014 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       97030.416 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                190.442 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   3: 33311.745 ops/s
[info]                  ·gc.alloc.rate:                                  1740.432 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82216.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.044 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.093 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.058 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       64389.282 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 33250.080 ops/s
[info]                  ·gc.alloc.rate:                                  1736.693 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82216.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.379 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.059 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       96766.892 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 33142.834 ops/s
[info]                  ·gc.alloc.rate:            1731.935 MB/sec
[info]                  ·gc.alloc.rate.norm:       82216.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2042.328 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 96950.554 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson":
[info]   33017.627 ±(99.9%) 1487.912 ops/s [Average]
[info]   (min, avg, max) = (32353.644, 33017.627, 33311.745), stdev = 386.406
[info]   CI (99.9%): [31529.715, 34505.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1724.816 ±(99.9%) 78.389 MB/sec [Average]
[info]   (min, avg, max) = (1689.859, 1724.816, 1740.432), stdev = 20.357
[info]   CI (99.9%): [1646.426, 1803.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   82216.013 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (82216.012, 82216.013, 82216.013), stdev = 0.001
[info]   CI (99.9%): [82216.011, 82216.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.027 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.085), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.306 ±(99.9%) 6.795 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.306, 4.057), stdev = 1.765
[info]   CI (99.9%): [≈ 0, 8.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1768.028 ±(99.9%) 1438.344 MB/sec [Average]
[info]   (min, avg, max) = (1354.679, 1768.028, 2044.059), stdev = 373.533
[info]   CI (99.9%): [329.684, 3206.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   84209.157 ±(99.9%) 67032.206 B/op [Average]
[info]   (min, avg, max) = (64389.282, 84209.157, 97030.416), stdev = 17408.051
[info]   CI (99.9%): [17176.951, 151241.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   38.088 ±(99.9%) 327.953 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 38.088, 190.442), stdev = 85.168
[info]   CI (99.9%): [≈ 0, 366.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 11.000), stdev = 3.347
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 18.59% complete, ETA 01:32:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26392.726 ops/s
[info] # Warmup Iteration   2: 37316.420 ops/s
[info] # Warmup Iteration   3: 39082.503 ops/s
[info] # Warmup Iteration   4: 38733.612 ops/s
[info] # Warmup Iteration   5: 38694.836 ops/s
[info] Iteration   1: 39047.346 ops/s
[info]                  ·gc.alloc.rate:      437.439 MB/sec
[info]                  ·gc.alloc.rate.norm: 17632.011 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 37850.411 ops/s
[info]                  ·gc.alloc.rate:            423.988 MB/sec
[info]                  ·gc.alloc.rate.norm:       17632.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.055 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28197.653 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 38948.510 ops/s
[info]                  ·gc.alloc.rate:      436.421 MB/sec
[info]                  ·gc.alloc.rate.norm: 17632.010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 38793.629 ops/s
[info]                  ·gc.alloc.rate:            434.555 MB/sec
[info]                  ·gc.alloc.rate.norm:       17632.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.063 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27512.317 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 38797.725 ops/s
[info]                  ·gc.alloc.rate:            434.617 MB/sec
[info]                  ·gc.alloc.rate.norm:       17632.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.072 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27508.771 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce":
[info]   38687.524 ±(99.9%) 1848.455 ops/s [Average]
[info]   (min, avg, max) = (37850.411, 38687.524, 39047.346), stdev = 480.038
[info]   CI (99.9%): [36839.069, 40535.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate":
[info]   433.404 ±(99.9%) 20.811 MB/sec [Average]
[info]   (min, avg, max) = (423.988, 433.404, 437.439), stdev = 5.405
[info]   CI (99.9%): [412.593, 454.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   17632.011 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (17632.010, 17632.011, 17632.011), stdev = 0.001
[info]   CI (99.9%): [17632.009, 17632.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   406.838 ±(99.9%) 1430.093 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 406.838, 678.072), stdev = 371.391
[info]   CI (99.9%): [≈ 0, 1836.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   16643.748 ±(99.9%) 58515.091 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16643.748, 28197.653), stdev = 15196.183
[info]   CI (99.9%): [≈ 0, 75158.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 4.000), stdev = 2.191
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 18.82% complete, ETA 01:31:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23624.475 ops/s
[info] # Warmup Iteration   2: 41012.357 ops/s
[info] # Warmup Iteration   3: 40270.341 ops/s
[info] # Warmup Iteration   4: 41004.087 ops/s
[info] # Warmup Iteration   5: 40032.567 ops/s
[info] Iteration   1: 40464.263 ops/s
[info]                  ·gc.alloc.rate:            365.461 MB/sec
[info]                  ·gc.alloc.rate.norm:       14216.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.409 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26350.427 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 41109.333 ops/s
[info]                  ·gc.alloc.rate:      371.280 MB/sec
[info]                  ·gc.alloc.rate.norm: 14216.010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 40803.335 ops/s
[info]                  ·gc.alloc.rate:            368.693 MB/sec
[info]                  ·gc.alloc.rate.norm:       14216.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.689 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26130.254 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 40853.609 ops/s
[info]                  ·gc.alloc.rate:      368.921 MB/sec
[info]                  ·gc.alloc.rate.norm: 14216.011 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 40670.373 ops/s
[info]                  ·gc.alloc.rate:            367.306 MB/sec
[info]                  ·gc.alloc.rate.norm:       14216.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.330 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26215.044 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala":
[info]   40780.183 ±(99.9%) 915.552 ops/s [Average]
[info]   (min, avg, max) = (40464.263, 40780.183, 41109.333), stdev = 237.766
[info]   CI (99.9%): [39864.630, 41695.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   368.332 ±(99.9%) 8.274 MB/sec [Average]
[info]   (min, avg, max) = (365.461, 368.332, 371.280), stdev = 2.149
[info]   CI (99.9%): [360.058, 376.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   14216.010 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (14216.010, 14216.010, 14216.011), stdev = 0.001
[info]   CI (99.9%): [14216.009, 14216.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   406.486 ±(99.9%) 1428.854 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 406.486, 677.689), stdev = 371.069
[info]   CI (99.9%): [≈ 0, 1835.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   15739.145 ±(99.9%) 55326.139 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15739.145, 26350.427), stdev = 14368.023
[info]   CI (99.9%): [≈ 0, 71065.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 5.000), stdev = 2.408
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 19.06% complete, ETA 01:31:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37887.710 ops/s
[info] # Warmup Iteration   2: 44152.264 ops/s
[info] # Warmup Iteration   3: 44411.444 ops/s
[info] # Warmup Iteration   4: 44692.141 ops/s
[info] # Warmup Iteration   5: 44869.568 ops/s
[info] Iteration   1: 44698.404 ops/s
[info]                  ·gc.alloc.rate:            392.768 MB/sec
[info]                  ·gc.alloc.rate.norm:       13832.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.974 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23876.048 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 44953.857 ops/s
[info]                  ·gc.alloc.rate:      395.041 MB/sec
[info]                  ·gc.alloc.rate.norm: 13832.009 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 43771.746 ops/s
[info]                  ·gc.alloc.rate:            384.621 MB/sec
[info]                  ·gc.alloc.rate.norm:       13832.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.969 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24381.589 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 44797.241 ops/s
[info]                  ·gc.alloc.rate:            393.692 MB/sec
[info]                  ·gc.alloc.rate.norm:       13832.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.387 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23799.362 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 44975.513 ops/s
[info]                  ·gc.alloc.rate:      395.231 MB/sec
[info]                  ·gc.alloc.rate.norm: 13832.009 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala":
[info]   44639.352 ±(99.9%) 1918.643 ops/s [Average]
[info]   (min, avg, max) = (43771.746, 44639.352, 44975.513), stdev = 498.265
[info]   CI (99.9%): [42720.709, 46557.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   392.271 ±(99.9%) 16.919 MB/sec [Average]
[info]   (min, avg, max) = (384.621, 392.271, 395.231), stdev = 4.394
[info]   CI (99.9%): [375.351, 409.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   13832.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13832.009, 13832.009, 13832.010), stdev = 0.001
[info]   CI (99.9%): [13832.008, 13832.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   406.666 ±(99.9%) 1429.489 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 406.666, 677.974), stdev = 371.234
[info]   CI (99.9%): [≈ 0, 1836.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   14411.400 ±(99.9%) 50665.423 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14411.400, 24381.589), stdev = 13157.650
[info]   CI (99.9%): [≈ 0, 65076.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 19.29% complete, ETA 01:31:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36273.580 ops/s
[info] # Warmup Iteration   2: 45022.880 ops/s
[info] # Warmup Iteration   3: 44145.569 ops/s
[info] # Warmup Iteration   4: 45127.154 ops/s
[info] # Warmup Iteration   5: 44409.508 ops/s
[info] Iteration   1: 44339.146 ops/s
[info]                  ·gc.alloc.rate:      338.912 MB/sec
[info]                  ·gc.alloc.rate.norm: 12032.009 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 44790.165 ops/s
[info]                  ·gc.alloc.rate:            342.423 MB/sec
[info]                  ·gc.alloc.rate.norm:       12032.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.131 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23828.081 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 44986.379 ops/s
[info]                  ·gc.alloc.rate:      343.935 MB/sec
[info]                  ·gc.alloc.rate.norm: 12032.009 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 43565.108 ops/s
[info]                  ·gc.alloc.rate:            333.011 MB/sec
[info]                  ·gc.alloc.rate.norm:       12032.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.366 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24473.913 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 44924.649 ops/s
[info]                  ·gc.alloc.rate:      343.397 MB/sec
[info]                  ·gc.alloc.rate.norm: 12032.009 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc":
[info]   44521.090 ±(99.9%) 2277.063 ops/s [Average]
[info]   (min, avg, max) = (43565.108, 44521.090, 44986.379), stdev = 591.346
[info]   CI (99.9%): [42244.027, 46798.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   340.335 ±(99.9%) 17.473 MB/sec [Average]
[info]   (min, avg, max) = (333.011, 340.335, 343.935), stdev = 4.538
[info]   CI (99.9%): [322.863, 357.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   12032.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (12032.009, 12032.009, 12032.009), stdev = 0.001
[info]   CI (99.9%): [12032.009, 12032.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   271.099 ±(99.9%) 1429.429 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 271.099, 678.131), stdev = 371.218
[info]   CI (99.9%): [≈ 0, 1700.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   9660.399 ±(99.9%) 50944.082 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9660.399, 24473.913), stdev = 13230.016
[info]   CI (99.9%): [≈ 0, 60604.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 4.000), stdev = 1.949
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 19.53% complete, ETA 01:30:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15422.418 ops/s
[info] # Warmup Iteration   2: 20814.956 ops/s
[info] # Warmup Iteration   3: 19374.681 ops/s
[info] # Warmup Iteration   4: 20116.339 ops/s
[info] # Warmup Iteration   5: 20211.115 ops/s
[info] Iteration   1: 19909.592 ops/s
[info]                  ·gc.alloc.rate:            720.852 MB/sec
[info]                  ·gc.alloc.rate.norm:       56992.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.020 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 53605.703 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 20231.386 ops/s
[info]                  ·gc.alloc.rate:            732.643 MB/sec
[info]                  ·gc.alloc.rate.norm:       56992.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.112 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 52750.068 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 20235.149 ops/s
[info]                  ·gc.alloc.rate:                   732.640 MB/sec
[info]                  ·gc.alloc.rate.norm:              56992.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:             678.009 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        52742.249 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 51.810 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 20208.176 ops/s
[info]                  ·gc.alloc.rate:            731.927 MB/sec
[info]                  ·gc.alloc.rate.norm:       56992.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.886 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 52861.967 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 20213.982 ops/s
[info]                  ·gc.alloc.rate:            732.045 MB/sec
[info]                  ·gc.alloc.rate.norm:       56992.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.162 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 52797.031 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce":
[info]   20159.657 ±(99.9%) 540.057 ops/s [Average]
[info]   (min, avg, max) = (19909.592, 20159.657, 20235.149), stdev = 140.251
[info]   CI (99.9%): [19619.600, 20699.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate":
[info]   730.021 ±(99.9%) 19.779 MB/sec [Average]
[info]   (min, avg, max) = (720.852, 730.021, 732.643), stdev = 5.137
[info]   CI (99.9%): [710.242, 749.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   56992.022 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (56992.020, 56992.022, 56992.026), stdev = 0.002
[info]   CI (99.9%): [56992.014, 56992.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   678.238 ±(99.9%) 1.417 MB/sec [Average]
[info]   (min, avg, max) = (678.009, 678.238, 678.886), stdev = 0.368
[info]   CI (99.9%): [676.821, 679.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   52951.403 ±(99.9%) 1420.334 B/op [Average]
[info]   (min, avg, max) = (52742.249, 52951.403, 53605.703), stdev = 368.856
[info]   CI (99.9%): [51531.069, 54371.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   10.362 ±(99.9%) 89.219 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.362, 51.810), stdev = 23.170
[info]   CI (99.9%): [≈ 0, 99.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 19.76% complete, ETA 01:30:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11263.118 ops/s
[info] # Warmup Iteration   2: 18089.176 ops/s
[info] # Warmup Iteration   3: 18540.860 ops/s
[info] # Warmup Iteration   4: 18480.497 ops/s
[info] # Warmup Iteration   5: 18497.149 ops/s
[info] Iteration   1: 18534.707 ops/s
[info]                  ·gc.alloc.rate:            526.120 MB/sec
[info]                  ·gc.alloc.rate.norm:       44680.028 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.375 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 57525.180 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 18520.964 ops/s
[info]                  ·gc.alloc.rate:            525.704 MB/sec
[info]                  ·gc.alloc.rate.norm:       44678.257 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.378 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 57568.656 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 18633.280 ops/s
[info]                  ·gc.alloc.rate:      528.919 MB/sec
[info]                  ·gc.alloc.rate.norm: 44680.022 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 18537.871 ops/s
[info]                  ·gc.alloc.rate:            526.197 MB/sec
[info]                  ·gc.alloc.rate.norm:       44680.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.365 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 57515.872 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 18539.780 ops/s
[info]                  ·gc.alloc.rate:            526.303 MB/sec
[info]                  ·gc.alloc.rate.norm:       44680.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.428 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 57509.669 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala":
[info]   18553.320 ±(99.9%) 174.441 ops/s [Average]
[info]   (min, avg, max) = (18520.964, 18553.320, 18633.280), stdev = 45.302
[info]   CI (99.9%): [18378.880, 18727.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   526.649 ±(99.9%) 4.966 MB/sec [Average]
[info]   (min, avg, max) = (525.704, 526.649, 528.919), stdev = 1.290
[info]   CI (99.9%): [521.683, 531.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   44679.670 ±(99.9%) 3.043 B/op [Average]
[info]   (min, avg, max) = (44678.257, 44679.670, 44680.028), stdev = 0.790
[info]   CI (99.9%): [44676.627, 44682.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   541.909 ±(99.9%) 1166.500 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 541.909, 677.428), stdev = 302.936
[info]   CI (99.9%): [≈ 0, 1708.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   46023.876 ±(99.9%) 99069.902 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 46023.876, 57568.656), stdev = 25728.139
[info]   CI (99.9%): [≈ 0, 145093.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.600, 5.000), stdev = 2.074
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 20.00% complete, ETA 01:30:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 77240.694 ops/s
[info] # Warmup Iteration   2: 80502.487 ops/s
[info] # Warmup Iteration   3: 79957.255 ops/s
[info] # Warmup Iteration   4: 76364.688 ops/s
[info] # Warmup Iteration   5: 77863.637 ops/s
[info] Iteration   1: 78385.820 ops/s
[info]                  ·gc.alloc.rate:      204.047 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 76434.680 ops/s
[info]                  ·gc.alloc.rate:            198.934 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      679.517 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13991.072 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 78374.556 ops/s
[info]                  ·gc.alloc.rate:      204.012 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 78734.270 ops/s
[info]                  ·gc.alloc.rate:      204.957 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 78475.693 ops/s
[info]                  ·gc.alloc.rate:            204.296 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.993 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13613.359 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala":
[info]   78081.004 ±(99.9%) 3587.513 ops/s [Average]
[info]   (min, avg, max) = (76434.680, 78081.004, 78734.270), stdev = 931.666
[info]   CI (99.9%): [74493.490, 81668.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   203.249 ±(99.9%) 9.403 MB/sec [Average]
[info]   (min, avg, max) = (198.934, 203.249, 204.957), stdev = 2.442
[info]   CI (99.9%): [193.847, 212.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.005, 4096.005, 4096.006), stdev = 0.001
[info]   CI (99.9%): [4096.005, 4096.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   271.702 ±(99.9%) 1432.606 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 271.702, 679.517), stdev = 372.043
[info]   CI (99.9%): [≈ 0, 1704.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   5520.886 ±(99.9%) 29114.581 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5520.886, 13991.072), stdev = 7560.964
[info]   CI (99.9%): [≈ 0, 34635.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 4.000), stdev = 1.949
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 20.24% complete, ETA 01:30:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8531.838 ops/s
[info] # Warmup Iteration   2: 14963.761 ops/s
[info] # Warmup Iteration   3: 15170.189 ops/s
[info] # Warmup Iteration   4: 15172.051 ops/s
[info] # Warmup Iteration   5: 15131.824 ops/s
[info] Iteration   1: 15122.628 ops/s
[info]                  ·gc.alloc.rate:            980.673 MB/sec
[info]                  ·gc.alloc.rate.norm:       102064.027 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.899 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 141011.807 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 15139.112 ops/s
[info]                  ·gc.alloc.rate:            982.085 MB/sec
[info]                  ·gc.alloc.rate.norm:       102064.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.664 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 70426.746 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 15229.916 ops/s
[info]                  ·gc.alloc.rate:            987.889 MB/sec
[info]                  ·gc.alloc.rate.norm:       102064.034 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.641 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 70010.622 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 15117.159 ops/s
[info]                  ·gc.alloc.rate:            980.585 MB/sec
[info]                  ·gc.alloc.rate.norm:       102064.027 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.316 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 141067.768 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 15166.805 ops/s
[info]                  ·gc.alloc.rate:            983.922 MB/sec
[info]                  ·gc.alloc.rate.norm:       102064.027 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.678 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 70296.756 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson":
[info]   15155.124 ±(99.9%) 177.338 ops/s [Average]
[info]   (min, avg, max) = (15117.159, 15155.124, 15229.916), stdev = 46.054
[info]   CI (99.9%): [14977.786, 15332.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   983.031 ±(99.9%) 11.684 MB/sec [Average]
[info]   (min, avg, max) = (980.585, 983.031, 987.889), stdev = 3.034
[info]   CI (99.9%): [971.347, 994.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   102064.029 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (102064.027, 102064.029, 102064.034), stdev = 0.003
[info]   CI (99.9%): [102064.018, 102064.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   948.639 ±(99.9%) 1428.793 MB/sec [Average]
[info]   (min, avg, max) = (677.641, 948.639, 1355.316), stdev = 371.053
[info]   CI (99.9%): [≈ 0, 2377.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   98562.740 ±(99.9%) 149313.952 B/op [Average]
[info]   (min, avg, max) = (70010.622, 98562.740, 141067.768), stdev = 38776.359
[info]   CI (99.9%): [≈ 0, 247876.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 10.000), stdev = 2.702
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 20.47% complete, ETA 01:29:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 40416.450 ops/s
[info] # Warmup Iteration   2: 54736.207 ops/s
[info] # Warmup Iteration   3: 55823.169 ops/s
[info] # Warmup Iteration   4: 57574.099 ops/s
[info] # Warmup Iteration   5: 57594.731 ops/s
[info] Iteration   1: 57171.005 ops/s
[info]                  ·gc.alloc.rate:            866.124 MB/sec
[info]                  ·gc.alloc.rate.norm:       23848.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.958 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 37335.188 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 57515.661 ops/s
[info]                  ·gc.alloc.rate:            871.344 MB/sec
[info]                  ·gc.alloc.rate.norm:       23848.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.986 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18555.964 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 57578.649 ops/s
[info]                  ·gc.alloc.rate:            872.403 MB/sec
[info]                  ·gc.alloc.rate.norm:       23848.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.056 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18535.342 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 57253.677 ops/s
[info]                  ·gc.alloc.rate:            867.434 MB/sec
[info]                  ·gc.alloc.rate.norm:       23848.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.040 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 37281.075 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 57502.718 ops/s
[info]                  ·gc.alloc.rate:            871.294 MB/sec
[info]                  ·gc.alloc.rate.norm:       23848.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.124 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18560.803 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce":
[info]   57404.342 ±(99.9%) 693.112 ops/s [Average]
[info]   (min, avg, max) = (57171.005, 57404.342, 57578.649), stdev = 179.999
[info]   CI (99.9%): [56711.230, 58097.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate":
[info]   869.719 ±(99.9%) 10.627 MB/sec [Average]
[info]   (min, avg, max) = (866.124, 869.719, 872.403), stdev = 2.760
[info]   CI (99.9%): [859.092, 880.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   23848.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (23848.007, 23848.007, 23848.008), stdev = 0.001
[info]   CI (99.9%): [23848.006, 23848.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   949.233 ±(99.9%) 1429.841 MB/sec [Average]
[info]   (min, avg, max) = (677.986, 949.233, 1356.040), stdev = 371.325
[info]   CI (99.9%): [≈ 0, 2379.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   26053.674 ±(99.9%) 39561.088 B/op [Average]
[info]   (min, avg, max) = (18535.342, 26053.674, 37335.188), stdev = 10273.889
[info]   CI (99.9%): [≈ 0, 65614.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 9.000), stdev = 2.702
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 20.71% complete, ETA 01:29:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 55487.462 ops/s
[info] # Warmup Iteration   2: 87025.339 ops/s
[info] # Warmup Iteration   3: 87838.347 ops/s
[info] # Warmup Iteration   4: 88494.382 ops/s
[info] # Warmup Iteration   5: 87849.317 ops/s
[info] Iteration   1: 88639.342 ops/s
[info]                  ·gc.alloc.rate:            1050.949 MB/sec
[info]                  ·gc.alloc.rate.norm:       18664.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.329 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12028.806 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 88254.057 ops/s
[info]                  ·gc.alloc.rate:            1046.523 MB/sec
[info]                  ·gc.alloc.rate.norm:       18664.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.820 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24162.270 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 88598.335 ops/s
[info]                  ·gc.alloc.rate:            1050.506 MB/sec
[info]                  ·gc.alloc.rate.norm:       18664.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.348 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12034.236 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 87496.205 ops/s
[info]                  ·gc.alloc.rate:                   1037.437 MB/sec
[info]                  ·gc.alloc.rate.norm:              18664.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.009 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        24359.295 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 11.982 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 88778.036 ops/s
[info]                  ·gc.alloc.rate:            1053.079 MB/sec
[info]                  ·gc.alloc.rate.norm:       18664.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.631 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12009.841 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala":
[info]   88353.195 ±(99.9%) 1988.518 ops/s [Average]
[info]   (min, avg, max) = (87496.205, 88353.195, 88778.036), stdev = 516.412
[info]   CI (99.9%): [86364.677, 90341.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1047.699 ±(99.9%) 23.899 MB/sec [Average]
[info]   (min, avg, max) = (1037.437, 1047.699, 1053.079), stdev = 6.206
[info]   CI (99.9%): [1023.800, 1071.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   18664.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (18664.005, 18664.005, 18664.005), stdev = 0.001
[info]   CI (99.9%): [18664.004, 18664.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   948.228 ±(99.9%) 1427.806 MB/sec [Average]
[info]   (min, avg, max) = (677.329, 948.228, 1354.820), stdev = 370.797
[info]   CI (99.9%): [≈ 0, 2376.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   16918.890 ±(99.9%) 25809.206 B/op [Average]
[info]   (min, avg, max) = (12009.841, 16918.890, 24359.295), stdev = 6702.569
[info]   CI (99.9%): [≈ 0, 42728.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   2.396 ±(99.9%) 20.634 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.396, 11.982), stdev = 5.358
[info]   CI (99.9%): [≈ 0, 23.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 10.000), stdev = 2.881
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 20.94% complete, ETA 01:29:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 180587.544 ops/s
[info] # Warmup Iteration   2: 200373.765 ops/s
[info] # Warmup Iteration   3: 193959.313 ops/s
[info] # Warmup Iteration   4: 209288.940 ops/s
[info] # Warmup Iteration   5: 207385.632 ops/s
[info] Iteration   1: 207834.090 ops/s
[info]                  ·gc.alloc.rate:      329.618 MB/sec
[info]                  ·gc.alloc.rate.norm: 2496.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 207902.332 ops/s
[info]                  ·gc.alloc.rate:            329.813 MB/sec
[info]                  ·gc.alloc.rate.norm:       2496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.330 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5133.552 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 209000.618 ops/s
[info]                  ·gc.alloc.rate:      331.385 MB/sec
[info]                  ·gc.alloc.rate.norm: 2496.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 208211.239 ops/s
[info]                  ·gc.alloc.rate:                   330.148 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.336 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5120.826 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.035 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 209334.831 ops/s
[info]                  ·gc.alloc.rate:      331.954 MB/sec
[info]                  ·gc.alloc.rate.norm: 2496.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala":
[info]   208456.622 ±(99.9%) 2598.955 ops/s [Average]
[info]   (min, avg, max) = (207834.090, 208456.622, 209334.831), stdev = 674.940
[info]   CI (99.9%): [205857.667, 211055.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   330.584 ±(99.9%) 3.962 MB/sec [Average]
[info]   (min, avg, max) = (329.618, 330.584, 331.954), stdev = 1.029
[info]   CI (99.9%): [326.622, 334.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2496.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2496.002, 2496.002, 2496.002), stdev = 0.001
[info]   CI (99.9%): [2496.002, 2496.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   271.133 ±(99.9%) 1429.608 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 271.133, 678.330), stdev = 371.265
[info]   CI (99.9%): [≈ 0, 1700.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   2050.876 ±(99.9%) 10813.690 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2050.876, 5133.552), stdev = 2808.281
[info]   CI (99.9%): [≈ 0, 12864.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.007 ±(99.9%) 8.671 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.007, 5.035), stdev = 2.252
[info]   CI (99.9%): [≈ 0, 9.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.643
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 21.18% complete, ETA 01:29:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 214767.976 ops/s
[info] # Warmup Iteration   2: 239328.698 ops/s
[info] # Warmup Iteration   3: 240957.897 ops/s
[info] # Warmup Iteration   4: 240998.314 ops/s
[info] # Warmup Iteration   5: 237862.228 ops/s
[info] Iteration   1: 239092.581 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 240834.636 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 241586.062 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 241624.655 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 241613.873 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc":
[info]   240950.362 ±(99.9%) 4202.222 ops/s [Average]
[info]   (min, avg, max) = (239092.581, 240950.362, 241624.655), stdev = 1091.304
[info]   CI (99.9%): [236748.140, 245152.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
[info]   CI (99.9%): [0.002, 0.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 21.41% complete, ETA 01:28:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 55139.081 ops/s
[info] # Warmup Iteration   2: 78148.041 ops/s
[info] # Warmup Iteration   3: 75538.135 ops/s
[info] # Warmup Iteration   4: 78785.005 ops/s
[info] # Warmup Iteration   5: 78265.226 ops/s
[info] Iteration   1: 77700.683 ops/s
[info]                  ·gc.alloc.rate:            1059.887 MB/sec
[info]                  ·gc.alloc.rate.norm:       21472.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.360 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13722.485 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 78350.766 ops/s
[info]                  ·gc.alloc.rate:            1068.687 MB/sec
[info]                  ·gc.alloc.rate.norm:       21472.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.604 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27216.625 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 78272.538 ops/s
[info]                  ·gc.alloc.rate:            1067.674 MB/sec
[info]                  ·gc.alloc.rate.norm:       21472.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.667 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27243.742 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 78862.385 ops/s
[info]                  ·gc.alloc.rate:            1075.768 MB/sec
[info]                  ·gc.alloc.rate.norm:       21472.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.347 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13519.635 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 78386.740 ops/s
[info]                  ·gc.alloc.rate:            1069.474 MB/sec
[info]                  ·gc.alloc.rate.norm:       21472.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.927 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27203.086 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson":
[info]   78314.622 ±(99.9%) 1593.770 ops/s [Average]
[info]   (min, avg, max) = (77700.683, 78314.622, 78862.385), stdev = 413.897
[info]   CI (99.9%): [76720.852, 79908.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1068.298 ±(99.9%) 21.823 MB/sec [Average]
[info]   (min, avg, max) = (1059.887, 1068.298, 1075.768), stdev = 5.667
[info]   CI (99.9%): [1046.475, 1090.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   21472.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (21472.005, 21472.005, 21472.006), stdev = 0.001
[info]   CI (99.9%): [21472.005, 21472.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1083.781 ±(99.9%) 1428.650 MB/sec [Average]
[info]   (min, avg, max) = (677.347, 1083.781, 1354.927), stdev = 371.016
[info]   CI (99.9%): [≈ 0, 2512.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   21781.115 ±(99.9%) 28685.126 B/op [Average]
[info]   (min, avg, max) = (13519.635, 21781.115, 27243.742), stdev = 7449.436
[info]   CI (99.9%): [≈ 0, 50466.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.200, 9.000), stdev = 2.490
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 21.65% complete, ETA 01:28:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19488.618 ops/s
[info] # Warmup Iteration   2: 27255.658 ops/s
[info] # Warmup Iteration   3: 27584.313 ops/s
[info] # Warmup Iteration   4: 27243.906 ops/s
[info] # Warmup Iteration   5: 27672.993 ops/s
[info] Iteration   1: 27817.720 ops/s
[info]                  ·gc.alloc.rate:      578.555 MB/sec
[info]                  ·gc.alloc.rate.norm: 32736.016 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 27814.055 ops/s
[info]                  ·gc.alloc.rate:            578.712 MB/sec
[info]                  ·gc.alloc.rate.norm:       32736.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.357 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 38372.650 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 27663.001 ops/s
[info]                  ·gc.alloc.rate:            575.454 MB/sec
[info]                  ·gc.alloc.rate.norm:       32736.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.195 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 38580.684 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 27692.552 ops/s
[info]                  ·gc.alloc.rate:            576.045 MB/sec
[info]                  ·gc.alloc.rate.norm:       32736.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.180 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 38540.288 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 27701.277 ops/s
[info]                  ·gc.alloc.rate:            576.149 MB/sec
[info]                  ·gc.alloc.rate.norm:       32736.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.059 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 38526.378 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce":
[info]   27737.721 ±(99.9%) 280.188 ops/s [Average]
[info]   (min, avg, max) = (27663.001, 27737.721, 27817.720), stdev = 72.764
[info]   CI (99.9%): [27457.533, 28017.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   576.983 ±(99.9%) 5.895 MB/sec [Average]
[info]   (min, avg, max) = (575.454, 576.983, 578.712), stdev = 1.531
[info]   CI (99.9%): [571.088, 582.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   32736.015 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (32736.015, 32736.015, 32736.016), stdev = 0.001
[info]   CI (99.9%): [32736.013, 32736.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   542.558 ±(99.9%) 1167.898 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 542.558, 678.357), stdev = 303.299
[info]   CI (99.9%): [≈ 0, 1710.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   30804.000 ±(99.9%) 66308.630 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 30804.000, 38580.684), stdev = 17220.141
[info]   CI (99.9%): [≈ 0, 97112.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 4.000), stdev = 1.732
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 21.88% complete, ETA 01:28:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17635.754 ops/s
[info] # Warmup Iteration   2: 28348.886 ops/s
[info] # Warmup Iteration   3: 28118.263 ops/s
[info] # Warmup Iteration   4: 28379.841 ops/s
[info] # Warmup Iteration   5: 27785.891 ops/s
[info] Iteration   1: 28045.562 ops/s
[info]                  ·gc.alloc.rate:            368.717 MB/sec
[info]                  ·gc.alloc.rate.norm:       20688.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.583 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 38017.889 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 28506.983 ops/s
[info]                  ·gc.alloc.rate:      374.685 MB/sec
[info]                  ·gc.alloc.rate.norm: 20688.015 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 28321.709 ops/s
[info]                  ·gc.alloc.rate:            372.328 MB/sec
[info]                  ·gc.alloc.rate.norm:       20688.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.527 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 37646.125 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 28457.256 ops/s
[info]                  ·gc.alloc.rate:      374.044 MB/sec
[info]                  ·gc.alloc.rate.norm: 20688.014 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 28346.787 ops/s
[info]                  ·gc.alloc.rate:                   372.613 MB/sec
[info]                  ·gc.alloc.rate.norm:              20688.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.758 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        37574.621 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 36.983 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala":
[info]   28335.659 ±(99.9%) 690.471 ops/s [Average]
[info]   (min, avg, max) = (28045.562, 28335.659, 28506.983), stdev = 179.313
[info]   CI (99.9%): [27645.189, 29026.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   372.477 ±(99.9%) 8.929 MB/sec [Average]
[info]   (min, avg, max) = (368.717, 372.477, 374.685), stdev = 2.319
[info]   CI (99.9%): [363.548, 381.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   20688.015 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (20688.014, 20688.015, 20688.015), stdev = 0.001
[info]   CI (99.9%): [20688.013, 20688.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   406.374 ±(99.9%) 1428.461 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 406.374, 677.583), stdev = 370.967
[info]   CI (99.9%): [≈ 0, 1834.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   22647.727 ±(99.9%) 79612.589 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22647.727, 38017.889), stdev = 20675.136
[info]   CI (99.9%): [≈ 0, 102260.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   7.397 ±(99.9%) 63.687 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.397, 36.983), stdev = 16.539
[info]   CI (99.9%): [≈ 0, 71.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 5.000), stdev = 2.408
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 22.12% complete, ETA 01:28:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 104928.609 ops/s
[info] # Warmup Iteration   2: 116531.384 ops/s
[info] # Warmup Iteration   3: 119622.296 ops/s
[info] # Warmup Iteration   4: 119159.012 ops/s
[info] # Warmup Iteration   5: 118629.041 ops/s
[info] Iteration   1: 118854.212 ops/s
[info]                  ·gc.alloc.rate:            463.888 MB/sec
[info]                  ·gc.alloc.rate.norm:       6144.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.995 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8979.755 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 119977.109 ops/s
[info]                  ·gc.alloc.rate:      468.332 MB/sec
[info]                  ·gc.alloc.rate.norm: 6144.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 118110.789 ops/s
[info]                  ·gc.alloc.rate:            461.032 MB/sec
[info]                  ·gc.alloc.rate.norm:       6144.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.058 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9036.234 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 117569.412 ops/s
[info]                  ·gc.alloc.rate:            458.929 MB/sec
[info]                  ·gc.alloc.rate.norm:       6144.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.070 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9077.808 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 119756.580 ops/s
[info]                  ·gc.alloc.rate:      467.538 MB/sec
[info]                  ·gc.alloc.rate.norm: 6144.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala":
[info]   118853.620 ±(99.9%) 3982.462 ops/s [Average]
[info]   (min, avg, max) = (117569.412, 118853.620, 119977.109), stdev = 1034.233
[info]   CI (99.9%): [114871.158, 122836.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   463.944 ±(99.9%) 15.618 MB/sec [Average]
[info]   (min, avg, max) = (458.929, 463.944, 468.332), stdev = 4.056
[info]   CI (99.9%): [448.325, 479.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6144.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6144.003, 6144.003, 6144.004), stdev = 0.001
[info]   CI (99.9%): [6144.003, 6144.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   406.825 ±(99.9%) 1430.046 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 406.825, 678.070), stdev = 371.378
[info]   CI (99.9%): [≈ 0, 1836.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   5418.759 ±(99.9%) 19048.174 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5418.759, 9077.808), stdev = 4946.750
[info]   CI (99.9%): [≈ 0, 24466.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 22.35% complete, ETA 01:27:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10042.966 ops/s
[info] # Warmup Iteration   2: 21513.982 ops/s
[info] # Warmup Iteration   3: 21483.845 ops/s
[info] # Warmup Iteration   4: 21296.316 ops/s
[info] # Warmup Iteration   5: 21724.164 ops/s
[info] Iteration   1: 21595.945 ops/s
[info]                  ·gc.alloc.rate:                   1192.594 MB/sec
[info]                  ·gc.alloc.rate.norm:              86904.024 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.304 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        98687.793 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 48.543 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 21604.843 ops/s
[info]                  ·gc.alloc.rate:                   1192.659 MB/sec
[info]                  ·gc.alloc.rate.norm:              86904.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.939 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        98655.822 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 48.527 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 21585.644 ops/s
[info]                  ·gc.alloc.rate:            1191.689 MB/sec
[info]                  ·gc.alloc.rate.norm:       86904.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.300 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 98689.506 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 21743.684 ops/s
[info]                  ·gc.alloc.rate:            1200.590 MB/sec
[info]                  ·gc.alloc.rate.norm:       86904.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.720 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 48984.009 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 21447.749 ops/s
[info]                  ·gc.alloc.rate:                   1184.220 MB/sec
[info]                  ·gc.alloc.rate.norm:              86904.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1358.132 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        99666.533 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 342.161 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson":
[info]   21595.573 ±(99.9%) 403.738 ops/s [Average]
[info]   (min, avg, max) = (21447.749, 21595.573, 21743.684), stdev = 104.849
[info]   CI (99.9%): [21191.835, 21999.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1192.350 ±(99.9%) 22.336 MB/sec [Average]
[info]   (min, avg, max) = (1184.220, 1192.350, 1200.590), stdev = 5.800
[info]   CI (99.9%): [1170.015, 1214.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   86904.021 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (86904.019, 86904.021, 86904.024), stdev = 0.002
[info]   CI (99.9%): [86904.013, 86904.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1219.279 ±(99.9%) 1167.921 MB/sec [Average]
[info]   (min, avg, max) = (676.720, 1219.279, 1358.132), stdev = 303.305
[info]   CI (99.9%): [51.358, 2387.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   88936.733 ±(99.9%) 86017.068 B/op [Average]
[info]   (min, avg, max) = (48984.009, 88936.733, 99666.533), stdev = 22338.359
[info]   CI (99.9%): [2919.665, 174953.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 7.565 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 4.663), stdev = 1.965
[info]   CI (99.9%): [≈ 0, 8.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   87.846 ±(99.9%) 555.349 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 87.846, 342.161), stdev = 144.223
[info]   CI (99.9%): [≈ 0, 643.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 8.600, 11.000), stdev = 2.302
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 22.59% complete, ETA 01:27:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 134202.289 ops/s
[info] # Warmup Iteration   2: 172395.233 ops/s
[info] # Warmup Iteration   3: 181495.449 ops/s
[info] # Warmup Iteration   4: 180894.369 ops/s
[info] # Warmup Iteration   5: 180985.388 ops/s
[info] Iteration   1: 181120.470 ops/s
[info]                  ·gc.alloc.rate:            632.380 MB/sec
[info]                  ·gc.alloc.rate.norm:       5496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.002 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5892.502 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 180967.040 ops/s
[info]                  ·gc.alloc.rate:            631.866 MB/sec
[info]                  ·gc.alloc.rate.norm:       5496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.031 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5897.548 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 181157.916 ops/s
[info]                  ·gc.alloc.rate:            632.561 MB/sec
[info]                  ·gc.alloc.rate.norm:       5496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.069 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5891.397 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 180027.678 ops/s
[info]                  ·gc.alloc.rate:            628.601 MB/sec
[info]                  ·gc.alloc.rate.norm:       5496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.038 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5928.238 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 179991.648 ops/s
[info]                  ·gc.alloc.rate:            628.504 MB/sec
[info]                  ·gc.alloc.rate.norm:       5496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.106 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5929.753 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce":
[info]   180652.950 ±(99.9%) 2278.481 ops/s [Average]
[info]   (min, avg, max) = (179991.648, 180652.950, 181157.916), stdev = 591.714
[info]   CI (99.9%): [178374.470, 182931.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   630.782 ±(99.9%) 7.901 MB/sec [Average]
[info]   (min, avg, max) = (628.504, 630.782, 632.561), stdev = 2.052
[info]   CI (99.9%): [622.881, 638.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5496.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5496.002, 5496.002, 5496.002), stdev = 0.001
[info]   CI (99.9%): [5496.002, 5496.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   678.049 ±(99.9%) 0.153 MB/sec [Average]
[info]   (min, avg, max) = (678.002, 678.049, 678.106), stdev = 0.040
[info]   CI (99.9%): [677.896, 678.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5907.888 ±(99.9%) 74.760 B/op [Average]
[info]   (min, avg, max) = (5891.397, 5907.888, 5929.753), stdev = 19.415
[info]   CI (99.9%): [5833.127, 5982.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 22.82% complete, ETA 01:27:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 191853.075 ops/s
[info] # Warmup Iteration   2: 284354.932 ops/s
[info] # Warmup Iteration   3: 284819.652 ops/s
[info] # Warmup Iteration   4: 286667.198 ops/s
[info] # Warmup Iteration   5: 285023.342 ops/s
[info] Iteration   1: 283037.383 ops/s
[info]                  ·gc.alloc.rate:      286.312 MB/sec
[info]                  ·gc.alloc.rate.norm: 1592.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 282906.552 ops/s
[info]                  ·gc.alloc.rate:      286.144 MB/sec
[info]                  ·gc.alloc.rate.norm: 1592.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 282971.629 ops/s
[info]                  ·gc.alloc.rate:            286.207 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.395 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3767.951 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 285712.551 ops/s
[info]                  ·gc.alloc.rate:      288.949 MB/sec
[info]                  ·gc.alloc.rate.norm: 1592.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 283868.663 ops/s
[info]                  ·gc.alloc.rate:            287.108 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.370 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3755.981 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala":
[info]   283699.356 ±(99.9%) 4587.744 ops/s [Average]
[info]   (min, avg, max) = (282906.552, 283699.356, 285712.551), stdev = 1191.422
[info]   CI (99.9%): [279111.612, 288287.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   286.944 ±(99.9%) 4.569 MB/sec [Average]
[info]   (min, avg, max) = (286.144, 286.944, 288.949), stdev = 1.186
[info]   CI (99.9%): [282.376, 291.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1592.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1592.001, 1592.001, 1592.002), stdev = 0.001
[info]   CI (99.9%): [1592.001, 1592.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   270.953 ±(99.9%) 1428.657 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 270.953, 677.395), stdev = 371.018
[info]   CI (99.9%): [≈ 0, 1699.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1504.786 ±(99.9%) 7934.321 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1504.786, 3767.951), stdev = 2060.518
[info]   CI (99.9%): [≈ 0, 9439.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 5.000), stdev = 2.739
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 23.06% complete, ETA 01:26:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 443436.277 ops/s
[info] # Warmup Iteration   2: 491630.622 ops/s
[info] # Warmup Iteration   3: 500481.965 ops/s
[info] # Warmup Iteration   4: 499528.551 ops/s
[info] # Warmup Iteration   5: 503540.018 ops/s
[info] Iteration   1: 500372.326 ops/s
[info]                  ·gc.alloc.rate:                   384.026 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.406 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2130.864 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.095 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 500414.892 ops/s
[info]                  ·gc.alloc.rate:      384.214 MB/sec
[info]                  ·gc.alloc.rate.norm: 1208.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 497149.837 ops/s
[info]                  ·gc.alloc.rate:            381.519 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.012 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2146.785 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 500296.377 ops/s
[info]                  ·gc.alloc.rate:                   383.998 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.460 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2131.188 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.096 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 498438.827 ops/s
[info]                  ·gc.alloc.rate:      382.583 MB/sec
[info]                  ·gc.alloc.rate.norm: 1208.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala":
[info]   499334.451 ±(99.9%) 5693.396 ops/s [Average]
[info]   (min, avg, max) = (497149.837, 499334.451, 500414.892), stdev = 1478.557
[info]   CI (99.9%): [493641.056, 505027.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   383.268 ±(99.9%) 4.528 MB/sec [Average]
[info]   (min, avg, max) = (381.519, 383.268, 384.214), stdev = 1.176
[info]   CI (99.9%): [378.740, 387.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1208.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1208.001, 1208.001, 1208.001), stdev = 0.001
[info]   CI (99.9%): [1208.001, 1208.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   406.576 ±(99.9%) 1429.171 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 406.576, 678.012), stdev = 371.151
[info]   CI (99.9%): [≈ 0, 1835.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1281.768 ±(99.9%) 4505.662 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1281.768, 2146.785), stdev = 1170.106
[info]   CI (99.9%): [≈ 0, 5787.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.838 ±(99.9%) 4.419 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.838, 2.096), stdev = 1.148
[info]   CI (99.9%): [≈ 0, 5.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 4.000), stdev = 2.049
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 23.29% complete, ETA 01:26:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 443816.902 ops/s
[info] # Warmup Iteration   2: 497957.715 ops/s
[info] # Warmup Iteration   3: 498524.886 ops/s
[info] # Warmup Iteration   4: 498390.224 ops/s
[info] # Warmup Iteration   5: 498473.455 ops/s
[info] Iteration   1: 499074.956 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 498697.543 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 498865.136 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 498782.645 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 498541.711 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   498792.398 ±(99.9%) 763.036 ops/s [Average]
[info]   (min, avg, max) = (498541.711, 498792.398, 499074.956), stdev = 198.158
[info]   CI (99.9%): [498029.362, 499555.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 23.53% complete, ETA 01:26:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 159916.651 ops/s
[info] # Warmup Iteration   2: 274563.386 ops/s
[info] # Warmup Iteration   3: 287519.776 ops/s
[info] # Warmup Iteration   4: 288825.994 ops/s
[info] # Warmup Iteration   5: 290094.658 ops/s
[info] Iteration   1: 290140.859 ops/s
[info]                  ·gc.alloc.rate:            799.346 MB/sec
[info]                  ·gc.alloc.rate.norm:       4336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.448 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3674.777 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 290337.365 ops/s
[info]                  ·gc.alloc.rate:                   799.859 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.769 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3668.736 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.611 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 290414.963 ops/s
[info]                  ·gc.alloc.rate:            800.077 MB/sec
[info]                  ·gc.alloc.rate.norm:       4336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.426 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3671.298 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 288081.654 ops/s
[info]                  ·gc.alloc.rate:                   793.695 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.304 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        7398.639 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.639 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 288643.162 ops/s
[info]                  ·gc.alloc.rate:                   795.269 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.838 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3690.289 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.632 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson":
[info]   289523.601 ±(99.9%) 4170.503 ops/s [Average]
[info]   (min, avg, max) = (288081.654, 289523.601, 290414.963), stdev = 1083.066
[info]   CI (99.9%): [285353.097, 293694.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   797.649 ±(99.9%) 11.383 MB/sec [Average]
[info]   (min, avg, max) = (793.695, 797.649, 800.077), stdev = 2.956
[info]   CI (99.9%): [786.266, 809.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4336.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4336.001, 4336.001, 4336.002), stdev = 0.001
[info]   CI (99.9%): [4336.001, 4336.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   812.557 ±(99.9%) 1166.152 MB/sec [Average]
[info]   (min, avg, max) = (676.769, 812.557, 1354.304), stdev = 302.846
[info]   CI (99.9%): [≈ 0, 1978.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   4420.748 ±(99.9%) 6410.216 B/op [Average]
[info]   (min, avg, max) = (3668.736, 4420.748, 7398.639), stdev = 1664.713
[info]   CI (99.9%): [≈ 0, 10830.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.400 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.400, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   2.176 ±(99.9%) 7.651 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.176, 3.639), stdev = 1.987
[info]   CI (99.9%): [≈ 0, 9.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 10.000), stdev = 2.387
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 23.76% complete, ETA 01:26:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28916.430 ops/s
[info] # Warmup Iteration   2: 35740.534 ops/s
[info] # Warmup Iteration   3: 35841.654 ops/s
[info] # Warmup Iteration   4: 36313.148 ops/s
[info] # Warmup Iteration   5: 36864.358 ops/s
[info] Iteration   1: 36829.452 ops/s
[info]                  ·gc.alloc.rate:            1642.523 MB/sec
[info]                  ·gc.alloc.rate.norm:       70200.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.025 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 57955.337 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 36650.046 ops/s
[info]                  ·gc.alloc.rate:                   1634.656 MB/sec
[info]                  ·gc.alloc.rate.norm:              70200.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2034.125 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        87355.113 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 143.018 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 36268.895 ops/s
[info]                  ·gc.alloc.rate:                                  1617.561 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70200.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.126 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.483 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.805 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       59143.918 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 36525.585 ops/s
[info]                  ·gc.alloc.rate:                                  1628.926 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70200.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.341 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.087 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       88091.751 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 36549.559 ops/s
[info]                  ·gc.alloc.rate:                                  1630.165 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70200.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.331 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.791 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       58686.065 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce":
[info]   36564.707 ±(99.9%) 785.940 ops/s [Average]
[info]   (min, avg, max) = (36268.895, 36564.707, 36829.452), stdev = 204.106
[info]   CI (99.9%): [35778.767, 37350.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate":
[info]   1630.766 ±(99.9%) 35.054 MB/sec [Average]
[info]   (min, avg, max) = (1617.561, 1630.766, 1642.523), stdev = 9.103
[info]   CI (99.9%): [1595.712, 1665.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   70200.011 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (70200.011, 70200.011, 70200.011), stdev = 0.001
[info]   CI (99.9%): [70200.011, 70200.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.028 ±(99.9%) 0.211 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.126), stdev = 0.055
[info]   CI (99.9%): [≈ 0, 0.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.231 ±(99.9%) 9.176 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.231, 5.483), stdev = 2.383
[info]   CI (99.9%): [≈ 0, 10.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1631.967 ±(99.9%) 1431.256 MB/sec [Average]
[info]   (min, avg, max) = (1356.025, 1631.967, 2044.087), stdev = 371.693
[info]   CI (99.9%): [200.710, 3063.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   70246.437 ±(99.9%) 61463.964 B/op [Average]
[info]   (min, avg, max) = (57955.337, 70246.437, 88091.751), stdev = 15961.996
[info]   CI (99.9%): [8782.473, 131710.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   28.604 ±(99.9%) 246.285 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 28.604, 143.018), stdev = 63.959
[info]   CI (99.9%): [≈ 0, 274.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 13.000), stdev = 4.147
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 24.00% complete, ETA 01:25:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22512.165 ops/s
[info] # Warmup Iteration   2: 305066.864 ops/s
[info] # Warmup Iteration   3: 303558.545 ops/s
[info] # Warmup Iteration   4: 306115.537 ops/s
[info] # Warmup Iteration   5: 306843.838 ops/s
[info] Iteration   1: 305002.225 ops/s
[info]                  ·gc.alloc.rate:            316.243 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.739 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3482.054 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 307707.071 ops/s
[info]                  ·gc.alloc.rate:      319.074 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 293199.376 ops/s
[info]                  ·gc.alloc.rate:            304.039 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.815 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3622.228 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 307508.902 ops/s
[info]                  ·gc.alloc.rate:      318.882 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 306032.636 ops/s
[info]                  ·gc.alloc.rate:            317.367 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.826 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3470.166 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava":
[info]   303890.042 ±(99.9%) 23405.442 ops/s [Average]
[info]   (min, avg, max) = (293199.376, 303890.042, 307707.071), stdev = 6078.319
[info]   CI (99.9%): [280484.600, 327295.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   315.121 ±(99.9%) 24.268 MB/sec [Average]
[info]   (min, avg, max) = (304.039, 315.121, 319.074), stdev = 6.302
[info]   CI (99.9%): [290.853, 339.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1632.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1632.001, 1632.001, 1632.001), stdev = 0.001
[info]   CI (99.9%): [1632.001, 1632.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   404.876 ±(99.9%) 1423.197 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.876, 674.826), stdev = 369.600
[info]   CI (99.9%): [≈ 0, 1828.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   2114.890 ±(99.9%) 7437.700 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2114.890, 3622.228), stdev = 1931.547
[info]   CI (99.9%): [≈ 0, 9552.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.400, 6.000), stdev = 3.130
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 24.24% complete, ETA 01:25:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 62276.231 ops/s
[info] # Warmup Iteration   2: 100214.587 ops/s
[info] # Warmup Iteration   3: 100140.124 ops/s
[info] # Warmup Iteration   4: 100719.520 ops/s
[info] # Warmup Iteration   5: 100170.138 ops/s
[info] Iteration   1: 100325.781 ops/s
[info]                  ·gc.alloc.rate:                   1108.614 MB/sec
[info]                  ·gc.alloc.rate.norm:              17392.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.235 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        21245.316 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 10.450 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 100662.174 ops/s
[info]                  ·gc.alloc.rate:            1112.117 MB/sec
[info]                  ·gc.alloc.rate.norm:       17392.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.316 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10592.308 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 100364.069 ops/s
[info]                  ·gc.alloc.rate:                   1109.277 MB/sec
[info]                  ·gc.alloc.rate.norm:              17392.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.519 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        21237.062 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 10.446 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 100149.648 ops/s
[info]                  ·gc.alloc.rate:            1106.565 MB/sec
[info]                  ·gc.alloc.rate.norm:       17392.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.773 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 21293.115 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 100607.039 ops/s
[info]                  ·gc.alloc.rate:                   1111.568 MB/sec
[info]                  ·gc.alloc.rate.norm:              17392.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.352 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        10598.098 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 62.526 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala":
[info]   100421.742 ±(99.9%) 813.917 ops/s [Average]
[info]   (min, avg, max) = (100149.648, 100421.742, 100662.174), stdev = 211.372
[info]   CI (99.9%): [99607.825, 101235.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1109.628 ±(99.9%) 8.716 MB/sec [Average]
[info]   (min, avg, max) = (1106.565, 1109.628, 1112.117), stdev = 2.263
[info]   CI (99.9%): [1100.913, 1118.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   17392.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (17392.004, 17392.004, 17392.004), stdev = 0.001
[info]   CI (99.9%): [17392.004, 17392.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1083.639 ±(99.9%) 1428.219 MB/sec [Average]
[info]   (min, avg, max) = (677.316, 1083.639, 1354.773), stdev = 370.904
[info]   CI (99.9%): [≈ 0, 2511.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   16993.180 ±(99.9%) 22489.942 B/op [Average]
[info]   (min, avg, max) = (10592.308, 16993.180, 21293.115), stdev = 5840.567
[info]   CI (99.9%): [≈ 0, 39483.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 6.437 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.996), stdev = 1.672
[info]   CI (99.9%): [≈ 0, 7.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   16.684 ±(99.9%) 100.706 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.684, 62.526), stdev = 26.153
[info]   CI (99.9%): [≈ 0, 117.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.200, 10.000), stdev = 2.950
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 24.47% complete, ETA 01:25:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 398887.017 ops/s
[info] # Warmup Iteration   2: 417377.873 ops/s
[info] # Warmup Iteration   3: 414434.518 ops/s
[info] # Warmup Iteration   4: 422701.003 ops/s
[info] # Warmup Iteration   5: 419509.379 ops/s
[info] Iteration   1: 424526.292 ops/s
[info]                  ·gc.alloc.rate:      276.186 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 424193.094 ops/s
[info]                  ·gc.alloc.rate:      276.016 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 422184.870 ops/s
[info]                  ·gc.alloc.rate:            274.702 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.144 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2527.904 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 423611.480 ops/s
[info]                  ·gc.alloc.rate:      275.585 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 419062.220 ops/s
[info]                  ·gc.alloc.rate:            272.623 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.979 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2546.557 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala":
[info]   422715.591 ±(99.9%) 8587.250 ops/s [Average]
[info]   (min, avg, max) = (419062.220, 422715.591, 424526.292), stdev = 2230.082
[info]   CI (99.9%): [414128.341, 431302.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   275.023 ±(99.9%) 5.619 MB/sec [Average]
[info]   (min, avg, max) = (272.623, 275.023, 276.186), stdev = 1.459
[info]   CI (99.9%): [269.404, 280.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1024.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1024.001, 1024.001, 1024.001), stdev = 0.001
[info]   CI (99.9%): [1024.001, 1024.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   271.224 ±(99.9%) 1430.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 271.224, 678.144), stdev = 371.389
[info]   CI (99.9%): [≈ 0, 1701.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1014.892 ±(99.9%) 5351.293 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1014.892, 2546.557), stdev = 1389.714
[info]   CI (99.9%): [≈ 0, 6366.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 4.000), stdev = 1.949
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 24.71% complete, ETA 01:25:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18238.809 ops/s
[info] # Warmup Iteration   2: 36803.677 ops/s
[info] # Warmup Iteration   3: 36896.542 ops/s
[info] # Warmup Iteration   4: 36146.241 ops/s
[info] # Warmup Iteration   5: 36235.813 ops/s
[info] Iteration   1: 36773.618 ops/s
[info]                  ·gc.alloc.rate:                   1963.109 MB/sec
[info]                  ·gc.alloc.rate.norm:              84016.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.981 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        57989.711 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 171.061 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 37407.829 ops/s
[info]                  ·gc.alloc.rate:                                  1996.950 MB/sec
[info]                  ·gc.alloc.rate.norm:                             84016.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.127 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.336 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.355 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       86010.417 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 37460.819 ops/s
[info]                  ·gc.alloc.rate:                                  1999.702 MB/sec
[info]                  ·gc.alloc.rate.norm:                             84016.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.192 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.222 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       85886.459 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 37427.930 ops/s
[info]                  ·gc.alloc.rate:                                  1998.066 MB/sec
[info]                  ·gc.alloc.rate.norm:                             84016.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.055 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.404 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       85964.465 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 37500.802 ops/s
[info]                  ·gc.alloc.rate:                                  2001.941 MB/sec
[info]                  ·gc.alloc.rate.norm:                             84016.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.391 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.437 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       85799.444 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson":
[info]   37314.200 ±(99.9%) 1171.518 ops/s [Average]
[info]   (min, avg, max) = (36773.618, 37314.200, 37500.802), stdev = 304.240
[info]   CI (99.9%): [36142.681, 38485.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1991.954 ±(99.9%) 62.510 MB/sec [Average]
[info]   (min, avg, max) = (1963.109, 1991.954, 2001.941), stdev = 16.234
[info]   CI (99.9%): [1929.443, 2054.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   84016.011 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (84016.011, 84016.011, 84016.011), stdev = 0.001
[info]   CI (99.9%): [84016.011, 84016.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.028 ±(99.9%) 0.212 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.127), stdev = 0.055
[info]   CI (99.9%): [≈ 0, 0.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.195 ±(99.9%) 8.933 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.195, 5.336), stdev = 2.320
[info]   CI (99.9%): [≈ 0, 10.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1906.480 ±(99.9%) 1187.142 MB/sec [Average]
[info]   (min, avg, max) = (1354.981, 1906.480, 2044.437), stdev = 308.297
[info]   CI (99.9%): [719.337, 3093.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   80330.099 ±(99.9%) 48090.361 B/op [Average]
[info]   (min, avg, max) = (57989.711, 80330.099, 86010.417), stdev = 12488.914
[info]   CI (99.9%): [32239.738, 128420.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   34.212 ±(99.9%) 294.578 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 34.212, 171.061), stdev = 76.501
[info]   CI (99.9%): [≈ 0, 328.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 10.000), stdev = 2.490
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 24.94% complete, ETA 01:24:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 66864.226 ops/s
[info] # Warmup Iteration   2: 87691.639 ops/s
[info] # Warmup Iteration   3: 90637.564 ops/s
[info] # Warmup Iteration   4: 87772.921 ops/s
[info] # Warmup Iteration   5: 89760.187 ops/s
[info] Iteration   1: 90675.056 ops/s
[info]                  ·gc.alloc.rate:      437.815 MB/sec
[info]                  ·gc.alloc.rate.norm: 7600.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 87705.290 ops/s
[info]                  ·gc.alloc.rate:            423.515 MB/sec
[info]                  ·gc.alloc.rate.norm:       7600.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.124 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12168.976 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 83247.390 ops/s
[info]                  ·gc.alloc.rate:      402.097 MB/sec
[info]                  ·gc.alloc.rate.norm: 7600.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 88241.561 ops/s
[info]                  ·gc.alloc.rate:            426.131 MB/sec
[info]                  ·gc.alloc.rate.norm:       7600.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.153 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12094.796 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 89455.099 ops/s
[info]                  ·gc.alloc.rate:            431.962 MB/sec
[info]                  ·gc.alloc.rate.norm:       7600.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.128 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11931.086 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce":
[info]   87864.879 ±(99.9%) 10876.698 ops/s [Average]
[info]   (min, avg, max) = (83247.390, 87864.879, 90675.056), stdev = 2824.644
[info]   CI (99.9%): [76988.181, 98741.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate":
[info]   424.304 ±(99.9%) 52.314 MB/sec [Average]
[info]   (min, avg, max) = (402.097, 424.304, 437.815), stdev = 13.586
[info]   CI (99.9%): [371.990, 476.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7600.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7600.004, 7600.005, 7600.005), stdev = 0.001
[info]   CI (99.9%): [7600.004, 7600.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   406.881 ±(99.9%) 1430.244 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 406.881, 678.153), stdev = 371.430
[info]   CI (99.9%): [≈ 0, 1837.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   7238.971 ±(99.9%) 25448.162 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7238.971, 12168.976), stdev = 6608.807
[info]   CI (99.9%): [≈ 0, 32687.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 5.000), stdev = 2.302
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 25.18% complete, ETA 01:24:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4332.061 ops/s
[info] # Warmup Iteration   2: 112379.465 ops/s
[info] # Warmup Iteration   3: 111366.610 ops/s
[info] # Warmup Iteration   4: 112845.587 ops/s
[info] # Warmup Iteration   5: 112194.943 ops/s
[info] Iteration   1: 107043.131 ops/s
[info]                  ·gc.alloc.rate:      327.627 MB/sec
[info]                  ·gc.alloc.rate.norm: 4816.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 111329.767 ops/s
[info]                  ·gc.alloc.rate:            340.743 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.949 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9539.615 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 112722.648 ops/s
[info]                  ·gc.alloc.rate:      344.880 MB/sec
[info]                  ·gc.alloc.rate.norm: 4816.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 112000.669 ops/s
[info]                  ·gc.alloc.rate:            342.692 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.743 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9482.471 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 112633.917 ops/s
[info]                  ·gc.alloc.rate:      344.621 MB/sec
[info]                  ·gc.alloc.rate.norm: 4816.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava":
[info]   111146.026 ±(99.9%) 9091.409 ops/s [Average]
[info]   (min, avg, max) = (107043.131, 111146.026, 112722.648), stdev = 2361.010
[info]   CI (99.9%): [102054.617, 120237.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   340.113 ±(99.9%) 27.634 MB/sec [Average]
[info]   (min, avg, max) = (327.627, 340.113, 344.880), stdev = 7.177
[info]   CI (99.9%): [312.478, 367.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   4816.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4816.004, 4816.004, 4816.004), stdev = 0.001
[info]   CI (99.9%): [4816.003, 4816.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   269.938 ±(99.9%) 1423.307 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.938, 674.949), stdev = 369.628
[info]   CI (99.9%): [≈ 0, 1693.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   3804.417 ±(99.9%) 20059.745 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3804.417, 9539.615), stdev = 5209.452
[info]   CI (99.9%): [≈ 0, 23864.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 6.000), stdev = 3.033
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 25.41% complete, ETA 01:24:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 65685.284 ops/s
[info] # Warmup Iteration   2: 98009.097 ops/s
[info] # Warmup Iteration   3: 96949.865 ops/s
[info] # Warmup Iteration   4: 98758.253 ops/s
[info] # Warmup Iteration   5: 97261.045 ops/s
[info] Iteration   1: 99219.959 ops/s
[info]                  ·gc.alloc.rate:      327.795 MB/sec
[info]                  ·gc.alloc.rate.norm: 5200.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 98033.376 ops/s
[info]                  ·gc.alloc.rate:            323.971 MB/sec
[info]                  ·gc.alloc.rate.norm:       5200.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.605 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10876.102 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 99094.240 ops/s
[info]                  ·gc.alloc.rate:      327.435 MB/sec
[info]                  ·gc.alloc.rate.norm: 5200.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 98512.201 ops/s
[info]                  ·gc.alloc.rate:            325.435 MB/sec
[info]                  ·gc.alloc.rate.norm:       5200.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.351 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10823.118 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 98811.353 ops/s
[info]                  ·gc.alloc.rate:      326.407 MB/sec
[info]                  ·gc.alloc.rate.norm: 5200.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala":
[info]   98734.226 ±(99.9%) 1838.639 ops/s [Average]
[info]   (min, avg, max) = (98033.376, 98734.226, 99219.959), stdev = 477.489
[info]   CI (99.9%): [96895.587, 100572.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   326.209 ±(99.9%) 5.985 MB/sec [Average]
[info]   (min, avg, max) = (323.971, 326.209, 327.795), stdev = 1.554
[info]   CI (99.9%): [320.224, 332.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   5200.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5200.004, 5200.004, 5200.004), stdev = 0.001
[info]   CI (99.9%): [5200.004, 5200.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   270.991 ±(99.9%) 1428.858 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 270.991, 677.605), stdev = 371.070
[info]   CI (99.9%): [≈ 0, 1699.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   4339.844 ±(99.9%) 22882.858 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4339.844, 10876.102), stdev = 5942.606
[info]   CI (99.9%): [≈ 0, 27222.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 5.000), stdev = 2.490
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 25.65% complete, ETA 01:24:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 105410.060 ops/s
[info] # Warmup Iteration   2: 116136.846 ops/s
[info] # Warmup Iteration   3: 117307.200 ops/s
[info] # Warmup Iteration   4: 115189.570 ops/s
[info] # Warmup Iteration   5: 116454.528 ops/s
[info] Iteration   1: 116392.061 ops/s
[info]                  ·gc.alloc.rate:            356.203 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.550 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9160.740 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 117433.668 ops/s
[info]                  ·gc.alloc.rate:      359.341 MB/sec
[info]                  ·gc.alloc.rate.norm: 4816.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 116146.481 ops/s
[info]                  ·gc.alloc.rate:            355.373 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.379 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9179.824 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 117522.768 ops/s
[info]                  ·gc.alloc.rate:      359.565 MB/sec
[info]                  ·gc.alloc.rate.norm: 4816.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 117073.801 ops/s
[info]                  ·gc.alloc.rate:            358.275 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.516 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9107.306 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala":
[info]   116913.756 ±(99.9%) 2379.698 ops/s [Average]
[info]   (min, avg, max) = (116146.481, 116913.756, 117522.768), stdev = 618.000
[info]   CI (99.9%): [114534.058, 119293.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   357.751 ±(99.9%) 7.241 MB/sec [Average]
[info]   (min, avg, max) = (355.373, 357.751, 359.565), stdev = 1.880
[info]   CI (99.9%): [350.511, 364.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   4816.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4816.003, 4816.004, 4816.004), stdev = 0.001
[info]   CI (99.9%): [4816.003, 4816.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   406.489 ±(99.9%) 1428.866 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 406.489, 677.550), stdev = 371.072
[info]   CI (99.9%): [≈ 0, 1835.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   5489.574 ±(99.9%) 19296.898 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5489.574, 9179.824), stdev = 5011.343
[info]   CI (99.9%): [≈ 0, 24786.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 25.88% complete, ETA 01:23:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 103477.679 ops/s
[info] # Warmup Iteration   2: 116044.112 ops/s
[info] # Warmup Iteration   3: 114740.254 ops/s
[info] # Warmup Iteration   4: 116644.911 ops/s
[info] # Warmup Iteration   5: 116209.056 ops/s
[info] Iteration   1: 115782.666 ops/s
[info]                  ·gc.alloc.rate:            263.025 MB/sec
[info]                  ·gc.alloc.rate.norm:       3576.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.002 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9217.892 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 116428.209 ops/s
[info]                  ·gc.alloc.rate:      264.584 MB/sec
[info]                  ·gc.alloc.rate.norm: 3576.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 115663.343 ops/s
[info]                  ·gc.alloc.rate:            262.762 MB/sec
[info]                  ·gc.alloc.rate.norm:       3576.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.353 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9218.310 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 116176.695 ops/s
[info]                  ·gc.alloc.rate:      263.925 MB/sec
[info]                  ·gc.alloc.rate.norm: 3576.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 116262.662 ops/s
[info]                  ·gc.alloc.rate:      264.166 MB/sec
[info]                  ·gc.alloc.rate.norm: 3576.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc":
[info]   116062.715 ±(99.9%) 1254.391 ops/s [Average]
[info]   (min, avg, max) = (115663.343, 116062.715, 116428.209), stdev = 325.761
[info]   CI (99.9%): [114808.324, 117317.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   263.692 ±(99.9%) 2.973 MB/sec [Average]
[info]   (min, avg, max) = (262.762, 263.692, 264.584), stdev = 0.772
[info]   CI (99.9%): [260.719, 266.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   3576.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3576.004, 3576.004, 3576.004), stdev = 0.001
[info]   CI (99.9%): [3576.003, 3576.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   271.071 ±(99.9%) 1429.279 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 271.071, 678.002), stdev = 371.179
[info]   CI (99.9%): [≈ 0, 1700.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   3687.241 ±(99.9%) 19441.755 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3687.241, 9218.310), stdev = 5048.962
[info]   CI (99.9%): [≈ 0, 23128.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 5.000), stdev = 2.302
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 26.12% complete, ETA 01:23:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6069.812 ops/s
[info] # Warmup Iteration   2: 8622.817 ops/s
[info] # Warmup Iteration   3: 8851.939 ops/s
[info] # Warmup Iteration   4: 8868.943 ops/s
[info] # Warmup Iteration   5: 8917.878 ops/s
[info] Iteration   1: 8833.126 ops/s
[info]                  ·gc.alloc.rate:            1464.113 MB/sec
[info]                  ·gc.alloc.rate.norm:       260904.046 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.016 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 241641.283 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 8830.105 ops/s
[info]                  ·gc.alloc.rate:            1463.656 MB/sec
[info]                  ·gc.alloc.rate.norm:       260904.050 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.054 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 241723.362 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 8861.661 ops/s
[info]                  ·gc.alloc.rate:                   1468.876 MB/sec
[info]                  ·gc.alloc.rate.norm:              260904.086 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.977 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        240850.715 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 591.480 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 8905.204 ops/s
[info]                  ·gc.alloc.rate:                                  1476.114 MB/sec
[info]                  ·gc.alloc.rate.norm:                             260904.046 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.134 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 23.688 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.741 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       240865.218 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 8904.748 ops/s
[info]                  ·gc.alloc.rate:            1476.088 MB/sec
[info]                  ·gc.alloc.rate.norm:       260904.046 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.075 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 361297.827 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce":
[info]   8866.969 ±(99.9%) 141.764 ops/s [Average]
[info]   (min, avg, max) = (8830.105, 8866.969, 8905.204), stdev = 36.816
[info]   CI (99.9%): [8725.204, 9008.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate":
[info]   1469.770 ±(99.9%) 23.608 MB/sec [Average]
[info]   (min, avg, max) = (1463.656, 1469.770, 1476.114), stdev = 6.131
[info]   CI (99.9%): [1446.162, 1493.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   260904.055 ±(99.9%) 0.067 B/op [Average]
[info]   (min, avg, max) = (260904.046, 260904.055, 260904.086), stdev = 0.017
[info]   CI (99.9%): [260903.987, 260904.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.027 ±(99.9%) 0.231 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.134), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   4.738 ±(99.9%) 40.793 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.738, 23.688), stdev = 10.594
[info]   CI (99.9%): [≈ 0, 45.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1494.973 ±(99.9%) 1182.038 MB/sec [Average]
[info]   (min, avg, max) = (1355.977, 1494.973, 2044.075), stdev = 306.972
[info]   CI (99.9%): [312.934, 2677.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   265275.681 ±(99.9%) 206701.033 B/op [Average]
[info]   (min, avg, max) = (240850.715, 265275.681, 361297.827), stdev = 53679.602
[info]   CI (99.9%): [58574.648, 471976.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   118.296 ±(99.9%) 1018.564 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 118.296, 591.480), stdev = 264.518
[info]   CI (99.9%): [≈ 0, 1136.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 8.000), stdev = 2.168
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 26.35% complete, ETA 01:23:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4406.767 ops/s
[info] # Warmup Iteration   2: 8509.507 ops/s
[info] # Warmup Iteration   3: 8565.083 ops/s
[info] # Warmup Iteration   4: 8748.125 ops/s
[info] # Warmup Iteration   5: 8720.094 ops/s
[info] Iteration   1: 8685.324 ops/s
[info]                  ·gc.alloc.rate:            1354.867 MB/sec
[info]                  ·gc.alloc.rate.norm:       245528.054 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2032.206 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 368275.052 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 8739.081 ops/s
[info]                  ·gc.alloc.rate:            1363.090 MB/sec
[info]                  ·gc.alloc.rate.norm:       245528.047 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.607 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 243999.952 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 8735.600 ops/s
[info]                  ·gc.alloc.rate:                   1362.712 MB/sec
[info]                  ·gc.alloc.rate.norm:              245543.789 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.609 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        244083.724 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 720.011 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 8807.945 ops/s
[info]                  ·gc.alloc.rate:                                  1374.139 MB/sec
[info]                  ·gc.alloc.rate.norm:                             245560.050 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.044 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 7.838 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.707 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       243517.196 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 8831.808 ops/s
[info]                  ·gc.alloc.rate:                                  1377.739 MB/sec
[info]                  ·gc.alloc.rate.norm:                             245560.050 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.656 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.566 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       242855.614 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala":
[info]   8759.952 ±(99.9%) 228.332 ops/s [Average]
[info]   (min, avg, max) = (8685.324, 8759.952, 8831.808), stdev = 59.297
[info]   CI (99.9%): [8531.620, 8988.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1366.509 ±(99.9%) 35.812 MB/sec [Average]
[info]   (min, avg, max) = (1354.867, 1366.509, 1377.739), stdev = 9.300
[info]   CI (99.9%): [1330.697, 1402.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   245543.998 ±(99.9%) 61.611 B/op [Average]
[info]   (min, avg, max) = (245528.047, 245543.998, 245560.050), stdev = 16.000
[info]   CI (99.9%): [245482.387, 245605.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.010 ±(99.9%) 0.074 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.044), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.699 ±(99.9%) 13.261 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.699, 7.838), stdev = 3.444
[info]   CI (99.9%): [≈ 0, 14.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1493.339 ±(99.9%) 1160.055 MB/sec [Average]
[info]   (min, avg, max) = (1354.607, 1493.339, 2032.206), stdev = 301.263
[info]   CI (99.9%): [333.284, 2653.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   268546.308 ±(99.9%) 214681.878 B/op [Average]
[info]   (min, avg, max) = (242855.614, 268546.308, 368275.052), stdev = 55752.202
[info]   CI (99.9%): [53864.429, 483228.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   144.002 ±(99.9%) 1239.902 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 144.002, 720.011), stdev = 321.999
[info]   CI (99.9%): [≈ 0, 1383.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.600, 14.000), stdev = 4.669
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 26.59% complete, ETA 01:23:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 171943.565 ops/s
[info] # Warmup Iteration   2: 179880.329 ops/s
[info] # Warmup Iteration   3: 184575.375 ops/s
[info] # Warmup Iteration   4: 185294.816 ops/s
[info] # Warmup Iteration   5: 184608.283 ops/s
[info] Iteration   1: 185027.605 ops/s
[info]                  ·gc.alloc.rate:            481.426 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.635 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5773.860 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 185816.210 ops/s
[info]                  ·gc.alloc.rate:      483.649 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 185154.009 ops/s
[info]                  ·gc.alloc.rate:            481.870 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.798 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5769.931 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 185392.287 ops/s
[info]                  ·gc.alloc.rate:            482.609 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.955 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5762.432 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 185484.220 ops/s
[info]                  ·gc.alloc.rate:            482.875 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.996 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5759.605 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala":
[info]   185374.866 ±(99.9%) 1181.235 ops/s [Average]
[info]   (min, avg, max) = (185027.605, 185374.866, 185816.210), stdev = 306.763
[info]   CI (99.9%): [184193.631, 186556.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   482.486 ±(99.9%) 3.346 MB/sec [Average]
[info]   (min, avg, max) = (481.426, 482.486, 483.649), stdev = 0.869
[info]   CI (99.9%): [479.140, 485.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.002, 4096.002, 4096.002), stdev = 0.001
[info]   CI (99.9%): [4096.002, 4096.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   543.077 ±(99.9%) 1169.014 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 543.077, 678.996), stdev = 303.589
[info]   CI (99.9%): [≈ 0, 1712.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   4613.166 ±(99.9%) 9930.211 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4613.166, 5773.860), stdev = 2578.844
[info]   CI (99.9%): [≈ 0, 14543.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 26.82% complete, ETA 01:22:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2213.295 ops/s
[info] # Warmup Iteration   2: 4532.239 ops/s
[info] # Warmup Iteration   3: 4569.106 ops/s
[info] # Warmup Iteration   4: 4695.067 ops/s
[info] # Warmup Iteration   5: 4685.289 ops/s
[info] Iteration   1: 4702.583 ops/s
[info]                  ·gc.alloc.rate:            1249.362 MB/sec
[info]                  ·gc.alloc.rate.norm:       418024.094 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.549 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 226701.061 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 4673.777 ops/s
[info]                  ·gc.alloc.rate:            1241.326 MB/sec
[info]                  ·gc.alloc.rate.norm:       418024.087 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.733 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 456214.670 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 4663.267 ops/s
[info]                  ·gc.alloc.rate:            1239.000 MB/sec
[info]                  ·gc.alloc.rate.norm:       418024.087 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.094 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 457192.623 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   4: 4654.520 ops/s
[info]                  ·gc.alloc.rate:                   1236.255 MB/sec
[info]                  ·gc.alloc.rate.norm:              418024.088 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.704 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        458076.371 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1351.258 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 4581.355 ops/s
[info]                  ·gc.alloc.rate:                                  1216.942 MB/sec
[info]                  ·gc.alloc.rate.norm:                             418024.089 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.117 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 40.211 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.775 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       468118.371 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson":
[info]   4655.100 ±(99.9%) 173.373 ops/s [Average]
[info]   (min, avg, max) = (4581.355, 4655.100, 4702.583), stdev = 45.024
[info]   CI (99.9%): [4481.727, 4828.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1236.577 ±(99.9%) 46.269 MB/sec [Average]
[info]   (min, avg, max) = (1216.942, 1236.577, 1249.362), stdev = 12.016
[info]   CI (99.9%): [1190.308, 1282.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   418024.089 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (418024.087, 418024.089, 418024.094), stdev = 0.003
[info]   CI (99.9%): [418024.079, 418024.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.023 ±(99.9%) 0.202 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.117), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   8.042 ±(99.9%) 69.246 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.042, 40.211), stdev = 17.983
[info]   CI (99.9%): [≈ 0, 77.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1220.971 ±(99.9%) 1169.832 MB/sec [Average]
[info]   (min, avg, max) = (677.549, 1220.971, 1362.775), stdev = 303.802
[info]   CI (99.9%): [51.139, 2390.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   413260.619 ±(99.9%) 402006.879 B/op [Average]
[info]   (min, avg, max) = (226701.061, 413260.619, 468118.371), stdev = 104399.910
[info]   CI (99.9%): [11253.740, 815267.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   270.252 ±(99.9%) 2326.947 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 270.252, 1351.258), stdev = 604.301
[info]   CI (99.9%): [≈ 0, 2597.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.400, 11.000), stdev = 3.647
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 27.06% complete, ETA 01:22:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14775.224 ops/s
[info] # Warmup Iteration   2: 25181.851 ops/s
[info] # Warmup Iteration   3: 25228.807 ops/s
[info] # Warmup Iteration   4: 25499.799 ops/s
[info] # Warmup Iteration   5: 25040.290 ops/s
[info] Iteration   1: 25505.686 ops/s
[info]                  ·gc.alloc.rate:            1322.230 MB/sec
[info]                  ·gc.alloc.rate.norm:       81568.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.608 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 83688.778 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 25404.022 ops/s
[info]                  ·gc.alloc.rate:            1316.719 MB/sec
[info]                  ·gc.alloc.rate.norm:       81568.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.377 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 84024.746 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 25402.815 ops/s
[info]                  ·gc.alloc.rate:            1316.564 MB/sec
[info]                  ·gc.alloc.rate.norm:       81568.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.271 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 84028.053 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 25477.061 ops/s
[info]                  ·gc.alloc.rate:                   1320.338 MB/sec
[info]                  ·gc.alloc.rate.norm:              81568.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1356.102 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        83777.449 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 205.740 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 25572.304 ops/s
[info]                  ·gc.alloc.rate:                                  1325.367 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81568.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.126 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 7.736 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.819 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       83872.962 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce":
[info]   25472.378 ±(99.9%) 276.524 ops/s [Average]
[info]   (min, avg, max) = (25402.815, 25472.378, 25572.304), stdev = 71.812
[info]   CI (99.9%): [25195.854, 25748.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1320.244 ±(99.9%) 14.429 MB/sec [Average]
[info]   (min, avg, max) = (1316.564, 1320.244, 1325.367), stdev = 3.747
[info]   CI (99.9%): [1305.815, 1334.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   81568.017 ±(99.9%) 0.003 B/op [Average]
[info]   (min, avg, max) = (81568.016, 81568.017, 81568.017), stdev = 0.001
[info]   CI (99.9%): [81568.014, 81568.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.216 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.126), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.547 ±(99.9%) 13.322 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.547, 7.736), stdev = 3.460
[info]   CI (99.9%): [≈ 0, 14.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1357.636 ±(99.9%) 11.180 MB/sec [Average]
[info]   (min, avg, max) = (1356.102, 1357.636, 1362.819), stdev = 2.903
[info]   CI (99.9%): [1346.455, 1368.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   83878.398 ±(99.9%) 577.564 B/op [Average]
[info]   (min, avg, max) = (83688.778, 83878.398, 84028.053), stdev = 149.992
[info]   CI (99.9%): [83300.833, 84455.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   41.148 ±(99.9%) 354.297 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 41.148, 205.740), stdev = 92.010
[info]   CI (99.9%): [≈ 0, 395.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.800, 12.000), stdev = 3.194
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 27.29% complete, ETA 01:22:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16352.854 ops/s
[info] # Warmup Iteration   2: 29174.397 ops/s
[info] # Warmup Iteration   3: 30050.946 ops/s
[info] # Warmup Iteration   4: 30167.829 ops/s
[info] # Warmup Iteration   5: 30180.220 ops/s
[info] Iteration   1: 29787.713 ops/s
[info]                  ·gc.alloc.rate:            1456.095 MB/sec
[info]                  ·gc.alloc.rate.norm:       76944.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2032.089 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 107381.109 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 29520.807 ops/s
[info]                  ·gc.alloc.rate:            1443.009 MB/sec
[info]                  ·gc.alloc.rate.norm:       76944.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.692 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 72234.762 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 29595.849 ops/s
[info]                  ·gc.alloc.rate:                                  1446.681 MB/sec
[info]                  ·gc.alloc.rate.norm:                             76944.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.094 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.694 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       72264.283 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                212.542 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 29774.761 ops/s
[info]                  ·gc.alloc.rate:                                  1455.513 MB/sec
[info]                  ·gc.alloc.rate.norm:                             76944.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.047 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.467 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.769 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       72041.185 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 29779.772 ops/s
[info]                  ·gc.alloc.rate:                                  1456.129 MB/sec
[info]                  ·gc.alloc.rate.norm:                             76944.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.069 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.116 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       72029.092 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala":
[info]   29691.780 ±(99.9%) 480.430 ops/s [Average]
[info]   (min, avg, max) = (29520.807, 29691.780, 29787.713), stdev = 124.766
[info]   CI (99.9%): [29211.351, 30172.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1451.485 ±(99.9%) 23.889 MB/sec [Average]
[info]   (min, avg, max) = (1443.009, 1451.485, 1456.129), stdev = 6.204
[info]   CI (99.9%): [1427.596, 1475.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   76944.014 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (76944.014, 76944.014, 76944.015), stdev = 0.001
[info]   CI (99.9%): [76944.012, 76944.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.028 ±(99.9%) 0.161 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.094), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.510 ±(99.9%) 8.570 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.510, 5.012), stdev = 2.226
[info]   CI (99.9%): [≈ 0, 10.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1494.272 ±(99.9%) 1157.767 MB/sec [Average]
[info]   (min, avg, max) = (1354.692, 1494.272, 2032.089), stdev = 300.668
[info]   CI (99.9%): [336.505, 2652.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   79190.086 ±(99.9%) 60684.721 B/op [Average]
[info]   (min, avg, max) = (72029.092, 79190.086, 107381.109), stdev = 15759.629
[info]   CI (99.9%): [18505.365, 139874.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   42.508 ±(99.9%) 366.010 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 42.508, 212.542), stdev = 95.052
[info]   CI (99.9%): [≈ 0, 408.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.000, 14.000), stdev = 4.637
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 27.53% complete, ETA 01:21:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 318379.763 ops/s
[info] # Warmup Iteration   2: 348107.023 ops/s
[info] # Warmup Iteration   3: 375966.282 ops/s
[info] # Warmup Iteration   4: 377500.408 ops/s
[info] # Warmup Iteration   5: 371274.393 ops/s
[info] Iteration   1: 376969.966 ops/s
[info]                  ·gc.alloc.rate:            833.467 MB/sec
[info]                  ·gc.alloc.rate.norm:       3480.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.859 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5656.989 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 373443.314 ops/s
[info]                  ·gc.alloc.rate:            825.552 MB/sec
[info]                  ·gc.alloc.rate.norm:       3480.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.331 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2855.197 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 369992.614 ops/s
[info]                  ·gc.alloc.rate:            817.971 MB/sec
[info]                  ·gc.alloc.rate.norm:       3480.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.314 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2881.583 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 377276.492 ops/s
[info]                  ·gc.alloc.rate:            834.203 MB/sec
[info]                  ·gc.alloc.rate.norm:       3480.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.450 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2826.081 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 374153.004 ops/s
[info]                  ·gc.alloc.rate:            827.169 MB/sec
[info]                  ·gc.alloc.rate.norm:       3480.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.675 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5699.285 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala":
[info]   374367.078 ±(99.9%) 11434.990 ops/s [Average]
[info]   (min, avg, max) = (369992.614, 374367.078, 377276.492), stdev = 2969.630
[info]   CI (99.9%): [362932.088, 385802.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   827.672 ±(99.9%) 25.476 MB/sec [Average]
[info]   (min, avg, max) = (817.971, 827.672, 834.203), stdev = 6.616
[info]   CI (99.9%): [802.197, 853.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3480.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3480.001, 3480.001, 3480.001), stdev = 0.001
[info]   CI (99.9%): [3480.001, 3480.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   948.326 ±(99.9%) 1428.699 MB/sec [Average]
[info]   (min, avg, max) = (677.314, 948.326, 1354.859), stdev = 371.029
[info]   CI (99.9%): [≈ 0, 2377.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   3983.827 ±(99.9%) 5956.497 B/op [Average]
[info]   (min, avg, max) = (2826.081, 3983.827, 5699.285), stdev = 1546.883
[info]   CI (99.9%): [≈ 0, 9940.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 27.76% complete, ETA 01:21:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 374510.112 ops/s
[info] # Warmup Iteration   2: 419763.731 ops/s
[info] # Warmup Iteration   3: 414931.770 ops/s
[info] # Warmup Iteration   4: 413295.767 ops/s
[info] # Warmup Iteration   5: 402437.849 ops/s
[info] Iteration   1: 415257.947 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 416241.688 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 415538.097 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 415943.199 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 414510.786 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc":
[info]   415498.343 ±(99.9%) 2572.375 ops/s [Average]
[info]   (min, avg, max) = (414510.786, 415498.343, 416241.688), stdev = 668.038
[info]   CI (99.9%): [412925.968, 418070.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 28.00% complete, ETA 01:21:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16040.195 ops/s
[info] # Warmup Iteration   2: 26712.310 ops/s
[info] # Warmup Iteration   3: 26797.703 ops/s
[info] # Warmup Iteration   4: 26768.385 ops/s
[info] # Warmup Iteration   5: 26878.928 ops/s
[info] Iteration   1: 27058.481 ops/s
[info]                  ·gc.alloc.rate:            1423.723 MB/sec
[info]                  ·gc.alloc.rate.norm:       82824.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.703 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 78808.838 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 27064.011 ops/s
[info]                  ·gc.alloc.rate:            1424.104 MB/sec
[info]                  ·gc.alloc.rate.norm:       82824.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.815 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 78794.280 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 27294.851 ops/s
[info]                  ·gc.alloc.rate:            1436.234 MB/sec
[info]                  ·gc.alloc.rate.norm:       82824.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.744 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 78124.673 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 27314.012 ops/s
[info]                  ·gc.alloc.rate:                                  1437.325 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82824.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.126 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 7.241 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2040.088 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       117557.494 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                230.279 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 27478.035 ops/s
[info]                  ·gc.alloc.rate:                                  1446.009 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82824.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.203 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.875 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       78062.311 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson":
[info]   27241.878 ±(99.9%) 691.645 ops/s [Average]
[info]   (min, avg, max) = (27058.481, 27241.878, 27478.035), stdev = 179.618
[info]   CI (99.9%): [26550.233, 27933.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1433.479 ±(99.9%) 36.655 MB/sec [Average]
[info]   (min, avg, max) = (1423.723, 1433.479, 1446.009), stdev = 9.519
[info]   CI (99.9%): [1396.825, 1470.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   82824.015 ±(99.9%) 0.003 B/op [Average]
[info]   (min, avg, max) = (82824.015, 82824.015, 82824.016), stdev = 0.001
[info]   CI (99.9%): [82824.013, 82824.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.026 ±(99.9%) 0.215 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.126), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.489 ±(99.9%) 12.386 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.489, 7.241), stdev = 3.217
[info]   CI (99.9%): [≈ 0, 13.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1493.445 ±(99.9%) 1176.768 MB/sec [Average]
[info]   (min, avg, max) = (1354.703, 1493.445, 2040.088), stdev = 305.603
[info]   CI (99.9%): [316.678, 2670.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   86269.519 ±(99.9%) 67363.576 B/op [Average]
[info]   (min, avg, max) = (78062.311, 86269.519, 117557.494), stdev = 17494.107
[info]   CI (99.9%): [18905.943, 153633.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   46.056 ±(99.9%) 396.555 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 46.056, 230.279), stdev = 102.984
[info]   CI (99.9%): [≈ 0, 442.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.400, 10.000), stdev = 3.130
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 28.24% complete, ETA 01:21:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 75896.487 ops/s
[info] # Warmup Iteration   2: 94652.360 ops/s
[info] # Warmup Iteration   3: 95408.499 ops/s
[info] # Warmup Iteration   4: 95427.268 ops/s
[info] # Warmup Iteration   5: 95019.251 ops/s
[info] Iteration   1: 90088.073 ops/s
[info]                  ·gc.alloc.rate:            1468.014 MB/sec
[info]                  ·gc.alloc.rate.norm:       25640.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.626 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23694.529 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 95169.810 ops/s
[info]                  ·gc.alloc.rate:            1550.459 MB/sec
[info]                  ·gc.alloc.rate.norm:       25640.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.272 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 22428.726 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 95377.886 ops/s
[info]                  ·gc.alloc.rate:                                  1553.473 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25640.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.051 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.841 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1359.276 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       22434.782 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                54.960 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 95483.195 ops/s
[info]                  ·gc.alloc.rate:                                  1555.256 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25640.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.087 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.430 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.025 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       33697.876 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 95699.307 ops/s
[info]                  ·gc.alloc.rate:            1558.839 MB/sec
[info]                  ·gc.alloc.rate.norm:       25640.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.741 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 22414.553 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce":
[info]   94363.654 ±(99.9%) 9232.815 ops/s [Average]
[info]   (min, avg, max) = (90088.073, 94363.654, 95699.307), stdev = 2397.733
[info]   CI (99.9%): [85130.840, 103596.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1537.208 ±(99.9%) 149.403 MB/sec [Average]
[info]   (min, avg, max) = (1468.014, 1537.208, 1558.839), stdev = 38.799
[info]   CI (99.9%): [1387.805, 1686.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   25640.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (25640.004, 25640.004, 25640.005), stdev = 0.001
[info]   CI (99.9%): [25640.003, 25640.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.028 ±(99.9%) 0.153 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.087), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.454 ±(99.9%) 2.526 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.454, 1.430), stdev = 0.656
[info]   CI (99.9%): [≈ 0, 2.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1495.788 ±(99.9%) 1180.164 MB/sec [Average]
[info]   (min, avg, max) = (1356.272, 1495.788, 2044.025), stdev = 306.485
[info]   CI (99.9%): [315.624, 2675.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   24934.093 ±(99.9%) 18982.924 B/op [Average]
[info]   (min, avg, max) = (22414.553, 24934.093, 33697.876), stdev = 4929.805
[info]   CI (99.9%): [5951.169, 43917.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   10.992 ±(99.9%) 94.645 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.992, 54.960), stdev = 24.579
[info]   CI (99.9%): [≈ 0, 105.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.000, 7.000), stdev = 2.121
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 28.47% complete, ETA 01:20:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30481.953 ops/s
[info] # Warmup Iteration   2: 460360.802 ops/s
[info] # Warmup Iteration   3: 444184.643 ops/s
[info] # Warmup Iteration   4: 455874.406 ops/s
[info] # Warmup Iteration   5: 458935.279 ops/s
[info] Iteration   1: 457532.031 ops/s
[info]                  ·gc.alloc.rate:            474.361 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.711 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2321.288 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 457728.702 ops/s
[info]                  ·gc.alloc.rate:            474.612 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.769 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2320.264 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 457644.387 ops/s
[info]                  ·gc.alloc.rate:            475.236 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.870 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2310.694 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 459555.653 ops/s
[info]                  ·gc.alloc.rate:      476.536 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 457485.935 ops/s
[info]                  ·gc.alloc.rate:            474.332 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.735 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2321.511 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava":
[info]   457989.342 ±(99.9%) 3391.415 ops/s [Average]
[info]   (min, avg, max) = (457485.935, 457989.342, 459555.653), stdev = 880.740
[info]   CI (99.9%): [454597.927, 461380.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   475.015 ±(99.9%) 3.560 MB/sec [Average]
[info]   (min, avg, max) = (474.332, 475.015, 476.536), stdev = 0.925
[info]   CI (99.9%): [471.455, 478.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1632.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1632.001, 1632.001, 1632.001), stdev = 0.001
[info]   CI (99.9%): [1632.001, 1632.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   539.417 ±(99.9%) 1161.140 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.417, 674.769), stdev = 301.544
[info]   CI (99.9%): [≈ 0, 1700.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   1854.751 ±(99.9%) 3992.530 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1854.751, 2321.511), stdev = 1036.847
[info]   CI (99.9%): [≈ 0, 5847.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.000, 5.000), stdev = 2.236
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 28.71% complete, ETA 01:20:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 170218.140 ops/s
[info] # Warmup Iteration   2: 270499.195 ops/s
[info] # Warmup Iteration   3: 270298.647 ops/s
[info] # Warmup Iteration   4: 268040.816 ops/s
[info] # Warmup Iteration   5: 271727.576 ops/s
[info] Iteration   1: 264427.481 ops/s
[info]                  ·gc.alloc.rate:            379.043 MB/sec
[info]                  ·gc.alloc.rate.norm:       2256.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.499 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4032.359 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 271486.934 ops/s
[info]                  ·gc.alloc.rate:      389.120 MB/sec
[info]                  ·gc.alloc.rate.norm: 2256.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 270017.986 ops/s
[info]                  ·gc.alloc.rate:            386.986 MB/sec
[info]                  ·gc.alloc.rate.norm:       2256.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.374 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3948.861 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 272052.989 ops/s
[info]                  ·gc.alloc.rate:      389.909 MB/sec
[info]                  ·gc.alloc.rate.norm: 2256.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 261073.852 ops/s
[info]                  ·gc.alloc.rate:            374.247 MB/sec
[info]                  ·gc.alloc.rate.norm:       2256.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.488 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4083.969 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala":
[info]   267811.848 ±(99.9%) 18588.592 ops/s [Average]
[info]   (min, avg, max) = (261073.852, 267811.848, 272052.989), stdev = 4827.398
[info]   CI (99.9%): [249223.256, 286400.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   383.861 ±(99.9%) 26.513 MB/sec [Average]
[info]   (min, avg, max) = (374.247, 383.861, 389.909), stdev = 6.885
[info]   CI (99.9%): [357.348, 410.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2256.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2256.001, 2256.002, 2256.002), stdev = 0.001
[info]   CI (99.9%): [2256.001, 2256.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   406.472 ±(99.9%) 1428.806 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 406.472, 677.499), stdev = 371.057
[info]   CI (99.9%): [≈ 0, 1835.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   2413.038 ±(99.9%) 8484.199 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2413.038, 4083.969), stdev = 2203.320
[info]   CI (99.9%): [≈ 0, 10897.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 5.000), stdev = 2.408
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 28.94% complete, ETA 01:20:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 596526.675 ops/s
[info] # Warmup Iteration   2: 616858.645 ops/s
[info] # Warmup Iteration   3: 625712.840 ops/s
[info] # Warmup Iteration   4: 623298.105 ops/s
[info] # Warmup Iteration   5: 625378.381 ops/s
[info] Iteration   1: 619478.544 ops/s
[info]                  ·gc.alloc.rate:            403.002 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.043 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1722.864 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 613461.650 ops/s
[info]                  ·gc.alloc.rate:            399.217 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.258 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1739.745 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 625825.664 ops/s
[info]                  ·gc.alloc.rate:      407.104 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 623145.527 ops/s
[info]                  ·gc.alloc.rate:            405.373 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.013 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1712.711 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 627319.803 ops/s
[info]                  ·gc.alloc.rate:      408.167 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala":
[info]   621846.238 ±(99.9%) 21386.781 ops/s [Average]
[info]   (min, avg, max) = (613461.650, 621846.238, 627319.803), stdev = 5554.079
[info]   CI (99.9%): [600459.456, 643233.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   404.573 ±(99.9%) 13.765 MB/sec [Average]
[info]   (min, avg, max) = (399.217, 404.573, 408.167), stdev = 3.575
[info]   CI (99.9%): [390.808, 418.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1024.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1024.001, 1024.001, 1024.001), stdev = 0.001
[info]   CI (99.9%): [1024.001, 1024.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   406.863 ±(99.9%) 1430.181 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 406.863, 678.258), stdev = 371.413
[info]   CI (99.9%): [≈ 0, 1837.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1035.064 ±(99.9%) 3638.586 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1035.064, 1739.745), stdev = 944.929
[info]   CI (99.9%): [≈ 0, 4673.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 29.18% complete, ETA 01:20:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38448.025 ops/s
[info] # Warmup Iteration   2: 67038.970 ops/s
[info] # Warmup Iteration   3: 67479.291 ops/s
[info] # Warmup Iteration   4: 69195.178 ops/s
[info] # Warmup Iteration   5: 70237.024 ops/s
[info] Iteration   1: 70313.956 ops/s
[info]                  ·gc.alloc.rate:                                  3079.363 MB/sec
[info]                  ·gc.alloc.rate.norm:                             68920.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.215 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2726.137 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       61014.348 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 70065.493 ops/s
[info]                  ·gc.alloc.rate:                                  3067.659 MB/sec
[info]                  ·gc.alloc.rate.norm:                             68920.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3406.830 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       76540.033 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 70423.317 ops/s
[info]                  ·gc.alloc.rate:                                  3083.705 MB/sec
[info]                  ·gc.alloc.rate.norm:                             68920.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.154 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.794 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       60920.789 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 70288.123 ops/s
[info]                  ·gc.alloc.rate:                                  3077.597 MB/sec
[info]                  ·gc.alloc.rate.norm:                             68920.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.059 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3406.976 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       76296.143 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 69910.360 ops/s
[info]                  ·gc.alloc.rate:                                  3061.769 MB/sec
[info]                  ·gc.alloc.rate.norm:                             68920.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.236 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2726.183 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       61366.013 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson":
[info]   70200.250 ±(99.9%) 799.890 ops/s [Average]
[info]   (min, avg, max) = (69910.360, 70200.250, 70423.317), stdev = 207.729
[info]   CI (99.9%): [69400.360, 71000.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3074.019 ±(99.9%) 34.747 MB/sec [Average]
[info]   (min, avg, max) = (3061.769, 3074.019, 3083.705), stdev = 9.024
[info]   CI (99.9%): [3039.272, 3108.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   68920.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (68920.006, 68920.006, 68920.006), stdev = 0.001
[info]   CI (99.9%): [68920.006, 68920.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.006 ±(99.9%) 0.016 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.006, 0.010), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.139 ±(99.9%) 0.354 B/op [Average]
[info]   (min, avg, max) = (0.029, 0.139, 0.236), stdev = 0.092
[info]   CI (99.9%): [≈ 0, 0.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2998.384 ±(99.9%) 1436.002 MB/sec [Average]
[info]   (min, avg, max) = (2725.794, 2998.384, 3406.976), stdev = 372.925
[info]   CI (99.9%): [1562.382, 4434.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   67227.465 ±(99.9%) 32314.362 B/op [Average]
[info]   (min, avg, max) = (60920.789, 67227.465, 76540.033), stdev = 8391.937
[info]   CI (99.9%): [34913.103, 99541.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 29.41% complete, ETA 01:19:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 162346.408 ops/s
[info] # Warmup Iteration   2: 202923.321 ops/s
[info] # Warmup Iteration   3: 203404.940 ops/s
[info] # Warmup Iteration   4: 205928.056 ops/s
[info] # Warmup Iteration   5: 204008.967 ops/s
[info] Iteration   1: 204524.143 ops/s
[info]                  ·gc.alloc.rate:            1215.286 MB/sec
[info]                  ·gc.alloc.rate.norm:       9352.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.202 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10436.397 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 204575.469 ops/s
[info]                  ·gc.alloc.rate:            1215.686 MB/sec
[info]                  ·gc.alloc.rate.norm:       9352.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.344 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10434.051 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 204353.414 ops/s
[info]                  ·gc.alloc.rate:            1214.286 MB/sec
[info]                  ·gc.alloc.rate.norm:       9352.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.260 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10445.435 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 205341.930 ops/s
[info]                  ·gc.alloc.rate:            1220.303 MB/sec
[info]                  ·gc.alloc.rate.norm:       9352.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.199 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5197.491 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 205088.218 ops/s
[info]                  ·gc.alloc.rate:                                  1218.699 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9352.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.056 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.428 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1359.629 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10433.465 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                25.560 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce":
[info]   204776.635 ±(99.9%) 1610.815 ops/s [Average]
[info]   (min, avg, max) = (204353.414, 204776.635, 205341.930), stdev = 418.324
[info]   CI (99.9%): [203165.820, 206387.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1216.852 ±(99.9%) 9.764 MB/sec [Average]
[info]   (min, avg, max) = (1214.286, 1216.852, 1220.303), stdev = 2.536
[info]   CI (99.9%): [1207.088, 1226.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   9352.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9352.002, 9352.002, 9352.002), stdev = 0.001
[info]   CI (99.9%): [9352.002, 9352.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.011 ±(99.9%) 0.096 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.056), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.086 ±(99.9%) 0.737 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.086, 0.428), stdev = 0.191
[info]   CI (99.9%): [≈ 0, 0.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1221.327 ±(99.9%) 1169.137 MB/sec [Average]
[info]   (min, avg, max) = (678.199, 1221.327, 1359.629), stdev = 303.621
[info]   CI (99.9%): [52.189, 2390.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   9389.368 ±(99.9%) 9023.349 B/op [Average]
[info]   (min, avg, max) = (5197.491, 9389.368, 10445.435), stdev = 2343.335
[info]   CI (99.9%): [366.018, 18412.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   5.112 ±(99.9%) 44.015 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.112, 25.560), stdev = 11.431
[info]   CI (99.9%): [≈ 0, 49.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 8.000), stdev = 1.817
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 29.65% complete, ETA 01:19:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 108970.150 ops/s
[info] # Warmup Iteration   2: 984423.383 ops/s
[info] # Warmup Iteration   3: 956069.759 ops/s
[info] # Warmup Iteration   4: 946262.038 ops/s
[info] # Warmup Iteration   5: 957956.917 ops/s
[info] Iteration   1: 941496.134 ops/s
[info]                  ·gc.alloc.rate:      512.016 MB/sec
[info]                  ·gc.alloc.rate.norm: 856.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 956260.610 ops/s
[info]                  ·gc.alloc.rate:            520.043 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.728 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1110.615 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 957032.900 ops/s
[info]                  ·gc.alloc.rate:            520.436 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.692 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1109.717 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 957902.987 ops/s
[info]                  ·gc.alloc.rate:            520.912 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.699 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1108.715 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 960330.073 ops/s
[info]                  ·gc.alloc.rate:            522.279 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.709 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1105.829 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava":
[info]   954604.541 ±(99.9%) 28824.024 ops/s [Average]
[info]   (min, avg, max) = (941496.134, 954604.541, 960330.073), stdev = 7485.507
[info]   CI (99.9%): [925780.517, 983428.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   519.137 ±(99.9%) 15.670 MB/sec [Average]
[info]   (min, avg, max) = (512.016, 519.137, 522.279), stdev = 4.070
[info]   CI (99.9%): [503.467, 534.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   856.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (856.000, 856.000, 856.000), stdev = 0.001
[info]   CI (99.9%): [856.000, 856.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   539.766 ±(99.9%) 1161.886 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.766, 674.728), stdev = 301.738
[info]   CI (99.9%): [≈ 0, 1701.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   886.975 ±(99.9%) 1909.293 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 886.975, 1110.615), stdev = 495.837
[info]   CI (99.9%): [≈ 0, 2796.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.200, 6.000), stdev = 2.387
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 29.88% complete, ETA 01:19:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 538775.738 ops/s
[info] # Warmup Iteration   2: 812414.823 ops/s
[info] # Warmup Iteration   3: 815745.928 ops/s
[info] # Warmup Iteration   4: 816549.982 ops/s
[info] # Warmup Iteration   5: 807660.755 ops/s
[info] Iteration   1: 816632.042 ops/s
[info]                  ·gc.alloc.rate:            643.302 MB/sec
[info]                  ·gc.alloc.rate.norm:       1240.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.348 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1305.627 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 814995.846 ops/s
[info]                  ·gc.alloc.rate:            641.976 MB/sec
[info]                  ·gc.alloc.rate.norm:       1240.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.330 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1308.287 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 814890.659 ops/s
[info]                  ·gc.alloc.rate:            641.905 MB/sec
[info]                  ·gc.alloc.rate.norm:       1240.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.318 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1308.409 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 817669.217 ops/s
[info]                  ·gc.alloc.rate:            644.133 MB/sec
[info]                  ·gc.alloc.rate.norm:       1240.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.338 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1303.923 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 818203.612 ops/s
[info]                  ·gc.alloc.rate:            644.627 MB/sec
[info]                  ·gc.alloc.rate.norm:       1240.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.455 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1303.149 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala":
[info]   816478.275 ±(99.9%) 5819.727 ops/s [Average]
[info]   (min, avg, max) = (814890.659, 816478.275, 818203.612), stdev = 1511.365
[info]   CI (99.9%): [810658.548, 822298.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   643.189 ±(99.9%) 4.751 MB/sec [Average]
[info]   (min, avg, max) = (641.905, 643.189, 644.627), stdev = 1.234
[info]   CI (99.9%): [638.437, 647.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1240.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1240.000, 1240.001, 1240.001), stdev = 0.001
[info]   CI (99.9%): [1240.000, 1240.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   677.358 ±(99.9%) 0.214 MB/sec [Average]
[info]   (min, avg, max) = (677.318, 677.358, 677.455), stdev = 0.056
[info]   CI (99.9%): [677.144, 677.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1305.879 ±(99.9%) 9.342 B/op [Average]
[info]   (min, avg, max) = (1303.149, 1305.879, 1308.409), stdev = 2.426
[info]   CI (99.9%): [1296.537, 1315.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 30.12% complete, ETA 01:19:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 914732.720 ops/s
[info] # Warmup Iteration   2: 1005430.875 ops/s
[info] # Warmup Iteration   3: 1033274.250 ops/s
[info] # Warmup Iteration   4: 1027625.794 ops/s
[info] # Warmup Iteration   5: 1020266.237 ops/s
[info] Iteration   1: 1036888.866 ops/s
[info]                  ·gc.alloc.rate:      563.850 MB/sec
[info]                  ·gc.alloc.rate.norm: 856.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1027201.160 ops/s
[info]                  ·gc.alloc.rate:            558.647 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.027 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1038.924 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 1031845.645 ops/s
[info]                  ·gc.alloc.rate:            561.110 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.340 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1033.315 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 1034692.815 ops/s
[info]                  ·gc.alloc.rate:                   562.742 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.459 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1030.499 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.013 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1024264.373 ops/s
[info]                  ·gc.alloc.rate:            557.011 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.037 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1041.989 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala":
[info]   1030978.572 ±(99.9%) 20085.114 ops/s [Average]
[info]   (min, avg, max) = (1024264.373, 1030978.572, 1036888.866), stdev = 5216.040
[info]   CI (99.9%): [1010893.458, 1051063.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   560.672 ±(99.9%) 10.905 MB/sec [Average]
[info]   (min, avg, max) = (557.011, 560.672, 563.850), stdev = 2.832
[info]   CI (99.9%): [549.767, 571.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   856.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (856.000, 856.000, 856.000), stdev = 0.001
[info]   CI (99.9%): [856.000, 856.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   542.173 ±(99.9%) 1167.068 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 542.173, 678.037), stdev = 303.084
[info]   CI (99.9%): [≈ 0, 1709.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   828.945 ±(99.9%) 1784.452 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 828.945, 1041.989), stdev = 463.417
[info]   CI (99.9%): [≈ 0, 2613.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.203 ±(99.9%) 1.745 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.203, 1.013), stdev = 0.453
[info]   CI (99.9%): [≈ 0, 1.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 30.35% complete, ETA 01:18:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 991035.767 ops/s
[info] # Warmup Iteration   2: 1095639.680 ops/s
[info] # Warmup Iteration   3: 1068857.808 ops/s
[info] # Warmup Iteration   4: 1094324.456 ops/s
[info] # Warmup Iteration   5: 1093617.345 ops/s
[info] Iteration   1: 1093723.387 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1088876.970 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1092629.401 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1091002.069 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1097214.717 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   1092689.309 ±(99.9%) 12013.289 ops/s [Average]
[info]   (min, avg, max) = (1088876.970, 1092689.309, 1097214.717), stdev = 3119.813
[info]   CI (99.9%): [1080676.020, 1104702.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 30.59% complete, ETA 01:18:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19168.182 ops/s
[info] # Warmup Iteration   2: 29242.209 ops/s
[info] # Warmup Iteration   3: 29821.700 ops/s
[info] # Warmup Iteration   4: 30038.617 ops/s
[info] # Warmup Iteration   5: 30184.401 ops/s
[info] Iteration   1: 30037.780 ops/s
[info]                  ·gc.alloc.rate:            1568.590 MB/sec
[info]                  ·gc.alloc.rate.norm:       82200.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2032.127 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 106491.092 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 30178.068 ops/s
[info]                  ·gc.alloc.rate:            1575.806 MB/sec
[info]                  ·gc.alloc.rate.norm:       82200.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.626 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 70662.412 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 29706.233 ops/s
[info]                  ·gc.alloc.rate:                                  1551.356 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82200.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.111 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.877 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.790 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       71996.737 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                211.755 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 30331.778 ops/s
[info]                  ·gc.alloc.rate:                                  1584.303 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82200.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.111 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.775 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.517 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       106077.718 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 30279.324 ops/s
[info]                  ·gc.alloc.rate:            1581.182 MB/sec
[info]                  ·gc.alloc.rate.norm:       82200.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.662 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 70839.904 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson":
[info]   30106.637 ±(99.9%) 963.962 ops/s [Average]
[info]   (min, avg, max) = (29706.233, 30106.637, 30331.778), stdev = 250.338
[info]   CI (99.9%): [29142.675, 31070.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1572.248 ±(99.9%) 50.488 MB/sec [Average]
[info]   (min, avg, max) = (1551.356, 1572.248, 1584.303), stdev = 13.112
[info]   CI (99.9%): [1521.759, 1622.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   82200.014 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (82200.013, 82200.014, 82200.015), stdev = 0.001
[info]   CI (99.9%): [82200.012, 82200.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.044 ±(99.9%) 0.234 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.044, 0.111), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.330 ±(99.9%) 12.288 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.330, 5.877), stdev = 3.191
[info]   CI (99.9%): [≈ 0, 14.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1630.544 ±(99.9%) 1433.537 MB/sec [Average]
[info]   (min, avg, max) = (1354.626, 1630.544, 2044.517), stdev = 372.285
[info]   CI (99.9%): [197.007, 3064.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   85213.573 ±(99.9%) 74095.354 B/op [Average]
[info]   (min, avg, max) = (70662.412, 85213.573, 106491.092), stdev = 19242.328
[info]   CI (99.9%): [11118.218, 159308.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   42.351 ±(99.9%) 364.655 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 42.351, 211.755), stdev = 94.700
[info]   CI (99.9%): [≈ 0, 407.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.000, 13.000), stdev = 4.062
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 30.82% complete, ETA 01:18:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 82681.157 ops/s
[info] # Warmup Iteration   2: 116832.538 ops/s
[info] # Warmup Iteration   3: 117420.348 ops/s
[info] # Warmup Iteration   4: 116772.967 ops/s
[info] # Warmup Iteration   5: 116068.796 ops/s
[info] Iteration   1: 117276.558 ops/s
[info]                  ·gc.alloc.rate:            1444.525 MB/sec
[info]                  ·gc.alloc.rate.norm:       19384.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.398 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18201.433 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 117193.053 ops/s
[info]                  ·gc.alloc.rate:                   1443.286 MB/sec
[info]                  ·gc.alloc.rate.norm:              19384.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.529 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        18205.376 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 8.946 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 114468.546 ops/s
[info]                  ·gc.alloc.rate:                   1409.641 MB/sec
[info]                  ·gc.alloc.rate.norm:              19384.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1356.095 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        18647.701 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 45.795 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 114970.187 ops/s
[info]                  ·gc.alloc.rate:                                  1415.866 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19384.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.163 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.232 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.787 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       18657.319 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 115226.328 ops/s
[info]                  ·gc.alloc.rate:                                  1418.972 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19384.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.731 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       18615.713 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce":
[info]   115826.934 ±(99.9%) 5060.212 ops/s [Average]
[info]   (min, avg, max) = (114468.546, 115826.934, 117276.558), stdev = 1314.121
[info]   CI (99.9%): [110766.722, 120887.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   1426.458 ±(99.9%) 62.703 MB/sec [Average]
[info]   (min, avg, max) = (1409.641, 1426.458, 1444.525), stdev = 16.284
[info]   CI (99.9%): [1363.755, 1489.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   19384.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (19384.003, 19384.004, 19384.004), stdev = 0.001
[info]   CI (99.9%): [19384.003, 19384.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.033 ±(99.9%) 0.280 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.163), stdev = 0.073
[info]   CI (99.9%): [≈ 0, 0.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.450 ±(99.9%) 3.837 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.450, 2.232), stdev = 0.997
[info]   CI (99.9%): [≈ 0, 4.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1358.708 ±(99.9%) 14.291 MB/sec [Average]
[info]   (min, avg, max) = (1355.529, 1358.708, 1362.787), stdev = 3.711
[info]   CI (99.9%): [1344.417, 1372.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   18465.509 ±(99.9%) 923.255 B/op [Average]
[info]   (min, avg, max) = (18201.433, 18465.509, 18657.319), stdev = 239.766
[info]   CI (99.9%): [17542.254, 19388.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   10.948 ±(99.9%) 76.479 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.948, 45.795), stdev = 19.861
[info]   CI (99.9%): [≈ 0, 87.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 8.000), stdev = 2.739
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 31.06% complete, ETA 01:17:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 102989.218 ops/s
[info] # Warmup Iteration   2: 168485.145 ops/s
[info] # Warmup Iteration   3: 172385.639 ops/s
[info] # Warmup Iteration   4: 168969.608 ops/s
[info] # Warmup Iteration   5: 165299.495 ops/s
[info] Iteration   1: 167428.647 ops/s
[info]                  ·gc.alloc.rate:            893.432 MB/sec
[info]                  ·gc.alloc.rate.norm:       8400.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.305 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6367.985 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 167755.961 ops/s
[info]                  ·gc.alloc.rate:            895.283 MB/sec
[info]                  ·gc.alloc.rate.norm:       8400.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.385 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6355.574 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 166111.104 ops/s
[info]                  ·gc.alloc.rate:                   886.612 MB/sec
[info]                  ·gc.alloc.rate.norm:              8400.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.291 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        12830.922 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 6.311 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   4: 166468.441 ops/s
[info]                  ·gc.alloc.rate:            888.387 MB/sec
[info]                  ·gc.alloc.rate.norm:       8400.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.388 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6404.931 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 166835.707 ops/s
[info]                  ·gc.alloc.rate:            890.343 MB/sec
[info]                  ·gc.alloc.rate.norm:       8400.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.362 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6390.614 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala":
[info]   166919.972 ±(99.9%) 2599.453 ops/s [Average]
[info]   (min, avg, max) = (166111.104, 166919.972, 167755.961), stdev = 675.070
[info]   CI (99.9%): [164320.519, 169519.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   890.812 ±(99.9%) 13.695 MB/sec [Average]
[info]   (min, avg, max) = (886.612, 890.812, 895.283), stdev = 3.556
[info]   CI (99.9%): [877.117, 904.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   8400.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8400.002, 8400.002, 8400.003), stdev = 0.001
[info]   CI (99.9%): [8400.002, 8400.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   812.746 ±(99.9%) 1165.716 MB/sec [Average]
[info]   (min, avg, max) = (677.305, 812.746, 1354.291), stdev = 302.733
[info]   CI (99.9%): [≈ 0, 1978.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   7670.005 ±(99.9%) 11109.508 B/op [Average]
[info]   (min, avg, max) = (6355.574, 7670.005, 12830.922), stdev = 2885.104
[info]   CI (99.9%): [≈ 0, 18779.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.262 ±(99.9%) 10.868 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.262, 6.311), stdev = 2.823
[info]   CI (99.9%): [≈ 0, 12.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 14.000), stdev = 4.278
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 31.29% complete, ETA 01:17:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 247711.422 ops/s
[info] # Warmup Iteration   2: 260196.552 ops/s
[info] # Warmup Iteration   3: 258104.423 ops/s
[info] # Warmup Iteration   4: 261121.547 ops/s
[info] # Warmup Iteration   5: 261450.736 ops/s
[info] Iteration   1: 255643.770 ops/s
[info]                  ·gc.alloc.rate:            665.228 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.034 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4174.849 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 262400.043 ops/s
[info]                  ·gc.alloc.rate:            682.959 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.201 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4067.469 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 262087.592 ops/s
[info]                  ·gc.alloc.rate:            682.030 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.070 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4072.217 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 262739.437 ops/s
[info]                  ·gc.alloc.rate:            684.033 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.343 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4061.928 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 262093.197 ops/s
[info]                  ·gc.alloc.rate:            682.098 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.202 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8144.000 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala":
[info]   260992.807 ±(99.9%) 11560.374 ops/s [Average]
[info]   (min, avg, max) = (255643.770, 260992.807, 262739.437), stdev = 3002.192
[info]   CI (99.9%): [249432.433, 272553.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   679.270 ±(99.9%) 30.386 MB/sec [Average]
[info]   (min, avg, max) = (665.228, 679.270, 684.033), stdev = 7.891
[info]   CI (99.9%): [648.884, 709.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.002, 4096.002, 4096.002), stdev = 0.001
[info]   CI (99.9%): [4096.001, 4096.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   813.770 ±(99.9%) 1167.626 MB/sec [Average]
[info]   (min, avg, max) = (678.034, 813.770, 1356.202), stdev = 303.229
[info]   CI (99.9%): [≈ 0, 1981.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   4904.093 ±(99.9%) 6976.468 B/op [Average]
[info]   (min, avg, max) = (4061.928, 4904.093, 8144.000), stdev = 1811.767
[info]   CI (99.9%): [≈ 0, 11880.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 8.000), stdev = 2.168
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 31.53% complete, ETA 01:17:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25641.166 ops/s
[info] # Warmup Iteration   2: 61208.826 ops/s
[info] # Warmup Iteration   3: 60991.777 ops/s
[info] # Warmup Iteration   4: 61687.944 ops/s
[info] # Warmup Iteration   5: 63099.360 ops/s
[info] Iteration   1: 64085.538 ops/s
[info]                  ·gc.alloc.rate:                                  2705.339 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66448.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.039 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.962 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.446 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       66941.869 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 64215.908 ops/s
[info]                  ·gc.alloc.rate:                                  2710.656 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66448.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.096 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2043.957 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       50104.781 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 63918.304 ops/s
[info]                  ·gc.alloc.rate:                                  2698.326 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66448.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.065 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.397 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       67114.637 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 63766.658 ops/s
[info]                  ·gc.alloc.rate:                                  2691.857 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66448.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.428 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       67276.694 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   5: 63862.764 ops/s
[info]                  ·gc.alloc.rate:                                  2695.952 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66448.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.471 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       67175.580 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson":
[info]   63969.834 ±(99.9%) 692.419 ops/s [Average]
[info]   (min, avg, max) = (63766.658, 63969.834, 64215.908), stdev = 179.819
[info]   CI (99.9%): [63277.415, 64662.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2700.426 ±(99.9%) 28.985 MB/sec [Average]
[info]   (min, avg, max) = (2691.857, 2700.426, 2710.656), stdev = 7.527
[info]   CI (99.9%): [2671.441, 2729.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66448.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (66448.006, 66448.006, 66448.007), stdev = 0.001
[info]   CI (99.9%): [66448.006, 66448.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.009 ±(99.9%) 0.064 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.009, 0.039), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.230 ±(99.9%) 1.581 B/op [Average]
[info]   (min, avg, max) = (0.008, 0.230, 0.962), stdev = 0.411
[info]   CI (99.9%): [≈ 0, 1.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2589.140 ±(99.9%) 1173.548 MB/sec [Average]
[info]   (min, avg, max) = (2043.957, 2589.140, 2725.471), stdev = 304.767
[info]   CI (99.9%): [1415.592, 3762.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   63722.712 ±(99.9%) 29317.367 B/op [Average]
[info]   (min, avg, max) = (50104.781, 63722.712, 67276.694), stdev = 7613.627
[info]   CI (99.9%): [34405.345, 93040.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 9.000), stdev = 2.074
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 31.76% complete, ETA 01:17:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 141515.589 ops/s
[info] # Warmup Iteration   2: 174041.233 ops/s
[info] # Warmup Iteration   3: 180602.652 ops/s
[info] # Warmup Iteration   4: 182587.893 ops/s
[info] # Warmup Iteration   5: 182611.790 ops/s
[info] Iteration   1: 182447.978 ops/s
[info]                  ·gc.alloc.rate:            634.256 MB/sec
[info]                  ·gc.alloc.rate.norm:       5472.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.032 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5849.684 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 182239.209 ops/s
[info]                  ·gc.alloc.rate:            633.553 MB/sec
[info]                  ·gc.alloc.rate.norm:       5472.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.043 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5856.263 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 180800.994 ops/s
[info]                  ·gc.alloc.rate:            628.655 MB/sec
[info]                  ·gc.alloc.rate.norm:       5472.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.173 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5903.028 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 179630.770 ops/s
[info]                  ·gc.alloc.rate:            624.622 MB/sec
[info]                  ·gc.alloc.rate.norm:       5472.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.215 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5941.503 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 182474.197 ops/s
[info]                  ·gc.alloc.rate:            634.443 MB/sec
[info]                  ·gc.alloc.rate.norm:       5472.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.125 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5848.755 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce":
[info]   181518.630 ±(99.9%) 4861.217 ops/s [Average]
[info]   (min, avg, max) = (179630.770, 181518.630, 182474.197), stdev = 1262.443
[info]   CI (99.9%): [176657.412, 186379.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   631.106 ±(99.9%) 16.684 MB/sec [Average]
[info]   (min, avg, max) = (624.622, 631.106, 634.443), stdev = 4.333
[info]   CI (99.9%): [614.421, 647.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5472.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5472.002, 5472.002, 5472.002), stdev = 0.001
[info]   CI (99.9%): [5472.002, 5472.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   678.118 ±(99.9%) 0.307 MB/sec [Average]
[info]   (min, avg, max) = (678.032, 678.118, 678.215), stdev = 0.080
[info]   CI (99.9%): [677.811, 678.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5879.846 ±(99.9%) 158.433 B/op [Average]
[info]   (min, avg, max) = (5848.755, 5879.846, 5941.503), stdev = 41.145
[info]   CI (99.9%): [5721.414, 6038.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 32.00% complete, ETA 01:16:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 342126.629 ops/s
[info] # Warmup Iteration   2: 543642.759 ops/s
[info] # Warmup Iteration   3: 537772.630 ops/s
[info] # Warmup Iteration   4: 549094.157 ops/s
[info] # Warmup Iteration   5: 544069.715 ops/s
[info] Iteration   1: 537707.643 ops/s
[info]                  ·gc.alloc.rate:            543.825 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.352 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1982.889 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 540301.282 ops/s
[info]                  ·gc.alloc.rate:                   546.458 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.702 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1971.442 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.940 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 546400.696 ops/s
[info]                  ·gc.alloc.rate:            552.713 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.476 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1951.358 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 546930.339 ops/s
[info]                  ·gc.alloc.rate:            553.158 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.365 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1949.471 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 541536.440 ops/s
[info]                  ·gc.alloc.rate:      547.716 MB/sec
[info]                  ·gc.alloc.rate.norm: 1592.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala":
[info]   542575.280 ±(99.9%) 15347.665 ops/s [Average]
[info]   (min, avg, max) = (537707.643, 542575.280, 546930.339), stdev = 3985.740
[info]   CI (99.9%): [527227.615, 557922.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   548.774 ±(99.9%) 15.607 MB/sec [Average]
[info]   (min, avg, max) = (543.825, 548.774, 553.158), stdev = 4.053
[info]   CI (99.9%): [533.167, 564.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1592.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1592.001, 1592.001, 1592.001), stdev = 0.001
[info]   CI (99.9%): [1592.001, 1592.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   541.779 ±(99.9%) 1166.221 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 541.779, 677.476), stdev = 302.864
[info]   CI (99.9%): [≈ 0, 1708.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1571.032 ±(99.9%) 3382.194 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1571.032, 1982.889), stdev = 878.345
[info]   CI (99.9%): [≈ 0, 4953.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.388 ±(99.9%) 3.341 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.388, 1.940), stdev = 0.868
[info]   CI (99.9%): [≈ 0, 3.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.800, 5.000), stdev = 2.168
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 32.24% complete, ETA 01:16:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 423218.001 ops/s
[info] # Warmup Iteration   2: 462890.060 ops/s
[info] # Warmup Iteration   3: 469281.527 ops/s
[info] # Warmup Iteration   4: 468102.289 ops/s
[info] # Warmup Iteration   5: 471214.723 ops/s
[info] Iteration   1: 468258.122 ops/s
[info]                  ·gc.alloc.rate:            359.334 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.990 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2279.250 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 469853.481 ops/s
[info]                  ·gc.alloc.rate:      360.606 MB/sec
[info]                  ·gc.alloc.rate.norm: 1208.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 466793.503 ops/s
[info]                  ·gc.alloc.rate:                   358.218 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.335 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2284.142 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.246 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 467729.423 ops/s
[info]                  ·gc.alloc.rate:      358.923 MB/sec
[info]                  ·gc.alloc.rate.norm: 1208.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 466480.791 ops/s
[info]                  ·gc.alloc.rate:            358.005 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.042 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2287.892 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala":
[info]   467823.064 ±(99.9%) 5159.837 ops/s [Average]
[info]   (min, avg, max) = (466480.791, 467823.064, 469853.481), stdev = 1339.993
[info]   CI (99.9%): [462663.227, 472982.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   359.017 ±(99.9%) 3.992 MB/sec [Average]
[info]   (min, avg, max) = (358.005, 359.017, 360.606), stdev = 1.037
[info]   CI (99.9%): [355.025, 363.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1208.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1208.001, 1208.001, 1208.001), stdev = 0.001
[info]   CI (99.9%): [1208.001, 1208.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   406.673 ±(99.9%) 1429.515 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 406.673, 678.042), stdev = 371.240
[info]   CI (99.9%): [≈ 0, 1836.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1370.257 ±(99.9%) 4816.660 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1370.257, 2287.892), stdev = 1250.871
[info]   CI (99.9%): [≈ 0, 6186.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.449 ±(99.9%) 3.868 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.449, 2.246), stdev = 1.004
[info]   CI (99.9%): [≈ 0, 4.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 32.47% complete, ETA 01:16:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 440733.085 ops/s
[info] # Warmup Iteration   2: 490281.394 ops/s
[info] # Warmup Iteration   3: 494133.464 ops/s
[info] # Warmup Iteration   4: 494251.063 ops/s
[info] # Warmup Iteration   5: 494149.305 ops/s
[info] Iteration   1: 494109.555 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 494539.796 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 494186.297 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 494693.835 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 494592.000 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   494424.296 ±(99.9%) 1000.096 ops/s [Average]
[info]   (min, avg, max) = (494109.555, 494424.296, 494693.835), stdev = 259.722
[info]   CI (99.9%): [493424.200, 495424.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 32.71% complete, ETA 01:16:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 175419.931 ops/s
[info] # Warmup Iteration   2: 281966.989 ops/s
[info] # Warmup Iteration   3: 296981.475 ops/s
[info] # Warmup Iteration   4: 298425.926 ops/s
[info] # Warmup Iteration   5: 298772.815 ops/s
[info] Iteration   1: 297910.003 ops/s
[info]                  ·gc.alloc.rate:                   817.610 MB/sec
[info]                  ·gc.alloc.rate.norm:              4320.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.698 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3575.467 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.519 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 294210.228 ops/s
[info]                  ·gc.alloc.rate:            807.346 MB/sec
[info]                  ·gc.alloc.rate.norm:       4320.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.294 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3624.111 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 296166.388 ops/s
[info]                  ·gc.alloc.rate:            812.799 MB/sec
[info]                  ·gc.alloc.rate.norm:       4320.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.690 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7200.139 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   4: 298347.202 ops/s
[info]                  ·gc.alloc.rate:                   818.857 MB/sec
[info]                  ·gc.alloc.rate.norm:              4320.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.719 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3570.135 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.514 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 299210.004 ops/s
[info]                  ·gc.alloc.rate:            821.188 MB/sec
[info]                  ·gc.alloc.rate.norm:       4320.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.384 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3563.498 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson":
[info]   297168.765 ±(99.9%) 7668.127 ops/s [Average]
[info]   (min, avg, max) = (294210.228, 297168.765, 299210.004), stdev = 1991.388
[info]   CI (99.9%): [289500.638, 304836.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   815.560 ±(99.9%) 21.252 MB/sec [Average]
[info]   (min, avg, max) = (807.346, 815.560, 821.188), stdev = 5.519
[info]   CI (99.9%): [794.308, 836.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4320.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4320.001, 4320.001, 4320.001), stdev = 0.001
[info]   CI (99.9%): [4320.001, 4320.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   812.557 ±(99.9%) 1166.983 MB/sec [Average]
[info]   (min, avg, max) = (676.698, 812.557, 1354.690), stdev = 303.062
[info]   CI (99.9%): [≈ 0, 1979.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   4306.670 ±(99.9%) 6229.093 B/op [Average]
[info]   (min, avg, max) = (3563.498, 4306.670, 7200.139), stdev = 1617.676
[info]   CI (99.9%): [≈ 0, 10535.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.407 ±(99.9%) 7.417 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.407, 3.519), stdev = 1.926
[info]   CI (99.9%): [≈ 0, 8.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 11.000), stdev = 2.950
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 32.94% complete, ETA 01:15:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5895.270 ops/s
[info] # Warmup Iteration   2: 8708.516 ops/s
[info] # Warmup Iteration   3: 8812.856 ops/s
[info] # Warmup Iteration   4: 8857.988 ops/s
[info] # Warmup Iteration   5: 8689.562 ops/s
[info] Iteration   1: 8889.494 ops/s
[info]                  ·gc.alloc.rate:            1136.659 MB/sec
[info]                  ·gc.alloc.rate.norm:       201280.046 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.990 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 240119.304 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 8727.581 ops/s
[info]                  ·gc.alloc.rate:            1116.452 MB/sec
[info]                  ·gc.alloc.rate.norm:       201280.047 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.447 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 244547.622 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 8675.506 ops/s
[info]                  ·gc.alloc.rate:            1109.449 MB/sec
[info]                  ·gc.alloc.rate.norm:       201280.088 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.008 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 123006.496 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 8671.598 ops/s
[info]                  ·gc.alloc.rate:            1108.906 MB/sec
[info]                  ·gc.alloc.rate.norm:       201280.047 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.133 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 246154.818 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 8641.871 ops/s
[info]                  ·gc.alloc.rate:                   1105.586 MB/sec
[info]                  ·gc.alloc.rate.norm:              201280.047 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1356.609 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        246980.650 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 606.534 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce":
[info]   8721.210 ±(99.9%) 381.219 ops/s [Average]
[info]   (min, avg, max) = (8641.871, 8721.210, 8889.494), stdev = 99.001
[info]   CI (99.9%): [8339.990, 9102.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1115.410 ±(99.9%) 48.208 MB/sec [Average]
[info]   (min, avg, max) = (1105.586, 1115.410, 1136.659), stdev = 12.520
[info]   CI (99.9%): [1067.202, 1163.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   201280.055 ±(99.9%) 0.070 B/op [Average]
[info]   (min, avg, max) = (201280.046, 201280.055, 201280.088), stdev = 0.018
[info]   CI (99.9%): [201279.984, 201280.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1220.637 ±(99.9%) 1168.052 MB/sec [Average]
[info]   (min, avg, max) = (678.008, 1220.637, 1356.609), stdev = 303.339
[info]   CI (99.9%): [52.585, 2388.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   220161.778 ±(99.9%) 209382.735 B/op [Average]
[info]   (min, avg, max) = (123006.496, 220161.778, 246980.650), stdev = 54376.031
[info]   CI (99.9%): [10779.043, 429544.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.332), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   121.307 ±(99.9%) 1044.488 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 121.307, 606.534), stdev = 271.250
[info]   CI (99.9%): [≈ 0, 1165.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.800, 8.000), stdev = 1.643
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 33.18% complete, ETA 01:15:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4914.655 ops/s
[info] # Warmup Iteration   2: 8932.535 ops/s
[info] # Warmup Iteration   3: 9039.465 ops/s
[info] # Warmup Iteration   4: 9305.625 ops/s
[info] # Warmup Iteration   5: 8943.473 ops/s
[info] Iteration   1: 9307.146 ops/s
[info]                  ·gc.alloc.rate:            1103.155 MB/sec
[info]                  ·gc.alloc.rate.norm:       186576.047 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.255 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 114543.694 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 9282.775 ops/s
[info]                  ·gc.alloc.rate:            1100.795 MB/sec
[info]                  ·gc.alloc.rate.norm:       186576.044 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.251 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 229704.209 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 9267.008 ops/s
[info]                  ·gc.alloc.rate:            1098.502 MB/sec
[info]                  ·gc.alloc.rate.norm:       186576.044 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.762 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 230100.721 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 9326.326 ops/s
[info]                  ·gc.alloc.rate:            1105.599 MB/sec
[info]                  ·gc.alloc.rate.norm:       186576.044 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.373 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 114310.408 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 9203.346 ops/s
[info]                  ·gc.alloc.rate:                   1090.967 MB/sec
[info]                  ·gc.alloc.rate.norm:              186576.044 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.010 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        231561.483 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 797.310 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala":
[info]   9277.320 ±(99.9%) 181.628 ops/s [Average]
[info]   (min, avg, max) = (9203.346, 9277.320, 9326.326), stdev = 47.168
[info]   CI (99.9%): [9095.692, 9458.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1099.804 ±(99.9%) 21.576 MB/sec [Average]
[info]   (min, avg, max) = (1090.967, 1099.804, 1105.599), stdev = 5.603
[info]   CI (99.9%): [1078.227, 1121.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   186576.045 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (186576.044, 186576.045, 186576.047), stdev = 0.001
[info]   CI (99.9%): [186576.039, 186576.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1083.730 ±(99.9%) 1428.612 MB/sec [Average]
[info]   (min, avg, max) = (677.255, 1083.730, 1355.251), stdev = 371.006
[info]   CI (99.9%): [≈ 0, 2512.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   184044.103 ±(99.9%) 244728.446 B/op [Average]
[info]   (min, avg, max) = (114310.408, 184044.103, 231561.483), stdev = 63555.200
[info]   CI (99.9%): [≈ 0, 428772.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   159.462 ±(99.9%) 1373.015 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 159.462, 797.310), stdev = 356.568
[info]   CI (99.9%): [≈ 0, 1532.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.400, 9.000), stdev = 2.191
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 33.41% complete, ETA 01:15:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 173454.183 ops/s
[info] # Warmup Iteration   2: 189931.565 ops/s
[info] # Warmup Iteration   3: 193846.076 ops/s
[info] # Warmup Iteration   4: 194116.134 ops/s
[info] # Warmup Iteration   5: 194026.310 ops/s
[info] Iteration   1: 194755.171 ops/s
[info]                  ·gc.alloc.rate:            1267.433 MB/sec
[info]                  ·gc.alloc.rate.norm:       10240.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.935 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5485.333 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 193340.188 ops/s
[info]                  ·gc.alloc.rate:            1258.101 MB/sec
[info]                  ·gc.alloc.rate.norm:       10240.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1357.755 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11051.113 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 187893.138 ops/s
[info]                  ·gc.alloc.rate:            1222.748 MB/sec
[info]                  ·gc.alloc.rate.norm:       10240.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1357.843 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11371.365 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 194072.043 ops/s
[info]                  ·gc.alloc.rate:                   1263.152 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1358.044 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        11009.267 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.665 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 21.608 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 194780.951 ops/s
[info]                  ·gc.alloc.rate:                                  1267.154 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10240.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.086 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.698 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.732 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11012.373 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala":
[info]   192968.298 ±(99.9%) 11158.969 ops/s [Average]
[info]   (min, avg, max) = (187893.138, 192968.298, 194780.951), stdev = 2897.949
[info]   CI (99.9%): [181809.330, 204127.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1255.718 ±(99.9%) 72.448 MB/sec [Average]
[info]   (min, avg, max) = (1222.748, 1255.718, 1267.433), stdev = 18.815
[info]   CI (99.9%): [1183.269, 1328.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10240.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10240.002, 10240.002, 10240.002), stdev = 0.001
[info]   CI (99.9%): [10240.002, 10240.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.149 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.086), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.140 ±(99.9%) 1.202 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.140, 0.698), stdev = 0.312
[info]   CI (99.9%): [≈ 0, 1.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1223.062 ±(99.9%) 1171.303 MB/sec [Average]
[info]   (min, avg, max) = (678.935, 1223.062, 1362.732), stdev = 304.184
[info]   CI (99.9%): [51.759, 2394.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   9985.890 ±(99.9%) 9705.270 B/op [Average]
[info]   (min, avg, max) = (5485.333, 9985.890, 11371.365), stdev = 2520.428
[info]   CI (99.9%): [280.620, 19691.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.533 ±(99.9%) 4.590 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.533, 2.665), stdev = 1.192
[info]   CI (99.9%): [≈ 0, 5.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   4.322 ±(99.9%) 37.210 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.322, 21.608), stdev = 9.663
[info]   CI (99.9%): [≈ 0, 41.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 8.000), stdev = 2.302
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 33.65% complete, ETA 01:15:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3486.579 ops/s
[info] # Warmup Iteration   2: 6852.556 ops/s
[info] # Warmup Iteration   3: 6947.573 ops/s
[info] # Warmup Iteration   4: 7097.930 ops/s
[info] # Warmup Iteration   5: 6974.224 ops/s
[info] Iteration   1: 6964.801 ops/s
[info]                  ·gc.alloc.rate:            1296.961 MB/sec
[info]                  ·gc.alloc.rate.norm:       293112.059 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.754 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 306173.354 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 6945.956 ops/s
[info]                  ·gc.alloc.rate:            1293.318 MB/sec
[info]                  ·gc.alloc.rate.norm:       293112.059 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.449 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 306966.549 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 6967.737 ops/s
[info]                  ·gc.alloc.rate:            1297.553 MB/sec
[info]                  ·gc.alloc.rate.norm:       293112.063 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.595 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 305997.645 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 6998.042 ops/s
[info]                  ·gc.alloc.rate:                                  1303.271 MB/sec
[info]                  ·gc.alloc.rate.norm:                             293112.058 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.024 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.394 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.535 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       305541.357 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                898.651 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 7021.837 ops/s
[info]                  ·gc.alloc.rate:                                  1307.586 MB/sec
[info]                  ·gc.alloc.rate.norm:                             293118.366 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.016 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.654 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.537 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       305436.574 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson":
[info]   6979.675 ±(99.9%) 115.770 ops/s [Average]
[info]   (min, avg, max) = (6945.956, 6979.675, 7021.837), stdev = 30.065
[info]   CI (99.9%): [6863.904, 7095.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1299.738 ±(99.9%) 21.763 MB/sec [Average]
[info]   (min, avg, max) = (1293.318, 1299.738, 1307.586), stdev = 5.652
[info]   CI (99.9%): [1277.975, 1321.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   293113.321 ±(99.9%) 10.859 B/op [Average]
[info]   (min, avg, max) = (293112.058, 293113.321, 293118.366), stdev = 2.820
[info]   CI (99.9%): [293102.462, 293124.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.024), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.809 ±(99.9%) 9.830 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.809, 5.394), stdev = 2.553
[info]   CI (99.9%): [≈ 0, 11.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1356.974 ±(99.9%) 13.661 MB/sec [Average]
[info]   (min, avg, max) = (1354.449, 1356.974, 1362.537), stdev = 3.548
[info]   CI (99.9%): [1343.314, 1370.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   306023.096 ±(99.9%) 2349.689 B/op [Average]
[info]   (min, avg, max) = (305436.574, 306023.096, 306966.549), stdev = 610.207
[info]   CI (99.9%): [303673.406, 308372.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   179.730 ±(99.9%) 1547.531 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 179.730, 898.651), stdev = 401.889
[info]   CI (99.9%): [≈ 0, 1727.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.600, 10.000), stdev = 2.793
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 33.88% complete, ETA 01:14:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15923.904 ops/s
[info] # Warmup Iteration   2: 23067.791 ops/s
[info] # Warmup Iteration   3: 22977.325 ops/s
[info] # Warmup Iteration   4: 22805.968 ops/s
[info] # Warmup Iteration   5: 22925.613 ops/s
[info] Iteration   1: 22968.766 ops/s
[info]                  ·gc.alloc.rate:            964.283 MB/sec
[info]                  ·gc.alloc.rate.norm:       66080.166 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.928 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 92918.730 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 22993.926 ops/s
[info]                  ·gc.alloc.rate:            965.491 MB/sec
[info]                  ·gc.alloc.rate.norm:       66080.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.136 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 46412.904 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 22614.661 ops/s
[info]                  ·gc.alloc.rate:            949.484 MB/sec
[info]                  ·gc.alloc.rate.norm:       66080.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.037 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 47188.469 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 22468.303 ops/s
[info]                  ·gc.alloc.rate:            943.327 MB/sec
[info]                  ·gc.alloc.rate.norm:       66080.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.214 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 95002.703 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 22566.170 ops/s
[info]                  ·gc.alloc.rate:            947.396 MB/sec
[info]                  ·gc.alloc.rate.norm:       66080.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.075 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 47295.098 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce":
[info]   22722.365 ±(99.9%) 933.341 ops/s [Average]
[info]   (min, avg, max) = (22468.303, 22722.365, 22993.926), stdev = 242.386
[info]   CI (99.9%): [21789.025, 23655.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   953.996 ±(99.9%) 39.255 MB/sec [Average]
[info]   (min, avg, max) = (943.327, 953.996, 965.491), stdev = 10.194
[info]   CI (99.9%): [914.742, 993.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   66080.048 ±(99.9%) 0.254 B/op [Average]
[info]   (min, avg, max) = (66080.018, 66080.048, 66080.166), stdev = 0.066
[info]   CI (99.9%): [66079.793, 66080.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   949.278 ±(99.9%) 1429.935 MB/sec [Average]
[info]   (min, avg, max) = (678.037, 949.278, 1356.214), stdev = 371.350
[info]   CI (99.9%): [≈ 0, 2379.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   65763.581 ±(99.9%) 99166.169 B/op [Average]
[info]   (min, avg, max) = (46412.904, 65763.581, 95002.703), stdev = 25753.139
[info]   CI (99.9%): [≈ 0, 164929.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 8.000), stdev = 1.871
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 34.12% complete, ETA 01:14:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14431.173 ops/s
[info] # Warmup Iteration   2: 24273.251 ops/s
[info] # Warmup Iteration   3: 24584.538 ops/s
[info] # Warmup Iteration   4: 24674.948 ops/s
[info] # Warmup Iteration   5: 24641.705 ops/s
[info] Iteration   1: 25332.994 ops/s
[info]                  ·gc.alloc.rate:                   974.519 MB/sec
[info]                  ·gc.alloc.rate.norm:              60552.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.706 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        42047.331 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 41.385 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 25191.100 ops/s
[info]                  ·gc.alloc.rate:            969.047 MB/sec
[info]                  ·gc.alloc.rate.norm:       60552.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.730 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 84651.859 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 25309.492 ops/s
[info]                  ·gc.alloc.rate:            973.610 MB/sec
[info]                  ·gc.alloc.rate.norm:       60552.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.382 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 42128.621 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 25010.405 ops/s
[info]                  ·gc.alloc.rate:            962.499 MB/sec
[info]                  ·gc.alloc.rate.norm:       60552.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.926 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 85177.151 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 24517.831 ops/s
[info]                  ·gc.alloc.rate:                   943.287 MB/sec
[info]                  ·gc.alloc.rate.norm:              60552.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.788 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        43444.793 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 42.761 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala":
[info]   25072.364 ±(99.9%) 1290.974 ops/s [Average]
[info]   (min, avg, max) = (24517.831, 25072.364, 25332.994), stdev = 335.262
[info]   CI (99.9%): [23781.390, 26363.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   964.592 ±(99.9%) 49.388 MB/sec [Average]
[info]   (min, avg, max) = (943.287, 964.592, 974.519), stdev = 12.826
[info]   CI (99.9%): [915.204, 1013.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   60552.017 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (60552.016, 60552.017, 60552.018), stdev = 0.001
[info]   CI (99.9%): [60552.014, 60552.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   947.906 ±(99.9%) 1428.630 MB/sec [Average]
[info]   (min, avg, max) = (676.706, 947.906, 1354.730), stdev = 371.011
[info]   CI (99.9%): [≈ 0, 2376.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   59489.951 ±(99.9%) 89399.267 B/op [Average]
[info]   (min, avg, max) = (42047.331, 59489.951, 85177.151), stdev = 23216.706
[info]   CI (99.9%): [≈ 0, 148889.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   16.829 ±(99.9%) 88.755 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.829, 42.761), stdev = 23.049
[info]   CI (99.9%): [≈ 0, 105.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.200, 10.000), stdev = 2.950
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 34.35% complete, ETA 01:14:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 760228.938 ops/s
[info] # Warmup Iteration   2: 881542.106 ops/s
[info] # Warmup Iteration   3: 889437.613 ops/s
[info] # Warmup Iteration   4: 889300.104 ops/s
[info] # Warmup Iteration   5: 891395.876 ops/s
[info] Iteration   1: 904031.667 ops/s
[info]                  ·gc.alloc.rate:            1631.007 MB/sec
[info]                  ·gc.alloc.rate.norm:       2840.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.991 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2361.127 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 904114.029 ops/s
[info]                  ·gc.alloc.rate:                   1631.366 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2032.301 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3537.977 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 6.958 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 900667.287 ops/s
[info]                  ·gc.alloc.rate:                                  1625.636 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2840.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.078 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.136 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.301 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2381.699 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 899788.513 ops/s
[info]                  ·gc.alloc.rate:                                  1623.876 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2840.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.019 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.033 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.724 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3576.022 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 898296.404 ops/s
[info]                  ·gc.alloc.rate:            1620.833 MB/sec
[info]                  ·gc.alloc.rate.norm:       2840.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.815 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2387.904 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala":
[info]   901379.580 ±(99.9%) 10014.564 ops/s [Average]
[info]   (min, avg, max) = (898296.404, 901379.580, 904114.029), stdev = 2600.750
[info]   CI (99.9%): [891365.016, 911394.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1626.544 ±(99.9%) 17.617 MB/sec [Average]
[info]   (min, avg, max) = (1620.833, 1626.544, 1631.366), stdev = 4.575
[info]   CI (99.9%): [1608.926, 1644.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2840.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2840.000, 2840.000, 2840.000), stdev = 0.001
[info]   CI (99.9%): [2840.000, 2840.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.130 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.078), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.034 ±(99.9%) 0.228 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.034, 0.136), stdev = 0.059
[info]   CI (99.9%): [≈ 0, 0.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1631.826 ±(99.9%) 1429.703 MB/sec [Average]
[info]   (min, avg, max) = (1355.991, 1631.826, 2044.724), stdev = 371.289
[info]   CI (99.9%): [202.124, 3061.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   2848.946 ±(99.9%) 2489.739 B/op [Average]
[info]   (min, avg, max) = (2361.127, 2848.946, 3576.022), stdev = 646.577
[info]   CI (99.9%): [359.206, 5338.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.392 ±(99.9%) 11.982 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.392, 6.958), stdev = 3.112
[info]   CI (99.9%): [≈ 0, 13.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 11.000), stdev = 3.493
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 34.59% complete, ETA 01:13:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 567826.525 ops/s
[info] # Warmup Iteration   2: 619108.868 ops/s
[info] # Warmup Iteration   3: 615853.175 ops/s
[info] # Warmup Iteration   4: 616169.371 ops/s
[info] # Warmup Iteration   5: 582583.117 ops/s
[info] Iteration   1: 602206.473 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 616166.608 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 616244.885 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 616292.561 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 615982.381 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   613378.582 ±(99.9%) 24053.108 ops/s [Average]
[info]   (min, avg, max) = (602206.473, 613378.582, 616292.561), stdev = 6246.516
[info]   CI (99.9%): [589325.473, 637431.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 34.82% complete, ETA 01:13:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16086.912 ops/s
[info] # Warmup Iteration   2: 22871.513 ops/s
[info] # Warmup Iteration   3: 23648.304 ops/s
[info] # Warmup Iteration   4: 23617.947 ops/s
[info] # Warmup Iteration   5: 23736.602 ops/s
[info] Iteration   1: 23608.835 ops/s
[info]                  ·gc.alloc.rate:            996.124 MB/sec
[info]                  ·gc.alloc.rate.norm:       66416.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.691 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 90323.279 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 23743.242 ops/s
[info]                  ·gc.alloc.rate:            1001.939 MB/sec
[info]                  ·gc.alloc.rate.norm:       66416.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.398 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 44903.019 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 23602.085 ops/s
[info]                  ·gc.alloc.rate:            995.866 MB/sec
[info]                  ·gc.alloc.rate.norm:       66416.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.742 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 90350.063 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 23744.503 ops/s
[info]                  ·gc.alloc.rate:            1002.051 MB/sec
[info]                  ·gc.alloc.rate.norm:       66416.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.474 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 44903.019 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 23644.941 ops/s
[info]                  ·gc.alloc.rate:            997.883 MB/sec
[info]                  ·gc.alloc.rate.norm:       66416.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.018 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 90185.783 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson":
[info]   23668.721 ±(99.9%) 271.521 ops/s [Average]
[info]   (min, avg, max) = (23602.085, 23668.721, 23744.503), stdev = 70.513
[info]   CI (99.9%): [23397.200, 23940.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   998.773 ±(99.9%) 11.715 MB/sec [Average]
[info]   (min, avg, max) = (995.866, 998.773, 1002.051), stdev = 3.042
[info]   CI (99.9%): [987.057, 1010.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   66416.018 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (66416.017, 66416.018, 66416.019), stdev = 0.001
[info]   CI (99.9%): [66416.015, 66416.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1083.864 ±(99.9%) 1428.654 MB/sec [Average]
[info]   (min, avg, max) = (677.398, 1083.864, 1355.018), stdev = 371.017
[info]   CI (99.9%): [≈ 0, 2512.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   72133.032 ±(99.9%) 95717.636 B/op [Average]
[info]   (min, avg, max) = (44903.019, 72133.032, 90350.063), stdev = 24857.566
[info]   CI (99.9%): [≈ 0, 167850.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.000, 10.000), stdev = 2.449
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 35.06% complete, ETA 01:13:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16773.392 ops/s
[info] # Warmup Iteration   2: 24432.357 ops/s
[info] # Warmup Iteration   3: 24636.983 ops/s
[info] # Warmup Iteration   4: 24494.571 ops/s
[info] # Warmup Iteration   5: 24604.619 ops/s
[info] Iteration   1: 24709.644 ops/s
[info]                  ·gc.alloc.rate:                   1341.332 MB/sec
[info]                  ·gc.alloc.rate.norm:              85440.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1356.101 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        86380.770 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 42.427 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 24618.443 ops/s
[info]                  ·gc.alloc.rate:            1336.381 MB/sec
[info]                  ·gc.alloc.rate.norm:       85440.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.755 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 86742.581 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 24672.131 ops/s
[info]                  ·gc.alloc.rate:            1339.554 MB/sec
[info]                  ·gc.alloc.rate.norm:       85440.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.389 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 86513.788 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 24529.177 ops/s
[info]                  ·gc.alloc.rate:                                  1331.841 MB/sec
[info]                  ·gc.alloc.rate.norm:                             85440.018 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.034 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.189 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1359.770 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       87231.744 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                213.699 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 24341.622 ops/s
[info]                  ·gc.alloc.rate:                                  1321.680 MB/sec
[info]                  ·gc.alloc.rate.norm:                             85440.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.091 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.901 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.148 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       88120.697 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce":
[info]   24574.203 ±(99.9%) 564.655 ops/s [Average]
[info]   (min, avg, max) = (24341.622, 24574.203, 24709.644), stdev = 146.639
[info]   CI (99.9%): [24009.548, 25138.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate":
[info]   1334.158 ±(99.9%) 30.235 MB/sec [Average]
[info]   (min, avg, max) = (1321.680, 1334.158, 1341.332), stdev = 7.852
[info]   CI (99.9%): [1303.923, 1364.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   85440.017 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (85440.017, 85440.017, 85440.018), stdev = 0.001
[info]   CI (99.9%): [85440.015, 85440.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.153 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.091), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.618 ±(99.9%) 9.915 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.618, 5.901), stdev = 2.575
[info]   CI (99.9%): [≈ 0, 11.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1358.433 ±(99.9%) 11.623 MB/sec [Average]
[info]   (min, avg, max) = (1356.101, 1358.433, 1363.148), stdev = 3.019
[info]   CI (99.9%): [1346.809, 1370.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   86997.916 ±(99.9%) 2719.928 B/op [Average]
[info]   (min, avg, max) = (86380.770, 86997.916, 88120.697), stdev = 706.357
[info]   CI (99.9%): [84277.988, 89717.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.562 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.331), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   51.225 ±(99.9%) 356.819 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 51.225, 213.699), stdev = 92.665
[info]   CI (99.9%): [≈ 0, 408.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 8.000), stdev = 2.000
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 35.29% complete, ETA 01:13:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14108.101 ops/s
[info] # Warmup Iteration   2: 26238.743 ops/s
[info] # Warmup Iteration   3: 25964.695 ops/s
[info] # Warmup Iteration   4: 26491.556 ops/s
[info] # Warmup Iteration   5: 26363.774 ops/s
[info] Iteration   1: 26612.295 ops/s
[info]                  ·gc.alloc.rate:            1215.397 MB/sec
[info]                  ·gc.alloc.rate.norm:       71888.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.341 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 40063.183 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 26473.596 ops/s
[info]                  ·gc.alloc.rate:            1209.037 MB/sec
[info]                  ·gc.alloc.rate.norm:       71888.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.667 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 80546.984 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 26401.094 ops/s
[info]                  ·gc.alloc.rate:            1205.788 MB/sec
[info]                  ·gc.alloc.rate.norm:       71888.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.761 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 80769.658 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 26354.341 ops/s
[info]                  ·gc.alloc.rate:                   1204.156 MB/sec
[info]                  ·gc.alloc.rate.norm:              71888.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.622 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        80870.827 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 278.453 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 26758.431 ops/s
[info]                  ·gc.alloc.rate:                                  1222.260 MB/sec
[info]                  ·gc.alloc.rate.norm:                             71888.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.015 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.890 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            681.446 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       40079.706 B/op
[info]                  ·gc.count:                                       1.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala":
[info]   26519.951 ±(99.9%) 635.947 ops/s [Average]
[info]   (min, avg, max) = (26354.341, 26519.951, 26758.431), stdev = 165.153
[info]   CI (99.9%): [25884.005, 27155.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1211.328 ±(99.9%) 28.781 MB/sec [Average]
[info]   (min, avg, max) = (1204.156, 1211.328, 1222.260), stdev = 7.474
[info]   CI (99.9%): [1182.547, 1240.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   71888.016 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (71888.015, 71888.016, 71888.016), stdev = 0.001
[info]   CI (99.9%): [71888.014, 71888.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.003 ±(99.9%) 0.026 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.015), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.178 ±(99.9%) 1.532 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.178, 0.890), stdev = 0.398
[info]   CI (99.9%): [≈ 0, 1.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1084.567 ±(99.9%) 1424.254 MB/sec [Average]
[info]   (min, avg, max) = (677.341, 1084.567, 1354.761), stdev = 369.874
[info]   CI (99.9%): [≈ 0, 2508.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   64466.071 ±(99.9%) 85751.742 B/op [Average]
[info]   (min, avg, max) = (40063.183, 64466.071, 80870.827), stdev = 22269.455
[info]   CI (99.9%): [≈ 0, 150217.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.032 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.664), stdev = 2.086
[info]   CI (99.9%): [≈ 0, 8.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   55.691 ±(99.9%) 479.514 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 55.691, 278.453), stdev = 124.528
[info]   CI (99.9%): [≈ 0, 535.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.800, 10.000), stdev = 3.564
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 35.53% complete, ETA 01:12:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 323536.211 ops/s
[info] # Warmup Iteration   2: 348259.462 ops/s
[info] # Warmup Iteration   3: 343422.654 ops/s
[info] # Warmup Iteration   4: 329280.797 ops/s
[info] # Warmup Iteration   5: 320110.234 ops/s
[info] Iteration   1: 342836.483 ops/s
[info]                  ·gc.alloc.rate:            892.074 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.684 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3116.211 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 340198.297 ops/s
[info]                  ·gc.alloc.rate:            885.403 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1357.643 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6280.651 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 342277.574 ops/s
[info]                  ·gc.alloc.rate:            890.712 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.738 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3121.227 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 342931.485 ops/s
[info]                  ·gc.alloc.rate:            892.385 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.697 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3115.185 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 338763.839 ops/s
[info]                  ·gc.alloc.rate:            881.557 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.709 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3153.505 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala":
[info]   341401.536 ±(99.9%) 7093.051 ops/s [Average]
[info]   (min, avg, max) = (338763.839, 341401.536, 342931.485), stdev = 1842.043
[info]   CI (99.9%): [334308.484, 348494.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   888.426 ±(99.9%) 18.319 MB/sec [Average]
[info]   (min, avg, max) = (881.557, 888.426, 892.385), stdev = 4.757
[info]   CI (99.9%): [870.107, 906.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.001, 4096.001, 4096.001), stdev = 0.001
[info]   CI (99.9%): [4096.001, 4096.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   814.494 ±(99.9%) 1169.169 MB/sec [Average]
[info]   (min, avg, max) = (678.684, 814.494, 1357.643), stdev = 303.629
[info]   CI (99.9%): [≈ 0, 1983.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   3757.356 ±(99.9%) 5431.922 B/op [Average]
[info]   (min, avg, max) = (3115.185, 3757.356, 6280.651), stdev = 1410.653
[info]   CI (99.9%): [≈ 0, 9189.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 7.000), stdev = 1.789
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 35.76% complete, ETA 01:12:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7449.969 ops/s
[info] # Warmup Iteration   2: 15002.468 ops/s
[info] # Warmup Iteration   3: 15681.953 ops/s
[info] # Warmup Iteration   4: 15594.301 ops/s
[info] # Warmup Iteration   5: 15596.310 ops/s
[info] Iteration   1: 15596.125 ops/s
[info]                  ·gc.alloc.rate:            1605.484 MB/sec
[info]                  ·gc.alloc.rate.norm:       162040.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.596 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 136718.178 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 15283.304 ops/s
[info]                  ·gc.alloc.rate:                   1573.584 MB/sec
[info]                  ·gc.alloc.rate.norm:              162040.027 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2032.298 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        209276.207 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 411.556 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   3: 15542.174 ops/s
[info]                  ·gc.alloc.rate:                                  1600.107 MB/sec
[info]                  ·gc.alloc.rate.norm:                             162040.033 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.111 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 11.255 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.742 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       138002.476 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 15439.013 ops/s
[info]                  ·gc.alloc.rate:                                  1589.354 MB/sec
[info]                  ·gc.alloc.rate.norm:                             162040.031 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.020 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.055 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.612 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       138922.910 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 15430.857 ops/s
[info]                  ·gc.alloc.rate:                                  1588.557 MB/sec
[info]                  ·gc.alloc.rate.norm:                             162040.029 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.849 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.084 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       208505.879 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson":
[info]   15458.294 ±(99.9%) 462.795 ops/s [Average]
[info]   (min, avg, max) = (15283.304, 15458.294, 15596.125), stdev = 120.186
[info]   CI (99.9%): [14995.499, 15921.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1591.417 ±(99.9%) 47.311 MB/sec [Average]
[info]   (min, avg, max) = (1573.584, 1591.417, 1605.484), stdev = 12.287
[info]   CI (99.9%): [1544.106, 1638.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   162040.029 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (162040.026, 162040.029, 162040.033), stdev = 0.003
[info]   CI (99.9%): [162040.018, 162040.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.028 ±(99.9%) 0.182 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.111), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.832 ±(99.9%) 18.420 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.832, 11.255), stdev = 4.784
[info]   CI (99.9%): [≈ 0, 21.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1631.267 ±(99.9%) 1430.544 MB/sec [Average]
[info]   (min, avg, max) = (1354.596, 1631.267, 2044.084), stdev = 371.508
[info]   CI (99.9%): [200.722, 3061.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   166285.130 ±(99.9%) 149799.806 B/op [Average]
[info]   (min, avg, max) = (136718.178, 166285.130, 209276.207), stdev = 38902.534
[info]   CI (99.9%): [16485.324, 316084.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   82.311 ±(99.9%) 708.724 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 82.311, 411.556), stdev = 184.053
[info]   CI (99.9%): [≈ 0, 791.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.600, 19.000), stdev = 7.057
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 36.00% complete, ETA 01:12:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35653.238 ops/s
[info] # Warmup Iteration   2: 52553.752 ops/s
[info] # Warmup Iteration   3: 53206.372 ops/s
[info] # Warmup Iteration   4: 53688.214 ops/s
[info] # Warmup Iteration   5: 53461.235 ops/s
[info] Iteration   1: 53687.331 ops/s
[info]                  ·gc.alloc.rate:            1302.479 MB/sec
[info]                  ·gc.alloc.rate.norm:       38176.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.488 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 39759.027 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 53580.333 ops/s
[info]                  ·gc.alloc.rate:            1299.661 MB/sec
[info]                  ·gc.alloc.rate.norm:       38176.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.231 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 39837.670 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 53575.277 ops/s
[info]                  ·gc.alloc.rate:            1299.339 MB/sec
[info]                  ·gc.alloc.rate.norm:       38176.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.021 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 39841.387 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 53145.471 ops/s
[info]                  ·gc.alloc.rate:                   1289.558 MB/sec
[info]                  ·gc.alloc.rate.norm:              38176.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1356.649 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        40162.175 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 98.630 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 53135.796 ops/s
[info]                  ·gc.alloc.rate:                                  1288.948 MB/sec
[info]                  ·gc.alloc.rate.norm:                             38176.008 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.129 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.824 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.975 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       40368.548 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce":
[info]   53424.842 ±(99.9%) 1013.870 ops/s [Average]
[info]   (min, avg, max) = (53135.796, 53424.842, 53687.331), stdev = 263.299
[info]   CI (99.9%): [52410.972, 54438.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1295.997 ±(99.9%) 24.183 MB/sec [Average]
[info]   (min, avg, max) = (1288.948, 1295.997, 1302.479), stdev = 6.280
[info]   CI (99.9%): [1271.814, 1320.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   38176.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (38176.008, 38176.008, 38176.008), stdev = 0.001
[info]   CI (99.9%): [38176.007, 38176.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.026 ±(99.9%) 0.222 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.129), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.765 ±(99.9%) 6.584 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.765, 3.824), stdev = 1.710
[info]   CI (99.9%): [≈ 0, 7.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1357.673 ±(99.9%) 11.451 MB/sec [Average]
[info]   (min, avg, max) = (1356.021, 1357.673, 1362.975), stdev = 2.974
[info]   CI (99.9%): [1346.222, 1369.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   39993.762 ±(99.9%) 1003.222 B/op [Average]
[info]   (min, avg, max) = (39759.027, 39993.762, 40368.548), stdev = 260.533
[info]   CI (99.9%): [38990.540, 40996.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.332), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   19.726 ±(99.9%) 169.847 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19.726, 98.630), stdev = 44.109
[info]   CI (99.9%): [≈ 0, 189.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.200, 9.000), stdev = 2.387
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 36.24% complete, ETA 01:12:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 65357.035 ops/s
[info] # Warmup Iteration   2: 97159.666 ops/s
[info] # Warmup Iteration   3: 96654.826 ops/s
[info] # Warmup Iteration   4: 97888.001 ops/s
[info] # Warmup Iteration   5: 97740.358 ops/s
[info] Iteration   1: 98216.010 ops/s
[info]                  ·gc.alloc.rate:            1023.991 MB/sec
[info]                  ·gc.alloc.rate.norm:       16408.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.492 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10855.841 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 97772.497 ops/s
[info]                  ·gc.alloc.rate:            1019.247 MB/sec
[info]                  ·gc.alloc.rate.norm:       16408.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.844 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 21810.484 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 98005.572 ops/s
[info]                  ·gc.alloc.rate:            1021.666 MB/sec
[info]                  ·gc.alloc.rate.norm:       16408.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.422 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10879.431 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 97656.733 ops/s
[info]                  ·gc.alloc.rate:            1018.281 MB/sec
[info]                  ·gc.alloc.rate.norm:       16408.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.181 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 21836.610 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 98308.369 ops/s
[info]                  ·gc.alloc.rate:            1024.945 MB/sec
[info]                  ·gc.alloc.rate.norm:       16408.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.481 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10845.573 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala":
[info]   97991.836 ±(99.9%) 1073.770 ops/s [Average]
[info]   (min, avg, max) = (97656.733, 97991.836, 98308.369), stdev = 278.855
[info]   CI (99.9%): [96918.066, 99065.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1021.626 ±(99.9%) 11.136 MB/sec [Average]
[info]   (min, avg, max) = (1018.281, 1021.626, 1024.945), stdev = 2.892
[info]   CI (99.9%): [1010.490, 1032.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   16408.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16408.004, 16408.004, 16408.005), stdev = 0.001
[info]   CI (99.9%): [16408.004, 16408.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   948.484 ±(99.9%) 1429.004 MB/sec [Average]
[info]   (min, avg, max) = (677.422, 948.484, 1355.181), stdev = 371.108
[info]   CI (99.9%): [≈ 0, 2377.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   15245.588 ±(99.9%) 23122.530 B/op [Average]
[info]   (min, avg, max) = (10845.573, 15245.588, 21836.610), stdev = 6004.848
[info]   CI (99.9%): [≈ 0, 38368.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 9.000), stdev = 2.408
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 36.47% complete, ETA 01:11:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1282280.588 ops/s
[info] # Warmup Iteration   2: 1496579.949 ops/s
[info] # Warmup Iteration   3: 1475426.805 ops/s
[info] # Warmup Iteration   4: 1462802.809 ops/s
[info] # Warmup Iteration   5: 1466968.781 ops/s
[info] Iteration   1: 1458582.291 ops/s
[info]                  ·gc.alloc.rate:                   1564.543 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.776 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1462.759 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.719 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 1448882.057 ops/s
[info]                  ·gc.alloc.rate:                   1554.169 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2033.321 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2208.412 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 4.342 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 1450518.523 ops/s
[info]                  ·gc.alloc.rate:                                  1556.207 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1688.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.048 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.052 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.341 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1478.801 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 1463091.129 ops/s
[info]                  ·gc.alloc.rate:                                  1569.008 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1688.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.020 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.735 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1466.084 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 1485777.285 ops/s
[info]                  ·gc.alloc.rate:            1593.333 MB/sec
[info]                  ·gc.alloc.rate.norm:       1688.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.751 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1443.718 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala":
[info]   1461370.257 ±(99.9%) 57119.225 ops/s [Average]
[info]   (min, avg, max) = (1448882.057, 1461370.257, 1485777.285), stdev = 14833.681
[info]   CI (99.9%): [1404251.032, 1518489.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1567.452 ±(99.9%) 60.382 MB/sec [Average]
[info]   (min, avg, max) = (1554.169, 1567.452, 1593.333), stdev = 15.681
[info]   CI (99.9%): [1507.070, 1627.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1688.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1688.000, 1688.000, 1688.000), stdev = 0.001
[info]   CI (99.9%): [1688.000, 1688.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.082 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.048), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.015 ±(99.9%) 0.089 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.052), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1495.585 ±(99.9%) 1157.579 MB/sec [Average]
[info]   (min, avg, max) = (1355.776, 1495.585, 2033.321), stdev = 300.620
[info]   CI (99.9%): [338.005, 2653.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1611.955 ±(99.9%) 1284.830 B/op [Average]
[info]   (min, avg, max) = (1443.718, 1611.955, 2208.412), stdev = 333.666
[info]   CI (99.9%): [327.125, 2896.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.690 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.997), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.012 ±(99.9%) 7.267 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.012, 4.342), stdev = 1.887
[info]   CI (99.9%): [≈ 0, 8.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.400, 11.000), stdev = 3.912
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 36.71% complete, ETA 01:11:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 751403.238 ops/s
[info] # Warmup Iteration   2: 838529.425 ops/s
[info] # Warmup Iteration   3: 824844.012 ops/s
[info] # Warmup Iteration   4: 828820.472 ops/s
[info] # Warmup Iteration   5: 830174.171 ops/s
[info] Iteration   1: 830101.474 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 833145.465 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 831653.012 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 832800.519 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 829710.250 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc":
[info]   831482.144 ±(99.9%) 5959.114 ops/s [Average]
[info]   (min, avg, max) = (829710.250, 831482.144, 833145.465), stdev = 1547.563
[info]   CI (99.9%): [825523.030, 837441.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 36.94% complete, ETA 01:11:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42947.261 ops/s
[info] # Warmup Iteration   2: 56741.417 ops/s
[info] # Warmup Iteration   3: 55551.520 ops/s
[info] # Warmup Iteration   4: 58363.743 ops/s
[info] # Warmup Iteration   5: 56879.312 ops/s
[info] Iteration   1: 58097.733 ops/s
[info]                  ·gc.alloc.rate:            1426.855 MB/sec
[info]                  ·gc.alloc.rate.norm:       38656.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.855 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 36705.393 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 57658.876 ops/s
[info]                  ·gc.alloc.rate:            1415.878 MB/sec
[info]                  ·gc.alloc.rate.norm:       38656.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2032.034 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 55478.191 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   3: 58397.512 ops/s
[info]                  ·gc.alloc.rate:                   1434.493 MB/sec
[info]                  ·gc.alloc.rate.norm:              38656.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.134 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        36517.483 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 107.721 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 58787.373 ops/s
[info]                  ·gc.alloc.rate:                                  1443.984 MB/sec
[info]                  ·gc.alloc.rate.norm:                             38656.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.152 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.057 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.953 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       36486.785 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 58715.621 ops/s
[info]                  ·gc.alloc.rate:            1442.205 MB/sec
[info]                  ·gc.alloc.rate.norm:       38656.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.873 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 36529.653 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson":
[info]   58331.423 ±(99.9%) 1792.512 ops/s [Average]
[info]   (min, avg, max) = (57658.876, 58331.423, 58787.373), stdev = 465.510
[info]   CI (99.9%): [56538.911, 60123.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1432.683 ±(99.9%) 44.660 MB/sec [Average]
[info]   (min, avg, max) = (1415.878, 1432.683, 1443.984), stdev = 11.598
[info]   CI (99.9%): [1388.023, 1477.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   38656.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (38656.007, 38656.007, 38656.008), stdev = 0.001
[info]   CI (99.9%): [38656.006, 38656.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.030 ±(99.9%) 0.261 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.152), stdev = 0.068
[info]   CI (99.9%): [≈ 0, 0.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.811 ±(99.9%) 6.986 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.811, 4.057), stdev = 1.814
[info]   CI (99.9%): [≈ 0, 7.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1493.570 ±(99.9%) 1159.185 MB/sec [Average]
[info]   (min, avg, max) = (1354.855, 1493.570, 2032.034), stdev = 301.037
[info]   CI (99.9%): [334.385, 2652.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   40343.501 ±(99.9%) 32580.224 B/op [Average]
[info]   (min, avg, max) = (36486.785, 40343.501, 55478.191), stdev = 8460.981
[info]   CI (99.9%): [7763.277, 72923.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   21.544 ±(99.9%) 185.502 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21.544, 107.721), stdev = 48.174
[info]   CI (99.9%): [≈ 0, 207.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.800, 14.000), stdev = 4.764
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 37.18% complete, ETA 01:11:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10154.297 ops/s
[info] # Warmup Iteration   2: 14254.575 ops/s
[info] # Warmup Iteration   3: 14328.368 ops/s
[info] # Warmup Iteration   4: 14291.429 ops/s
[info] # Warmup Iteration   5: 14287.996 ops/s
[info] Iteration   1: 14282.655 ops/s
[info]                  ·gc.alloc.rate:            1209.685 MB/sec
[info]                  ·gc.alloc.rate.norm:       133312.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.032 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 149440.063 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 14288.674 ops/s
[info]                  ·gc.alloc.rate:                   1210.652 MB/sec
[info]                  ·gc.alloc.rate.norm:              133312.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1356.547 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        149377.325 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 73.368 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 14301.464 ops/s
[info]                  ·gc.alloc.rate:            1211.185 MB/sec
[info]                  ·gc.alloc.rate.norm:       133312.040 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.621 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 74694.089 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 14199.327 ops/s
[info]                  ·gc.alloc.rate:            1202.609 MB/sec
[info]                  ·gc.alloc.rate.norm:       133312.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.073 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 150323.950 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 14312.575 ops/s
[info]                  ·gc.alloc.rate:                                  1212.236 MB/sec
[info]                  ·gc.alloc.rate.norm:                             133312.028 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.023 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.561 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1359.279 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       149482.686 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                366.200 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce":
[info]   14276.939 ±(99.9%) 172.909 ops/s [Average]
[info]   (min, avg, max) = (14199.327, 14276.939, 14312.575), stdev = 44.904
[info]   CI (99.9%): [14104.030, 14449.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1209.273 ±(99.9%) 14.778 MB/sec [Average]
[info]   (min, avg, max) = (1202.609, 1209.273, 1212.236), stdev = 3.838
[info]   CI (99.9%): [1194.495, 1224.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   133312.031 ±(99.9%) 0.020 B/op [Average]
[info]   (min, avg, max) = (133312.028, 133312.031, 133312.040), stdev = 0.005
[info]   CI (99.9%): [133312.011, 133312.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.005 ±(99.9%) 0.040 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.023), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.512 ±(99.9%) 4.411 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.512, 2.561), stdev = 1.146
[info]   CI (99.9%): [≈ 0, 4.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1221.311 ±(99.9%) 1168.192 MB/sec [Average]
[info]   (min, avg, max) = (678.621, 1221.311, 1359.279), stdev = 303.376
[info]   CI (99.9%): [53.119, 2389.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   134663.623 ±(99.9%) 129097.564 B/op [Average]
[info]   (min, avg, max) = (74694.089, 134663.623, 150323.950), stdev = 33526.227
[info]   CI (99.9%): [5566.059, 263761.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   87.914 ±(99.9%) 611.395 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 87.914, 366.200), stdev = 158.777
[info]   CI (99.9%): [≈ 0, 699.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 8.000), stdev = 1.817
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 37.41% complete, ETA 01:10:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7767.429 ops/s
[info] # Warmup Iteration   2: 13453.968 ops/s
[info] # Warmup Iteration   3: 13710.570 ops/s
[info] # Warmup Iteration   4: 13775.247 ops/s
[info] # Warmup Iteration   5: 13654.870 ops/s
[info] Iteration   1: 13504.415 ops/s
[info]                  ·gc.alloc.rate:            1091.208 MB/sec
[info]                  ·gc.alloc.rate.norm:       127185.401 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.760 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 157903.575 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 13497.833 ops/s
[info]                  ·gc.alloc.rate:            1090.677 MB/sec
[info]                  ·gc.alloc.rate.norm:       127184.030 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.358 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 78986.874 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 13418.494 ops/s
[info]                  ·gc.alloc.rate:            1084.229 MB/sec
[info]                  ·gc.alloc.rate.norm:       127184.038 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.735 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 158915.400 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 13493.815 ops/s
[info]                  ·gc.alloc.rate:            1090.551 MB/sec
[info]                  ·gc.alloc.rate.norm:       127181.605 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.544 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 79016.138 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 13427.912 ops/s
[info]                  ·gc.alloc.rate:                   1085.184 MB/sec
[info]                  ·gc.alloc.rate.norm:              127184.033 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.818 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        158785.258 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 468.393 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala":
[info]   13468.494 ±(99.9%) 160.381 ops/s [Average]
[info]   (min, avg, max) = (13418.494, 13468.494, 13504.415), stdev = 41.651
[info]   CI (99.9%): [13308.112, 13628.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1088.370 ±(99.9%) 12.978 MB/sec [Average]
[info]   (min, avg, max) = (1084.229, 1088.370, 1091.208), stdev = 3.370
[info]   CI (99.9%): [1075.392, 1101.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   127183.821 ±(99.9%) 5.289 B/op [Average]
[info]   (min, avg, max) = (127181.605, 127183.821, 127185.401), stdev = 1.373
[info]   CI (99.9%): [127178.533, 127189.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1083.843 ±(99.9%) 1428.524 MB/sec [Average]
[info]   (min, avg, max) = (677.358, 1083.843, 1354.818), stdev = 370.983
[info]   CI (99.9%): [≈ 0, 2512.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   126721.449 ±(99.9%) 167749.024 B/op [Average]
[info]   (min, avg, max) = (78986.874, 126721.449, 158915.400), stdev = 43563.889
[info]   CI (99.9%): [≈ 0, 294470.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   93.679 ±(99.9%) 806.601 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 93.679, 468.393), stdev = 209.472
[info]   CI (99.9%): [≈ 0, 900.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.400, 10.000), stdev = 2.702
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 37.65% complete, ETA 01:10:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 377592.062 ops/s
[info] # Warmup Iteration   2: 405378.530 ops/s
[info] # Warmup Iteration   3: 408404.279 ops/s
[info] # Warmup Iteration   4: 406973.601 ops/s
[info] # Warmup Iteration   5: 410171.373 ops/s
[info] Iteration   1: 402498.453 ops/s
[info]                  ·gc.alloc.rate:            1047.285 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1357.342 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5308.652 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 401423.805 ops/s
[info]                  ·gc.alloc.rate:            1044.782 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.821 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2661.274 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 395884.105 ops/s
[info]                  ·gc.alloc.rate:            1030.189 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1357.481 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5397.304 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 401746.886 ops/s
[info]                  ·gc.alloc.rate:            1045.615 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.836 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2659.214 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 401215.781 ops/s
[info]                  ·gc.alloc.rate:            1044.136 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1357.573 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5325.573 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala":
[info]   400553.806 ±(99.9%) 10225.310 ops/s [Average]
[info]   (min, avg, max) = (395884.105, 400553.806, 402498.453), stdev = 2655.481
[info]   CI (99.9%): [390328.496, 410779.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1042.401 ±(99.9%) 26.678 MB/sec [Average]
[info]   (min, avg, max) = (1030.189, 1042.401, 1047.285), stdev = 6.928
[info]   CI (99.9%): [1015.723, 1069.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.001, 4096.001, 4096.001), stdev = 0.001
[info]   CI (99.9%): [4096.001, 4096.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1086.011 ±(99.9%) 1431.302 MB/sec [Average]
[info]   (min, avg, max) = (678.821, 1086.011, 1357.573), stdev = 371.704
[info]   CI (99.9%): [≈ 0, 2517.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   4270.404 ±(99.9%) 5661.388 B/op [Average]
[info]   (min, avg, max) = (2659.214, 4270.404, 5397.304), stdev = 1470.244
[info]   CI (99.9%): [≈ 0, 9931.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 2.049
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 37.88% complete, ETA 01:10:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5113.150 ops/s
[info] # Warmup Iteration   2: 9553.224 ops/s
[info] # Warmup Iteration   3: 9775.866 ops/s
[info] # Warmup Iteration   4: 9782.537 ops/s
[info] # Warmup Iteration   5: 9774.744 ops/s
[info] Iteration   1: 9788.046 ops/s
[info]                  ·gc.alloc.rate:            1351.770 MB/sec
[info]                  ·gc.alloc.rate.norm:       217336.045 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.170 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 217721.885 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 9966.839 ops/s
[info]                  ·gc.alloc.rate:            1376.316 MB/sec
[info]                  ·gc.alloc.rate.norm:       217336.313 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.831 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 213943.584 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 10029.029 ops/s
[info]                  ·gc.alloc.rate:                   1385.282 MB/sec
[info]                  ·gc.alloc.rate.norm:              217336.041 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.231 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        212621.233 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 627.201 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 10115.718 ops/s
[info]                  ·gc.alloc.rate:                                  1396.750 MB/sec
[info]                  ·gc.alloc.rate.norm:                             217336.043 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.104 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 16.136 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.692 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       212036.618 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 10150.488 ops/s
[info]                  ·gc.alloc.rate:                                  1401.511 MB/sec
[info]                  ·gc.alloc.rate.norm:                             217336.040 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.019 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.874 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.624 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       211305.673 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson":
[info]   10010.024 ±(99.9%) 552.678 ops/s [Average]
[info]   (min, avg, max) = (9788.046, 10010.024, 10150.488), stdev = 143.529
[info]   CI (99.9%): [9457.347, 10562.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1382.326 ±(99.9%) 75.913 MB/sec [Average]
[info]   (min, avg, max) = (1351.770, 1382.326, 1401.511), stdev = 19.714
[info]   CI (99.9%): [1306.413, 1458.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   217336.096 ±(99.9%) 0.466 B/op [Average]
[info]   (min, avg, max) = (217336.040, 217336.096, 217336.313), stdev = 0.121
[info]   CI (99.9%): [217335.630, 217336.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.024 ±(99.9%) 0.173 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.104), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   3.802 ±(99.9%) 26.979 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.802, 16.136), stdev = 7.006
[info]   CI (99.9%): [≈ 0, 30.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1357.909 ±(99.9%) 16.755 MB/sec [Average]
[info]   (min, avg, max) = (1354.170, 1357.909, 1362.692), stdev = 4.351
[info]   CI (99.9%): [1341.154, 1374.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   213525.798 ±(99.9%) 9769.286 B/op [Average]
[info]   (min, avg, max) = (211305.673, 213525.798, 217721.885), stdev = 2537.053
[info]   CI (99.9%): [203756.512, 223295.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.800 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.800, 3.998), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   125.440 ±(99.9%) 1080.078 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 125.440, 627.201), stdev = 280.493
[info]   CI (99.9%): [≈ 0, 1205.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 9.000), stdev = 3.286
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 38.12% complete, ETA 01:10:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26181.916 ops/s
[info] # Warmup Iteration   2: 36478.887 ops/s
[info] # Warmup Iteration   3: 37411.352 ops/s
[info] # Warmup Iteration   4: 37519.035 ops/s
[info] # Warmup Iteration   5: 37697.884 ops/s
[info] Iteration   1: 37900.390 ops/s
[info]                  ·gc.alloc.rate:            1178.297 MB/sec
[info]                  ·gc.alloc.rate.norm:       48928.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.132 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28158.974 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 37423.822 ops/s
[info]                  ·gc.alloc.rate:            1163.637 MB/sec
[info]                  ·gc.alloc.rate.norm:       48928.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.493 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 57037.156 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 36853.624 ops/s
[info]                  ·gc.alloc.rate:            1145.745 MB/sec
[info]                  ·gc.alloc.rate.norm:       48928.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.290 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 57919.174 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 36727.646 ops/s
[info]                  ·gc.alloc.rate:            1141.911 MB/sec
[info]                  ·gc.alloc.rate.norm:       48928.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.176 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 29058.129 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 36420.155 ops/s
[info]                  ·gc.alloc.rate:                   1132.326 MB/sec
[info]                  ·gc.alloc.rate.norm:              48928.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1356.376 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        58609.255 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 143.932 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce":
[info]   37065.127 ±(99.9%) 2278.838 ops/s [Average]
[info]   (min, avg, max) = (36420.155, 37065.127, 37900.390), stdev = 591.807
[info]   CI (99.9%): [34786.290, 39343.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1152.383 ±(99.9%) 70.851 MB/sec [Average]
[info]   (min, avg, max) = (1132.326, 1152.383, 1178.297), stdev = 18.400
[info]   CI (99.9%): [1081.532, 1223.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   48928.011 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48928.011, 48928.011, 48928.011), stdev = 0.001
[info]   CI (99.9%): [48928.010, 48928.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1085.093 ±(99.9%) 1430.450 MB/sec [Average]
[info]   (min, avg, max) = (678.132, 1085.093, 1356.493), stdev = 371.483
[info]   CI (99.9%): [≈ 0, 2515.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   46156.537 ±(99.9%) 61733.086 B/op [Average]
[info]   (min, avg, max) = (28158.974, 46156.537, 58609.255), stdev = 16031.886
[info]   CI (99.9%): [≈ 0, 107889.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   28.786 ±(99.9%) 247.860 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 28.786, 143.932), stdev = 64.369
[info]   CI (99.9%): [≈ 0, 276.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.600, 15.000), stdev = 4.506
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 38.35% complete, ETA 01:09:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28052.063 ops/s
[info] # Warmup Iteration   2: 44332.598 ops/s
[info] # Warmup Iteration   3: 44356.338 ops/s
[info] # Warmup Iteration   4: 44556.637 ops/s
[info] # Warmup Iteration   5: 44309.565 ops/s
[info] Iteration   1: 44754.235 ops/s
[info]                  ·gc.alloc.rate:            1187.265 MB/sec
[info]                  ·gc.alloc.rate.norm:       41752.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.442 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23823.287 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 44423.093 ops/s
[info]                  ·gc.alloc.rate:            1178.454 MB/sec
[info]                  ·gc.alloc.rate.norm:       41752.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.847 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 48001.521 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 44193.350 ops/s
[info]                  ·gc.alloc.rate:            1172.273 MB/sec
[info]                  ·gc.alloc.rate.norm:       41752.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.753 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 48251.291 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 44466.334 ops/s
[info]                  ·gc.alloc.rate:                   1179.532 MB/sec
[info]                  ·gc.alloc.rate.norm:              41752.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.775 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        47955.112 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 141.461 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 44784.532 ops/s
[info]                  ·gc.alloc.rate:                                  1187.955 MB/sec
[info]                  ·gc.alloc.rate.norm:                             41752.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.097 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.415 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            681.378 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       23947.788 B/op
[info]                  ·gc.count:                                       1.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala":
[info]   44524.309 ±(99.9%) 950.496 ops/s [Average]
[info]   (min, avg, max) = (44193.350, 44524.309, 44784.532), stdev = 246.841
[info]   CI (99.9%): [43573.813, 45474.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1181.096 ±(99.9%) 25.279 MB/sec [Average]
[info]   (min, avg, max) = (1172.273, 1181.096, 1187.955), stdev = 6.565
[info]   CI (99.9%): [1155.817, 1206.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   41752.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (41752.009, 41752.009, 41752.009), stdev = 0.001
[info]   CI (99.9%): [41752.009, 41752.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.167 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.097), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.683 ±(99.9%) 5.881 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.683, 3.415), stdev = 1.527
[info]   CI (99.9%): [≈ 0, 6.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1084.639 ±(99.9%) 1424.448 MB/sec [Average]
[info]   (min, avg, max) = (677.442, 1084.639, 1354.847), stdev = 369.924
[info]   CI (99.9%): [≈ 0, 2509.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   38395.800 ±(99.9%) 51007.743 B/op [Average]
[info]   (min, avg, max) = (23823.287, 38395.800, 48251.291), stdev = 13246.549
[info]   CI (99.9%): [≈ 0, 89403.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   28.292 ±(99.9%) 243.604 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 28.292, 141.461), stdev = 63.263
[info]   CI (99.9%): [≈ 0, 271.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.800, 9.000), stdev = 3.194
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 38.59% complete, ETA 01:09:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1518104.758 ops/s
[info] # Warmup Iteration   2: 1717569.662 ops/s
[info] # Warmup Iteration   3: 1726764.021 ops/s
[info] # Warmup Iteration   4: 1727909.116 ops/s
[info] # Warmup Iteration   5: 1734832.760 ops/s
[info] Iteration   1: 1733411.038 ops/s
[info]                  ·gc.alloc.rate:                   1576.906 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.358 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1230.811 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.605 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1721510.631 ops/s
[info]                  ·gc.alloc.rate:                   1566.367 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2032.422 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1858.076 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.654 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 1661581.817 ops/s
[info]                  ·gc.alloc.rate:                                  1511.609 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.050 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.047 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.664 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1290.899 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 1657502.090 ops/s
[info]                  ·gc.alloc.rate:                                  1508.037 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.020 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.851 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1294.135 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 1660810.805 ops/s
[info]                  ·gc.alloc.rate:            1511.010 MB/sec
[info]                  ·gc.alloc.rate.norm:       1432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.799 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1291.539 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala":
[info]   1686963.276 ±(99.9%) 143395.080 ops/s [Average]
[info]   (min, avg, max) = (1657502.090, 1686963.276, 1733411.038), stdev = 37239.247
[info]   CI (99.9%): [1543568.196, 1830358.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1534.786 ±(99.9%) 130.431 MB/sec [Average]
[info]   (min, avg, max) = (1508.037, 1534.786, 1576.906), stdev = 33.873
[info]   CI (99.9%): [1404.355, 1665.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1432.000, 1432.000, 1432.000), stdev = 0.001
[info]   CI (99.9%): [1432.000, 1432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.085 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.050), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.013 ±(99.9%) 0.080 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.047), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1495.219 ±(99.9%) 1156.437 MB/sec [Average]
[info]   (min, avg, max) = (1355.358, 1495.219, 2032.422), stdev = 300.323
[info]   CI (99.9%): [338.782, 2651.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1393.092 ±(99.9%) 1006.142 B/op [Average]
[info]   (min, avg, max) = (1230.811, 1393.092, 1858.076), stdev = 261.292
[info]   CI (99.9%): [386.950, 2399.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.689 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.997), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.852 ±(99.9%) 6.116 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.852, 3.654), stdev = 1.588
[info]   CI (99.9%): [≈ 0, 6.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.000, 11.000), stdev = 3.674
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 38.82% complete, ETA 01:09:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1640453.846 ops/s
[info] # Warmup Iteration   2: 1833109.822 ops/s
[info] # Warmup Iteration   3: 1825727.813 ops/s
[info] # Warmup Iteration   4: 1825802.428 ops/s
[info] # Warmup Iteration   5: 1811148.853 ops/s
[info] Iteration   1: 1826127.913 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1826136.634 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1826479.748 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1826391.165 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1826299.844 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   1826287.061 ±(99.9%) 596.805 ops/s [Average]
[info]   (min, avg, max) = (1826127.913, 1826287.061, 1826479.748), stdev = 154.988
[info]   CI (99.9%): [1825690.256, 1826883.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 39.06% complete, ETA 01:08:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25198.954 ops/s
[info] # Warmup Iteration   2: 34262.400 ops/s
[info] # Warmup Iteration   3: 34385.793 ops/s
[info] # Warmup Iteration   4: 35064.655 ops/s
[info] # Warmup Iteration   5: 35135.260 ops/s
[info] Iteration   1: 35229.955 ops/s
[info]                  ·gc.alloc.rate:            1065.715 MB/sec
[info]                  ·gc.alloc.rate.norm:       47616.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.345 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30263.694 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 34741.372 ops/s
[info]                  ·gc.alloc.rate:            1051.005 MB/sec
[info]                  ·gc.alloc.rate.norm:       47616.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.831 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 61380.942 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 33975.373 ops/s
[info]                  ·gc.alloc.rate:            1028.143 MB/sec
[info]                  ·gc.alloc.rate.norm:       47616.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.197 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 62762.745 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 34258.608 ops/s
[info]                  ·gc.alloc.rate:            1036.464 MB/sec
[info]                  ·gc.alloc.rate.norm:       47616.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.421 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 31121.280 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 34031.325 ops/s
[info]                  ·gc.alloc.rate:            1029.629 MB/sec
[info]                  ·gc.alloc.rate.norm:       47616.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.884 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 62657.645 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson":
[info]   34447.326 ±(99.9%) 2046.991 ops/s [Average]
[info]   (min, avg, max) = (33975.373, 34447.326, 35229.955), stdev = 531.597
[info]   CI (99.9%): [32400.336, 36494.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1042.191 ±(99.9%) 61.460 MB/sec [Average]
[info]   (min, avg, max) = (1028.143, 1042.191, 1065.715), stdev = 15.961
[info]   CI (99.9%): [980.731, 1103.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   47616.012 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (47616.012, 47616.012, 47616.013), stdev = 0.001
[info]   CI (99.9%): [47616.010, 47616.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1083.936 ±(99.9%) 1429.089 MB/sec [Average]
[info]   (min, avg, max) = (677.345, 1083.936, 1355.197), stdev = 371.130
[info]   CI (99.9%): [≈ 0, 2513.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   49637.261 ±(99.9%) 66636.709 B/op [Average]
[info]   (min, avg, max) = (30263.694, 49637.261, 62762.745), stdev = 17305.342
[info]   CI (99.9%): [≈ 0, 116273.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.000, 9.000), stdev = 2.739
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 39.29% complete, ETA 01:08:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63063.851 ops/s
[info] # Warmup Iteration   2: 74072.055 ops/s
[info] # Warmup Iteration   3: 73894.771 ops/s
[info] # Warmup Iteration   4: 75666.431 ops/s
[info] # Warmup Iteration   5: 75540.533 ops/s
[info] Iteration   1: 75602.140 ops/s
[info]                  ·gc.alloc.rate:            1297.010 MB/sec
[info]                  ·gc.alloc.rate.norm:       27000.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.315 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28234.573 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 75573.479 ops/s
[info]                  ·gc.alloc.rate:            1296.249 MB/sec
[info]                  ·gc.alloc.rate.norm:       27000.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.039 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28245.406 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 75709.648 ops/s
[info]                  ·gc.alloc.rate:            1298.746 MB/sec
[info]                  ·gc.alloc.rate.norm:       27000.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.079 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14096.779 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 75377.305 ops/s
[info]                  ·gc.alloc.rate:                   1292.993 MB/sec
[info]                  ·gc.alloc.rate.norm:              27000.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1356.078 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        28317.338 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 69.542 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 75495.197 ops/s
[info]                  ·gc.alloc.rate:                                  1295.206 MB/sec
[info]                  ·gc.alloc.rate.norm:                             27000.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.106 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.205 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.956 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       28412.328 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce":
[info]   75551.554 ±(99.9%) 477.745 ops/s [Average]
[info]   (min, avg, max) = (75377.305, 75551.554, 75709.648), stdev = 124.069
[info]   CI (99.9%): [75073.809, 76029.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate":
[info]   1296.040 ±(99.9%) 8.234 MB/sec [Average]
[info]   (min, avg, max) = (1292.993, 1296.040, 1298.746), stdev = 2.138
[info]   CI (99.9%): [1287.807, 1304.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   27000.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (27000.005, 27000.005, 27000.006), stdev = 0.001
[info]   CI (99.9%): [27000.005, 27000.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.182 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.106), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.441 ±(99.9%) 3.797 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.441, 2.205), stdev = 0.986
[info]   CI (99.9%): [≈ 0, 4.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1221.893 ±(99.9%) 1170.657 MB/sec [Average]
[info]   (min, avg, max) = (678.079, 1221.893, 1362.956), stdev = 304.016
[info]   CI (99.9%): [51.237, 2392.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   25461.285 ±(99.9%) 24464.483 B/op [Average]
[info]   (min, avg, max) = (14096.779, 25461.285, 28412.328), stdev = 6353.349
[info]   CI (99.9%): [996.802, 49925.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   13.908 ±(99.9%) 119.755 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.908, 69.542), stdev = 31.100
[info]   CI (99.9%): [≈ 0, 133.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 8.000), stdev = 1.949
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 39.53% complete, ETA 01:08:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26465.934 ops/s
[info] # Warmup Iteration   2: 336445.636 ops/s
[info] # Warmup Iteration   3: 337270.578 ops/s
[info] # Warmup Iteration   4: 338435.392 ops/s
[info] # Warmup Iteration   5: 338678.822 ops/s
[info] Iteration   1: 338660.354 ops/s
[info]                  ·gc.alloc.rate:            678.410 MB/sec
[info]                  ·gc.alloc.rate.norm:       3152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.962 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3135.983 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 338761.773 ops/s
[info]                  ·gc.alloc.rate:            678.486 MB/sec
[info]                  ·gc.alloc.rate.norm:       3152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.839 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3135.057 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 338747.124 ops/s
[info]                  ·gc.alloc.rate:            678.510 MB/sec
[info]                  ·gc.alloc.rate.norm:       3152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.891 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3135.187 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 338814.660 ops/s
[info]                  ·gc.alloc.rate:            678.494 MB/sec
[info]                  ·gc.alloc.rate.norm:       3152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.695 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3134.354 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 338359.288 ops/s
[info]                  ·gc.alloc.rate:            677.553 MB/sec
[info]                  ·gc.alloc.rate.norm:       3152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.709 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3138.772 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava":
[info]   338668.640 ±(99.9%) 699.299 ops/s [Average]
[info]   (min, avg, max) = (338359.288, 338668.640, 338814.660), stdev = 181.606
[info]   CI (99.9%): [337969.341, 339367.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   678.291 ±(99.9%) 1.596 MB/sec [Average]
[info]   (min, avg, max) = (677.553, 678.291, 678.510), stdev = 0.414
[info]   CI (99.9%): [676.695, 679.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   3152.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3152.001, 3152.001, 3152.001), stdev = 0.001
[info]   CI (99.9%): [3152.001, 3152.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   674.819 ±(99.9%) 0.445 MB/sec [Average]
[info]   (min, avg, max) = (674.695, 674.819, 674.962), stdev = 0.116
[info]   CI (99.9%): [674.374, 675.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   3135.870 ±(99.9%) 6.630 B/op [Average]
[info]   (min, avg, max) = (3134.354, 3135.870, 3138.772), stdev = 1.722
[info]   CI (99.9%): [3129.240, 3142.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 39.76% complete, ETA 01:08:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 155539.803 ops/s
[info] # Warmup Iteration   2: 239233.774 ops/s
[info] # Warmup Iteration   3: 239734.877 ops/s
[info] # Warmup Iteration   4: 240863.266 ops/s
[info] # Warmup Iteration   5: 239972.650 ops/s
[info] Iteration   1: 240764.154 ops/s
[info]                  ·gc.alloc.rate:            533.618 MB/sec
[info]                  ·gc.alloc.rate.norm:       3488.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.502 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4428.505 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 240637.749 ops/s
[info]                  ·gc.alloc.rate:            533.244 MB/sec
[info]                  ·gc.alloc.rate.norm:       3488.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.396 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4430.916 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 240724.665 ops/s
[info]                  ·gc.alloc.rate:                   533.491 MB/sec
[info]                  ·gc.alloc.rate.norm:              3488.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.791 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4424.904 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 4.355 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 234963.544 ops/s
[info]                  ·gc.alloc.rate:      520.665 MB/sec
[info]                  ·gc.alloc.rate.norm: 3488.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 234123.542 ops/s
[info]                  ·gc.alloc.rate:            518.771 MB/sec
[info]                  ·gc.alloc.rate.norm:       3488.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.300 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4553.886 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala":
[info]   238242.731 ±(99.9%) 13054.545 ops/s [Average]
[info]   (min, avg, max) = (234123.542, 238242.731, 240764.154), stdev = 3390.224
[info]   CI (99.9%): [225188.186, 251297.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   527.958 ±(99.9%) 29.082 MB/sec [Average]
[info]   (min, avg, max) = (518.771, 527.958, 533.618), stdev = 7.553
[info]   CI (99.9%): [498.875, 557.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3488.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3488.002, 3488.002, 3488.002), stdev = 0.001
[info]   CI (99.9%): [3488.001, 3488.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   541.798 ±(99.9%) 1166.261 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 541.798, 677.502), stdev = 302.874
[info]   CI (99.9%): [≈ 0, 1708.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   3567.642 ±(99.9%) 7682.487 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3567.642, 4553.886), stdev = 1995.117
[info]   CI (99.9%): [≈ 0, 11250.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.871 ±(99.9%) 7.500 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.871, 4.355), stdev = 1.948
[info]   CI (99.9%): [≈ 0, 8.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.600, 5.000), stdev = 2.074
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 40.00% complete, ETA 01:07:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 438667.046 ops/s
[info] # Warmup Iteration   2: 446707.329 ops/s
[info] # Warmup Iteration   3: 462622.170 ops/s
[info] # Warmup Iteration   4: 460243.824 ops/s
[info] # Warmup Iteration   5: 464249.523 ops/s
[info] Iteration   1: 460952.071 ops/s
[info]                  ·gc.alloc.rate:            581.122 MB/sec
[info]                  ·gc.alloc.rate.norm:       1984.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.196 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2315.420 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 465644.601 ops/s
[info]                  ·gc.alloc.rate:      587.200 MB/sec
[info]                  ·gc.alloc.rate.norm: 1984.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 463712.179 ops/s
[info]                  ·gc.alloc.rate:            584.501 MB/sec
[info]                  ·gc.alloc.rate.norm:       1984.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.059 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2301.571 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 463224.577 ops/s
[info]                  ·gc.alloc.rate:            583.878 MB/sec
[info]                  ·gc.alloc.rate.norm:       1984.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.029 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2303.926 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 462223.104 ops/s
[info]                  ·gc.alloc.rate:            582.618 MB/sec
[info]                  ·gc.alloc.rate.norm:       1984.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.037 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2308.934 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala":
[info]   463151.306 ±(99.9%) 6734.407 ops/s [Average]
[info]   (min, avg, max) = (460952.071, 463151.306, 465644.601), stdev = 1748.904
[info]   CI (99.9%): [456416.900, 469885.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   583.864 ±(99.9%) 8.741 MB/sec [Average]
[info]   (min, avg, max) = (581.122, 583.864, 587.200), stdev = 2.270
[info]   CI (99.9%): [575.123, 592.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1984.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1984.001, 1984.001, 1984.001), stdev = 0.001
[info]   CI (99.9%): [1984.001, 1984.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   542.464 ±(99.9%) 1167.695 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 542.464, 678.196), stdev = 303.247
[info]   CI (99.9%): [≈ 0, 1710.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1845.970 ±(99.9%) 3973.643 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1845.970, 2315.420), stdev = 1031.942
[info]   CI (99.9%): [≈ 0, 5819.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 40.24% complete, ETA 01:07:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36892.859 ops/s
[info] # Warmup Iteration   2: 64373.083 ops/s
[info] # Warmup Iteration   3: 64910.283 ops/s
[info] # Warmup Iteration   4: 64368.345 ops/s
[info] # Warmup Iteration   5: 66929.239 ops/s
[info] Iteration   1: 66878.138 ops/s
[info]                  ·gc.alloc.rate:                                  2983.959 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70232.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.105 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.411 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       64146.703 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   2: 67304.981 ops/s
[info]                  ·gc.alloc.rate:                                  3003.235 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70232.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.047 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3406.922 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       79672.399 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 66904.272 ops/s
[info]                  ·gc.alloc.rate:            2985.643 MB/sec
[info]                  ·gc.alloc.rate.norm:       70232.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.931 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 64122.738 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 65741.031 ops/s
[info]                  ·gc.alloc.rate:                                  2933.307 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70232.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.150 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3406.846 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       81569.909 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 66139.921 ops/s
[info]                  ·gc.alloc.rate:            2951.744 MB/sec
[info]                  ·gc.alloc.rate.norm:       70232.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2726.106 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 64863.313 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson":
[info]   66593.669 ±(99.9%) 2447.689 ops/s [Average]
[info]   (min, avg, max) = (65741.031, 66593.669, 67304.981), stdev = 635.657
[info]   CI (99.9%): [64145.979, 69041.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2971.578 ±(99.9%) 109.105 MB/sec [Average]
[info]   (min, avg, max) = (2933.307, 2971.578, 3003.235), stdev = 28.334
[info]   CI (99.9%): [2862.472, 3080.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   70232.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (70232.006, 70232.006, 70232.007), stdev = 0.001
[info]   CI (99.9%): [70232.005, 70232.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.003 ±(99.9%) 0.011 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.006), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.060 ±(99.9%) 0.255 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.060, 0.150), stdev = 0.066
[info]   CI (99.9%): [≈ 0, 0.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2998.243 ±(99.9%) 1436.430 MB/sec [Average]
[info]   (min, avg, max) = (2725.411, 2998.243, 3406.922), stdev = 373.036
[info]   CI (99.9%): [1561.813, 4434.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   70875.012 ±(99.9%) 34375.421 B/op [Average]
[info]   (min, avg, max) = (64122.738, 70875.012, 81569.909), stdev = 8927.188
[info]   CI (99.9%): [36499.591, 105250.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 9.000), stdev = 2.168
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 40.47% complete, ETA 01:07:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 157646.505 ops/s
[info] # Warmup Iteration   2: 220196.217 ops/s
[info] # Warmup Iteration   3: 222617.324 ops/s
[info] # Warmup Iteration   4: 223894.638 ops/s
[info] # Warmup Iteration   5: 223670.594 ops/s
[info] Iteration   1: 217410.747 ops/s
[info]                  ·gc.alloc.rate:            1533.675 MB/sec
[info]                  ·gc.alloc.rate.norm:       11104.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2034.087 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14727.042 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 223081.770 ops/s
[info]                  ·gc.alloc.rate:            1573.976 MB/sec
[info]                  ·gc.alloc.rate.norm:       11104.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.306 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9568.397 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 223326.210 ops/s
[info]                  ·gc.alloc.rate:                                  1575.600 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11104.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.048 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.337 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1359.596 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9581.717 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                23.473 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 221258.960 ops/s
[info]                  ·gc.alloc.rate:                                  1560.778 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11104.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.107 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.762 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.075 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       14542.364 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 221170.474 ops/s
[info]                  ·gc.alloc.rate:            1560.266 MB/sec
[info]                  ·gc.alloc.rate.norm:       11104.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.774 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9698.503 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce":
[info]   221249.632 ±(99.9%) 9114.788 ops/s [Average]
[info]   (min, avg, max) = (217410.747, 221249.632, 223326.210), stdev = 2367.082
[info]   CI (99.9%): [212134.844, 230364.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1560.859 ±(99.9%) 64.683 MB/sec [Average]
[info]   (min, avg, max) = (1533.675, 1560.859, 1575.600), stdev = 16.798
[info]   CI (99.9%): [1496.177, 1625.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   11104.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11104.002, 11104.002, 11104.002), stdev = 0.001
[info]   CI (99.9%): [11104.002, 11104.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.031 ±(99.9%) 0.182 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.107), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.220 ±(99.9%) 1.295 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.220, 0.762), stdev = 0.336
[info]   CI (99.9%): [≈ 0, 1.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1631.367 ±(99.9%) 1433.261 MB/sec [Average]
[info]   (min, avg, max) = (1356.306, 1631.367, 2044.075), stdev = 372.213
[info]   CI (99.9%): [198.107, 3064.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   11623.605 ±(99.9%) 10589.215 B/op [Average]
[info]   (min, avg, max) = (9568.397, 11623.605, 14727.042), stdev = 2749.985
[info]   CI (99.9%): [1034.390, 22212.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   4.695 ±(99.9%) 40.422 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.695, 23.473), stdev = 10.497
[info]   CI (99.9%): [≈ 0, 45.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 11.000), stdev = 3.421
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 40.71% complete, ETA 01:07:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 58319.891 ops/s
[info] # Warmup Iteration   2: 733707.707 ops/s
[info] # Warmup Iteration   3: 727073.818 ops/s
[info] # Warmup Iteration   4: 661361.120 ops/s
[info] # Warmup Iteration   5: 683604.630 ops/s
[info] Iteration   1: 684499.230 ops/s
[info]                  ·gc.alloc.rate:            535.762 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.730 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1551.560 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 687130.201 ops/s
[info]                  ·gc.alloc.rate:      537.952 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 683545.066 ops/s
[info]                  ·gc.alloc.rate:            535.071 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.794 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1553.714 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 683450.610 ops/s
[info]                  ·gc.alloc.rate:            534.975 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.763 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1553.919 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 684363.457 ops/s
[info]                  ·gc.alloc.rate:            535.653 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.747 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1551.916 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava":
[info]   684597.713 ±(99.9%) 5744.426 ops/s [Average]
[info]   (min, avg, max) = (683450.610, 684597.713, 687130.201), stdev = 1491.809
[info]   CI (99.9%): [678853.287, 690342.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   535.883 ±(99.9%) 4.650 MB/sec [Average]
[info]   (min, avg, max) = (534.975, 535.883, 537.952), stdev = 1.208
[info]   CI (99.9%): [531.232, 540.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   1232.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1232.001, 1232.001, 1232.001), stdev = 0.001
[info]   CI (99.9%): [1232.001, 1232.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   539.807 ±(99.9%) 1161.975 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.807, 674.794), stdev = 301.761
[info]   CI (99.9%): [≈ 0, 1701.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   1242.222 ±(99.9%) 2673.979 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1242.222, 1553.919), stdev = 694.424
[info]   CI (99.9%): [≈ 0, 3916.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.200, 6.000), stdev = 2.387
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 40.94% complete, ETA 01:06:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 310529.756 ops/s
[info] # Warmup Iteration   2: 455143.316 ops/s
[info] # Warmup Iteration   3: 459696.795 ops/s
[info] # Warmup Iteration   4: 457422.571 ops/s
[info] # Warmup Iteration   5: 458336.355 ops/s
[info] Iteration   1: 461076.638 ops/s
[info]                  ·gc.alloc.rate:      473.337 MB/sec
[info]                  ·gc.alloc.rate.norm: 1616.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 456826.498 ops/s
[info]                  ·gc.alloc.rate:            469.039 MB/sec
[info]                  ·gc.alloc.rate.norm:       1616.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.451 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2334.050 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 457564.749 ops/s
[info]                  ·gc.alloc.rate:            469.727 MB/sec
[info]                  ·gc.alloc.rate.norm:       1616.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.329 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2330.215 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 454722.663 ops/s
[info]                  ·gc.alloc.rate:            466.867 MB/sec
[info]                  ·gc.alloc.rate.norm:       1616.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.388 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2344.694 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 460266.692 ops/s
[info]                  ·gc.alloc.rate:      472.531 MB/sec
[info]                  ·gc.alloc.rate.norm: 1616.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala":
[info]   458091.448 ±(99.9%) 9980.017 ops/s [Average]
[info]   (min, avg, max) = (454722.663, 458091.448, 461076.638), stdev = 2591.779
[info]   CI (99.9%): [448111.431, 468071.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   470.300 ±(99.9%) 10.171 MB/sec [Average]
[info]   (min, avg, max) = (466.867, 470.300, 473.337), stdev = 2.641
[info]   CI (99.9%): [460.129, 480.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1616.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1616.001, 1616.001, 1616.001), stdev = 0.001
[info]   CI (99.9%): [1616.001, 1616.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   406.433 ±(99.9%) 1428.671 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 406.433, 677.451), stdev = 371.021
[info]   CI (99.9%): [≈ 0, 1835.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1401.792 ±(99.9%) 4927.538 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1401.792, 2344.694), stdev = 1279.666
[info]   CI (99.9%): [≈ 0, 6329.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 5.000), stdev = 2.588
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 41.18% complete, ETA 01:06:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 587171.681 ops/s
[info] # Warmup Iteration   2: 627174.442 ops/s
[info] # Warmup Iteration   3: 634092.586 ops/s
[info] # Warmup Iteration   4: 646967.415 ops/s
[info] # Warmup Iteration   5: 647352.015 ops/s
[info] Iteration   1: 641778.076 ops/s
[info]                  ·gc.alloc.rate:            502.307 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.366 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1661.365 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 633523.624 ops/s
[info]                  ·gc.alloc.rate:            496.109 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.740 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1683.049 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 649333.843 ops/s
[info]                  ·gc.alloc.rate:      508.286 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 639463.843 ops/s
[info]                  ·gc.alloc.rate:            500.486 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.369 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1667.417 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 643618.164 ops/s
[info]                  ·gc.alloc.rate:            503.736 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.342 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1656.593 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala":
[info]   641543.510 ±(99.9%) 22261.592 ops/s [Average]
[info]   (min, avg, max) = (633523.624, 641543.510, 649333.843), stdev = 5781.265
[info]   CI (99.9%): [619281.917, 663805.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   502.185 ±(99.9%) 17.161 MB/sec [Average]
[info]   (min, avg, max) = (496.109, 502.185, 508.286), stdev = 4.457
[info]   CI (99.9%): [485.024, 519.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1232.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1232.001, 1232.001, 1232.001), stdev = 0.001
[info]   CI (99.9%): [1232.001, 1232.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   541.963 ±(99.9%) 1166.617 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 541.963, 677.740), stdev = 302.967
[info]   CI (99.9%): [≈ 0, 1708.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1333.685 ±(99.9%) 2871.114 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1333.685, 1683.049), stdev = 745.619
[info]   CI (99.9%): [≈ 0, 4204.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 41.41% complete, ETA 01:06:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 606983.733 ops/s
[info] # Warmup Iteration   2: 672092.668 ops/s
[info] # Warmup Iteration   3: 649690.279 ops/s
[info] # Warmup Iteration   4: 650995.741 ops/s
[info] # Warmup Iteration   5: 674968.078 ops/s
[info] Iteration   1: 674744.329 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 675007.997 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 674721.623 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 674668.542 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 675198.916 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc":
[info]   674868.281 ±(99.9%) 873.020 ops/s [Average]
[info]   (min, avg, max) = (674668.542, 674868.281, 675198.916), stdev = 226.721
[info]   CI (99.9%): [673995.261, 675741.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 41.65% complete, ETA 01:06:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18837.291 ops/s
[info] # Warmup Iteration   2: 27769.726 ops/s
[info] # Warmup Iteration   3: 27877.709 ops/s
[info] # Warmup Iteration   4: 27861.331 ops/s
[info] # Warmup Iteration   5: 27906.470 ops/s
[info] Iteration   1: 27598.531 ops/s
[info]                  ·gc.alloc.rate:            1415.116 MB/sec
[info]                  ·gc.alloc.rate.norm:       80688.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2032.679 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 115900.640 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 27916.132 ops/s
[info]                  ·gc.alloc.rate:            1430.981 MB/sec
[info]                  ·gc.alloc.rate.norm:       80688.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.657 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 76384.342 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 27933.419 ops/s
[info]                  ·gc.alloc.rate:                   1431.932 MB/sec
[info]                  ·gc.alloc.rate.norm:              80688.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.781 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        76340.596 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 225.193 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 27945.526 ops/s
[info]                  ·gc.alloc.rate:                                  1432.521 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80688.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.194 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 10.901 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.700 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       76755.268 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 28145.606 ops/s
[info]                  ·gc.alloc.rate:                                  1442.826 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80688.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.066 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.752 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       76209.957 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson":
[info]   27907.843 ±(99.9%) 756.405 ops/s [Average]
[info]   (min, avg, max) = (27598.531, 27907.843, 28145.606), stdev = 196.436
[info]   CI (99.9%): [27151.438, 28664.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1430.675 ±(99.9%) 38.256 MB/sec [Average]
[info]   (min, avg, max) = (1415.116, 1430.675, 1442.826), stdev = 9.935
[info]   CI (99.9%): [1392.419, 1468.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   80688.015 ±(99.9%) 0.004 B/op [Average]
[info]   (min, avg, max) = (80688.015, 80688.015, 80688.017), stdev = 0.001
[info]   CI (99.9%): [80688.011, 80688.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.039 ±(99.9%) 0.333 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.039, 0.194), stdev = 0.086
[info]   CI (99.9%): [≈ 0, 0.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.194 ±(99.9%) 18.744 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.194, 10.901), stdev = 4.868
[info]   CI (99.9%): [≈ 0, 20.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1493.514 ±(99.9%) 1160.697 MB/sec [Average]
[info]   (min, avg, max) = (1354.657, 1493.514, 2032.679), stdev = 301.429
[info]   CI (99.9%): [332.816, 2654.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   84318.161 ±(99.9%) 67988.142 B/op [Average]
[info]   (min, avg, max) = (76209.957, 84318.161, 115900.640), stdev = 17656.305
[info]   CI (99.9%): [16330.019, 152306.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   45.039 ±(99.9%) 387.797 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 45.039, 225.193), stdev = 100.710
[info]   CI (99.9%): [≈ 0, 432.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.800, 17.000), stdev = 5.119
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 41.88% complete, ETA 01:05:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3994.486 ops/s
[info] # Warmup Iteration   2: 6198.074 ops/s
[info] # Warmup Iteration   3: 6476.024 ops/s
[info] # Warmup Iteration   4: 6447.434 ops/s
[info] # Warmup Iteration   5: 6497.406 ops/s
[info] Iteration   1: 6478.913 ops/s
[info]                  ·gc.alloc.rate:            997.421 MB/sec
[info]                  ·gc.alloc.rate.norm:       242296.063 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.026 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 329409.155 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 6498.005 ops/s
[info]                  ·gc.alloc.rate:            1000.272 MB/sec
[info]                  ·gc.alloc.rate.norm:       242296.063 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.963 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 164223.134 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 6496.335 ops/s
[info]                  ·gc.alloc.rate:            1000.032 MB/sec
[info]                  ·gc.alloc.rate.norm:       242296.063 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.018 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 328547.359 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 6497.028 ops/s
[info]                  ·gc.alloc.rate:            1000.162 MB/sec
[info]                  ·gc.alloc.rate.norm:       242296.068 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.993 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 164248.403 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 6466.391 ops/s
[info]                  ·gc.alloc.rate:                   995.398 MB/sec
[info]                  ·gc.alloc.rate.norm:              242296.063 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.995 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        330071.233 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 162.118 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce":
[info]   6487.334 ±(99.9%) 54.402 ops/s [Average]
[info]   (min, avg, max) = (6466.391, 6487.334, 6498.005), stdev = 14.128
[info]   CI (99.9%): [6432.932, 6541.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   998.657 ±(99.9%) 8.373 MB/sec [Average]
[info]   (min, avg, max) = (995.398, 998.657, 1000.272), stdev = 2.174
[info]   CI (99.9%): [990.284, 1007.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   242296.064 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (242296.063, 242296.064, 242296.068), stdev = 0.002
[info]   CI (99.9%): [242296.056, 242296.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1084.799 ±(99.9%) 1430.032 MB/sec [Average]
[info]   (min, avg, max) = (677.963, 1084.799, 1356.026), stdev = 371.375
[info]   CI (99.9%): [≈ 0, 2514.831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   263299.857 ±(99.9%) 348230.447 B/op [Average]
[info]   (min, avg, max) = (164223.134, 263299.857, 330071.233), stdev = 90434.341
[info]   CI (99.9%): [≈ 0, 611530.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   32.424 ±(99.9%) 279.176 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 32.424, 162.118), stdev = 72.501
[info]   CI (99.9%): [≈ 0, 311.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 8.000), stdev = 2.345
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 42.12% complete, ETA 01:05:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3143.107 ops/s
[info] # Warmup Iteration   2: 6469.762 ops/s
[info] # Warmup Iteration   3: 6653.487 ops/s
[info] # Warmup Iteration   4: 6694.526 ops/s
[info] # Warmup Iteration   5: 6496.790 ops/s
[info] Iteration   1: 6519.573 ops/s
[info]                  ·gc.alloc.rate:                   952.334 MB/sec
[info]                  ·gc.alloc.rate.norm:              229936.063 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.646 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        163372.675 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 160.800 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 6507.237 ops/s
[info]                  ·gc.alloc.rate:            950.970 MB/sec
[info]                  ·gc.alloc.rate.norm:       229936.063 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.177 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 327669.931 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 6612.275 ops/s
[info]                  ·gc.alloc.rate:            965.973 MB/sec
[info]                  ·gc.alloc.rate.norm:       229936.067 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.352 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 161234.018 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 6651.659 ops/s
[info]                  ·gc.alloc.rate:                   971.688 MB/sec
[info]                  ·gc.alloc.rate.norm:              229936.066 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.064 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        320420.112 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 157.609 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 6698.719 ops/s
[info]                  ·gc.alloc.rate:            978.561 MB/sec
[info]                  ·gc.alloc.rate.norm:       229936.061 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.372 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 159164.447 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala":
[info]   6597.893 ±(99.9%) 319.951 ops/s [Average]
[info]   (min, avg, max) = (6507.237, 6597.893, 6698.719), stdev = 83.090
[info]   CI (99.9%): [6277.942, 6917.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   963.905 ±(99.9%) 46.402 MB/sec [Average]
[info]   (min, avg, max) = (950.970, 963.905, 978.561), stdev = 12.051
[info]   CI (99.9%): [917.503, 1010.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   229936.064 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (229936.061, 229936.064, 229936.067), stdev = 0.002
[info]   CI (99.9%): [229936.054, 229936.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   948.122 ±(99.9%) 1428.901 MB/sec [Average]
[info]   (min, avg, max) = (676.646, 948.122, 1355.177), stdev = 371.081
[info]   CI (99.9%): [≈ 0, 2377.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   226372.237 ±(99.9%) 343523.223 B/op [Average]
[info]   (min, avg, max) = (159164.447, 226372.237, 327669.931), stdev = 89211.890
[info]   CI (99.9%): [≈ 0, 569895.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   63.682 ±(99.9%) 335.804 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 63.682, 160.800), stdev = 87.207
[info]   CI (99.9%): [≈ 0, 399.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 10.000), stdev = 2.881
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 42.35% complete, ETA 01:05:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 138110.616 ops/s
[info] # Warmup Iteration   2: 151632.539 ops/s
[info] # Warmup Iteration   3: 152891.824 ops/s
[info] # Warmup Iteration   4: 148747.444 ops/s
[info] # Warmup Iteration   5: 150186.939 ops/s
[info] Iteration   1: 150264.470 ops/s
[info]                  ·gc.alloc.rate:            1455.837 MB/sec
[info]                  ·gc.alloc.rate.norm:       15248.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1357.579 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14218.878 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 150257.177 ops/s
[info]                  ·gc.alloc.rate:            1455.966 MB/sec
[info]                  ·gc.alloc.rate.norm:       15248.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1357.709 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14218.973 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 149807.452 ops/s
[info]                  ·gc.alloc.rate:                                  1451.226 MB/sec
[info]                  ·gc.alloc.rate.norm:                             15248.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.022 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.229 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2038.774 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       21421.362 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     2.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                27.993 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 150862.119 ops/s
[info]                  ·gc.alloc.rate:                                  1461.368 MB/sec
[info]                  ·gc.alloc.rate.norm:                             15248.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.014 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.141 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.691 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       14218.404 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 150983.538 ops/s
[info]                  ·gc.alloc.rate:            1462.631 MB/sec
[info]                  ·gc.alloc.rate.norm:       15248.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.722 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14206.446 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala":
[info]   150434.951 ±(99.9%) 1864.526 ops/s [Average]
[info]   (min, avg, max) = (149807.452, 150434.951, 150983.538), stdev = 484.212
[info]   CI (99.9%): [148570.425, 152299.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1457.406 ±(99.9%) 17.826 MB/sec [Average]
[info]   (min, avg, max) = (1451.226, 1457.406, 1462.631), stdev = 4.629
[info]   CI (99.9%): [1439.579, 1475.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   15248.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (15248.003, 15248.003, 15248.003), stdev = 0.001
[info]   CI (99.9%): [15248.002, 15248.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.007 ±(99.9%) 0.039 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.022), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.074 ±(99.9%) 0.408 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.074, 0.229), stdev = 0.106
[info]   CI (99.9%): [≈ 0, 0.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1495.895 ±(99.9%) 1168.630 MB/sec [Average]
[info]   (min, avg, max) = (1357.579, 1495.895, 2038.774), stdev = 303.489
[info]   CI (99.9%): [327.266, 2664.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   15656.813 ±(99.9%) 12408.643 B/op [Average]
[info]   (min, avg, max) = (14206.446, 15656.813, 21421.362), stdev = 3222.485
[info]   CI (99.9%): [3248.169, 28065.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.533 ±(99.9%) 4.588 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.533, 2.664), stdev = 1.191
[info]   CI (99.9%): [≈ 0, 5.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   5.599 ±(99.9%) 48.205 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.599, 27.993), stdev = 12.519
[info]   CI (99.9%): [≈ 0, 53.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.200, 8.000), stdev = 2.588
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 42.59% complete, ETA 01:04:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2873.176 ops/s
[info] # Warmup Iteration   2: 6194.469 ops/s
[info] # Warmup Iteration   3: 6422.882 ops/s
[info] # Warmup Iteration   4: 6463.411 ops/s
[info] # Warmup Iteration   5: 6433.196 ops/s
[info] Iteration   1: 6371.841 ops/s
[info]                  ·gc.alloc.rate:            1158.960 MB/sec
[info]                  ·gc.alloc.rate.norm:       286296.064 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.752 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 334662.417 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 6433.260 ops/s
[info]                  ·gc.alloc.rate:            1170.141 MB/sec
[info]                  ·gc.alloc.rate.norm:       286296.063 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.644 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 331438.008 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 6404.414 ops/s
[info]                  ·gc.alloc.rate:            1165.001 MB/sec
[info]                  ·gc.alloc.rate.norm:       286296.064 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.399 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 166469.215 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 6426.767 ops/s
[info]                  ·gc.alloc.rate:            1168.979 MB/sec
[info]                  ·gc.alloc.rate.norm:       286296.068 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.562 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 331747.330 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 6336.903 ops/s
[info]                  ·gc.alloc.rate:                                  1152.659 MB/sec
[info]                  ·gc.alloc.rate.norm:                             286296.064 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.072 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 17.991 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.610 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       337449.920 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                992.500 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson":
[info]   6394.637 ±(99.9%) 154.896 ops/s [Average]
[info]   (min, avg, max) = (6336.903, 6394.637, 6433.260), stdev = 40.226
[info]   CI (99.9%): [6239.741, 6549.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1163.148 ±(99.9%) 28.159 MB/sec [Average]
[info]   (min, avg, max) = (1152.659, 1163.148, 1170.141), stdev = 7.313
[info]   CI (99.9%): [1134.989, 1191.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   286296.065 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (286296.063, 286296.065, 286296.068), stdev = 0.002
[info]   CI (99.9%): [286296.057, 286296.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.125 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.072), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   3.598 ±(99.9%) 30.982 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.598, 17.991), stdev = 8.046
[info]   CI (99.9%): [≈ 0, 34.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1219.993 ±(99.9%) 1167.993 MB/sec [Average]
[info]   (min, avg, max) = (677.399, 1219.993, 1358.610), stdev = 303.324
[info]   CI (99.9%): [52.000, 2387.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   300353.378 ±(99.9%) 288349.134 B/op [Average]
[info]   (min, avg, max) = (166469.215, 300353.378, 337449.920), stdev = 74883.354
[info]   CI (99.9%): [12004.244, 588702.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   198.500 ±(99.9%) 1709.144 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 198.500, 992.500), stdev = 443.859
[info]   CI (99.9%): [≈ 0, 1907.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.800, 10.000), stdev = 2.387
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 42.82% complete, ETA 01:04:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11970.834 ops/s
[info] # Warmup Iteration   2: 17854.927 ops/s
[info] # Warmup Iteration   3: 17950.795 ops/s
[info] # Warmup Iteration   4: 18268.258 ops/s
[info] # Warmup Iteration   5: 18278.068 ops/s
[info] Iteration   1: 18044.741 ops/s
[info]                  ·gc.alloc.rate:            818.799 MB/sec
[info]                  ·gc.alloc.rate.norm:       71432.030 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.920 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 59141.801 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 18120.207 ops/s
[info]                  ·gc.alloc.rate:            822.250 MB/sec
[info]                  ·gc.alloc.rate.norm:       71415.276 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.239 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 117794.126 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 18329.276 ops/s
[info]                  ·gc.alloc.rate:            831.675 MB/sec
[info]                  ·gc.alloc.rate.norm:       71408.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.142 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 58225.624 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 18283.377 ops/s
[info]                  ·gc.alloc.rate:            829.396 MB/sec
[info]                  ·gc.alloc.rate.norm:       71408.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.985 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 58372.088 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 18330.032 ops/s
[info]                  ·gc.alloc.rate:            831.596 MB/sec
[info]                  ·gc.alloc.rate.norm:       71408.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.041 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 58222.448 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce":
[info]   18221.527 ±(99.9%) 504.742 ops/s [Average]
[info]   (min, avg, max) = (18044.741, 18221.527, 18330.032), stdev = 131.080
[info]   CI (99.9%): [17716.784, 18726.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   826.743 ±(99.9%) 22.635 MB/sec [Average]
[info]   (min, avg, max) = (818.799, 826.743, 831.675), stdev = 5.878
[info]   CI (99.9%): [804.108, 849.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   71414.275 ±(99.9%) 40.088 B/op [Average]
[info]   (min, avg, max) = (71408.022, 71414.275, 71432.030), stdev = 10.411
[info]   CI (99.9%): [71374.186, 71454.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   813.665 ±(99.9%) 1167.931 MB/sec [Average]
[info]   (min, avg, max) = (677.920, 813.665, 1356.239), stdev = 303.308
[info]   CI (99.9%): [≈ 0, 1981.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   70351.217 ±(99.9%) 102134.967 B/op [Average]
[info]   (min, avg, max) = (58222.448, 70351.217, 117794.126), stdev = 26524.127
[info]   CI (99.9%): [≈ 0, 172486.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 8.000), stdev = 1.789
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 43.06% complete, ETA 01:04:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11447.623 ops/s
[info] # Warmup Iteration   2: 18994.110 ops/s
[info] # Warmup Iteration   3: 20091.263 ops/s
[info] # Warmup Iteration   4: 20229.799 ops/s
[info] # Warmup Iteration   5: 20120.072 ops/s
[info] Iteration   1: 20271.375 ops/s
[info]                  ·gc.alloc.rate:            859.214 MB/sec
[info]                  ·gc.alloc.rate.norm:       66696.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.548 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 52594.288 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 20249.277 ops/s
[info]                  ·gc.alloc.rate:            858.093 MB/sec
[info]                  ·gc.alloc.rate.norm:       66696.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.797 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 105302.833 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 20327.794 ops/s
[info]                  ·gc.alloc.rate:            861.490 MB/sec
[info]                  ·gc.alloc.rate.norm:       66696.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.472 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 52449.429 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 20302.136 ops/s
[info]                  ·gc.alloc.rate:            860.446 MB/sec
[info]                  ·gc.alloc.rate.norm:       66696.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.484 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 52514.000 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 19341.807 ops/s
[info]                  ·gc.alloc.rate:            819.717 MB/sec
[info]                  ·gc.alloc.rate.norm:       66696.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.951 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 110245.197 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala":
[info]   20098.478 ±(99.9%) 1632.836 ops/s [Average]
[info]   (min, avg, max) = (19341.807, 20098.478, 20327.794), stdev = 424.042
[info]   CI (99.9%): [18465.642, 21731.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   851.792 ±(99.9%) 69.219 MB/sec [Average]
[info]   (min, avg, max) = (819.717, 851.792, 861.490), stdev = 17.976
[info]   CI (99.9%): [782.573, 921.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   66696.023 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (66696.020, 66696.023, 66696.025), stdev = 0.002
[info]   CI (99.9%): [66696.015, 66696.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   948.450 ±(99.9%) 1428.637 MB/sec [Average]
[info]   (min, avg, max) = (677.472, 948.450, 1354.951), stdev = 371.012
[info]   CI (99.9%): [≈ 0, 2377.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   74621.150 ±(99.9%) 116731.246 B/op [Average]
[info]   (min, avg, max) = (52449.429, 74621.150, 110245.197), stdev = 30314.734
[info]   CI (99.9%): [≈ 0, 191352.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 9.000), stdev = 2.588
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 43.29% complete, ETA 01:04:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 518514.787 ops/s
[info] # Warmup Iteration   2: 588914.312 ops/s
[info] # Warmup Iteration   3: 623893.171 ops/s
[info] # Warmup Iteration   4: 621098.870 ops/s
[info] # Warmup Iteration   5: 619156.284 ops/s
[info] Iteration   1: 624992.859 ops/s
[info]                  ·gc.alloc.rate:                   1416.877 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.920 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3411.978 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.677 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 620091.242 ops/s
[info]                  ·gc.alloc.rate:            1405.649 MB/sec
[info]                  ·gc.alloc.rate.norm:       3568.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.423 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3440.510 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 622984.425 ops/s
[info]                  ·gc.alloc.rate:                   1412.065 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.661 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3422.952 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 10.097 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 610209.125 ops/s
[info]                  ·gc.alloc.rate:                                  1383.356 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3568.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.176 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.453 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.912 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3515.269 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 607808.989 ops/s
[info]                  ·gc.alloc.rate:                                  1377.772 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3568.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.769 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3529.148 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala":
[info]   617217.328 ±(99.9%) 29802.680 ops/s [Average]
[info]   (min, avg, max) = (607808.989, 617217.328, 624992.859), stdev = 7739.661
[info]   CI (99.9%): [587414.648, 647020.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1399.144 ±(99.9%) 67.517 MB/sec [Average]
[info]   (min, avg, max) = (1377.772, 1399.144, 1416.877), stdev = 17.534
[info]   CI (99.9%): [1331.627, 1466.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3568.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3568.001, 3568.001, 3568.001), stdev = 0.001
[info]   CI (99.9%): [3568.001, 3568.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.036 ±(99.9%) 0.301 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.036, 0.176), stdev = 0.078
[info]   CI (99.9%): [≈ 0, 0.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.093 ±(99.9%) 0.776 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.093, 0.453), stdev = 0.202
[info]   CI (99.9%): [≈ 0, 0.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1358.137 ±(99.9%) 16.569 MB/sec [Average]
[info]   (min, avg, max) = (1354.661, 1358.137, 1362.912), stdev = 4.303
[info]   CI (99.9%): [1341.568, 1374.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   3463.971 ±(99.9%) 209.284 B/op [Average]
[info]   (min, avg, max) = (3411.978, 3463.971, 3529.148), stdev = 54.350
[info]   CI (99.9%): [3254.688, 3673.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   2.355 ±(99.9%) 16.899 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.355, 10.097), stdev = 4.389
[info]   CI (99.9%): [≈ 0, 19.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.000, 7.000), stdev = 2.345
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 43.53% complete, ETA 01:03:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 427563.272 ops/s
[info] # Warmup Iteration   2: 469883.527 ops/s
[info] # Warmup Iteration   3: 469739.342 ops/s
[info] # Warmup Iteration   4: 469263.113 ops/s
[info] # Warmup Iteration   5: 443600.763 ops/s
[info] Iteration   1: 468156.336 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 467310.560 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 467903.310 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 468371.521 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 468579.082 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   468064.162 ±(99.9%) 1888.286 ops/s [Average]
[info]   (min, avg, max) = (467310.560, 468064.162, 468579.082), stdev = 490.382
[info]   CI (99.9%): [466175.875, 469952.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 43.76% complete, ETA 01:03:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13609.557 ops/s
[info] # Warmup Iteration   2: 18751.240 ops/s
[info] # Warmup Iteration   3: 18819.679 ops/s
[info] # Warmup Iteration   4: 19293.232 ops/s
[info] # Warmup Iteration   5: 18271.678 ops/s
[info] Iteration   1: 19215.093 ops/s
[info]                  ·gc.alloc.rate:            911.360 MB/sec
[info]                  ·gc.alloc.rate.norm:       74624.027 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.679 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 55489.738 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 19089.939 ops/s
[info]                  ·gc.alloc.rate:            904.961 MB/sec
[info]                  ·gc.alloc.rate.norm:       74609.278 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.460 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 55853.024 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 19182.633 ops/s
[info]                  ·gc.alloc.rate:            909.420 MB/sec
[info]                  ·gc.alloc.rate.norm:       74608.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.019 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 111164.578 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 19333.319 ops/s
[info]                  ·gc.alloc.rate:            916.530 MB/sec
[info]                  ·gc.alloc.rate.norm:       74608.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.474 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 55148.254 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 19233.799 ops/s
[info]                  ·gc.alloc.rate:            911.861 MB/sec
[info]                  ·gc.alloc.rate.norm:       74608.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.054 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 110869.865 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson":
[info]   19210.957 ±(99.9%) 338.763 ops/s [Average]
[info]   (min, avg, max) = (19089.939, 19210.957, 19333.319), stdev = 87.976
[info]   CI (99.9%): [18872.193, 19549.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   910.826 ±(99.9%) 16.139 MB/sec [Average]
[info]   (min, avg, max) = (904.961, 910.826, 916.530), stdev = 4.191
[info]   CI (99.9%): [894.687, 926.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   74611.474 ±(99.9%) 27.102 B/op [Average]
[info]   (min, avg, max) = (74608.021, 74611.474, 74624.027), stdev = 7.038
[info]   CI (99.9%): [74584.373, 74638.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   948.537 ±(99.9%) 1428.901 MB/sec [Average]
[info]   (min, avg, max) = (677.460, 948.537, 1355.054), stdev = 371.081
[info]   CI (99.9%): [≈ 0, 2377.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   77705.092 ±(99.9%) 117101.447 B/op [Average]
[info]   (min, avg, max) = (55148.254, 77705.092, 111164.578), stdev = 30410.874
[info]   CI (99.9%): [≈ 0, 194806.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 9.000), stdev = 1.949
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 44.00% complete, ETA 01:03:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7352.390 ops/s
[info] # Warmup Iteration   2: 11064.925 ops/s
[info] # Warmup Iteration   3: 11114.053 ops/s
[info] # Warmup Iteration   4: 11249.985 ops/s
[info] # Warmup Iteration   5: 11292.264 ops/s
[info] Iteration   1: 11168.029 ops/s
[info]                  ·gc.alloc.rate:            1121.763 MB/sec
[info]                  ·gc.alloc.rate.norm:       158112.037 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.003 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 191128.087 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 10993.723 ops/s
[info]                  ·gc.alloc.rate:            1104.378 MB/sec
[info]                  ·gc.alloc.rate.norm:       158112.040 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.113 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 194152.486 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 11081.982 ops/s
[info]                  ·gc.alloc.rate:            1113.373 MB/sec
[info]                  ·gc.alloc.rate.norm:       158112.040 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.152 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 96305.519 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 11005.792 ops/s
[info]                  ·gc.alloc.rate:            1105.559 MB/sec
[info]                  ·gc.alloc.rate.norm:       158112.040 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.083 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 193940.837 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 11013.555 ops/s
[info]                  ·gc.alloc.rate:            1106.290 MB/sec
[info]                  ·gc.alloc.rate.norm:       158112.046 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.997 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 96899.997 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce":
[info]   11052.616 ±(99.9%) 281.448 ops/s [Average]
[info]   (min, avg, max) = (10993.723, 11052.616, 11168.029), stdev = 73.091
[info]   CI (99.9%): [10771.168, 11334.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1110.273 ±(99.9%) 28.196 MB/sec [Average]
[info]   (min, avg, max) = (1104.378, 1110.273, 1121.763), stdev = 7.322
[info]   CI (99.9%): [1082.077, 1138.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   158112.041 ±(99.9%) 0.014 B/op [Average]
[info]   (min, avg, max) = (158112.037, 158112.041, 158112.046), stdev = 0.004
[info]   CI (99.9%): [158112.027, 158112.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1084.869 ±(99.9%) 1429.942 MB/sec [Average]
[info]   (min, avg, max) = (677.997, 1084.869, 1356.113), stdev = 371.351
[info]   CI (99.9%): [≈ 0, 2514.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   154485.385 ±(99.9%) 203519.127 B/op [Average]
[info]   (min, avg, max) = (96305.519, 154485.385, 194152.486), stdev = 52853.271
[info]   CI (99.9%): [≈ 0, 358004.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 8.000), stdev = 2.588
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 44.24% complete, ETA 01:03:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6244.073 ops/s
[info] # Warmup Iteration   2: 11210.047 ops/s
[info] # Warmup Iteration   3: 11446.512 ops/s
[info] # Warmup Iteration   4: 11388.188 ops/s
[info] # Warmup Iteration   5: 11229.077 ops/s
[info] Iteration   1: 11365.111 ops/s
[info]                  ·gc.alloc.rate:            1040.434 MB/sec
[info]                  ·gc.alloc.rate.norm:       144062.290 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.094 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 187631.177 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 11391.360 ops/s
[info]                  ·gc.alloc.rate:            1042.995 MB/sec
[info]                  ·gc.alloc.rate.norm:       144088.039 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.968 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 187186.553 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 11444.537 ops/s
[info]                  ·gc.alloc.rate:                   1048.061 MB/sec
[info]                  ·gc.alloc.rate.norm:              144088.036 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.956 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        93068.334 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 91.603 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 11373.884 ops/s
[info]                  ·gc.alloc.rate:            1041.211 MB/sec
[info]                  ·gc.alloc.rate.norm:       144088.036 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.671 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 187466.255 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 11447.436 ops/s
[info]                  ·gc.alloc.rate:            1047.964 MB/sec
[info]                  ·gc.alloc.rate.norm:       144088.045 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.323 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 93127.394 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala":
[info]   11404.466 ±(99.9%) 150.471 ops/s [Average]
[info]   (min, avg, max) = (11365.111, 11404.466, 11447.436), stdev = 39.077
[info]   CI (99.9%): [11253.995, 11554.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1044.133 ±(99.9%) 14.098 MB/sec [Average]
[info]   (min, avg, max) = (1040.434, 1044.133, 1048.061), stdev = 3.661
[info]   CI (99.9%): [1030.035, 1058.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   144082.889 ±(99.9%) 44.341 B/op [Average]
[info]   (min, avg, max) = (144062.290, 144082.889, 144088.045), stdev = 11.515
[info]   CI (99.9%): [144038.548, 144127.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1083.802 ±(99.9%) 1429.477 MB/sec [Average]
[info]   (min, avg, max) = (676.956, 1083.802, 1355.094), stdev = 371.231
[info]   CI (99.9%): [≈ 0, 2513.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   149695.943 ±(99.9%) 198951.178 B/op [Average]
[info]   (min, avg, max) = (93068.334, 149695.943, 187631.177), stdev = 51666.989
[info]   CI (99.9%): [≈ 0, 348647.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   18.321 ±(99.9%) 157.745 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18.321, 91.603), stdev = 40.966
[info]   CI (99.9%): [≈ 0, 176.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.400, 10.000), stdev = 2.702
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 44.47% complete, ETA 01:02:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 230768.372 ops/s
[info] # Warmup Iteration   2: 253970.759 ops/s
[info] # Warmup Iteration   3: 257537.962 ops/s
[info] # Warmup Iteration   4: 257429.894 ops/s
[info] # Warmup Iteration   5: 256680.440 ops/s
[info] Iteration   1: 253146.874 ops/s
[info]                  ·gc.alloc.rate:            1464.626 MB/sec
[info]                  ·gc.alloc.rate.norm:       9104.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.529 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8432.077 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 252084.456 ops/s
[info]                  ·gc.alloc.rate:            1458.279 MB/sec
[info]                  ·gc.alloc.rate.norm:       9104.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2034.565 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12701.744 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 253376.868 ops/s
[info]                  ·gc.alloc.rate:                                  1465.386 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9104.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.034 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.214 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1359.326 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8445.080 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                20.689 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 253994.880 ops/s
[info]                  ·gc.alloc.rate:                                  1469.045 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9104.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.100 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.620 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.735 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8445.173 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 253889.478 ops/s
[info]                  ·gc.alloc.rate:            1468.598 MB/sec
[info]                  ·gc.alloc.rate.norm:       9104.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.921 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8448.898 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala":
[info]   253298.511 ±(99.9%) 2943.435 ops/s [Average]
[info]   (min, avg, max) = (252084.456, 253298.511, 253994.880), stdev = 764.401
[info]   CI (99.9%): [250355.076, 256241.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1465.187 ±(99.9%) 16.629 MB/sec [Average]
[info]   (min, avg, max) = (1458.279, 1465.187, 1469.045), stdev = 4.318
[info]   CI (99.9%): [1448.558, 1481.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   9104.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9104.002, 9104.002, 9104.002), stdev = 0.001
[info]   CI (99.9%): [9104.001, 9104.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.027 ±(99.9%) 0.168 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.100), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.167 ±(99.9%) 1.038 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.167, 0.620), stdev = 0.270
[info]   CI (99.9%): [≈ 0, 1.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1495.215 ±(99.9%) 1161.037 MB/sec [Average]
[info]   (min, avg, max) = (1356.529, 1495.215, 2034.565), stdev = 301.518
[info]   CI (99.9%): [334.178, 2656.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   9294.595 ±(99.9%) 7334.188 B/op [Average]
[info]   (min, avg, max) = (8432.077, 9294.595, 12701.744), stdev = 1904.665
[info]   CI (99.9%): [1960.406, 16628.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   4.138 ±(99.9%) 35.627 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.138, 20.689), stdev = 9.252
[info]   CI (99.9%): [≈ 0, 39.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.400, 10.000), stdev = 3.209
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 44.71% complete, ETA 01:02:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4312.919 ops/s
[info] # Warmup Iteration   2: 9972.288 ops/s
[info] # Warmup Iteration   3: 10056.500 ops/s
[info] # Warmup Iteration   4: 10429.247 ops/s
[info] # Warmup Iteration   5: 10449.819 ops/s
[info] Iteration   1: 10453.287 ops/s
[info]                  ·gc.alloc.rate:            1295.301 MB/sec
[info]                  ·gc.alloc.rate.norm:       194952.039 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.611 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 203878.635 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 10405.167 ops/s
[info]                  ·gc.alloc.rate:                   1288.908 MB/sec
[info]                  ·gc.alloc.rate.norm:              194952.284 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.140 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        204818.890 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 100.747 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 10185.953 ops/s
[info]                  ·gc.alloc.rate:                   1261.862 MB/sec
[info]                  ·gc.alloc.rate.norm:              194952.043 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.355 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        209241.756 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 102.923 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 10527.194 ops/s
[info]                  ·gc.alloc.rate:                   1304.174 MB/sec
[info]                  ·gc.alloc.rate.norm:              194952.042 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.486 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        101272.725 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 497.899 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 10498.484 ops/s
[info]                  ·gc.alloc.rate:                                  1300.604 MB/sec
[info]                  ·gc.alloc.rate.norm:                             194952.042 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.011 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.649 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.322 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       204203.211 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                99.855 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson":
[info]   10414.017 ±(99.9%) 522.246 ops/s [Average]
[info]   (min, avg, max) = (10185.953, 10414.017, 10527.194), stdev = 135.626
[info]   CI (99.9%): [9891.771, 10936.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1290.170 ±(99.9%) 64.842 MB/sec [Average]
[info]   (min, avg, max) = (1261.862, 1290.170, 1304.174), stdev = 16.839
[info]   CI (99.9%): [1225.328, 1355.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   194952.090 ±(99.9%) 0.417 B/op [Average]
[info]   (min, avg, max) = (194952.039, 194952.090, 194952.284), stdev = 0.108
[info]   CI (99.9%): [194951.673, 194952.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.019 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.011), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.330 ±(99.9%) 2.840 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.330, 1.649), stdev = 0.738
[info]   CI (99.9%): [≈ 0, 3.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1220.583 ±(99.9%) 1169.132 MB/sec [Average]
[info]   (min, avg, max) = (677.486, 1220.583, 1362.322), stdev = 303.620
[info]   CI (99.9%): [51.450, 2389.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   184683.043 ±(99.9%) 179740.655 B/op [Average]
[info]   (min, avg, max) = (101272.725, 184683.043, 209241.756), stdev = 46678.077
[info]   CI (99.9%): [4942.388, 364423.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 5.000 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.331), stdev = 1.299
[info]   CI (99.9%): [≈ 0, 6.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   160.285 ±(99.9%) 746.076 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 160.285, 497.899), stdev = 193.754
[info]   CI (99.9%): [≈ 0, 906.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 8.000, 10.000), stdev = 2.739
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 44.94% complete, ETA 01:02:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19493.108 ops/s
[info] # Warmup Iteration   2: 27484.490 ops/s
[info] # Warmup Iteration   3: 27960.050 ops/s
[info] # Warmup Iteration   4: 27875.960 ops/s
[info] # Warmup Iteration   5: 28062.449 ops/s
[info] Iteration   1: 28092.347 ops/s
[info]                  ·gc.alloc.rate:            969.284 MB/sec
[info]                  ·gc.alloc.rate.norm:       54312.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.041 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 75983.227 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 28156.328 ops/s
[info]                  ·gc.alloc.rate:                   971.530 MB/sec
[info]                  ·gc.alloc.rate.norm:              54312.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.357 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        37866.692 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 37.234 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 27944.568 ops/s
[info]                  ·gc.alloc.rate:            964.237 MB/sec
[info]                  ·gc.alloc.rate.norm:       54312.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.123 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 76385.586 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 28118.537 ops/s
[info]                  ·gc.alloc.rate:            970.239 MB/sec
[info]                  ·gc.alloc.rate.norm:       54312.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.037 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 37955.140 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 28171.029 ops/s
[info]                  ·gc.alloc.rate:            972.198 MB/sec
[info]                  ·gc.alloc.rate.norm:       54312.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.152 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 37885.093 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce":
[info]   28096.562 ±(99.9%) 348.267 ops/s [Average]
[info]   (min, avg, max) = (27944.568, 28096.562, 28171.029), stdev = 90.444
[info]   CI (99.9%): [27748.295, 28444.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   969.498 ±(99.9%) 12.130 MB/sec [Average]
[info]   (min, avg, max) = (964.237, 969.498, 972.198), stdev = 3.150
[info]   CI (99.9%): [957.368, 981.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   54312.015 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (54312.014, 54312.015, 54312.016), stdev = 0.001
[info]   CI (99.9%): [54312.013, 54312.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   949.142 ±(99.9%) 1430.452 MB/sec [Average]
[info]   (min, avg, max) = (677.357, 949.142, 1356.123), stdev = 371.484
[info]   CI (99.9%): [≈ 0, 2379.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   53215.148 ±(99.9%) 80742.139 B/op [Average]
[info]   (min, avg, max) = (37866.692, 53215.148, 76385.586), stdev = 20968.477
[info]   CI (99.9%): [≈ 0, 133957.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   7.447 ±(99.9%) 64.119 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.447, 37.234), stdev = 16.651
[info]   CI (99.9%): [≈ 0, 71.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 8.000), stdev = 2.191
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 45.18% complete, ETA 01:02:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 48584.755 ops/s
[info] # Warmup Iteration   2: 75901.427 ops/s
[info] # Warmup Iteration   3: 76272.884 ops/s
[info] # Warmup Iteration   4: 78355.067 ops/s
[info] # Warmup Iteration   5: 77450.111 ops/s
[info] Iteration   1: 78570.739 ops/s
[info]                  ·gc.alloc.rate:                   1250.919 MB/sec
[info]                  ·gc.alloc.rate.norm:              25056.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.300 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        27126.742 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 13.343 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 78634.688 ops/s
[info]                  ·gc.alloc.rate:            1251.859 MB/sec
[info]                  ·gc.alloc.rate.norm:       25056.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.882 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27118.000 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 78744.594 ops/s
[info]                  ·gc.alloc.rate:            1253.925 MB/sec
[info]                  ·gc.alloc.rate.norm:       25056.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.619 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13540.235 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 78392.606 ops/s
[info]                  ·gc.alloc.rate:                   1248.069 MB/sec
[info]                  ·gc.alloc.rate.norm:              25056.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.879 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        27200.311 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 80.237 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 78341.757 ops/s
[info]                  ·gc.alloc.rate:                                  1247.071 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25056.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.126 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.525 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.739 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       27379.990 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala":
[info]   78536.877 ±(99.9%) 646.478 ops/s [Average]
[info]   (min, avg, max) = (78341.757, 78536.877, 78744.594), stdev = 167.888
[info]   CI (99.9%): [77890.399, 79183.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1250.368 ±(99.9%) 10.778 MB/sec [Average]
[info]   (min, avg, max) = (1247.071, 1250.368, 1253.925), stdev = 2.799
[info]   CI (99.9%): [1239.591, 1261.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   25056.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (25056.005, 25056.005, 25056.006), stdev = 0.001
[info]   CI (99.9%): [25056.005, 25056.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.216 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.126), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.505 ±(99.9%) 4.349 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.505, 2.525), stdev = 1.129
[info]   CI (99.9%): [≈ 0, 4.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1220.884 ±(99.9%) 1169.495 MB/sec [Average]
[info]   (min, avg, max) = (677.619, 1220.884, 1362.739), stdev = 303.714
[info]   CI (99.9%): [51.389, 2390.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   24473.055 ±(99.9%) 23537.212 B/op [Average]
[info]   (min, avg, max) = (13540.235, 24473.055, 27379.990), stdev = 6112.539
[info]   CI (99.9%): [935.843, 48010.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.689 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.997), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   18.716 ±(99.9%) 134.284 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18.716, 80.237), stdev = 34.873
[info]   CI (99.9%): [≈ 0, 153.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.600, 9.000), stdev = 1.949
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 45.41% complete, ETA 01:01:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 891806.475 ops/s
[info] # Warmup Iteration   2: 973321.451 ops/s
[info] # Warmup Iteration   3: 975934.645 ops/s
[info] # Warmup Iteration   4: 978782.231 ops/s
[info] # Warmup Iteration   5: 979336.214 ops/s
[info] Iteration   1: 975905.285 ops/s
[info]                  ·gc.alloc.rate:                   1339.072 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.301 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2186.178 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.074 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 956775.481 ops/s
[info]                  ·gc.alloc.rate:            1313.543 MB/sec
[info]                  ·gc.alloc.rate.norm:       2160.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.004 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2229.824 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 976981.441 ops/s
[info]                  ·gc.alloc.rate:            1340.713 MB/sec
[info]                  ·gc.alloc.rate.norm:       2160.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.762 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2182.635 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 983641.670 ops/s
[info]                  ·gc.alloc.rate:                                  1349.846 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2160.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.079 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.126 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.725 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2174.209 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                6.395 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 987655.854 ops/s
[info]                  ·gc.alloc.rate:                                  1355.500 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2160.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.101 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.160 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.874 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2171.752 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala":
[info]   976191.946 ±(99.9%) 45749.156 ops/s [Average]
[info]   (min, avg, max) = (956775.481, 976191.946, 987655.854), stdev = 11880.911
[info]   CI (99.9%): [930442.790, 1021941.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1339.735 ±(99.9%) 62.037 MB/sec [Average]
[info]   (min, avg, max) = (1313.543, 1339.735, 1355.500), stdev = 16.111
[info]   CI (99.9%): [1277.698, 1401.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2160.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2160.000, 2160.000, 2160.000), stdev = 0.001
[info]   CI (99.9%): [2160.000, 2160.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.036 ±(99.9%) 0.192 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.036, 0.101), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.057 ±(99.9%) 0.306 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.057, 0.160), stdev = 0.079
[info]   CI (99.9%): [≈ 0, 0.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1357.533 ±(99.9%) 12.909 MB/sec [Average]
[info]   (min, avg, max) = (1354.762, 1357.533, 1362.874), stdev = 3.352
[info]   CI (99.9%): [1344.625, 1370.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   2188.920 ±(99.9%) 90.946 B/op [Average]
[info]   (min, avg, max) = (2171.752, 2188.920, 2229.824), stdev = 23.618
[info]   CI (99.9%): [2097.973, 2279.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.494 ±(99.9%) 10.701 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.494, 6.395), stdev = 2.779
[info]   CI (99.9%): [≈ 0, 12.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.800, 7.000), stdev = 2.168
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 45.65% complete, ETA 01:01:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1005690.049 ops/s
[info] # Warmup Iteration   2: 1082110.206 ops/s
[info] # Warmup Iteration   3: 1097183.787 ops/s
[info] # Warmup Iteration   4: 1096780.986 ops/s
[info] # Warmup Iteration   5: 1095687.478 ops/s
[info] Iteration   1: 1074098.268 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1096868.455 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1098139.668 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1099697.350 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1100240.742 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   1093808.897 ±(99.9%) 42734.684 ops/s [Average]
[info]   (min, avg, max) = (1074098.268, 1093808.897, 1100240.742), stdev = 11098.062
[info]   CI (99.9%): [1051074.213, 1136543.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 45.88% complete, ETA 01:01:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34923.860 ops/s
[info] # Warmup Iteration   2: 63184.155 ops/s
[info] # Warmup Iteration   3: 62629.123 ops/s
[info] # Warmup Iteration   4: 63704.575 ops/s
[info] # Warmup Iteration   5: 63852.773 ops/s
[info] Iteration   1: 64967.312 ops/s
[info]                  ·gc.alloc.rate:                   1401.074 MB/sec
[info]                  ·gc.alloc.rate.norm:              33944.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.115 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        32806.325 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 16.137 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 64857.033 ops/s
[info]                  ·gc.alloc.rate:            1398.580 MB/sec
[info]                  ·gc.alloc.rate.norm:       33944.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.725 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 32879.640 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 64897.943 ops/s
[info]                  ·gc.alloc.rate:                   1400.106 MB/sec
[info]                  ·gc.alloc.rate.norm:              33944.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.284 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        32857.352 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 96.924 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 65324.212 ops/s
[info]                  ·gc.alloc.rate:                                  1408.799 MB/sec
[info]                  ·gc.alloc.rate.norm:                             33944.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.037 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.880 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.779 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       32835.203 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 65498.425 ops/s
[info]                  ·gc.alloc.rate:                                  1412.654 MB/sec
[info]                  ·gc.alloc.rate.norm:                             33944.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.027 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.654 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.900 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       32748.493 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson":
[info]   65108.985 ±(99.9%) 1099.419 ops/s [Average]
[info]   (min, avg, max) = (64857.033, 65108.985, 65498.425), stdev = 285.516
[info]   CI (99.9%): [64009.566, 66208.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1404.242 ±(99.9%) 23.638 MB/sec [Average]
[info]   (min, avg, max) = (1398.580, 1404.242, 1412.654), stdev = 6.139
[info]   CI (99.9%): [1380.604, 1427.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   33944.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (33944.006, 33944.006, 33944.007), stdev = 0.001
[info]   CI (99.9%): [33944.005, 33944.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.068 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.037), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.307 ±(99.9%) 1.646 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.307, 0.880), stdev = 0.427
[info]   CI (99.9%): [≈ 0, 1.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1357.961 ±(99.9%) 17.226 MB/sec [Average]
[info]   (min, avg, max) = (1354.115, 1357.961, 1362.900), stdev = 4.473
[info]   CI (99.9%): [1340.735, 1375.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   32825.403 ±(99.9%) 195.755 B/op [Average]
[info]   (min, avg, max) = (32748.493, 32825.403, 32879.640), stdev = 50.837
[info]   CI (99.9%): [32629.648, 33021.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.691 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.998), stdev = 1.738
[info]   CI (99.9%): [≈ 0, 7.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   22.612 ±(99.9%) 162.209 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22.612, 96.924), stdev = 42.125
[info]   CI (99.9%): [≈ 0, 184.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.000, 10.000), stdev = 3.674
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 46.12% complete, ETA 01:00:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8268.595 ops/s
[info] # Warmup Iteration   2: 19186.739 ops/s
[info] # Warmup Iteration   3: 19779.043 ops/s
[info] # Warmup Iteration   4: 19381.362 ops/s
[info] # Warmup Iteration   5: 19753.768 ops/s
[info] Iteration   1: 19528.084 ops/s
[info]                  ·gc.alloc.rate:            706.119 MB/sec
[info]                  ·gc.alloc.rate.norm:       56920.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.641 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 54705.045 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 19720.629 ops/s
[info]                  ·gc.alloc.rate:            713.229 MB/sec
[info]                  ·gc.alloc.rate.norm:       56920.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.136 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 54119.366 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 19801.952 ops/s
[info]                  ·gc.alloc.rate:            716.216 MB/sec
[info]                  ·gc.alloc.rate.norm:       56920.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.156 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 53895.303 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 19825.711 ops/s
[info]                  ·gc.alloc.rate:            717.143 MB/sec
[info]                  ·gc.alloc.rate.norm:       56920.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.212 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 53830.074 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 19809.929 ops/s
[info]                  ·gc.alloc.rate:            716.357 MB/sec
[info]                  ·gc.alloc.rate.norm:       56920.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.016 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 53873.542 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce":
[info]   19737.261 ±(99.9%) 476.767 ops/s [Average]
[info]   (min, avg, max) = (19528.084, 19737.261, 19825.711), stdev = 123.815
[info]   CI (99.9%): [19260.494, 20214.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate":
[info]   713.813 ±(99.9%) 17.527 MB/sec [Average]
[info]   (min, avg, max) = (706.119, 713.813, 717.143), stdev = 4.552
[info]   CI (99.9%): [696.286, 731.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   56920.022 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (56920.021, 56920.022, 56920.026), stdev = 0.002
[info]   CI (99.9%): [56920.013, 56920.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   678.232 ±(99.9%) 0.923 MB/sec [Average]
[info]   (min, avg, max) = (678.016, 678.232, 678.641), stdev = 0.240
[info]   CI (99.9%): [677.310, 679.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   54084.666 ±(99.9%) 1403.404 B/op [Average]
[info]   (min, avg, max) = (53830.074, 54084.666, 54705.045), stdev = 364.460
[info]   CI (99.9%): [52681.262, 55488.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 46.35% complete, ETA 01:00:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5919.270 ops/s
[info] # Warmup Iteration   2: 14968.254 ops/s
[info] # Warmup Iteration   3: 15134.191 ops/s
[info] # Warmup Iteration   4: 14975.177 ops/s
[info] # Warmup Iteration   5: 15142.101 ops/s
[info] Iteration   1: 14619.220 ops/s
[info]                  ·gc.alloc.rate:            409.538 MB/sec
[info]                  ·gc.alloc.rate.norm:       44088.030 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.466 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 72931.322 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 15134.025 ops/s
[info]                  ·gc.alloc.rate:      423.882 MB/sec
[info]                  ·gc.alloc.rate.norm: 44088.027 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 14699.002 ops/s
[info]                  ·gc.alloc.rate:            411.682 MB/sec
[info]                  ·gc.alloc.rate.norm:       44088.037 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.308 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 72534.471 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 15075.540 ops/s
[info]                  ·gc.alloc.rate:            422.287 MB/sec
[info]                  ·gc.alloc.rate.norm:       44089.839 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.357 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 70720.989 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 15183.891 ops/s
[info]                  ·gc.alloc.rate:      425.344 MB/sec
[info]                  ·gc.alloc.rate.norm: 44088.027 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala":
[info]   14942.336 ±(99.9%) 1012.309 ops/s [Average]
[info]   (min, avg, max) = (14619.220, 14942.336, 15183.891), stdev = 262.894
[info]   CI (99.9%): [13930.026, 15954.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   418.547 ±(99.9%) 28.358 MB/sec [Average]
[info]   (min, avg, max) = (409.538, 418.547, 425.344), stdev = 7.364
[info]   CI (99.9%): [390.189, 446.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   44088.392 ±(99.9%) 3.115 B/op [Average]
[info]   (min, avg, max) = (44088.027, 44088.392, 44089.839), stdev = 0.809
[info]   CI (99.9%): [44085.277, 44091.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   406.426 ±(99.9%) 1428.645 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 406.426, 677.466), stdev = 371.015
[info]   CI (99.9%): [≈ 0, 1835.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   43237.356 ±(99.9%) 152019.264 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 43237.356, 72931.322), stdev = 39478.920
[info]   CI (99.9%): [≈ 0, 195256.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 5.000), stdev = 2.408
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 46.59% complete, ETA 01:00:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 96595.932 ops/s
[info] # Warmup Iteration   2: 101356.554 ops/s
[info] # Warmup Iteration   3: 100584.242 ops/s
[info] # Warmup Iteration   4: 101636.071 ops/s
[info] # Warmup Iteration   5: 101591.376 ops/s
[info] Iteration   1: 100957.013 ops/s
[info]                  ·gc.alloc.rate:            253.559 MB/sec
[info]                  ·gc.alloc.rate.norm:       3952.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      679.598 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10592.306 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 101295.401 ops/s
[info]                  ·gc.alloc.rate:      254.373 MB/sec
[info]                  ·gc.alloc.rate.norm: 3952.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 100872.929 ops/s
[info]                  ·gc.alloc.rate:            253.247 MB/sec
[info]                  ·gc.alloc.rate.norm:       3952.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.668 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10590.837 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 101712.790 ops/s
[info]                  ·gc.alloc.rate:      255.407 MB/sec
[info]                  ·gc.alloc.rate.norm: 3952.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 101681.938 ops/s
[info]                  ·gc.alloc.rate:      255.297 MB/sec
[info]                  ·gc.alloc.rate.norm: 3952.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala":
[info]   101304.014 ±(99.9%) 1511.399 ops/s [Average]
[info]   (min, avg, max) = (100872.929, 101304.014, 101712.790), stdev = 392.506
[info]   CI (99.9%): [99792.615, 102815.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   254.376 ±(99.9%) 3.779 MB/sec [Average]
[info]   (min, avg, max) = (253.247, 254.376, 255.407), stdev = 0.981
[info]   CI (99.9%): [250.598, 258.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3952.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3952.004, 3952.004, 3952.004), stdev = 0.001
[info]   CI (99.9%): [3952.004, 3952.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   271.653 ±(99.9%) 1432.350 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 271.653, 679.598), stdev = 371.977
[info]   CI (99.9%): [≈ 0, 1704.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   4236.629 ±(99.9%) 22338.520 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4236.629, 10592.306), stdev = 5801.243
[info]   CI (99.9%): [≈ 0, 26575.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.643
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 46.82% complete, ETA 01:00:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3618.998 ops/s
[info] # Warmup Iteration   2: 13299.553 ops/s
[info] # Warmup Iteration   3: 13417.520 ops/s
[info] # Warmup Iteration   4: 13576.594 ops/s
[info] # Warmup Iteration   5: 13936.846 ops/s
[info] Iteration   1: 13806.374 ops/s
[info]                  ·gc.alloc.rate:            872.232 MB/sec
[info]                  ·gc.alloc.rate.norm:       99394.082 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.688 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 77225.128 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 13897.725 ops/s
[info]                  ·gc.alloc.rate:            877.911 MB/sec
[info]                  ·gc.alloc.rate.norm:       99392.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.649 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 76719.553 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 13865.998 ops/s
[info]                  ·gc.alloc.rate:            875.683 MB/sec
[info]                  ·gc.alloc.rate.norm:       99392.032 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.880 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 153782.074 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 13894.461 ops/s
[info]                  ·gc.alloc.rate:            877.763 MB/sec
[info]                  ·gc.alloc.rate.norm:       99392.037 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.632 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 76730.594 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 13781.917 ops/s
[info]                  ·gc.alloc.rate:            870.267 MB/sec
[info]                  ·gc.alloc.rate.norm:       99392.030 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.353 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 77359.579 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson":
[info]   13849.295 ±(99.9%) 202.355 ops/s [Average]
[info]   (min, avg, max) = (13781.917, 13849.295, 13897.725), stdev = 52.551
[info]   CI (99.9%): [13646.939, 14051.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   874.771 ±(99.9%) 13.111 MB/sec [Average]
[info]   (min, avg, max) = (870.267, 874.771, 877.911), stdev = 3.405
[info]   CI (99.9%): [861.660, 887.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   99392.442 ±(99.9%) 3.531 B/op [Average]
[info]   (min, avg, max) = (99392.029, 99392.442, 99394.082), stdev = 0.917
[info]   CI (99.9%): [99388.911, 99395.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   813.041 ±(99.9%) 1166.351 MB/sec [Average]
[info]   (min, avg, max) = (677.353, 813.041, 1354.880), stdev = 302.898
[info]   CI (99.9%): [≈ 0, 1979.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   92363.386 ±(99.9%) 132212.996 B/op [Average]
[info]   (min, avg, max) = (76719.553, 92363.386, 153782.074), stdev = 34335.295
[info]   CI (99.9%): [≈ 0, 224576.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 9.000), stdev = 2.074
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 47.06% complete, ETA 00:59:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32920.427 ops/s
[info] # Warmup Iteration   2: 43104.455 ops/s
[info] # Warmup Iteration   3: 44278.832 ops/s
[info] # Warmup Iteration   4: 45130.018 ops/s
[info] # Warmup Iteration   5: 44295.830 ops/s
[info] Iteration   1: 44599.172 ops/s
[info]                  ·gc.alloc.rate:            795.455 MB/sec
[info]                  ·gc.alloc.rate.norm:       28072.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.089 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23930.109 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 44543.297 ops/s
[info]                  ·gc.alloc.rate:            794.425 MB/sec
[info]                  ·gc.alloc.rate.norm:       28072.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.032 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23959.113 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 44391.490 ops/s
[info]                  ·gc.alloc.rate:            791.752 MB/sec
[info]                  ·gc.alloc.rate.norm:       28072.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.189 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 48084.433 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 44956.695 ops/s
[info]                  ·gc.alloc.rate:            801.854 MB/sec
[info]                  ·gc.alloc.rate.norm:       28072.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.086 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23739.055 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 44415.830 ops/s
[info]                  ·gc.alloc.rate:            792.506 MB/sec
[info]                  ·gc.alloc.rate.norm:       28072.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.358 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24028.686 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce":
[info]   44581.297 ±(99.9%) 874.049 ops/s [Average]
[info]   (min, avg, max) = (44391.490, 44581.297, 44956.695), stdev = 226.988
[info]   CI (99.9%): [43707.248, 45455.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate":
[info]   795.198 ±(99.9%) 15.412 MB/sec [Average]
[info]   (min, avg, max) = (791.752, 795.198, 801.854), stdev = 4.003
[info]   CI (99.9%): [779.786, 810.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   28072.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (28072.009, 28072.009, 28072.010), stdev = 0.001
[info]   CI (99.9%): [28072.008, 28072.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   813.751 ±(99.9%) 1167.639 MB/sec [Average]
[info]   (min, avg, max) = (678.032, 813.751, 1356.189), stdev = 303.232
[info]   CI (99.9%): [≈ 0, 1981.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   28748.279 ±(99.9%) 41624.579 B/op [Average]
[info]   (min, avg, max) = (23739.055, 28748.279, 48084.433), stdev = 10809.771
[info]   CI (99.9%): [≈ 0, 70372.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 8.000), stdev = 1.949
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 47.29% complete, ETA 00:59:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 47094.781 ops/s
[info] # Warmup Iteration   2: 76084.819 ops/s
[info] # Warmup Iteration   3: 77065.889 ops/s
[info] # Warmup Iteration   4: 77982.124 ops/s
[info] # Warmup Iteration   5: 76973.244 ops/s
[info] Iteration   1: 78223.114 ops/s
[info]                  ·gc.alloc.rate:            1264.448 MB/sec
[info]                  ·gc.alloc.rate.norm:       25440.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.948 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27260.805 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 77729.834 ops/s
[info]                  ·gc.alloc.rate:            1256.192 MB/sec
[info]                  ·gc.alloc.rate.norm:       25440.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.654 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27434.027 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 77960.480 ops/s
[info]                  ·gc.alloc.rate:            1260.476 MB/sec
[info]                  ·gc.alloc.rate.norm:       25440.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.299 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27353.806 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 78293.918 ops/s
[info]                  ·gc.alloc.rate:                   1265.462 MB/sec
[info]                  ·gc.alloc.rate.norm:              25440.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.394 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        13617.870 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 80.341 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 78213.600 ops/s
[info]                  ·gc.alloc.rate:                                  1264.149 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25440.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.118 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.369 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.740 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       27424.089 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala":
[info]   78084.189 ±(99.9%) 904.913 ops/s [Average]
[info]   (min, avg, max) = (77729.834, 78084.189, 78293.918), stdev = 235.003
[info]   CI (99.9%): [77179.276, 78989.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1262.145 ±(99.9%) 14.732 MB/sec [Average]
[info]   (min, avg, max) = (1256.192, 1262.145, 1265.462), stdev = 3.826
[info]   CI (99.9%): [1247.414, 1276.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   25440.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (25440.005, 25440.005, 25440.006), stdev = 0.001
[info]   CI (99.9%): [25440.005, 25440.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.024 ±(99.9%) 0.203 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.118), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.474 ±(99.9%) 4.080 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.474, 2.369), stdev = 1.060
[info]   CI (99.9%): [≈ 0, 4.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1221.007 ±(99.9%) 1170.241 MB/sec [Average]
[info]   (min, avg, max) = (677.394, 1221.007, 1362.740), stdev = 303.908
[info]   CI (99.9%): [50.766, 2391.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   24618.119 ±(99.9%) 23680.369 B/op [Average]
[info]   (min, avg, max) = (13617.870, 24618.119, 27434.027), stdev = 6149.717
[info]   CI (99.9%): [937.751, 48298.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   16.068 ±(99.9%) 138.353 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.068, 80.341), stdev = 35.930
[info]   CI (99.9%): [≈ 0, 154.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.000, 9.000), stdev = 2.739
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 47.53% complete, ETA 00:59:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 225070.909 ops/s
[info] # Warmup Iteration   2: 246300.185 ops/s
[info] # Warmup Iteration   3: 249207.915 ops/s
[info] # Warmup Iteration   4: 249371.551 ops/s
[info] # Warmup Iteration   5: 248520.424 ops/s
[info] Iteration   1: 248592.550 ops/s
[info]                  ·gc.alloc.rate:                   476.316 MB/sec
[info]                  ·gc.alloc.rate.norm:              3016.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.383 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4289.146 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 4.217 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 248995.061 ops/s
[info]                  ·gc.alloc.rate:      477.096 MB/sec
[info]                  ·gc.alloc.rate.norm: 3016.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 248987.904 ops/s
[info]                  ·gc.alloc.rate:            477.142 MB/sec
[info]                  ·gc.alloc.rate.norm:       3016.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.158 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4286.622 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 249262.523 ops/s
[info]                  ·gc.alloc.rate:                   477.785 MB/sec
[info]                  ·gc.alloc.rate.norm:              3016.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.665 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4277.739 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 4.206 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 249441.999 ops/s
[info]                  ·gc.alloc.rate:            477.957 MB/sec
[info]                  ·gc.alloc.rate.norm:       3016.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.086 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4278.856 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala":
[info]   249056.007 ±(99.9%) 1239.979 ops/s [Average]
[info]   (min, avg, max) = (248592.550, 249056.007, 249441.999), stdev = 322.018
[info]   CI (99.9%): [247816.029, 250295.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   477.259 ±(99.9%) 2.505 MB/sec [Average]
[info]   (min, avg, max) = (476.316, 477.259, 477.957), stdev = 0.651
[info]   CI (99.9%): [474.754, 479.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3016.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3016.002, 3016.002, 3016.002), stdev = 0.001
[info]   CI (99.9%): [3016.001, 3016.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   542.258 ±(99.9%) 1167.252 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 542.258, 678.158), stdev = 303.132
[info]   CI (99.9%): [≈ 0, 1709.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   3426.473 ±(99.9%) 7375.764 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3426.473, 4289.146), stdev = 1915.463
[info]   CI (99.9%): [≈ 0, 10802.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.685 ±(99.9%) 8.883 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.685, 4.217), stdev = 2.307
[info]   CI (99.9%): [≈ 0, 10.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 47.76% complete, ETA 00:59:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 283124.594 ops/s
[info] # Warmup Iteration   2: 313257.170 ops/s
[info] # Warmup Iteration   3: 313423.301 ops/s
[info] # Warmup Iteration   4: 313526.166 ops/s
[info] # Warmup Iteration   5: 313542.574 ops/s
[info] Iteration   1: 313838.955 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 313204.571 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 313911.240 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 314042.788 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 313407.524 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc":
[info]   313681.015 ±(99.9%) 1375.796 ops/s [Average]
[info]   (min, avg, max) = (313204.571, 313681.015, 314042.788), stdev = 357.290
[info]   CI (99.9%): [312305.219, 315056.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 48.00% complete, ETA 00:58:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 48357.338 ops/s
[info] # Warmup Iteration   2: 65972.509 ops/s
[info] # Warmup Iteration   3: 66311.925 ops/s
[info] # Warmup Iteration   4: 66250.727 ops/s
[info] # Warmup Iteration   5: 66085.990 ops/s
[info] Iteration   1: 66386.705 ops/s
[info]                  ·gc.alloc.rate:            1191.488 MB/sec
[info]                  ·gc.alloc.rate.norm:       28248.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.870 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 32121.503 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 66734.297 ops/s
[info]                  ·gc.alloc.rate:            1197.821 MB/sec
[info]                  ·gc.alloc.rate.norm:       28248.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.485 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 15977.014 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 66283.656 ops/s
[info]                  ·gc.alloc.rate:            1189.570 MB/sec
[info]                  ·gc.alloc.rate.norm:       28248.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.791 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 32171.409 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 67269.706 ops/s
[info]                  ·gc.alloc.rate:            1207.232 MB/sec
[info]                  ·gc.alloc.rate.norm:       28248.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.716 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 31698.997 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 67322.314 ops/s
[info]                  ·gc.alloc.rate:                                  1208.181 MB/sec
[info]                  ·gc.alloc.rate.norm:                             28248.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.071 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.663 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.731 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       31767.952 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                93.435 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson":
[info]   66799.336 ±(99.9%) 1861.871 ops/s [Average]
[info]   (min, avg, max) = (66283.656, 66799.336, 67322.314), stdev = 483.522
[info]   CI (99.9%): [64937.464, 68661.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1198.858 ±(99.9%) 33.275 MB/sec [Average]
[info]   (min, avg, max) = (1189.570, 1198.858, 1208.181), stdev = 8.641
[info]   CI (99.9%): [1165.583, 1232.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   28248.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (28248.006, 28248.006, 28248.007), stdev = 0.001
[info]   CI (99.9%): [28248.005, 28248.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.123 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.071), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.333 ±(99.9%) 2.864 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.333, 1.663), stdev = 0.744
[info]   CI (99.9%): [≈ 0, 3.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1220.119 ±(99.9%) 1168.078 MB/sec [Average]
[info]   (min, avg, max) = (677.485, 1220.119, 1358.731), stdev = 303.346
[info]   CI (99.9%): [52.041, 2388.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   28747.375 ±(99.9%) 27500.906 B/op [Average]
[info]   (min, avg, max) = (15977.014, 28747.375, 32171.409), stdev = 7141.898
[info]   CI (99.9%): [1246.469, 56248.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   18.687 ±(99.9%) 160.901 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18.687, 93.435), stdev = 41.785
[info]   CI (99.9%): [≈ 0, 179.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.000, 9.000), stdev = 2.000
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 48.24% complete, ETA 00:58:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 99562.988 ops/s
[info] # Warmup Iteration   2: 122852.111 ops/s
[info] # Warmup Iteration   3: 122584.963 ops/s
[info] # Warmup Iteration   4: 122280.187 ops/s
[info] # Warmup Iteration   5: 123042.426 ops/s
[info] Iteration   1: 122490.246 ops/s
[info]                  ·gc.alloc.rate:            1774.117 MB/sec
[info]                  ·gc.alloc.rate.norm:       22800.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2033.971 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26139.508 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 121667.145 ops/s
[info]                  ·gc.alloc.rate:                                  1762.601 MB/sec
[info]                  ·gc.alloc.rate.norm:                             22800.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.031 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.397 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1359.609 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       17587.138 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                43.085 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 121281.549 ops/s
[info]                  ·gc.alloc.rate:                                  1756.977 MB/sec
[info]                  ·gc.alloc.rate.norm:                             22800.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.026 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.339 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.389 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       26529.705 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 121147.217 ops/s
[info]                  ·gc.alloc.rate:                                  1755.255 MB/sec
[info]                  ·gc.alloc.rate.norm:                             22800.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.678 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       26559.483 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 121365.955 ops/s
[info]                  ·gc.alloc.rate:            1758.397 MB/sec
[info]                  ·gc.alloc.rate.norm:       22800.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.960 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17672.629 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce":
[info]   121590.422 ±(99.9%) 2071.657 ops/s [Average]
[info]   (min, avg, max) = (121147.217, 121590.422, 122490.246), stdev = 538.003
[info]   CI (99.9%): [119518.765, 123662.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate":
[info]   1761.469 ±(99.9%) 29.167 MB/sec [Average]
[info]   (min, avg, max) = (1755.255, 1761.469, 1774.117), stdev = 7.575
[info]   CI (99.9%): [1732.302, 1790.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   22800.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (22800.003, 22800.003, 22800.004), stdev = 0.001
[info]   CI (99.9%): [22800.003, 22800.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.059 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.031), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.151 ±(99.9%) 0.768 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.151, 0.397), stdev = 0.200
[info]   CI (99.9%): [≈ 0, 0.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1769.121 ±(99.9%) 1433.707 MB/sec [Average]
[info]   (min, avg, max) = (1359.609, 1769.121, 2044.678), stdev = 372.329
[info]   CI (99.9%): [335.415, 3202.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   22897.693 ±(99.9%) 18528.448 B/op [Average]
[info]   (min, avg, max) = (17587.138, 22897.693, 26559.483), stdev = 4811.779
[info]   CI (99.9%): [4369.245, 41426.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   8.617 ±(99.9%) 74.194 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.617, 43.085), stdev = 19.268
[info]   CI (99.9%): [≈ 0, 82.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.000, 11.000), stdev = 3.536
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 48.47% complete, ETA 00:58:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 50638.151 ops/s
[info] # Warmup Iteration   2: 635169.742 ops/s
[info] # Warmup Iteration   3: 630461.458 ops/s
[info] # Warmup Iteration   4: 636090.026 ops/s
[info] # Warmup Iteration   5: 620516.997 ops/s
[info] Iteration   1: 604322.606 ops/s
[info]                  ·gc.alloc.rate:      334.956 MB/sec
[info]                  ·gc.alloc.rate.norm: 872.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 632994.982 ops/s
[info]                  ·gc.alloc.rate:            350.685 MB/sec
[info]                  ·gc.alloc.rate.norm:       872.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.755 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1677.822 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 637295.905 ops/s
[info]                  ·gc.alloc.rate:      353.113 MB/sec
[info]                  ·gc.alloc.rate.norm: 872.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 634019.928 ops/s
[info]                  ·gc.alloc.rate:            351.254 MB/sec
[info]                  ·gc.alloc.rate.norm:       872.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.785 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1675.179 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 635713.456 ops/s
[info]                  ·gc.alloc.rate:      352.292 MB/sec
[info]                  ·gc.alloc.rate.norm: 872.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava":
[info]   628869.375 ±(99.9%) 53214.886 ops/s [Average]
[info]   (min, avg, max) = (604322.606, 628869.375, 637295.905), stdev = 13819.737
[info]   CI (99.9%): [575654.489, 682084.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   348.460 ±(99.9%) 29.291 MB/sec [Average]
[info]   (min, avg, max) = (334.956, 348.460, 353.113), stdev = 7.607
[info]   CI (99.9%): [319.169, 377.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   872.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (872.001, 872.001, 872.001), stdev = 0.001
[info]   CI (99.9%): [872.001, 872.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   269.908 ±(99.9%) 1423.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.908, 674.785), stdev = 369.587
[info]   CI (99.9%): [≈ 0, 1693.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   670.600 ±(99.9%) 3535.883 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 670.600, 1677.822), stdev = 918.258
[info]   CI (99.9%): [≈ 0, 4206.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 5.000), stdev = 2.739
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 48.71% complete, ETA 00:58:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 213928.515 ops/s
[info] # Warmup Iteration   2: 338841.117 ops/s
[info] # Warmup Iteration   3: 339079.319 ops/s
[info] # Warmup Iteration   4: 340784.227 ops/s
[info] # Warmup Iteration   5: 338185.981 ops/s
[info] Iteration   1: 340744.024 ops/s
[info]                  ·gc.alloc.rate:      354.976 MB/sec
[info]                  ·gc.alloc.rate.norm: 1640.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 337148.080 ops/s
[info]                  ·gc.alloc.rate:            351.288 MB/sec
[info]                  ·gc.alloc.rate.norm:       1640.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.420 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3162.558 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 341035.037 ops/s
[info]                  ·gc.alloc.rate:      355.395 MB/sec
[info]                  ·gc.alloc.rate.norm: 1640.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 339116.212 ops/s
[info]                  ·gc.alloc.rate:            353.297 MB/sec
[info]                  ·gc.alloc.rate.norm:       1640.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.319 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3144.105 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 339178.110 ops/s
[info]                  ·gc.alloc.rate:            353.395 MB/sec
[info]                  ·gc.alloc.rate.norm:       1640.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.341 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3143.336 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala":
[info]   339444.293 ±(99.9%) 5987.365 ops/s [Average]
[info]   (min, avg, max) = (337148.080, 339444.293, 341035.037), stdev = 1554.900
[info]   CI (99.9%): [333456.927, 345431.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   353.670 ±(99.9%) 6.259 MB/sec [Average]
[info]   (min, avg, max) = (351.288, 353.670, 355.395), stdev = 1.625
[info]   CI (99.9%): [347.411, 359.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1640.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1640.001, 1640.001, 1640.001), stdev = 0.001
[info]   CI (99.9%): [1640.001, 1640.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   406.416 ±(99.9%) 1428.609 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 406.416, 677.420), stdev = 371.005
[info]   CI (99.9%): [≈ 0, 1835.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1890.000 ±(99.9%) 6643.681 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1890.000, 3162.558), stdev = 1725.343
[info]   CI (99.9%): [≈ 0, 8533.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 6.000), stdev = 2.683
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 48.94% complete, ETA 00:57:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 717639.169 ops/s
[info] # Warmup Iteration   2: 757227.092 ops/s
[info] # Warmup Iteration   3: 746540.035 ops/s
[info] # Warmup Iteration   4: 759533.747 ops/s
[info] # Warmup Iteration   5: 760429.134 ops/s
[info] Iteration   1: 760756.827 ops/s
[info]                  ·gc.alloc.rate:            262.979 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.190 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1402.912 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 763834.410 ops/s
[info]                  ·gc.alloc.rate:      263.987 MB/sec
[info]                  ·gc.alloc.rate.norm: 544.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 750225.607 ops/s
[info]                  ·gc.alloc.rate:            259.280 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.039 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1422.605 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 764789.602 ops/s
[info]                  ·gc.alloc.rate:      264.305 MB/sec
[info]                  ·gc.alloc.rate.norm: 544.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 765273.721 ops/s
[info]                  ·gc.alloc.rate:      264.497 MB/sec
[info]                  ·gc.alloc.rate.norm: 544.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala":
[info]   760976.033 ±(99.9%) 24109.111 ops/s [Average]
[info]   (min, avg, max) = (750225.607, 760976.033, 765273.721), stdev = 6261.060
[info]   CI (99.9%): [736866.923, 785085.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   263.010 ±(99.9%) 8.338 MB/sec [Average]
[info]   (min, avg, max) = (259.280, 263.010, 264.497), stdev = 2.165
[info]   CI (99.9%): [254.672, 271.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   544.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (544.001, 544.001, 544.001), stdev = 0.001
[info]   CI (99.9%): [544.000, 544.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   271.246 ±(99.9%) 1430.201 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 271.246, 678.190), stdev = 371.419
[info]   CI (99.9%): [≈ 0, 1701.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   565.103 ±(99.9%) 2979.748 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 565.103, 1422.605), stdev = 773.831
[info]   CI (99.9%): [≈ 0, 3544.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.643
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 49.18% complete, ETA 00:57:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36367.975 ops/s
[info] # Warmup Iteration   2: 68005.943 ops/s
[info] # Warmup Iteration   3: 68496.778 ops/s
[info] # Warmup Iteration   4: 68151.428 ops/s
[info] # Warmup Iteration   5: 69755.625 ops/s
[info] Iteration   1: 69484.792 ops/s
[info]                  ·gc.alloc.rate:                                  2979.891 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67504.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.178 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3406.878 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       77176.618 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 69617.990 ops/s
[info]                  ·gc.alloc.rate:                                  2985.610 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67504.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.131 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.439 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       61621.591 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 69475.327 ops/s
[info]                  ·gc.alloc.rate:                                  2980.092 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67504.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.059 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.961 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       61747.514 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 68889.934 ops/s
[info]                  ·gc.alloc.rate:                                  2954.147 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67504.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.120 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3406.463 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       77839.693 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 69566.504 ops/s
[info]                  ·gc.alloc.rate:                                  2983.502 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67504.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.034 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.550 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       61667.644 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson":
[info]   69406.909 ±(99.9%) 1135.834 ops/s [Average]
[info]   (min, avg, max) = (68889.934, 69406.909, 69617.990), stdev = 294.973
[info]   CI (99.9%): [68271.075, 70542.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2976.648 ±(99.9%) 49.311 MB/sec [Average]
[info]   (min, avg, max) = (2954.147, 2976.648, 2985.610), stdev = 12.806
[info]   CI (99.9%): [2927.337, 3025.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   67504.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (67504.006, 67504.006, 67504.006), stdev = 0.001
[info]   CI (99.9%): [67504.005, 67504.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.005 ±(99.9%) 0.010 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.005, 0.008), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.104 ±(99.9%) 0.223 B/op [Average]
[info]   (min, avg, max) = (0.034, 0.104, 0.178), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2998.058 ±(99.9%) 1436.330 MB/sec [Average]
[info]   (min, avg, max) = (2725.439, 2998.058, 3406.878), stdev = 373.010
[info]   CI (99.9%): [1561.728, 4434.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   68010.612 ±(99.9%) 33397.857 B/op [Average]
[info]   (min, avg, max) = (61621.591, 68010.612, 77839.693), stdev = 8673.317
[info]   CI (99.9%): [34612.755, 101408.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 7.000), stdev = 0.894
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 49.41% complete, ETA 00:57:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 206422.052 ops/s
[info] # Warmup Iteration   2: 278827.504 ops/s
[info] # Warmup Iteration   3: 268945.513 ops/s
[info] # Warmup Iteration   4: 276984.514 ops/s
[info] # Warmup Iteration   5: 287261.095 ops/s
[info] Iteration   1: 286818.714 ops/s
[info]                  ·gc.alloc.rate:            1498.712 MB/sec
[info]                  ·gc.alloc.rate.norm:       8224.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.226 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7442.127 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 286774.436 ops/s
[info]                  ·gc.alloc.rate:            1498.608 MB/sec
[info]                  ·gc.alloc.rate.norm:       8224.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.335 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7443.243 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 285636.090 ops/s
[info]                  ·gc.alloc.rate:                   1492.319 MB/sec
[info]                  ·gc.alloc.rate.norm:              8224.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.976 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        7472.631 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 18.351 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 287587.005 ops/s
[info]                  ·gc.alloc.rate:                                  1502.524 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8224.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.147 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.803 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.072 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11188.145 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 287775.256 ops/s
[info]                  ·gc.alloc.rate:            1503.825 MB/sec
[info]                  ·gc.alloc.rate.norm:       8224.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1363.000 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7453.866 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce":
[info]   286918.300 ±(99.9%) 3253.861 ops/s [Average]
[info]   (min, avg, max) = (285636.090, 286918.300, 287775.256), stdev = 845.017
[info]   CI (99.9%): [283664.439, 290172.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1499.198 ±(99.9%) 17.261 MB/sec [Average]
[info]   (min, avg, max) = (1492.319, 1499.198, 1503.825), stdev = 4.483
[info]   CI (99.9%): [1481.936, 1516.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   8224.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8224.001, 8224.001, 8224.002), stdev = 0.001
[info]   CI (99.9%): [8224.001, 8224.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.029 ±(99.9%) 0.253 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.147), stdev = 0.066
[info]   CI (99.9%): [≈ 0, 0.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.161 ±(99.9%) 1.383 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.161, 0.803), stdev = 0.359
[info]   CI (99.9%): [≈ 0, 1.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1495.122 ±(99.9%) 1181.713 MB/sec [Average]
[info]   (min, avg, max) = (1355.976, 1495.122, 2044.072), stdev = 306.887
[info]   CI (99.9%): [313.409, 2676.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   8200.002 ±(99.9%) 6432.375 B/op [Average]
[info]   (min, avg, max) = (7442.127, 8200.002, 11188.145), stdev = 1670.467
[info]   CI (99.9%): [1767.627, 14632.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   3.670 ±(99.9%) 31.602 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.670, 18.351), stdev = 8.207
[info]   CI (99.9%): [≈ 0, 35.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.200, 9.000), stdev = 3.114
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 49.65% complete, ETA 00:56:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 64576.021 ops/s
[info] # Warmup Iteration   2: 1484080.787 ops/s
[info] # Warmup Iteration   3: 1503760.935 ops/s
[info] # Warmup Iteration   4: 1472879.667 ops/s
[info] # Warmup Iteration   5: 1501542.719 ops/s
[info] Iteration   1: 1478256.094 ops/s
[info]                  ·gc.alloc.rate:      503.377 MB/sec
[info]                  ·gc.alloc.rate.norm: 536.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1510977.429 ops/s
[info]                  ·gc.alloc.rate:                   514.538 MB/sec
[info]                  ·gc.alloc.rate.norm:              536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.042 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        702.158 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.694 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1511622.419 ops/s
[info]                  ·gc.alloc.rate:            514.873 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.889 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 702.583 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 1512852.535 ops/s
[info]                  ·gc.alloc.rate:            515.257 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.848 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 702.016 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 1522846.747 ops/s
[info]                  ·gc.alloc.rate:      518.651 MB/sec
[info]                  ·gc.alloc.rate.norm: 536.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava":
[info]   1507311.045 ±(99.9%) 65242.188 ops/s [Average]
[info]   (min, avg, max) = (1478256.094, 1507311.045, 1522846.747), stdev = 16943.189
[info]   CI (99.9%): [1442068.857, 1572553.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   513.339 ±(99.9%) 22.364 MB/sec [Average]
[info]   (min, avg, max) = (503.377, 513.339, 518.651), stdev = 5.808
[info]   CI (99.9%): [490.975, 535.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   536.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (536.000, 536.000, 536.000), stdev = 0.001
[info]   CI (99.9%): [536.000, 536.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   404.756 ±(99.9%) 1422.774 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.756, 674.889), stdev = 369.490
[info]   CI (99.9%): [≈ 0, 1827.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   421.351 ±(99.9%) 1481.110 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 421.351, 702.583), stdev = 384.639
[info]   CI (99.9%): [≈ 0, 1902.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.139 ±(99.9%) 1.195 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.139, 0.694), stdev = 0.310
[info]   CI (99.9%): [≈ 0, 1.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 5.000), stdev = 2.739
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 49.88% complete, ETA 00:56:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 895898.672 ops/s
[info] # Warmup Iteration   2: 1457175.880 ops/s
[info] # Warmup Iteration   3: 1473905.412 ops/s
[info] # Warmup Iteration   4: 1468539.513 ops/s
[info] # Warmup Iteration   5: 1471089.313 ops/s
[info] Iteration   1: 1469539.937 ops/s
[info]                  ·gc.alloc.rate:            859.264 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.305 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1451.103 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 1476234.231 ops/s
[info]                  ·gc.alloc.rate:            862.764 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.341 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 722.277 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 1472754.259 ops/s
[info]                  ·gc.alloc.rate:            860.872 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.450 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 723.981 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 1470875.225 ops/s
[info]                  ·gc.alloc.rate:            859.701 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.389 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 724.901 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 1430475.612 ops/s
[info]                  ·gc.alloc.rate:            836.264 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.048 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1490.730 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala":
[info]   1463975.853 ±(99.9%) 72759.716 ops/s [Average]
[info]   (min, avg, max) = (1430475.612, 1463975.853, 1476234.231), stdev = 18895.467
[info]   CI (99.9%): [1391216.137, 1536735.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   855.773 ±(99.9%) 42.316 MB/sec [Average]
[info]   (min, avg, max) = (836.264, 855.773, 862.764), stdev = 10.989
[info]   CI (99.9%): [813.457, 898.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   920.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (920.000, 920.000, 920.000), stdev = 0.001
[info]   CI (99.9%): [920.000, 920.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   948.507 ±(99.9%) 1429.501 MB/sec [Average]
[info]   (min, avg, max) = (677.341, 948.507, 1355.305), stdev = 371.237
[info]   CI (99.9%): [≈ 0, 2378.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1022.598 ±(99.9%) 1576.829 B/op [Average]
[info]   (min, avg, max) = (722.277, 1022.598, 1490.730), stdev = 409.497
[info]   CI (99.9%): [≈ 0, 2599.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 9.000), stdev = 2.408
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 50.12% complete, ETA 00:56:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1495513.164 ops/s
[info] # Warmup Iteration   2: 1586401.883 ops/s
[info] # Warmup Iteration   3: 1586105.512 ops/s
[info] # Warmup Iteration   4: 1582028.642 ops/s
[info] # Warmup Iteration   5: 1569859.871 ops/s
[info] Iteration   1: 1596740.542 ops/s
[info]                  ·gc.alloc.rate:            543.769 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.097 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 668.408 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 1594378.570 ops/s
[info]                  ·gc.alloc.rate:                   543.154 MB/sec
[info]                  ·gc.alloc.rate.norm:              536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.669 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        668.744 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.658 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1597488.280 ops/s
[info]                  ·gc.alloc.rate:            544.096 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.188 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 668.097 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 1599520.104 ops/s
[info]                  ·gc.alloc.rate:            544.664 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.035 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 667.249 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 1604518.834 ops/s
[info]                  ·gc.alloc.rate:      546.467 MB/sec
[info]                  ·gc.alloc.rate.norm: 536.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala":
[info]   1598529.266 ±(99.9%) 14709.278 ops/s [Average]
[info]   (min, avg, max) = (1594378.570, 1598529.266, 1604518.834), stdev = 3819.953
[info]   CI (99.9%): [1583819.989, 1613238.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   544.430 ±(99.9%) 4.863 MB/sec [Average]
[info]   (min, avg, max) = (543.154, 544.430, 546.467), stdev = 1.263
[info]   CI (99.9%): [539.567, 549.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   536.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (536.000, 536.000, 536.000), stdev = 0.001
[info]   CI (99.9%): [536.000, 536.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   542.398 ±(99.9%) 1167.552 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 542.398, 678.188), stdev = 303.210
[info]   CI (99.9%): [≈ 0, 1709.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   534.500 ±(99.9%) 1150.553 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 534.500, 668.744), stdev = 298.795
[info]   CI (99.9%): [≈ 0, 1685.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.132 ±(99.9%) 1.132 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.132, 0.658), stdev = 0.294
[info]   CI (99.9%): [≈ 0, 1.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 50.35% complete, ETA 00:56:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1641753.974 ops/s
[info] # Warmup Iteration   2: 1813738.395 ops/s
[info] # Warmup Iteration   3: 1799701.157 ops/s
[info] # Warmup Iteration   4: 1810390.326 ops/s
[info] # Warmup Iteration   5: 1794690.400 ops/s
[info] Iteration   1: 1797699.291 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1799208.013 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1810439.193 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1808500.331 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1810011.093 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc":
[info]   1805171.584 ±(99.9%) 23865.331 ops/s [Average]
[info]   (min, avg, max) = (1797699.291, 1805171.584, 1810439.193), stdev = 6197.751
[info]   CI (99.9%): [1781306.253, 1829036.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 50.59% complete, ETA 00:55:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22475.181 ops/s
[info] # Warmup Iteration   2: 34390.715 ops/s
[info] # Warmup Iteration   3: 33807.349 ops/s
[info] # Warmup Iteration   4: 34148.761 ops/s
[info] # Warmup Iteration   5: 34358.734 ops/s
[info] Iteration   1: 34409.412 ops/s
[info]                  ·gc.alloc.rate:            1595.144 MB/sec
[info]                  ·gc.alloc.rate.norm:       72976.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2031.896 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 92956.921 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 34566.592 ops/s
[info]                  ·gc.alloc.rate:            1602.475 MB/sec
[info]                  ·gc.alloc.rate.norm:       72976.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.643 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 61689.862 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 34638.479 ops/s
[info]                  ·gc.alloc.rate:                                  1605.935 MB/sec
[info]                  ·gc.alloc.rate.norm:                             72976.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.124 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.618 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2040.172 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       92708.356 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                181.603 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 34891.227 ops/s
[info]                  ·gc.alloc.rate:                                  1617.697 MB/sec
[info]                  ·gc.alloc.rate.norm:                             72976.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.462 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.768 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       61475.915 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 34804.643 ops/s
[info]                  ·gc.alloc.rate:            1613.909 MB/sec
[info]                  ·gc.alloc.rate.norm:       72976.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.936 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 61627.786 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson":
[info]   34662.071 ±(99.9%) 736.541 ops/s [Average]
[info]   (min, avg, max) = (34409.412, 34662.071, 34891.227), stdev = 191.277
[info]   CI (99.9%): [33925.529, 35398.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1607.032 ±(99.9%) 34.674 MB/sec [Average]
[info]   (min, avg, max) = (1595.144, 1607.032, 1617.697), stdev = 9.005
[info]   CI (99.9%): [1572.358, 1641.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   72976.012 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (72976.012, 72976.012, 72976.013), stdev = 0.001
[info]   CI (99.9%): [72976.010, 72976.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.027 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.124), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.216 ±(99.9%) 9.507 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.216, 5.618), stdev = 2.469
[info]   CI (99.9%): [≈ 0, 10.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1630.483 ±(99.9%) 1425.671 MB/sec [Average]
[info]   (min, avg, max) = (1354.643, 1630.483, 2040.172), stdev = 370.242
[info]   CI (99.9%): [204.812, 3056.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   74091.768 ±(99.9%) 65878.351 B/op [Average]
[info]   (min, avg, max) = (61475.915, 74091.768, 92956.921), stdev = 17108.398
[info]   CI (99.9%): [8213.417, 139970.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   36.321 ±(99.9%) 312.731 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 36.321, 181.603), stdev = 81.215
[info]   CI (99.9%): [≈ 0, 349.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.800, 13.000), stdev = 4.764
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 50.82% complete, ETA 00:55:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34501.854 ops/s
[info] # Warmup Iteration   2: 45949.916 ops/s
[info] # Warmup Iteration   3: 45801.420 ops/s
[info] # Warmup Iteration   4: 46118.852 ops/s
[info] # Warmup Iteration   5: 46515.659 ops/s
[info] Iteration   1: 46425.795 ops/s
[info]                  ·gc.alloc.rate:            926.982 MB/sec
[info]                  ·gc.alloc.rate.norm:       31424.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.143 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 22988.551 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 46202.654 ops/s
[info]                  ·gc.alloc.rate:            922.410 MB/sec
[info]                  ·gc.alloc.rate.norm:       31424.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.051 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 46196.973 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 46349.817 ops/s
[info]                  ·gc.alloc.rate:            925.655 MB/sec
[info]                  ·gc.alloc.rate.norm:       31424.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.282 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23026.239 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 46131.952 ops/s
[info]                  ·gc.alloc.rate:            920.963 MB/sec
[info]                  ·gc.alloc.rate.norm:       31424.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.004 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23134.029 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 45791.830 ops/s
[info]                  ·gc.alloc.rate:            914.191 MB/sec
[info]                  ·gc.alloc.rate.norm:       31424.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.088 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 46613.553 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce":
[info]   46180.410 ±(99.9%) 948.600 ops/s [Average]
[info]   (min, avg, max) = (45791.830, 46180.410, 46425.795), stdev = 246.348
[info]   CI (99.9%): [45231.810, 47129.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate":
[info]   922.040 ±(99.9%) 19.290 MB/sec [Average]
[info]   (min, avg, max) = (914.191, 922.040, 926.982), stdev = 5.010
[info]   CI (99.9%): [902.750, 941.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   31424.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (31424.009, 31424.009, 31424.010), stdev = 0.001
[info]   CI (99.9%): [31424.008, 31424.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   949.314 ±(99.9%) 1429.804 MB/sec [Average]
[info]   (min, avg, max) = (678.004, 949.314, 1356.088), stdev = 371.316
[info]   CI (99.9%): [≈ 0, 2379.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   32391.869 ±(99.9%) 49262.749 B/op [Average]
[info]   (min, avg, max) = (22988.551, 32391.869, 46613.553), stdev = 12793.380
[info]   CI (99.9%): [≈ 0, 81654.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 2.049
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 51.06% complete, ETA 00:55:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51489.160 ops/s
[info] # Warmup Iteration   2: 81425.729 ops/s
[info] # Warmup Iteration   3: 84016.131 ops/s
[info] # Warmup Iteration   4: 84951.795 ops/s
[info] # Warmup Iteration   5: 84368.249 ops/s
[info] Iteration   1: 84758.728 ops/s
[info]                  ·gc.alloc.rate:            893.426 MB/sec
[info]                  ·gc.alloc.rate.norm:       16592.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.389 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12579.943 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 84639.626 ops/s
[info]                  ·gc.alloc.rate:            892.214 MB/sec
[info]                  ·gc.alloc.rate.norm:       16592.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.422 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12597.628 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 84785.461 ops/s
[info]                  ·gc.alloc.rate:            893.836 MB/sec
[info]                  ·gc.alloc.rate.norm:       16592.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.484 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12575.938 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 84334.287 ops/s
[info]                  ·gc.alloc.rate:            889.009 MB/sec
[info]                  ·gc.alloc.rate.norm:       16592.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.874 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25286.663 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 84714.872 ops/s
[info]                  ·gc.alloc.rate:            893.013 MB/sec
[info]                  ·gc.alloc.rate.norm:       16592.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.754 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12573.952 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala":
[info]   84646.595 ±(99.9%) 705.058 ops/s [Average]
[info]   (min, avg, max) = (84334.287, 84646.595, 84785.461), stdev = 183.101
[info]   CI (99.9%): [83941.537, 85351.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   892.300 ±(99.9%) 7.450 MB/sec [Average]
[info]   (min, avg, max) = (889.009, 892.300, 893.836), stdev = 1.935
[info]   CI (99.9%): [884.850, 899.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   16592.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16592.005, 16592.005, 16592.005), stdev = 0.001
[info]   CI (99.9%): [16592.004, 16592.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   812.785 ±(99.9%) 1166.888 MB/sec [Average]
[info]   (min, avg, max) = (676.754, 812.785, 1354.874), stdev = 303.037
[info]   CI (99.9%): [≈ 0, 1979.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   15122.825 ±(99.9%) 21878.458 B/op [Average]
[info]   (min, avg, max) = (12573.952, 15122.825, 25286.663), stdev = 5681.766
[info]   CI (99.9%): [≈ 0, 37001.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 9.000), stdev = 1.789
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 51.29% complete, ETA 00:55:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 243871.786 ops/s
[info] # Warmup Iteration   2: 261776.524 ops/s
[info] # Warmup Iteration   3: 262833.353 ops/s
[info] # Warmup Iteration   4: 263661.845 ops/s
[info] # Warmup Iteration   5: 262582.636 ops/s
[info] Iteration   1: 263680.102 ops/s
[info]                  ·gc.alloc.rate:            857.783 MB/sec
[info]                  ·gc.alloc.rate.norm:       5120.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.121 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4047.620 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 263727.866 ops/s
[info]                  ·gc.alloc.rate:            857.822 MB/sec
[info]                  ·gc.alloc.rate.norm:       5120.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.025 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4046.868 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 262343.342 ops/s
[info]                  ·gc.alloc.rate:            853.282 MB/sec
[info]                  ·gc.alloc.rate.norm:       5120.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.999 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8136.489 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 263771.204 ops/s
[info]                  ·gc.alloc.rate:            857.998 MB/sec
[info]                  ·gc.alloc.rate.norm:       5120.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.047 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4046.162 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 263647.030 ops/s
[info]                  ·gc.alloc.rate:            857.575 MB/sec
[info]                  ·gc.alloc.rate.norm:       5120.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.038 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4048.111 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala":
[info]   263433.909 ±(99.9%) 2354.526 ops/s [Average]
[info]   (min, avg, max) = (262343.342, 263433.909, 263771.204), stdev = 611.463
[info]   CI (99.9%): [261079.383, 265788.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   856.892 ±(99.9%) 7.792 MB/sec [Average]
[info]   (min, avg, max) = (853.282, 856.892, 857.998), stdev = 2.024
[info]   CI (99.9%): [849.100, 864.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5120.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5120.002, 5120.002, 5120.002), stdev = 0.001
[info]   CI (99.9%): [5120.002, 5120.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   813.646 ±(99.9%) 1167.456 MB/sec [Average]
[info]   (min, avg, max) = (678.025, 813.646, 1355.999), stdev = 303.185
[info]   CI (99.9%): [≈ 0, 1981.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   4865.050 ±(99.9%) 7042.020 B/op [Average]
[info]   (min, avg, max) = (4046.162, 4865.050, 8136.489), stdev = 1828.790
[info]   CI (99.9%): [≈ 0, 11907.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 6.000), stdev = 1.225
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 51.53% complete, ETA 00:54:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13311.632 ops/s
[info] # Warmup Iteration   2: 23201.984 ops/s
[info] # Warmup Iteration   3: 23370.965 ops/s
[info] # Warmup Iteration   4: 23556.985 ops/s
[info] # Warmup Iteration   5: 23137.131 ops/s
[info] Iteration   1: 23409.568 ops/s
[info]                  ·gc.alloc.rate:            1099.876 MB/sec
[info]                  ·gc.alloc.rate.norm:       73960.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.346 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 45547.422 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 23433.228 ops/s
[info]                  ·gc.alloc.rate:            1100.925 MB/sec
[info]                  ·gc.alloc.rate.norm:       73960.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.537 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 90997.678 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 23441.078 ops/s
[info]                  ·gc.alloc.rate:            1101.460 MB/sec
[info]                  ·gc.alloc.rate.norm:       73960.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.733 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 90966.629 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 23601.906 ops/s
[info]                  ·gc.alloc.rate:            1109.057 MB/sec
[info]                  ·gc.alloc.rate.norm:       73960.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.387 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 45173.118 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 23445.607 ops/s
[info]                  ·gc.alloc.rate:                   1101.665 MB/sec
[info]                  ·gc.alloc.rate.norm:              73960.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.754 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        90951.112 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 268.292 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson":
[info]   23466.277 ±(99.9%) 296.810 ops/s [Average]
[info]   (min, avg, max) = (23409.568, 23466.277, 23601.906), stdev = 77.081
[info]   CI (99.9%): [23169.467, 23763.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1102.597 ±(99.9%) 14.161 MB/sec [Average]
[info]   (min, avg, max) = (1099.876, 1102.597, 1109.057), stdev = 3.678
[info]   CI (99.9%): [1088.436, 1116.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   73960.018 ±(99.9%) 0.003 B/op [Average]
[info]   (min, avg, max) = (73960.017, 73960.018, 73960.019), stdev = 0.001
[info]   CI (99.9%): [73960.016, 73960.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1083.751 ±(99.9%) 1428.500 MB/sec [Average]
[info]   (min, avg, max) = (677.346, 1083.751, 1354.754), stdev = 370.977
[info]   CI (99.9%): [≈ 0, 2512.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   72727.192 ±(99.9%) 96199.958 B/op [Average]
[info]   (min, avg, max) = (45173.118, 72727.192, 90997.678), stdev = 24982.824
[info]   CI (99.9%): [≈ 0, 168927.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   53.658 ±(99.9%) 462.016 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 53.658, 268.292), stdev = 119.984
[info]   CI (99.9%): [≈ 0, 515.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.600, 10.000), stdev = 2.881
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 51.76% complete, ETA 00:54:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 45757.874 ops/s
[info] # Warmup Iteration   2: 58857.459 ops/s
[info] # Warmup Iteration   3: 59467.758 ops/s
[info] # Warmup Iteration   4: 59409.150 ops/s
[info] # Warmup Iteration   5: 59332.309 ops/s
[info] Iteration   1: 59492.275 ops/s
[info]                  ·gc.alloc.rate:            882.660 MB/sec
[info]                  ·gc.alloc.rate.norm:       23352.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.087 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17939.739 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 59439.012 ops/s
[info]                  ·gc.alloc.rate:            881.812 MB/sec
[info]                  ·gc.alloc.rate.norm:       23352.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.016 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17955.129 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 59299.692 ops/s
[info]                  ·gc.alloc.rate:            879.954 MB/sec
[info]                  ·gc.alloc.rate.norm:       23352.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.370 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 35995.022 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 59431.729 ops/s
[info]                  ·gc.alloc.rate:            881.845 MB/sec
[info]                  ·gc.alloc.rate.norm:       23352.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.122 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17957.243 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 59481.438 ops/s
[info]                  ·gc.alloc.rate:            882.485 MB/sec
[info]                  ·gc.alloc.rate.norm:       23352.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.055 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17942.453 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce":
[info]   59428.829 ±(99.9%) 295.658 ops/s [Average]
[info]   (min, avg, max) = (59299.692, 59428.829, 59492.275), stdev = 76.781
[info]   CI (99.9%): [59133.172, 59724.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate":
[info]   881.751 ±(99.9%) 4.133 MB/sec [Average]
[info]   (min, avg, max) = (879.954, 881.751, 882.660), stdev = 1.073
[info]   CI (99.9%): [877.618, 885.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   23352.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (23352.007, 23352.007, 23352.007), stdev = 0.001
[info]   CI (99.9%): [23352.006, 23352.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   813.730 ±(99.9%) 1168.073 MB/sec [Average]
[info]   (min, avg, max) = (678.016, 813.730, 1356.370), stdev = 303.345
[info]   CI (99.9%): [≈ 0, 1981.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   21557.917 ±(99.9%) 31076.970 B/op [Average]
[info]   (min, avg, max) = (17939.739, 21557.917, 35995.022), stdev = 8070.590
[info]   CI (99.9%): [≈ 0, 52634.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 8.000), stdev = 1.924
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 52.00% complete, ETA 00:54:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 57508.199 ops/s
[info] # Warmup Iteration   2: 96420.679 ops/s
[info] # Warmup Iteration   3: 94080.930 ops/s
[info] # Warmup Iteration   4: 96754.487 ops/s
[info] # Warmup Iteration   5: 97297.295 ops/s
[info] Iteration   1: 96758.248 ops/s
[info]                  ·gc.alloc.rate:                   1325.319 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.070 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        22027.724 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 10.835 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 96717.307 ops/s
[info]                  ·gc.alloc.rate:                   1324.791 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.466 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        22026.676 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 10.840 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 96684.502 ops/s
[info]                  ·gc.alloc.rate:            1324.348 MB/sec
[info]                  ·gc.alloc.rate.norm:       21560.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.808 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 22055.880 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   4: 96721.886 ops/s
[info]                  ·gc.alloc.rate:                   1324.763 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1358.696 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        22112.252 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 65.036 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 97277.150 ops/s
[info]                  ·gc.alloc.rate:                                  1332.471 MB/sec
[info]                  ·gc.alloc.rate.norm:                             21560.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.077 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.250 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.732 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       22049.646 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala":
[info]   96831.819 ±(99.9%) 963.879 ops/s [Average]
[info]   (min, avg, max) = (96684.502, 96831.819, 97277.150), stdev = 250.316
[info]   CI (99.9%): [95867.940, 97795.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1326.338 ±(99.9%) 13.266 MB/sec [Average]
[info]   (min, avg, max) = (1324.348, 1326.338, 1332.471), stdev = 3.445
[info]   CI (99.9%): [1313.072, 1339.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   21560.008 ±(99.9%) 0.035 B/op [Average]
[info]   (min, avg, max) = (21560.004, 21560.008, 21560.025), stdev = 0.009
[info]   CI (99.9%): [21559.973, 21560.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.133 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.077), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.250 ±(99.9%) 2.152 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.250, 1.250), stdev = 0.559
[info]   CI (99.9%): [≈ 0, 2.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1356.754 ±(99.9%) 15.076 MB/sec [Average]
[info]   (min, avg, max) = (1353.466, 1356.754, 1362.732), stdev = 3.915
[info]   CI (99.9%): [1341.679, 1371.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   22054.436 ±(99.9%) 134.109 B/op [Average]
[info]   (min, avg, max) = (22026.676, 22054.436, 22112.252), stdev = 34.828
[info]   CI (99.9%): [21920.326, 22188.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 6.437 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.996), stdev = 1.672
[info]   CI (99.9%): [≈ 0, 7.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   17.342 ±(99.9%) 104.763 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.342, 65.036), stdev = 27.207
[info]   CI (99.9%): [≈ 0, 122.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.800, 11.000), stdev = 3.033
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 52.24% complete, ETA 00:54:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 256344.378 ops/s
[info] # Warmup Iteration   2: 287232.864 ops/s
[info] # Warmup Iteration   3: 291193.906 ops/s
[info] # Warmup Iteration   4: 290220.513 ops/s
[info] # Warmup Iteration   5: 291918.560 ops/s
[info] Iteration   1: 286590.782 ops/s
[info]                  ·gc.alloc.rate:                   913.230 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.703 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        7440.834 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.658 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 290946.077 ops/s
[info]                  ·gc.alloc.rate:            927.210 MB/sec
[info]                  ·gc.alloc.rate.norm:       5016.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.069 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3668.202 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 292639.623 ops/s
[info]                  ·gc.alloc.rate:            932.819 MB/sec
[info]                  ·gc.alloc.rate.norm:       5016.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.586 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3643.551 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 291504.315 ops/s
[info]                  ·gc.alloc.rate:                   929.070 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.975 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        7315.446 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.597 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 291421.471 ops/s
[info]                  ·gc.alloc.rate:            928.737 MB/sec
[info]                  ·gc.alloc.rate.norm:       5016.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.094 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3662.312 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala":
[info]   290620.454 ±(99.9%) 8998.520 ops/s [Average]
[info]   (min, avg, max) = (286590.782, 290620.454, 292639.623), stdev = 2336.887
[info]   CI (99.9%): [281621.933, 299618.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   926.213 ±(99.9%) 29.054 MB/sec [Average]
[info]   (min, avg, max) = (913.230, 926.213, 932.819), stdev = 7.545
[info]   CI (99.9%): [897.159, 955.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5016.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5016.001, 5016.001, 5016.002), stdev = 0.001
[info]   CI (99.9%): [5016.001, 5016.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   948.685 ±(99.9%) 1427.687 MB/sec [Average]
[info]   (min, avg, max) = (677.586, 948.685, 1354.975), stdev = 370.766
[info]   CI (99.9%): [≈ 0, 2376.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   5146.069 ±(99.9%) 7847.980 B/op [Average]
[info]   (min, avg, max) = (3643.551, 5146.069, 7440.834), stdev = 2038.095
[info]   CI (99.9%): [≈ 0, 12994.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.451 ±(99.9%) 7.651 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.451, 3.658), stdev = 1.987
[info]   CI (99.9%): [≈ 0, 9.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 7.000), stdev = 1.414
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 52.47% complete, ETA 00:53:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 297722.762 ops/s
[info] # Warmup Iteration   2: 323494.991 ops/s
[info] # Warmup Iteration   3: 322961.335 ops/s
[info] # Warmup Iteration   4: 323134.971 ops/s
[info] # Warmup Iteration   5: 323316.892 ops/s
[info] Iteration   1: 312834.616 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 323669.685 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 323771.121 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 323680.350 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 323669.324 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc":
[info]   321525.019 ±(99.9%) 18707.470 ops/s [Average]
[info]   (min, avg, max) = (312834.616, 321525.019, 323771.121), stdev = 4858.270
[info]   CI (99.9%): [302817.549, 340232.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 52.71% complete, ETA 00:53:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 58453.920 ops/s
[info] # Warmup Iteration   2: 79185.508 ops/s
[info] # Warmup Iteration   3: 79262.361 ops/s
[info] # Warmup Iteration   4: 79844.167 ops/s
[info] # Warmup Iteration   5: 79181.550 ops/s
[info] Iteration   1: 79897.292 ops/s
[info]                  ·gc.alloc.rate:            1184.133 MB/sec
[info]                  ·gc.alloc.rate.norm:       23327.980 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.743 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26689.069 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 80205.178 ops/s
[info]                  ·gc.alloc.rate:            1188.607 MB/sec
[info]                  ·gc.alloc.rate.norm:       23328.030 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.318 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13293.300 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 79937.237 ops/s
[info]                  ·gc.alloc.rate:            1184.878 MB/sec
[info]                  ·gc.alloc.rate.norm:       23327.980 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.950 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26676.384 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 80078.870 ops/s
[info]                  ·gc.alloc.rate:            1187.043 MB/sec
[info]                  ·gc.alloc.rate.norm:       23328.030 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.017 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26629.088 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 80387.612 ops/s
[info]                  ·gc.alloc.rate:                                  1191.565 MB/sec
[info]                  ·gc.alloc.rate.norm:                             23327.980 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.088 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.728 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.968 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       26605.329 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                78.251 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson":
[info]   80101.238 ±(99.9%) 774.459 ops/s [Average]
[info]   (min, avg, max) = (79897.292, 80101.238, 80387.612), stdev = 201.125
[info]   CI (99.9%): [79326.779, 80875.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1187.245 ±(99.9%) 11.528 MB/sec [Average]
[info]   (min, avg, max) = (1184.133, 1187.245, 1191.565), stdev = 2.994
[info]   CI (99.9%): [1175.718, 1198.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   23328.000 ±(99.9%) 0.106 B/op [Average]
[info]   (min, avg, max) = (23327.980, 23328.000, 23328.030), stdev = 0.027
[info]   CI (99.9%): [23327.894, 23328.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.152 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.088), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.346 ±(99.9%) 2.976 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.346, 1.728), stdev = 0.773
[info]   CI (99.9%): [≈ 0, 3.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1220.199 ±(99.9%) 1168.612 MB/sec [Average]
[info]   (min, avg, max) = (677.318, 1220.199, 1358.968), stdev = 303.485
[info]   CI (99.9%): [51.588, 2388.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   23978.634 ±(99.9%) 23001.363 B/op [Average]
[info]   (min, avg, max) = (13293.300, 23978.634, 26689.069), stdev = 5973.381
[info]   CI (99.9%): [977.271, 46979.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   15.650 ±(99.9%) 134.753 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.650, 78.251), stdev = 34.995
[info]   CI (99.9%): [≈ 0, 150.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.000, 9.000), stdev = 2.000
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 52.94% complete, ETA 00:53:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15932.449 ops/s
[info] # Warmup Iteration   2: 22763.796 ops/s
[info] # Warmup Iteration   3: 23603.197 ops/s
[info] # Warmup Iteration   4: 23477.294 ops/s
[info] # Warmup Iteration   5: 23312.445 ops/s
[info] Iteration   1: 23539.463 ops/s
[info]                  ·gc.alloc.rate:            1226.070 MB/sec
[info]                  ·gc.alloc.rate.norm:       81984.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.075 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 90677.062 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 23574.803 ops/s
[info]                  ·gc.alloc.rate:            1228.080 MB/sec
[info]                  ·gc.alloc.rate.norm:       81984.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.281 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 90542.463 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 23598.135 ops/s
[info]                  ·gc.alloc.rate:            1229.192 MB/sec
[info]                  ·gc.alloc.rate.norm:       81984.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.064 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 45225.199 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 23531.247 ops/s
[info]                  ·gc.alloc.rate:            1225.588 MB/sec
[info]                  ·gc.alloc.rate.norm:       81984.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.944 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 90704.029 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 23614.462 ops/s
[info]                  ·gc.alloc.rate:                                  1229.985 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81984.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.041 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.753 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1359.415 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       90611.102 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                221.977 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce":
[info]   23571.622 ±(99.9%) 139.005 ops/s [Average]
[info]   (min, avg, max) = (23531.247, 23571.622, 23614.462), stdev = 36.099
[info]   CI (99.9%): [23432.617, 23710.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate":
[info]   1227.783 ±(99.9%) 7.375 MB/sec [Average]
[info]   (min, avg, max) = (1225.588, 1227.783, 1229.985), stdev = 1.915
[info]   CI (99.9%): [1220.408, 1235.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   81984.018 ±(99.9%) 0.003 B/op [Average]
[info]   (min, avg, max) = (81984.017, 81984.018, 81984.019), stdev = 0.001
[info]   CI (99.9%): [81984.015, 81984.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.008 ±(99.9%) 0.071 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.041), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.551 ±(99.9%) 4.741 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.551, 2.753), stdev = 1.231
[info]   CI (99.9%): [≈ 0, 5.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1221.156 ±(99.9%) 1169.059 MB/sec [Average]
[info]   (min, avg, max) = (678.064, 1221.156, 1359.415), stdev = 303.601
[info]   CI (99.9%): [52.097, 2390.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   81551.971 ±(99.9%) 78196.487 B/op [Average]
[info]   (min, avg, max) = (45225.199, 81551.971, 90704.029), stdev = 20307.379
[info]   CI (99.9%): [3355.484, 159748.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   44.395 ±(99.9%) 382.258 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 44.395, 221.977), stdev = 99.271
[info]   CI (99.9%): [≈ 0, 426.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.000, 8.000), stdev = 1.000
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 53.18% complete, ETA 00:52:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14745.907 ops/s
[info] # Warmup Iteration   2: 25800.950 ops/s
[info] # Warmup Iteration   3: 26409.710 ops/s
[info] # Warmup Iteration   4: 25836.698 ops/s
[info] # Warmup Iteration   5: 26357.230 ops/s
[info] Iteration   1: 26189.237 ops/s
[info]                  ·gc.alloc.rate:                   1025.726 MB/sec
[info]                  ·gc.alloc.rate.norm:              61648.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.988 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        81377.119 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 40.028 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 26527.813 ops/s
[info]                  ·gc.alloc.rate:            1038.836 MB/sec
[info]                  ·gc.alloc.rate.norm:       61648.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.296 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 40193.042 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 26381.186 ops/s
[info]                  ·gc.alloc.rate:                   1033.153 MB/sec
[info]                  ·gc.alloc.rate.norm:              61648.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.022 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        80794.202 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 39.741 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 26396.329 ops/s
[info]                  ·gc.alloc.rate:                   1033.830 MB/sec
[info]                  ·gc.alloc.rate.norm:              61648.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.088 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        80745.237 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 39.717 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 26538.112 ops/s
[info]                  ·gc.alloc.rate:            1039.422 MB/sec
[info]                  ·gc.alloc.rate.norm:       61648.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.372 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 40174.872 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala":
[info]   26406.536 ±(99.9%) 544.516 ops/s [Average]
[info]   (min, avg, max) = (26189.237, 26406.536, 26538.112), stdev = 141.409
[info]   CI (99.9%): [25862.019, 26951.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1034.193 ±(99.9%) 21.248 MB/sec [Average]
[info]   (min, avg, max) = (1025.726, 1034.193, 1039.422), stdev = 5.518
[info]   CI (99.9%): [1012.946, 1055.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   61648.016 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (61648.015, 61648.016, 61648.017), stdev = 0.001
[info]   CI (99.9%): [61648.014, 61648.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1083.353 ±(99.9%) 1427.214 MB/sec [Average]
[info]   (min, avg, max) = (677.296, 1083.353, 1354.088), stdev = 370.643
[info]   CI (99.9%): [≈ 0, 2510.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   64656.894 ±(99.9%) 86031.152 B/op [Average]
[info]   (min, avg, max) = (40174.872, 64656.894, 81377.119), stdev = 22342.017
[info]   CI (99.9%): [≈ 0, 150688.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.400 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.400, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   23.897 ±(99.9%) 84.004 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 23.897, 40.028), stdev = 21.816
[info]   CI (99.9%): [≈ 0, 107.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.400, 9.000), stdev = 2.191
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 53.41% complete, ETA 00:52:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 459013.635 ops/s
[info] # Warmup Iteration   2: 479316.708 ops/s
[info] # Warmup Iteration   3: 474500.183 ops/s
[info] # Warmup Iteration   4: 489073.393 ops/s
[info] # Warmup Iteration   5: 486765.298 ops/s
[info] Iteration   1: 489262.984 ops/s
[info]                  ·gc.alloc.rate:            1273.273 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.212 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4362.808 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 489696.525 ops/s
[info]                  ·gc.alloc.rate:            1274.325 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.064 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2179.466 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 486277.671 ops/s
[info]                  ·gc.alloc.rate:            1265.817 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.540 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4389.566 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 477085.639 ops/s
[info]                  ·gc.alloc.rate:                   1241.413 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1356.012 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4474.116 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 10.988 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 475694.644 ops/s
[info]                  ·gc.alloc.rate:                                  1237.872 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4096.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.159 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.526 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.738 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4509.170 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala":
[info]   483603.492 ±(99.9%) 25926.762 ops/s [Average]
[info]   (min, avg, max) = (475694.644, 483603.492, 489696.525), stdev = 6733.098
[info]   CI (99.9%): [457676.730, 509530.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1258.540 ±(99.9%) 67.788 MB/sec [Average]
[info]   (min, avg, max) = (1237.872, 1258.540, 1274.325), stdev = 17.604
[info]   CI (99.9%): [1190.752, 1326.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.001, 4096.001, 4096.001), stdev = 0.001
[info]   CI (99.9%): [4096.001, 4096.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.032 ±(99.9%) 0.274 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.159), stdev = 0.071
[info]   CI (99.9%): [≈ 0, 0.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.105 ±(99.9%) 0.906 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.105, 0.526), stdev = 0.235
[info]   CI (99.9%): [≈ 0, 1.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1221.913 ±(99.9%) 1170.727 MB/sec [Average]
[info]   (min, avg, max) = (678.064, 1221.913, 1362.738), stdev = 304.034
[info]   CI (99.9%): [51.186, 2392.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   3983.025 ±(99.9%) 3889.119 B/op [Average]
[info]   (min, avg, max) = (2179.466, 3983.025, 4509.170), stdev = 1009.992
[info]   CI (99.9%): [93.907, 7872.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   2.198 ±(99.9%) 18.921 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.198, 10.988), stdev = 4.914
[info]   CI (99.9%): [≈ 0, 21.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 10.000), stdev = 3.000
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 53.65% complete, ETA 00:52:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8205.166 ops/s
[info] # Warmup Iteration   2: 20073.439 ops/s
[info] # Warmup Iteration   3: 20398.747 ops/s
[info] # Warmup Iteration   4: 20358.512 ops/s
[info] # Warmup Iteration   5: 20225.143 ops/s
[info] Iteration   1: 19748.757 ops/s
[info]                  ·gc.alloc.rate:            1501.805 MB/sec
[info]                  ·gc.alloc.rate.norm:       119696.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.463 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 107872.946 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 20350.826 ops/s
[info]                  ·gc.alloc.rate:                   1547.487 MB/sec
[info]                  ·gc.alloc.rate.norm:              119696.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.051 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        104733.959 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 51.517 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 20461.993 ops/s
[info]                  ·gc.alloc.rate:                   1556.019 MB/sec
[info]                  ·gc.alloc.rate.norm:              119696.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1358.128 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        104473.319 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 358.663 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 20579.907 ops/s
[info]                  ·gc.alloc.rate:                                  1565.160 MB/sec
[info]                  ·gc.alloc.rate.norm:                             119696.020 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.051 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.866 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.307 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       156338.892 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 20608.071 ops/s
[info]                  ·gc.alloc.rate:            1567.739 MB/sec
[info]                  ·gc.alloc.rate.norm:       119696.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1363.262 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 104084.344 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson":
[info]   20349.911 ±(99.9%) 1352.523 ops/s [Average]
[info]   (min, avg, max) = (19748.757, 20349.911, 20608.071), stdev = 351.246
[info]   CI (99.9%): [18997.388, 21702.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1547.642 ±(99.9%) 103.359 MB/sec [Average]
[info]   (min, avg, max) = (1501.805, 1547.642, 1567.739), stdev = 26.842
[info]   CI (99.9%): [1444.283, 1651.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   119696.021 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (119696.020, 119696.021, 119696.026), stdev = 0.003
[info]   CI (99.9%): [119696.011, 119696.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.010 ±(99.9%) 0.087 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.051), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.773 ±(99.9%) 6.658 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.773, 3.866), stdev = 1.729
[info]   CI (99.9%): [≈ 0, 7.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1494.642 ±(99.9%) 1183.291 MB/sec [Average]
[info]   (min, avg, max) = (1353.463, 1494.642, 2044.307), stdev = 307.297
[info]   CI (99.9%): [311.351, 2677.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   115500.692 ±(99.9%) 88098.987 B/op [Average]
[info]   (min, avg, max) = (104084.344, 115500.692, 156338.892), stdev = 22879.027
[info]   CI (99.9%): [27401.704, 203599.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.822 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.663), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   82.036 ±(99.9%) 601.624 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 82.036, 358.663), stdev = 156.240
[info]   CI (99.9%): [≈ 0, 683.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 10.000), stdev = 3.271
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 53.88% complete, ETA 00:52:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 48702.463 ops/s
[info] # Warmup Iteration   2: 68641.018 ops/s
[info] # Warmup Iteration   3: 67566.805 ops/s
[info] # Warmup Iteration   4: 69399.659 ops/s
[info] # Warmup Iteration   5: 68700.028 ops/s
[info] Iteration   1: 69081.028 ops/s
[info]                  ·gc.alloc.rate:            1462.585 MB/sec
[info]                  ·gc.alloc.rate.norm:       33312.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.638 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30898.944 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 67588.540 ops/s
[info]                  ·gc.alloc.rate:            1430.730 MB/sec
[info]                  ·gc.alloc.rate.norm:       33312.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.421 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 31581.839 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 69200.363 ops/s
[info]                  ·gc.alloc.rate:                   1464.746 MB/sec
[info]                  ·gc.alloc.rate.norm:              33312.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1356.287 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        30845.372 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 75.750 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 69819.819 ops/s
[info]                  ·gc.alloc.rate:                                  1478.116 MB/sec
[info]                  ·gc.alloc.rate.norm:                             33312.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.160 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.604 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.139 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       30720.792 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 69281.824 ops/s
[info]                  ·gc.alloc.rate:                                  1466.877 MB/sec
[info]                  ·gc.alloc.rate.norm:                             33312.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.032 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.336 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       30960.639 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce":
[info]   68994.315 ±(99.9%) 3216.092 ops/s [Average]
[info]   (min, avg, max) = (67588.540, 68994.315, 69819.819), stdev = 835.209
[info]   CI (99.9%): [65778.223, 72210.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1460.611 ±(99.9%) 68.330 MB/sec [Average]
[info]   (min, avg, max) = (1430.730, 1460.611, 1478.116), stdev = 17.745
[info]   CI (99.9%): [1392.281, 1528.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   33312.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (33312.006, 33312.006, 33312.007), stdev = 0.001
[info]   CI (99.9%): [33312.005, 33312.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.032 ±(99.9%) 0.275 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.160), stdev = 0.071
[info]   CI (99.9%): [≈ 0, 0.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.727 ±(99.9%) 6.193 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.727, 3.604), stdev = 1.608
[info]   CI (99.9%): [≈ 0, 6.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1359.164 ±(99.9%) 14.329 MB/sec [Average]
[info]   (min, avg, max) = (1356.287, 1359.164, 1363.336), stdev = 3.721
[info]   CI (99.9%): [1344.835, 1373.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   31001.517 ±(99.9%) 1294.632 B/op [Average]
[info]   (min, avg, max) = (30720.792, 31001.517, 31581.839), stdev = 336.212
[info]   CI (99.9%): [29706.885, 32296.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   15.150 ±(99.9%) 130.446 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.150, 75.750), stdev = 33.876
[info]   CI (99.9%): [≈ 0, 145.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 8.000), stdev = 2.588
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 54.12% complete, ETA 00:51:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 78653.646 ops/s
[info] # Warmup Iteration   2: 118974.301 ops/s
[info] # Warmup Iteration   3: 118594.456 ops/s
[info] # Warmup Iteration   4: 119098.216 ops/s
[info] # Warmup Iteration   5: 119481.871 ops/s
[info] Iteration   1: 119514.864 ops/s
[info]                  ·gc.alloc.rate:            1138.910 MB/sec
[info]                  ·gc.alloc.rate.norm:       15000.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.733 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17842.503 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 120720.692 ops/s
[info]                  ·gc.alloc.rate:            1150.363 MB/sec
[info]                  ·gc.alloc.rate.norm:       15000.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.700 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17664.433 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 121624.146 ops/s
[info]                  ·gc.alloc.rate:            1159.215 MB/sec
[info]                  ·gc.alloc.rate.norm:       15000.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.479 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8766.435 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 121411.570 ops/s
[info]                  ·gc.alloc.rate:            1157.056 MB/sec
[info]                  ·gc.alloc.rate.norm:       15000.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.750 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17562.901 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 118034.794 ops/s
[info]                  ·gc.alloc.rate:                                  1125.101 MB/sec
[info]                  ·gc.alloc.rate.norm:                             15000.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.092 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.225 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1359.036 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       18118.865 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                53.291 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala":
[info]   120261.213 ±(99.9%) 5745.725 ops/s [Average]
[info]   (min, avg, max) = (118034.794, 120261.213, 121624.146), stdev = 1492.146
[info]   CI (99.9%): [114515.488, 126006.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1146.129 ±(99.9%) 54.554 MB/sec [Average]
[info]   (min, avg, max) = (1125.101, 1146.129, 1159.215), stdev = 14.168
[info]   CI (99.9%): [1091.575, 1200.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   15000.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (15000.003, 15000.003, 15000.004), stdev = 0.001
[info]   CI (99.9%): [15000.003, 15000.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.158 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.092), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.245 ±(99.9%) 2.109 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.245, 1.225), stdev = 0.548
[info]   CI (99.9%): [≈ 0, 2.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1220.140 ±(99.9%) 1168.140 MB/sec [Average]
[info]   (min, avg, max) = (677.479, 1220.140, 1359.036), stdev = 303.362
[info]   CI (99.9%): [51.999, 2388.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   15991.027 ±(99.9%) 15572.684 B/op [Average]
[info]   (min, avg, max) = (8766.435, 15991.027, 18118.865), stdev = 4044.177
[info]   CI (99.9%): [418.344, 31563.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   10.658 ±(99.9%) 91.770 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.658, 53.291), stdev = 23.832
[info]   CI (99.9%): [≈ 0, 102.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.800, 10.000), stdev = 2.168
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 54.35% complete, ETA 00:51:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1616677.997 ops/s
[info] # Warmup Iteration   2: 1770574.403 ops/s
[info] # Warmup Iteration   3: 1744614.897 ops/s
[info] # Warmup Iteration   4: 1743677.119 ops/s
[info] # Warmup Iteration   5: 1745769.966 ops/s
[info] Iteration   1: 1749137.990 ops/s
[info]                  ·gc.alloc.rate:            1449.283 MB/sec
[info]                  ·gc.alloc.rate.norm:       1304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.976 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1219.146 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 1751077.553 ops/s
[info]                  ·gc.alloc.rate:            1450.817 MB/sec
[info]                  ·gc.alloc.rate.norm:       1304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.907 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1217.796 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 1734693.306 ops/s
[info]                  ·gc.alloc.rate:                                  1437.094 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1304.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.054 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.049 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2036.068 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1847.502 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                3.626 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 1734634.564 ops/s
[info]                  ·gc.alloc.rate:                                  1437.522 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1304.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.030 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.027 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.185 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1236.568 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 1756813.679 ops/s
[info]                  ·gc.alloc.rate:            1455.405 MB/sec
[info]                  ·gc.alloc.rate.norm:       1304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.749 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1220.983 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala":
[info]   1745271.418 ±(99.9%) 38838.307 ops/s [Average]
[info]   (min, avg, max) = (1734634.564, 1745271.418, 1756813.679), stdev = 10086.185
[info]   CI (99.9%): [1706433.112, 1784109.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1446.024 ±(99.9%) 31.849 MB/sec [Average]
[info]   (min, avg, max) = (1437.094, 1446.024, 1455.405), stdev = 8.271
[info]   CI (99.9%): [1414.175, 1477.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1304.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1304.000, 1304.000, 1304.000), stdev = 0.001
[info]   CI (99.9%): [1304.000, 1304.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.095 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.054), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.015 ±(99.9%) 0.086 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.049), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1494.377 ±(99.9%) 1166.133 MB/sec [Average]
[info]   (min, avg, max) = (1354.907, 1494.377, 2036.068), stdev = 302.841
[info]   CI (99.9%): [328.244, 2660.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1348.399 ±(99.9%) 1074.750 B/op [Average]
[info]   (min, avg, max) = (1217.796, 1348.399, 1847.502), stdev = 279.109
[info]   CI (99.9%): [273.649, 2423.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.725 ±(99.9%) 6.244 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.725, 3.626), stdev = 1.622
[info]   CI (99.9%): [≈ 0, 6.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.600, 9.000), stdev = 2.966
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 54.59% complete, ETA 00:51:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1753912.455 ops/s
[info] # Warmup Iteration   2: 1957734.113 ops/s
[info] # Warmup Iteration   3: 1944945.711 ops/s
[info] # Warmup Iteration   4: 1972045.584 ops/s
[info] # Warmup Iteration   5: 1865308.054 ops/s
[info] Iteration   1: 1971432.477 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1972779.868 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1973121.161 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1972542.168 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1972243.016 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc":
[info]   1972423.738 ±(99.9%) 2467.502 ops/s [Average]
[info]   (min, avg, max) = (1971432.477, 1972423.738, 1973121.161), stdev = 640.803
[info]   CI (99.9%): [1969956.235, 1974891.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 54.82% complete, ETA 00:51:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 69240.540 ops/s
[info] # Warmup Iteration   2: 121395.105 ops/s
[info] # Warmup Iteration   3: 122637.195 ops/s
[info] # Warmup Iteration   4: 122529.575 ops/s
[info] # Warmup Iteration   5: 119491.171 ops/s
[info] Iteration   1: 122382.802 ops/s
[info]                  ·gc.alloc.rate:            1379.610 MB/sec
[info]                  ·gc.alloc.rate.norm:       17744.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.409 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17407.021 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 122275.991 ops/s
[info]                  ·gc.alloc.rate:                   1378.943 MB/sec
[info]                  ·gc.alloc.rate.norm:              17744.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.616 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        17430.967 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 8.574 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 122212.566 ops/s
[info]                  ·gc.alloc.rate:                   1377.768 MB/sec
[info]                  ·gc.alloc.rate.norm:              17744.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.427 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        17430.517 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 60.046 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 119759.178 ops/s
[info]                  ·gc.alloc.rate:                                  1350.094 MB/sec
[info]                  ·gc.alloc.rate.norm:                             17744.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.027 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.358 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.771 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       17910.609 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 122630.285 ops/s
[info]                  ·gc.alloc.rate:                                  1382.768 MB/sec
[info]                  ·gc.alloc.rate.norm:                             17744.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.028 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.364 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.081 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       17491.370 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson":
[info]   121852.164 ±(99.9%) 4546.843 ops/s [Average]
[info]   (min, avg, max) = (119759.178, 121852.164, 122630.285), stdev = 1180.801
[info]   CI (99.9%): [117305.322, 126399.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1373.837 ±(99.9%) 51.602 MB/sec [Average]
[info]   (min, avg, max) = (1350.094, 1373.837, 1382.768), stdev = 13.401
[info]   CI (99.9%): [1322.234, 1425.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   17744.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (17744.003, 17744.003, 17744.004), stdev = 0.001
[info]   CI (99.9%): [17744.003, 17744.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.011 ±(99.9%) 0.059 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.028), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.144 ±(99.9%) 0.761 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.144, 0.364), stdev = 0.198
[info]   CI (99.9%): [≈ 0, 0.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1357.461 ±(99.9%) 19.307 MB/sec [Average]
[info]   (min, avg, max) = (1353.409, 1357.461, 1363.081), stdev = 5.014
[info]   CI (99.9%): [1338.154, 1376.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   17534.097 ±(99.9%) 819.336 B/op [Average]
[info]   (min, avg, max) = (17407.021, 17534.097, 17910.609), stdev = 212.779
[info]   CI (99.9%): [16714.761, 18353.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.821 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   13.724 ±(99.9%) 100.731 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.724, 60.046), stdev = 26.160
[info]   CI (99.9%): [≈ 0, 114.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.000, 10.000), stdev = 3.674
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55.06% complete, ETA 00:50:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19137.723 ops/s
[info] # Warmup Iteration   2: 32977.752 ops/s
[info] # Warmup Iteration   3: 32832.959 ops/s
[info] # Warmup Iteration   4: 32890.489 ops/s
[info] # Warmup Iteration   5: 32865.053 ops/s
[info] Iteration   1: 33087.303 ops/s
[info]                  ·gc.alloc.rate:                   1188.251 MB/sec
[info]                  ·gc.alloc.rate.norm:              56528.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.709 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        32192.706 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 31.686 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 32986.496 ops/s
[info]                  ·gc.alloc.rate:            1184.891 MB/sec
[info]                  ·gc.alloc.rate.norm:       56528.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.014 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 64644.124 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 32960.597 ops/s
[info]                  ·gc.alloc.rate:                   1184.011 MB/sec
[info]                  ·gc.alloc.rate.norm:              56528.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.450 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        64665.261 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 31.808 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 32998.208 ops/s
[info]                  ·gc.alloc.rate:                   1185.146 MB/sec
[info]                  ·gc.alloc.rate.norm:              56528.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.854 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        64622.579 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 190.627 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 33170.943 ops/s
[info]                  ·gc.alloc.rate:                                  1191.236 MB/sec
[info]                  ·gc.alloc.rate.norm:                             56528.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.090 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.273 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            681.333 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       32331.462 B/op
[info]                  ·gc.count:                                       1.000 counts
[info]                  ·gc.time:                                        1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala":
[info]   33040.709 ±(99.9%) 335.112 ops/s [Average]
[info]   (min, avg, max) = (32960.597, 33040.709, 33170.943), stdev = 87.027
[info]   CI (99.9%): [32705.597, 33375.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1186.707 ±(99.9%) 11.536 MB/sec [Average]
[info]   (min, avg, max) = (1184.011, 1186.707, 1191.236), stdev = 2.996
[info]   CI (99.9%): [1175.171, 1198.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   56528.013 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (56528.012, 56528.013, 56528.013), stdev = 0.001
[info]   CI (99.9%): [56528.011, 56528.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.155 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.090), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.855 ±(99.9%) 7.358 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.855, 4.273), stdev = 1.911
[info]   CI (99.9%): [≈ 0, 8.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1084.472 ±(99.9%) 1425.231 MB/sec [Average]
[info]   (min, avg, max) = (676.709, 1084.472, 1355.014), stdev = 370.128
[info]   CI (99.9%): [≈ 0, 2509.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   51691.226 ±(99.9%) 68296.459 B/op [Average]
[info]   (min, avg, max) = (32192.706, 51691.226, 64665.261), stdev = 17736.374
[info]   CI (99.9%): [≈ 0, 119987.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 6.438 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.997), stdev = 1.672
[info]   CI (99.9%): [≈ 0, 7.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   50.824 ±(99.9%) 307.081 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 50.824, 190.627), stdev = 79.748
[info]   CI (99.9%): [≈ 0, 357.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 6.800, 10.000), stdev = 3.768
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55.29% complete, ETA 00:50:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 609044.490 ops/s
[info] # Warmup Iteration   2: 677482.685 ops/s
[info] # Warmup Iteration   3: 674796.686 ops/s
[info] # Warmup Iteration   4: 680242.901 ops/s
[info] # Warmup Iteration   5: 681751.717 ops/s
[info] Iteration   1: 681357.108 ops/s
[info]                  ·gc.alloc.rate:            1330.143 MB/sec
[info]                  ·gc.alloc.rate.norm:       3072.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.432 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3132.714 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 681103.550 ops/s
[info]                  ·gc.alloc.rate:            1329.370 MB/sec
[info]                  ·gc.alloc.rate.norm:       3072.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.139 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3133.859 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 679781.850 ops/s
[info]                  ·gc.alloc.rate:            1326.701 MB/sec
[info]                  ·gc.alloc.rate.norm:       3072.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.049 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3139.957 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 677617.421 ops/s
[info]                  ·gc.alloc.rate:                                  1322.687 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3072.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.042 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.099 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1359.562 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3157.644 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                7.736 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 679472.612 ops/s
[info]                  ·gc.alloc.rate:                                  1326.109 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3072.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.095 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.221 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.767 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3156.921 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala":
[info]   679866.508 ±(99.9%) 5767.256 ops/s [Average]
[info]   (min, avg, max) = (677617.421, 679866.508, 681357.108), stdev = 1497.738
[info]   CI (99.9%): [674099.253, 685633.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1327.002 ±(99.9%) 11.388 MB/sec [Average]
[info]   (min, avg, max) = (1322.687, 1327.002, 1330.143), stdev = 2.957
[info]   CI (99.9%): [1315.614, 1338.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3072.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3072.001, 3072.001, 3072.001), stdev = 0.001
[info]   CI (99.9%): [3072.001, 3072.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.028 ±(99.9%) 0.162 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.095), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.064 ±(99.9%) 0.376 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.064, 0.221), stdev = 0.098
[info]   CI (99.9%): [≈ 0, 0.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1358.190 ±(99.9%) 11.344 MB/sec [Average]
[info]   (min, avg, max) = (1356.049, 1358.190, 1362.767), stdev = 2.946
[info]   CI (99.9%): [1346.845, 1369.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   3144.219 ±(99.9%) 47.138 B/op [Average]
[info]   (min, avg, max) = (3132.714, 3144.219, 3157.644), stdev = 12.241
[info]   CI (99.9%): [3097.081, 3191.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.547 ±(99.9%) 13.321 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.547, 7.736), stdev = 3.459
[info]   CI (99.9%): [≈ 0, 14.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 7.000), stdev = 1.673
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 55.53% complete, ETA 00:50:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9667.443 ops/s
[info] # Warmup Iteration   2: 24280.165 ops/s
[info] # Warmup Iteration   3: 24216.274 ops/s
[info] # Warmup Iteration   4: 23961.553 ops/s
[info] # Warmup Iteration   5: 24538.321 ops/s
[info] Iteration   1: 24291.056 ops/s
[info]                  ·gc.alloc.rate:            1767.821 MB/sec
[info]                  ·gc.alloc.rate.norm:       114560.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2029.950 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 131546.742 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   2: 24879.722 ops/s
[info]                  ·gc.alloc.rate:                   1811.505 MB/sec
[info]                  ·gc.alloc.rate.norm:              114560.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1358.637 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        85920.530 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 294.970 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 24998.099 ops/s
[info]                  ·gc.alloc.rate:                                  1819.467 MB/sec
[info]                  ·gc.alloc.rate.norm:                             114560.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.045 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.804 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.083 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       128702.597 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 24994.419 ops/s
[info]                  ·gc.alloc.rate:                                  1819.197 MB/sec
[info]                  ·gc.alloc.rate.norm:                             114560.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.104 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.106 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       128723.190 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 24854.593 ops/s
[info]                  ·gc.alloc.rate:            1808.850 MB/sec
[info]                  ·gc.alloc.rate.norm:       114560.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.618 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 86298.733 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson":
[info]   24803.578 ±(99.9%) 1131.425 ops/s [Average]
[info]   (min, avg, max) = (24291.056, 24803.578, 24998.099), stdev = 293.827
[info]   CI (99.9%): [23672.153, 25935.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1805.368 ±(99.9%) 82.802 MB/sec [Average]
[info]   (min, avg, max) = (1767.821, 1805.368, 1819.467), stdev = 21.504
[info]   CI (99.9%): [1722.566, 1888.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   114560.017 ±(99.9%) 0.003 B/op [Average]
[info]   (min, avg, max) = (114560.016, 114560.017, 114560.018), stdev = 0.001
[info]   CI (99.9%): [114560.014, 114560.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.009 ±(99.9%) 0.076 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.045), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.582 ±(99.9%) 4.788 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.582, 2.804), stdev = 1.243
[info]   CI (99.9%): [≈ 0, 5.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1767.879 ±(99.9%) 1431.728 MB/sec [Average]
[info]   (min, avg, max) = (1358.637, 1767.879, 2044.106), stdev = 371.815
[info]   CI (99.9%): [336.150, 3199.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   112238.358 ±(99.9%) 91955.578 B/op [Average]
[info]   (min, avg, max) = (85920.530, 112238.358, 131546.742), stdev = 23880.572
[info]   CI (99.9%): [20282.780, 204193.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.032 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.664), stdev = 2.086
[info]   CI (99.9%): [≈ 0, 8.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   58.994 ±(99.9%) 507.956 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 58.994, 294.970), stdev = 131.915
[info]   CI (99.9%): [≈ 0, 566.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.600, 15.000), stdev = 4.506
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55.76% complete, ETA 00:50:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 223829.014 ops/s
[info] # Warmup Iteration   2: 347317.575 ops/s
[info] # Warmup Iteration   3: 357087.859 ops/s
[info] # Warmup Iteration   4: 354505.123 ops/s
[info] # Warmup Iteration   5: 347742.796 ops/s
[info] Iteration   1: 344595.105 ops/s
[info]                  ·gc.alloc.rate:            957.903 MB/sec
[info]                  ·gc.alloc.rate.norm:       4376.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.610 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6188.281 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 353019.583 ops/s
[info]                  ·gc.alloc.rate:            981.389 MB/sec
[info]                  ·gc.alloc.rate.norm:       4376.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.349 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3020.292 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 355216.055 ops/s
[info]                  ·gc.alloc.rate:            987.527 MB/sec
[info]                  ·gc.alloc.rate.norm:       4376.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.810 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6003.534 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 356016.991 ops/s
[info]                  ·gc.alloc.rate:            989.784 MB/sec
[info]                  ·gc.alloc.rate.norm:       4376.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.398 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2994.888 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 355471.782 ops/s
[info]                  ·gc.alloc.rate:                   988.240 MB/sec
[info]                  ·gc.alloc.rate.norm:              4376.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.707 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2996.513 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.949 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala":
[info]   352863.903 ±(99.9%) 18333.359 ops/s [Average]
[info]   (min, avg, max) = (344595.105, 352863.903, 356016.991), stdev = 4761.115
[info]   CI (99.9%): [334530.544, 371197.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   980.969 ±(99.9%) 51.149 MB/sec [Average]
[info]   (min, avg, max) = (957.903, 980.969, 989.784), stdev = 13.283
[info]   CI (99.9%): [929.820, 1032.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   4376.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4376.001, 4376.001, 4376.001), stdev = 0.001
[info]   CI (99.9%): [4376.001, 4376.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   948.175 ±(99.9%) 1429.029 MB/sec [Average]
[info]   (min, avg, max) = (676.707, 948.175, 1354.810), stdev = 371.114
[info]   CI (99.9%): [≈ 0, 2377.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   4240.702 ±(99.9%) 6526.274 B/op [Average]
[info]   (min, avg, max) = (2994.888, 4240.702, 6188.281), stdev = 1694.853
[info]   CI (99.9%): [≈ 0, 10766.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.590 ±(99.9%) 5.079 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.590, 2.949), stdev = 1.319
[info]   CI (99.9%): [≈ 0, 5.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.400, 14.000), stdev = 4.450
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 56.00% complete, ETA 00:49:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1965810.091 ops/s
[info] # Warmup Iteration   2: 2231206.271 ops/s
[info] # Warmup Iteration   3: 2229581.248 ops/s
[info] # Warmup Iteration   4: 2235658.192 ops/s
[info] # Warmup Iteration   5: 2240003.358 ops/s
[info] Iteration   1: 2262716.011 ops/s
[info]                  ·gc.alloc.rate:                   1322.486 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.403 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        942.899 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.463 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 2251869.541 ops/s
[info]                  ·gc.alloc.rate:            1316.212 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.795 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 946.969 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 2242462.608 ops/s
[info]                  ·gc.alloc.rate:            1310.733 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.815 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 950.941 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 2215098.014 ops/s
[info]                  ·gc.alloc.rate:                                  1294.873 MB/sec
[info]                  ·gc.alloc.rate.norm:                             920.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.069 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.049 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.916 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       965.502 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                2.840 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 2198734.881 ops/s
[info]                  ·gc.alloc.rate:                                  1285.112 MB/sec
[info]                  ·gc.alloc.rate.norm:                             920.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.113 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.081 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.766 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       975.592 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala":
[info]   2234176.211 ±(99.9%) 102174.642 ops/s [Average]
[info]   (min, avg, max) = (2198734.881, 2234176.211, 2262716.011), stdev = 26534.430
[info]   CI (99.9%): [2132001.569, 2336350.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1305.883 ±(99.9%) 59.607 MB/sec [Average]
[info]   (min, avg, max) = (1285.112, 1305.883, 1322.486), stdev = 15.480
[info]   CI (99.9%): [1246.276, 1365.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   920.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (920.000, 920.000, 920.000), stdev = 0.001
[info]   CI (99.9%): [920.000, 920.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.036 ±(99.9%) 0.202 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.036, 0.113), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.026 ±(99.9%) 0.144 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.081), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1357.339 ±(99.9%) 13.413 MB/sec [Average]
[info]   (min, avg, max) = (1354.795, 1357.339, 1362.766), stdev = 3.483
[info]   CI (99.9%): [1343.926, 1370.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   956.381 ±(99.9%) 52.805 B/op [Average]
[info]   (min, avg, max) = (942.899, 956.381, 975.592), stdev = 13.713
[info]   CI (99.9%): [903.576, 1009.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.689 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.997), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.661 ±(99.9%) 4.754 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.661, 2.840), stdev = 1.235
[info]   CI (99.9%): [≈ 0, 5.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 8.000), stdev = 1.924
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 56.24% complete, ETA 00:49:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2058066.668 ops/s
[info] # Warmup Iteration   2: 2259979.806 ops/s
[info] # Warmup Iteration   3: 2147887.521 ops/s
[info] # Warmup Iteration   4: 2272559.468 ops/s
[info] # Warmup Iteration   5: 2257150.723 ops/s
[info] Iteration   1: 2247019.743 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2270217.487 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2271098.248 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2270430.701 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2271282.711 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc":
[info]   2266009.778 ±(99.9%) 40913.303 ops/s [Average]
[info]   (min, avg, max) = (2247019.743, 2266009.778, 2271282.711), stdev = 10625.055
[info]   CI (99.9%): [2225096.475, 2306923.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 56.47% complete, ETA 00:49:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 126823.306 ops/s
[info] # Warmup Iteration   2: 220586.019 ops/s
[info] # Warmup Iteration   3: 223492.425 ops/s
[info] # Warmup Iteration   4: 221855.475 ops/s
[info] # Warmup Iteration   5: 223779.851 ops/s
[info] Iteration   1: 223086.659 ops/s
[info]                  ·gc.alloc.rate:            1442.279 MB/sec
[info]                  ·gc.alloc.rate.norm:       10176.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.090 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9553.784 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 222390.253 ops/s
[info]                  ·gc.alloc.rate:                   1438.657 MB/sec
[info]                  ·gc.alloc.rate.norm:              10176.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2030.106 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        14359.474 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 9.419 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   3: 217580.463 ops/s
[info]                  ·gc.alloc.rate:                                  1406.650 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10176.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.032 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.233 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.676 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9828.955 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                28.909 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 219917.025 ops/s
[info]                  ·gc.alloc.rate:                                  1421.823 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10176.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.060 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.430 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.837 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9753.841 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 220265.936 ops/s
[info]                  ·gc.alloc.rate:                                  1424.016 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10176.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.752 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9738.212 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson":
[info]   220648.067 ±(99.9%) 8408.298 ops/s [Average]
[info]   (min, avg, max) = (217580.463, 220648.067, 223086.659), stdev = 2183.608
[info]   CI (99.9%): [212239.769, 229056.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1426.685 ±(99.9%) 55.089 MB/sec [Average]
[info]   (min, avg, max) = (1406.650, 1426.685, 1442.279), stdev = 14.306
[info]   CI (99.9%): [1371.596, 1481.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   10176.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10176.002, 10176.002, 10176.002), stdev = 0.001
[info]   CI (99.9%): [10176.002, 10176.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.060), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.134 ±(99.9%) 0.742 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.134, 0.430), stdev = 0.193
[info]   CI (99.9%): [≈ 0, 0.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1493.692 ±(99.9%) 1154.753 MB/sec [Average]
[info]   (min, avg, max) = (1354.090, 1493.692, 2030.106), stdev = 299.886
[info]   CI (99.9%): [338.939, 2648.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   10646.853 ±(99.9%) 8001.193 B/op [Average]
[info]   (min, avg, max) = (9553.784, 10646.853, 14359.474), stdev = 2077.884
[info]   CI (99.9%): [2645.660, 18648.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   7.666 ±(99.9%) 48.349 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.666, 28.909), stdev = 12.556
[info]   CI (99.9%): [≈ 0, 56.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.400, 15.000), stdev = 4.980
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 56.71% complete, ETA 00:49:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 52714.982 ops/s
[info] # Warmup Iteration   2: 74361.340 ops/s
[info] # Warmup Iteration   3: 72933.881 ops/s
[info] # Warmup Iteration   4: 73965.787 ops/s
[info] # Warmup Iteration   5: 74704.847 ops/s
[info] Iteration   1: 75284.066 ops/s
[info]                  ·gc.alloc.rate:            1414.580 MB/sec
[info]                  ·gc.alloc.rate.norm:       29576.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.829 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28326.718 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 74957.571 ops/s
[info]                  ·gc.alloc.rate:            1408.596 MB/sec
[info]                  ·gc.alloc.rate.norm:       29576.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.945 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28449.520 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 74929.639 ops/s
[info]                  ·gc.alloc.rate:                   1409.890 MB/sec
[info]                  ·gc.alloc.rate.norm:              29576.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2026.312 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        42507.014 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.985 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 83.593 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   4: 74534.543 ops/s
[info]                  ·gc.alloc.rate:                                  1400.662 MB/sec
[info]                  ·gc.alloc.rate.norm:                             29576.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.160 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.374 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.843 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       28777.434 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 74677.276 ops/s
[info]                  ·gc.alloc.rate:                                  1403.122 MB/sec
[info]                  ·gc.alloc.rate.norm:                             29576.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.016 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.343 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.714 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       28724.263 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce":
[info]   74876.619 ±(99.9%) 1109.579 ops/s [Average]
[info]   (min, avg, max) = (74534.543, 74876.619, 75284.066), stdev = 288.154
[info]   CI (99.9%): [73767.040, 75986.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate":
[info]   1407.370 ±(99.9%) 21.343 MB/sec [Average]
[info]   (min, avg, max) = (1400.662, 1407.370, 1414.580), stdev = 5.543
[info]   CI (99.9%): [1386.027, 1428.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   29576.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (29576.005, 29576.006, 29576.006), stdev = 0.001
[info]   CI (99.9%): [29576.005, 29576.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.035 ±(99.9%) 0.270 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.035, 0.160), stdev = 0.070
[info]   CI (99.9%): [≈ 0, 0.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.743 ±(99.9%) 5.691 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.743, 3.374), stdev = 1.478
[info]   CI (99.9%): [≈ 0, 6.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1492.329 ±(99.9%) 1149.540 MB/sec [Average]
[info]   (min, avg, max) = (1354.829, 1492.329, 2026.312), stdev = 298.532
[info]   CI (99.9%): [342.788, 2641.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   31356.990 ±(99.9%) 24012.117 B/op [Average]
[info]   (min, avg, max) = (28326.718, 31356.990, 42507.014), stdev = 6235.870
[info]   CI (99.9%): [7344.873, 55369.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.797 ±(99.9%) 6.862 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.797, 3.985), stdev = 1.782
[info]   CI (99.9%): [≈ 0, 7.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   16.719 ±(99.9%) 143.952 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.719, 83.593), stdev = 37.384
[info]   CI (99.9%): [≈ 0, 160.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 12.000), stdev = 3.782
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 56.94% complete, ETA 00:48:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 41438.265 ops/s
[info] # Warmup Iteration   2: 76062.687 ops/s
[info] # Warmup Iteration   3: 78734.937 ops/s
[info] # Warmup Iteration   4: 79523.330 ops/s
[info] # Warmup Iteration   5: 78871.107 ops/s
[info] Iteration   1: 78937.833 ops/s
[info]                  ·gc.alloc.rate:            909.902 MB/sec
[info]                  ·gc.alloc.rate.norm:       18144.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.685 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13493.512 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 78858.751 ops/s
[info]                  ·gc.alloc.rate:            909.070 MB/sec
[info]                  ·gc.alloc.rate.norm:       18144.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.743 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13507.027 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 78404.461 ops/s
[info]                  ·gc.alloc.rate:                   903.655 MB/sec
[info]                  ·gc.alloc.rate.norm:              18144.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1352.616 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        27158.461 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 13.372 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 79116.497 ops/s
[info]                  ·gc.alloc.rate:            911.974 MB/sec
[info]                  ·gc.alloc.rate.norm:       18144.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.709 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13463.329 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 79049.539 ops/s
[info]                  ·gc.alloc.rate:            911.545 MB/sec
[info]                  ·gc.alloc.rate.norm:       18144.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.946 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13474.397 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala":
[info]   78873.416 ±(99.9%) 1079.540 ops/s [Average]
[info]   (min, avg, max) = (78404.461, 78873.416, 79116.497), stdev = 280.353
[info]   CI (99.9%): [77793.876, 79952.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   909.229 ±(99.9%) 12.836 MB/sec [Average]
[info]   (min, avg, max) = (903.655, 909.229, 911.974), stdev = 3.334
[info]   CI (99.9%): [896.393, 922.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   18144.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (18144.005, 18144.005, 18144.006), stdev = 0.001
[info]   CI (99.9%): [18144.005, 18144.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   811.940 ±(99.9%) 1163.846 MB/sec [Average]
[info]   (min, avg, max) = (676.685, 811.940, 1352.616), stdev = 302.247
[info]   CI (99.9%): [≈ 0, 1975.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   16219.345 ±(99.9%) 23547.361 B/op [Average]
[info]   (min, avg, max) = (13463.329, 16219.345, 27158.461), stdev = 6115.175
[info]   CI (99.9%): [≈ 0, 39766.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   2.674 ±(99.9%) 23.027 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.674, 13.372), stdev = 5.980
[info]   CI (99.9%): [≈ 0, 25.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 10.000), stdev = 2.387
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 57.18% complete, ETA 00:48:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 81144.390 ops/s
[info] # Warmup Iteration   2: 100678.236 ops/s
[info] # Warmup Iteration   3: 100239.580 ops/s
[info] # Warmup Iteration   4: 100820.596 ops/s
[info] # Warmup Iteration   5: 100296.337 ops/s
[info] Iteration   1: 100510.524 ops/s
[info]                  ·gc.alloc.rate:            1058.338 MB/sec
[info]                  ·gc.alloc.rate.norm:       16576.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.605 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 21216.226 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 101625.393 ops/s
[info]                  ·gc.alloc.rate:            1070.167 MB/sec
[info]                  ·gc.alloc.rate.norm:       16576.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.360 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10491.743 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 99838.517 ops/s
[info]                  ·gc.alloc.rate:            1051.804 MB/sec
[info]                  ·gc.alloc.rate.norm:       16576.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.301 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 21359.006 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 101211.559 ops/s
[info]                  ·gc.alloc.rate:            1065.874 MB/sec
[info]                  ·gc.alloc.rate.norm:       16576.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.388 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10534.444 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 100085.403 ops/s
[info]                  ·gc.alloc.rate:            1054.345 MB/sec
[info]                  ·gc.alloc.rate.norm:       16576.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.128 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 21304.814 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala":
[info]   100654.279 ±(99.9%) 2896.555 ops/s [Average]
[info]   (min, avg, max) = (99838.517, 100654.279, 101625.393), stdev = 752.226
[info]   CI (99.9%): [97757.724, 103550.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1060.105 ±(99.9%) 29.811 MB/sec [Average]
[info]   (min, avg, max) = (1051.804, 1060.105, 1070.167), stdev = 7.742
[info]   CI (99.9%): [1030.295, 1089.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   16576.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16576.004, 16576.004, 16576.004), stdev = 0.001
[info]   CI (99.9%): [16576.004, 16576.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1083.957 ±(99.9%) 1429.196 MB/sec [Average]
[info]   (min, avg, max) = (677.360, 1083.957, 1355.301), stdev = 371.158
[info]   CI (99.9%): [≈ 0, 2513.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   16981.247 ±(99.9%) 22737.390 B/op [Average]
[info]   (min, avg, max) = (10491.743, 16981.247, 21359.006), stdev = 5904.828
[info]   CI (99.9%): [≈ 0, 39718.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 7.000), stdev = 1.643
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 57.41% complete, ETA 00:48:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21114.303 ops/s
[info] # Warmup Iteration   2: 42294.502 ops/s
[info] # Warmup Iteration   3: 42387.670 ops/s
[info] # Warmup Iteration   4: 42558.065 ops/s
[info] # Warmup Iteration   5: 42247.801 ops/s
[info] Iteration   1: 42469.677 ops/s
[info]                  ·gc.alloc.rate:                                  2037.833 MB/sec
[info]                  ·gc.alloc.rate.norm:                             75528.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.065 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.424 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2034.830 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       75416.698 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                172.804 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   2: 42294.551 ops/s
[info]                  ·gc.alloc.rate:                                  2029.103 MB/sec
[info]                  ·gc.alloc.rate.norm:                             75528.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.056 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.100 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2043.770 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       76073.938 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 42376.998 ops/s
[info]                  ·gc.alloc.rate:                                  2033.326 MB/sec
[info]                  ·gc.alloc.rate.norm:                             75528.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.166 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2043.964 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       75923.176 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 42442.933 ops/s
[info]                  ·gc.alloc.rate:            2036.572 MB/sec
[info]                  ·gc.alloc.rate.norm:       75528.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.093 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 75806.924 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 42372.580 ops/s
[info]                  ·gc.alloc.rate:                                  2033.013 MB/sec
[info]                  ·gc.alloc.rate.norm:                             75528.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.037 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2043.939 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       75933.925 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson":
[info]   42391.348 ±(99.9%) 263.453 ops/s [Average]
[info]   (min, avg, max) = (42294.551, 42391.348, 42469.677), stdev = 68.418
[info]   CI (99.9%): [42127.895, 42654.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2033.969 ±(99.9%) 13.159 MB/sec [Average]
[info]   (min, avg, max) = (2029.103, 2033.969, 2037.833), stdev = 3.417
[info]   CI (99.9%): [2020.810, 2047.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   75528.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (75528.010, 75528.010, 75528.010), stdev = 0.001
[info]   CI (99.9%): [75528.009, 75528.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.125 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.065), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.945 ±(99.9%) 4.655 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.945, 2.424), stdev = 1.209
[info]   CI (99.9%): [≈ 0, 5.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2042.119 ±(99.9%) 15.697 MB/sec [Average]
[info]   (min, avg, max) = (2034.830, 2042.119, 2044.093), stdev = 4.076
[info]   CI (99.9%): [2026.422, 2057.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   75830.932 ±(99.9%) 963.305 B/op [Average]
[info]   (min, avg, max) = (75416.698, 75830.932, 76073.938), stdev = 250.167
[info]   CI (99.9%): [74867.628, 76794.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   34.561 ±(99.9%) 297.579 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 34.561, 172.804), stdev = 77.280
[info]   CI (99.9%): [≈ 0, 332.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 11.000), stdev = 3.194
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 57.65% complete, ETA 00:47:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 94441.171 ops/s
[info] # Warmup Iteration   2: 124622.205 ops/s
[info] # Warmup Iteration   3: 126034.103 ops/s
[info] # Warmup Iteration   4: 132006.524 ops/s
[info] # Warmup Iteration   5: 129312.203 ops/s
[info] Iteration   1: 129336.810 ops/s
[info]                  ·gc.alloc.rate:      573.853 MB/sec
[info]                  ·gc.alloc.rate.norm: 6984.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 129948.657 ops/s
[info]                  ·gc.alloc.rate:            576.574 MB/sec
[info]                  ·gc.alloc.rate.norm:       6984.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.352 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8204.732 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 132096.037 ops/s
[info]                  ·gc.alloc.rate:                   586.289 MB/sec
[info]                  ·gc.alloc.rate.norm:              6984.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.902 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        8063.405 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 7.936 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 129265.529 ops/s
[info]                  ·gc.alloc.rate:            573.561 MB/sec
[info]                  ·gc.alloc.rate.norm:       6984.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.399 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8248.393 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 129537.616 ops/s
[info]                  ·gc.alloc.rate:            574.790 MB/sec
[info]                  ·gc.alloc.rate.norm:       6984.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.400 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8230.759 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce":
[info]   130036.930 ±(99.9%) 4548.920 ops/s [Average]
[info]   (min, avg, max) = (129265.529, 130036.930, 132096.037), stdev = 1181.340
[info]   CI (99.9%): [125488.010, 134585.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate":
[info]   577.013 ±(99.9%) 20.474 MB/sec [Average]
[info]   (min, avg, max) = (573.561, 577.013, 586.289), stdev = 5.317
[info]   CI (99.9%): [556.540, 597.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   6984.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6984.003, 6984.003, 6984.003), stdev = 0.001
[info]   CI (99.9%): [6984.003, 6984.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   541.811 ±(99.9%) 1166.288 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 541.811, 677.400), stdev = 302.881
[info]   CI (99.9%): [≈ 0, 1708.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   6549.458 ±(99.9%) 14100.998 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6549.458, 8248.393), stdev = 3661.984
[info]   CI (99.9%): [≈ 0, 20650.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.587 ±(99.9%) 13.667 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.587, 7.936), stdev = 3.549
[info]   CI (99.9%): [≈ 0, 15.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.400, 5.000), stdev = 1.949
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 57.88% complete, ETA 00:47:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 120090.715 ops/s
[info] # Warmup Iteration   2: 175724.145 ops/s
[info] # Warmup Iteration   3: 174832.185 ops/s
[info] # Warmup Iteration   4: 173131.777 ops/s
[info] # Warmup Iteration   5: 176548.618 ops/s
[info] Iteration   1: 175440.718 ops/s
[info]                  ·gc.alloc.rate:            260.358 MB/sec
[info]                  ·gc.alloc.rate.norm:       2336.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.687 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6071.427 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 176297.777 ops/s
[info]                  ·gc.alloc.rate:      261.627 MB/sec
[info]                  ·gc.alloc.rate.norm: 2336.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 176188.703 ops/s
[info]                  ·gc.alloc.rate:      261.532 MB/sec
[info]                  ·gc.alloc.rate.norm: 2336.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 174831.159 ops/s
[info]                  ·gc.alloc.rate:                   259.446 MB/sec
[info]                  ·gc.alloc.rate.norm:              2336.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             675.981 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        6086.401 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.996 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 176612.330 ops/s
[info]                  ·gc.alloc.rate:      262.130 MB/sec
[info]                  ·gc.alloc.rate.norm: 2336.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala":
[info]   175874.137 ±(99.9%) 2789.396 ops/s [Average]
[info]   (min, avg, max) = (174831.159, 175874.137, 176612.330), stdev = 724.397
[info]   CI (99.9%): [173084.741, 178663.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   261.018 ±(99.9%) 4.208 MB/sec [Average]
[info]   (min, avg, max) = (259.446, 261.018, 262.130), stdev = 1.093
[info]   CI (99.9%): [256.810, 265.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   2336.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2336.002, 2336.002, 2336.002), stdev = 0.001
[info]   CI (99.9%): [2336.002, 2336.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   270.534 ±(99.9%) 1426.447 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 270.534, 676.687), stdev = 370.444
[info]   CI (99.9%): [≈ 0, 1696.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   2431.566 ±(99.9%) 12820.960 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2431.566, 6086.401), stdev = 3329.562
[info]   CI (99.9%): [≈ 0, 15252.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.199 ±(99.9%) 10.326 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 5.996), stdev = 2.682
[info]   CI (99.9%): [≈ 0, 11.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 5.000), stdev = 2.739
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 58.12% complete, ETA 00:47:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 655812.283 ops/s
[info] # Warmup Iteration   2: 722592.011 ops/s
[info] # Warmup Iteration   3: 668903.072 ops/s
[info] # Warmup Iteration   4: 708657.462 ops/s
[info] # Warmup Iteration   5: 748202.044 ops/s
[info] Iteration   1: 742208.832 ops/s
[info]                  ·gc.alloc.rate:            920.544 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.464 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1436.553 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 738197.436 ops/s
[info]                  ·gc.alloc.rate:            915.412 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.709 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2888.745 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 733568.925 ops/s
[info]                  ·gc.alloc.rate:            909.743 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.401 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1453.473 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 752489.688 ops/s
[info]                  ·gc.alloc.rate:            933.364 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.497 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1416.889 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 745029.411 ops/s
[info]                  ·gc.alloc.rate:            923.867 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.667 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2862.220 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala":
[info]   742298.858 ±(99.9%) 27522.708 ops/s [Average]
[info]   (min, avg, max) = (733568.925, 742298.858, 752489.688), stdev = 7147.560
[info]   CI (99.9%): [714776.151, 769821.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   920.586 ±(99.9%) 34.354 MB/sec [Average]
[info]   (min, avg, max) = (909.743, 920.586, 933.364), stdev = 8.922
[info]   CI (99.9%): [886.232, 954.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1952.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1952.001, 1952.001, 1952.001), stdev = 0.001
[info]   CI (99.9%): [1952.000, 1952.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   948.348 ±(99.9%) 1428.344 MB/sec [Average]
[info]   (min, avg, max) = (677.401, 948.348, 1354.709), stdev = 370.936
[info]   CI (99.9%): [≈ 0, 2376.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   2011.576 ±(99.9%) 3037.377 B/op [Average]
[info]   (min, avg, max) = (1416.889, 2011.576, 2888.745), stdev = 788.797
[info]   CI (99.9%): [≈ 0, 5048.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 8.000), stdev = 2.168
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 58.35% complete, ETA 00:47:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 696072.677 ops/s
[info] # Warmup Iteration   2: 756210.980 ops/s
[info] # Warmup Iteration   3: 751155.089 ops/s
[info] # Warmup Iteration   4: 753760.818 ops/s
[info] # Warmup Iteration   5: 754203.279 ops/s
[info] Iteration   1: 751987.957 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 681951.781 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 713232.817 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 753443.828 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 753195.169 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc":
[info]   730762.310 ±(99.9%) 124149.134 ops/s [Average]
[info]   (min, avg, max) = (681951.781, 730762.310, 753443.828), stdev = 32241.136
[info]   CI (99.9%): [606613.177, 854911.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻³, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 58.59% complete, ETA 00:46:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 147011.785 ops/s
[info] # Warmup Iteration   2: 191664.281 ops/s
[info] # Warmup Iteration   3: 200029.572 ops/s
[info] # Warmup Iteration   4: 205701.944 ops/s
[info] # Warmup Iteration   5: 206085.886 ops/s
[info] Iteration   1: 206782.852 ops/s
[info]                  ·gc.alloc.rate:            677.813 MB/sec
[info]                  ·gc.alloc.rate.norm:       5160.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.649 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5151.138 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 206448.144 ops/s
[info]                  ·gc.alloc.rate:            676.694 MB/sec
[info]                  ·gc.alloc.rate.norm:       5160.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.628 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5159.495 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 206469.494 ops/s
[info]                  ·gc.alloc.rate:                   676.909 MB/sec
[info]                  ·gc.alloc.rate.norm:              5160.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.108 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5153.893 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.078 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 207282.857 ops/s
[info]                  ·gc.alloc.rate:            679.473 MB/sec
[info]                  ·gc.alloc.rate.norm:       5160.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.663 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5138.665 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 207822.525 ops/s
[info]                  ·gc.alloc.rate:            681.271 MB/sec
[info]                  ·gc.alloc.rate.norm:       5160.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.665 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5125.118 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson":
[info]   206961.175 ±(99.9%) 2263.505 ops/s [Average]
[info]   (min, avg, max) = (206448.144, 206961.175, 207822.525), stdev = 587.825
[info]   CI (99.9%): [204697.670, 209224.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   678.432 ±(99.9%) 7.422 MB/sec [Average]
[info]   (min, avg, max) = (676.694, 678.432, 681.271), stdev = 1.928
[info]   CI (99.9%): [671.010, 685.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5160.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5160.002, 5160.002, 5160.002), stdev = 0.001
[info]   CI (99.9%): [5160.002, 5160.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   676.543 ±(99.9%) 0.937 MB/sec [Average]
[info]   (min, avg, max) = (676.108, 676.543, 676.665), stdev = 0.243
[info]   CI (99.9%): [675.605, 677.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   5145.662 ±(99.9%) 53.081 B/op [Average]
[info]   (min, avg, max) = (5125.118, 5145.662, 5159.495), stdev = 13.785
[info]   CI (99.9%): [5092.581, 5198.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.016 ±(99.9%) 8.744 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.016, 5.078), stdev = 2.271
[info]   CI (99.9%): [≈ 0, 9.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 58.82% complete, ETA 00:46:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 88771.471 ops/s
[info] # Warmup Iteration   2: 125286.239 ops/s
[info] # Warmup Iteration   3: 125903.528 ops/s
[info] # Warmup Iteration   4: 127600.207 ops/s
[info] # Warmup Iteration   5: 127638.631 ops/s
[info] Iteration   1: 127389.035 ops/s
[info]                  ·gc.alloc.rate:            1568.711 MB/sec
[info]                  ·gc.alloc.rate.norm:       19384.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2034.113 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25134.813 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 127829.887 ops/s
[info]                  ·gc.alloc.rate:                   1574.210 MB/sec
[info]                  ·gc.alloc.rate.norm:              19384.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.469 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        16690.540 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 8.202 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 128018.210 ops/s
[info]                  ·gc.alloc.rate:                                  1576.955 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19384.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.039 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.483 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1359.794 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       16714.649 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                40.947 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 128431.114 ops/s
[info]                  ·gc.alloc.rate:                                  1581.671 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19384.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.109 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.337 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.161 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       25052.000 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 129058.850 ops/s
[info]                  ·gc.alloc.rate:            1589.852 MB/sec
[info]                  ·gc.alloc.rate.norm:       19384.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1363.117 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16619.566 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce":
[info]   128145.419 ±(99.9%) 2438.279 ops/s [Average]
[info]   (min, avg, max) = (127389.035, 128145.419, 129058.850), stdev = 633.213
[info]   CI (99.9%): [125707.140, 130583.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate":
[info]   1578.280 ±(99.9%) 30.764 MB/sec [Average]
[info]   (min, avg, max) = (1568.711, 1578.280, 1589.852), stdev = 7.989
[info]   CI (99.9%): [1547.516, 1609.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   19384.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (19384.003, 19384.003, 19384.003), stdev = 0.001
[info]   CI (99.9%): [19384.003, 19384.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.030 ±(99.9%) 0.183 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.109), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.364 ±(99.9%) 2.244 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.364, 1.337), stdev = 0.583
[info]   CI (99.9%): [≈ 0, 2.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1631.330 ±(99.9%) 1433.599 MB/sec [Average]
[info]   (min, avg, max) = (1355.469, 1631.330, 2044.161), stdev = 372.301
[info]   CI (99.9%): [197.731, 3064.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   20042.314 ±(99.9%) 17756.172 B/op [Average]
[info]   (min, avg, max) = (16619.566, 20042.314, 25134.813), stdev = 4611.221
[info]   CI (99.9%): [2286.142, 37798.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.562 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.331), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   9.830 ±(99.9%) 68.364 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.830, 40.947), stdev = 17.754
[info]   CI (99.9%): [≈ 0, 78.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 12.000), stdev = 3.507
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 59.06% complete, ETA 00:46:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 104991.539 ops/s
[info] # Warmup Iteration   2: 153300.564 ops/s
[info] # Warmup Iteration   3: 160603.160 ops/s
[info] # Warmup Iteration   4: 157677.102 ops/s
[info] # Warmup Iteration   5: 156049.063 ops/s
[info] Iteration   1: 156071.792 ops/s
[info]                  ·gc.alloc.rate:                   832.884 MB/sec
[info]                  ·gc.alloc.rate.norm:              8400.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.151 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        13657.217 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 6.718 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 157623.862 ops/s
[info]                  ·gc.alloc.rate:            841.124 MB/sec
[info]                  ·gc.alloc.rate.norm:       8400.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.358 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6764.534 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 157750.117 ops/s
[info]                  ·gc.alloc.rate:            842.056 MB/sec
[info]                  ·gc.alloc.rate.norm:       8400.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.580 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6759.261 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 158057.266 ops/s
[info]                  ·gc.alloc.rate:            843.491 MB/sec
[info]                  ·gc.alloc.rate.norm:       8400.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.404 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6746.005 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 157181.375 ops/s
[info]                  ·gc.alloc.rate:            838.871 MB/sec
[info]                  ·gc.alloc.rate.norm:       8400.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.452 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6783.640 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala":
[info]   157336.882 ±(99.9%) 2980.650 ops/s [Average]
[info]   (min, avg, max) = (156071.792, 157336.882, 158057.266), stdev = 774.065
[info]   CI (99.9%): [154356.232, 160317.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   839.685 ±(99.9%) 16.004 MB/sec [Average]
[info]   (min, avg, max) = (832.884, 839.685, 843.491), stdev = 4.156
[info]   CI (99.9%): [823.681, 855.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   8400.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8400.003, 8400.003, 8400.003), stdev = 0.001
[info]   CI (99.9%): [8400.003, 8400.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   812.789 ±(99.9%) 1165.323 MB/sec [Average]
[info]   (min, avg, max) = (677.358, 812.789, 1354.151), stdev = 302.631
[info]   CI (99.9%): [≈ 0, 1978.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   8142.132 ±(99.9%) 11871.751 B/op [Average]
[info]   (min, avg, max) = (6746.005, 8142.132, 13657.217), stdev = 3083.056
[info]   CI (99.9%): [≈ 0, 20013.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.344 ±(99.9%) 11.568 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.344, 6.718), stdev = 3.004
[info]   CI (99.9%): [≈ 0, 12.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 9.000), stdev = 2.074
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 59.29% complete, ETA 00:46:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 402270.559 ops/s
[info] # Warmup Iteration   2: 433020.103 ops/s
[info] # Warmup Iteration   3: 433850.929 ops/s
[info] # Warmup Iteration   4: 428684.878 ops/s
[info] # Warmup Iteration   5: 406719.799 ops/s
[info] Iteration   1: 394885.453 ops/s
[info]                  ·gc.alloc.rate:            766.643 MB/sec
[info]                  ·gc.alloc.rate.norm:       3056.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.023 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2702.741 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 434626.941 ops/s
[info]                  ·gc.alloc.rate:            843.799 MB/sec
[info]                  ·gc.alloc.rate.norm:       3056.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.022 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2455.602 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 434856.024 ops/s
[info]                  ·gc.alloc.rate:            844.207 MB/sec
[info]                  ·gc.alloc.rate.norm:       3056.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.994 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2454.315 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 435223.687 ops/s
[info]                  ·gc.alloc.rate:            844.926 MB/sec
[info]                  ·gc.alloc.rate.norm:       3056.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.986 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2452.201 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 428872.840 ops/s
[info]                  ·gc.alloc.rate:            832.617 MB/sec
[info]                  ·gc.alloc.rate.norm:       3056.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.006 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4977.027 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala":
[info]   425692.989 ±(99.9%) 67078.245 ops/s [Average]
[info]   (min, avg, max) = (394885.453, 425692.989, 435223.687), stdev = 17420.007
[info]   CI (99.9%): [358614.744, 492771.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   826.438 ±(99.9%) 130.191 MB/sec [Average]
[info]   (min, avg, max) = (766.643, 826.438, 844.926), stdev = 33.810
[info]   CI (99.9%): [696.247, 956.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3056.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3056.001, 3056.001, 3056.001), stdev = 0.001
[info]   CI (99.9%): [3056.001, 3056.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   813.606 ±(99.9%) 1167.557 MB/sec [Average]
[info]   (min, avg, max) = (677.986, 813.606, 1356.006), stdev = 303.211
[info]   CI (99.9%): [≈ 0, 1981.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   3008.377 ±(99.9%) 4257.911 B/op [Average]
[info]   (min, avg, max) = (2452.201, 3008.377, 4977.027), stdev = 1105.766
[info]   CI (99.9%): [≈ 0, 7266.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 7.000), stdev = 1.732
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 59.53% complete, ETA 00:45:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27255.858 ops/s
[info] # Warmup Iteration   2: 59562.774 ops/s
[info] # Warmup Iteration   3: 60973.902 ops/s
[info] # Warmup Iteration   4: 61126.781 ops/s
[info] # Warmup Iteration   5: 60958.310 ops/s
[info] Iteration   1: 62571.707 ops/s
[info]                  ·gc.alloc.rate:                                  2642.141 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66448.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.076 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.904 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2726.172 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       68561.318 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 62836.231 ops/s
[info]                  ·gc.alloc.rate:                                  2652.417 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66448.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.071 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.278 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       68273.314 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 62339.826 ops/s
[info]                  ·gc.alloc.rate:            2632.016 MB/sec
[info]                  ·gc.alloc.rate.norm:       66448.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.829 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 68816.426 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 62027.649 ops/s
[info]                  ·gc.alloc.rate:            2618.466 MB/sec
[info]                  ·gc.alloc.rate.norm:       66448.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.478 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 69163.625 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   5: 62168.292 ops/s
[info]                  ·gc.alloc.rate:            2624.463 MB/sec
[info]                  ·gc.alloc.rate.norm:       66448.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.526 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 69006.787 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson":
[info]   62388.741 ±(99.9%) 1240.455 ops/s [Average]
[info]   (min, avg, max) = (62027.649, 62388.741, 62836.231), stdev = 322.142
[info]   CI (99.9%): [61148.286, 63629.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2633.901 ±(99.9%) 52.432 MB/sec [Average]
[info]   (min, avg, max) = (2618.466, 2633.901, 2652.417), stdev = 13.616
[info]   CI (99.9%): [2581.469, 2686.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66448.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (66448.006, 66448.007, 66448.007), stdev = 0.001
[info]   CI (99.9%): [66448.006, 66448.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.129 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.076), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.395 ±(99.9%) 3.250 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.395, 1.904), stdev = 0.844
[info]   CI (99.9%): [≈ 0, 3.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2725.657 ±(99.9%) 1.344 MB/sec [Average]
[info]   (min, avg, max) = (2725.278, 2725.657, 2726.172), stdev = 0.349
[info]   CI (99.9%): [2724.312, 2727.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   68764.294 ±(99.9%) 1365.820 B/op [Average]
[info]   (min, avg, max) = (68273.314, 68764.294, 69163.625), stdev = 354.699
[info]   CI (99.9%): [67398.474, 70130.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.600, 11.000), stdev = 2.510
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 59.76% complete, ETA 00:45:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 135150.479 ops/s
[info] # Warmup Iteration   2: 180052.468 ops/s
[info] # Warmup Iteration   3: 182444.626 ops/s
[info] # Warmup Iteration   4: 182663.646 ops/s
[info] # Warmup Iteration   5: 183495.520 ops/s
[info] Iteration   1: 183575.747 ops/s
[info]                  ·gc.alloc.rate:            631.612 MB/sec
[info]                  ·gc.alloc.rate.norm:       5416.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.004 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5813.810 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 184374.354 ops/s
[info]                  ·gc.alloc.rate:            634.507 MB/sec
[info]                  ·gc.alloc.rate.norm:       5416.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.165 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5788.651 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 184041.052 ops/s
[info]                  ·gc.alloc.rate:            633.559 MB/sec
[info]                  ·gc.alloc.rate.norm:       5416.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.376 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5799.123 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 183553.967 ops/s
[info]                  ·gc.alloc.rate:            631.577 MB/sec
[info]                  ·gc.alloc.rate.norm:       5416.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.029 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5814.348 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 183704.576 ops/s
[info]                  ·gc.alloc.rate:            632.116 MB/sec
[info]                  ·gc.alloc.rate.norm:       5416.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.051 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5809.570 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce":
[info]   183849.939 ±(99.9%) 1355.196 ops/s [Average]
[info]   (min, avg, max) = (183553.967, 183849.939, 184374.354), stdev = 351.940
[info]   CI (99.9%): [182494.743, 185205.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate":
[info]   632.674 ±(99.9%) 5.016 MB/sec [Average]
[info]   (min, avg, max) = (631.577, 632.674, 634.507), stdev = 1.303
[info]   CI (99.9%): [627.659, 637.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5416.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5416.002, 5416.002, 5416.002), stdev = 0.001
[info]   CI (99.9%): [5416.002, 5416.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   678.125 ±(99.9%) 0.590 MB/sec [Average]
[info]   (min, avg, max) = (678.004, 678.125, 678.376), stdev = 0.153
[info]   CI (99.9%): [677.535, 678.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5805.100 ±(99.9%) 42.517 B/op [Average]
[info]   (min, avg, max) = (5788.651, 5805.100, 5814.348), stdev = 11.042
[info]   CI (99.9%): [5762.583, 5847.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 60.00% complete, ETA 00:45:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 201172.392 ops/s
[info] # Warmup Iteration   2: 303080.621 ops/s
[info] # Warmup Iteration   3: 302632.420 ops/s
[info] # Warmup Iteration   4: 305598.086 ops/s
[info] # Warmup Iteration   5: 301712.754 ops/s
[info] Iteration   1: 304954.204 ops/s
[info]                  ·gc.alloc.rate:      300.756 MB/sec
[info]                  ·gc.alloc.rate.norm: 1552.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 306297.204 ops/s
[info]                  ·gc.alloc.rate:      302.024 MB/sec
[info]                  ·gc.alloc.rate.norm: 1552.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 303980.732 ops/s
[info]                  ·gc.alloc.rate:            299.718 MB/sec
[info]                  ·gc.alloc.rate.norm:       1552.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.362 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3507.520 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 305527.094 ops/s
[info]                  ·gc.alloc.rate:      301.248 MB/sec
[info]                  ·gc.alloc.rate.norm: 1552.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 304946.941 ops/s
[info]                  ·gc.alloc.rate:            300.678 MB/sec
[info]                  ·gc.alloc.rate.norm:       1552.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.325 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3496.136 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala":
[info]   305141.235 ±(99.9%) 3281.332 ops/s [Average]
[info]   (min, avg, max) = (303980.732, 305141.235, 306297.204), stdev = 852.152
[info]   CI (99.9%): [301859.903, 308422.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   300.885 ±(99.9%) 3.250 MB/sec [Average]
[info]   (min, avg, max) = (299.718, 300.885, 302.024), stdev = 0.844
[info]   CI (99.9%): [297.635, 304.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1552.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1552.001, 1552.001, 1552.001), stdev = 0.001
[info]   CI (99.9%): [1552.001, 1552.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   270.937 ±(99.9%) 1428.575 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 270.937, 677.362), stdev = 370.996
[info]   CI (99.9%): [≈ 0, 1699.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1400.731 ±(99.9%) 7385.667 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1400.731, 3507.520), stdev = 1918.034
[info]   CI (99.9%): [≈ 0, 8786.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 5.000), stdev = 2.490
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 60.24% complete, ETA 00:45:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1345250.692 ops/s
[info] # Warmup Iteration   2: 1481402.459 ops/s
[info] # Warmup Iteration   3: 1543059.208 ops/s
[info] # Warmup Iteration   4: 1546634.295 ops/s
[info] # Warmup Iteration   5: 1547614.280 ops/s
[info] Iteration   1: 1548321.829 ops/s
[info]                  ·gc.alloc.rate:            1149.071 MB/sec
[info]                  ·gc.alloc.rate.norm:       1168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.474 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 688.635 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 1514843.871 ops/s
[info]                  ·gc.alloc.rate:                   1124.493 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.933 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1408.394 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.692 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 1517432.414 ops/s
[info]                  ·gc.alloc.rate:            1125.961 MB/sec
[info]                  ·gc.alloc.rate.norm:       1168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.060 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1406.690 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 1540558.282 ops/s
[info]                  ·gc.alloc.rate:            1143.170 MB/sec
[info]                  ·gc.alloc.rate.norm:       1168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.379 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 692.092 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 1521262.730 ops/s
[info]                  ·gc.alloc.rate:                   1128.847 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.705 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1401.692 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 4.135 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala":
[info]   1528483.825 ±(99.9%) 57748.914 ops/s [Average]
[info]   (min, avg, max) = (1514843.871, 1528483.825, 1548321.829), stdev = 14997.210
[info]   CI (99.9%): [1470734.911, 1586232.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1134.309 ±(99.9%) 42.718 MB/sec [Average]
[info]   (min, avg, max) = (1124.493, 1134.309, 1149.071), stdev = 11.094
[info]   CI (99.9%): [1091.590, 1177.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1168.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1168.000, 1168.000, 1168.000), stdev = 0.001
[info]   CI (99.9%): [1168.000, 1168.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1084.310 ±(99.9%) 1430.255 MB/sec [Average]
[info]   (min, avg, max) = (677.379, 1084.310, 1356.060), stdev = 371.433
[info]   CI (99.9%): [≈ 0, 2514.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1119.501 ±(99.9%) 1508.515 B/op [Average]
[info]   (min, avg, max) = (688.635, 1119.501, 1408.394), stdev = 391.756
[info]   CI (99.9%): [≈ 0, 2628.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.965 ±(99.9%) 6.919 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.965, 4.135), stdev = 1.797
[info]   CI (99.9%): [≈ 0, 7.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 7.000), stdev = 1.949
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 60.47% complete, ETA 00:44:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1441081.869 ops/s
[info] # Warmup Iteration   2: 1605162.887 ops/s
[info] # Warmup Iteration   3: 1603744.932 ops/s
[info] # Warmup Iteration   4: 1611929.575 ops/s
[info] # Warmup Iteration   5: 1613364.136 ops/s
[info] Iteration   1: 1612853.045 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1613628.547 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1612833.115 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1613006.861 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1613515.874 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc":
[info]   1613167.488 ±(99.9%) 1454.133 ops/s [Average]
[info]   (min, avg, max) = (1612833.115, 1613167.488, 1613628.547), stdev = 377.634
[info]   CI (99.9%): [1611713.356, 1614621.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 60.71% complete, ETA 00:44:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 162840.929 ops/s
[info] # Warmup Iteration   2: 293502.730 ops/s
[info] # Warmup Iteration   3: 292243.990 ops/s
[info] # Warmup Iteration   4: 293882.173 ops/s
[info] # Warmup Iteration   5: 293850.407 ops/s
[info] Iteration   1: 292733.922 ops/s
[info]                  ·gc.alloc.rate:            795.966 MB/sec
[info]                  ·gc.alloc.rate.norm:       4280.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.687 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3638.626 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 292291.966 ops/s
[info]                  ·gc.alloc.rate:                   794.711 MB/sec
[info]                  ·gc.alloc.rate.norm:              4280.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.649 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3644.164 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.587 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 294324.885 ops/s
[info]                  ·gc.alloc.rate:            800.248 MB/sec
[info]                  ·gc.alloc.rate.norm:       4280.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.305 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3622.461 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 292469.840 ops/s
[info]                  ·gc.alloc.rate:                   795.299 MB/sec
[info]                  ·gc.alloc.rate.norm:              4280.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.117 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        7287.354 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.585 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 294424.421 ops/s
[info]                  ·gc.alloc.rate:            800.597 MB/sec
[info]                  ·gc.alloc.rate.norm:       4280.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.725 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3617.781 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson":
[info]   293249.007 ±(99.9%) 4005.157 ops/s [Average]
[info]   (min, avg, max) = (292291.966, 293249.007, 294424.421), stdev = 1040.127
[info]   CI (99.9%): [289243.850, 297254.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   797.364 ±(99.9%) 10.896 MB/sec [Average]
[info]   (min, avg, max) = (794.711, 797.364, 800.597), stdev = 2.830
[info]   CI (99.9%): [786.468, 808.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4280.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4280.001, 4280.001, 4280.002), stdev = 0.001
[info]   CI (99.9%): [4280.001, 4280.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   812.297 ±(99.9%) 1166.309 MB/sec [Average]
[info]   (min, avg, max) = (676.649, 812.297, 1354.117), stdev = 302.887
[info]   CI (99.9%): [≈ 0, 1978.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   4362.077 ±(99.9%) 6297.019 B/op [Average]
[info]   (min, avg, max) = (3617.781, 4362.077, 7287.354), stdev = 1635.316
[info]   CI (99.9%): [≈ 0, 10659.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.434 ±(99.9%) 7.562 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.434, 3.587), stdev = 1.964
[info]   CI (99.9%): [≈ 0, 8.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 10.000), stdev = 2.387
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 60.94% complete, ETA 00:44:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2816.233 ops/s
[info] # Warmup Iteration   2: 4354.376 ops/s
[info] # Warmup Iteration   3: 4602.698 ops/s
[info] # Warmup Iteration   4: 4605.012 ops/s
[info] # Warmup Iteration   5: 4600.152 ops/s
[info] Iteration   1: 4504.358 ops/s
[info]                  ·gc.alloc.rate:            886.712 MB/sec
[info]                  ·gc.alloc.rate.norm:       309840.098 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.292 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 235964.506 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 4472.991 ops/s
[info]                  ·gc.alloc.rate:            880.476 MB/sec
[info]                  ·gc.alloc.rate.norm:       309840.091 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.339 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 237652.227 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 4518.826 ops/s
[info]                  ·gc.alloc.rate:            889.492 MB/sec
[info]                  ·gc.alloc.rate.norm:       309840.097 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1350.623 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 470467.285 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 4569.292 ops/s
[info]                  ·gc.alloc.rate:            899.489 MB/sec
[info]                  ·gc.alloc.rate.norm:       309840.096 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.281 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 232609.071 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 4551.377 ops/s
[info]                  ·gc.alloc.rate:            896.035 MB/sec
[info]                  ·gc.alloc.rate.norm:       309840.090 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.199 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 233477.397 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce":
[info]   4523.368 ±(99.9%) 146.797 ops/s [Average]
[info]   (min, avg, max) = (4472.991, 4523.368, 4569.292), stdev = 38.123
[info]   CI (99.9%): [4376.571, 4670.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   890.441 ±(99.9%) 29.024 MB/sec [Average]
[info]   (min, avg, max) = (880.476, 890.441, 899.489), stdev = 7.537
[info]   CI (99.9%): [861.417, 919.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   309840.094 ±(99.9%) 0.014 B/op [Average]
[info]   (min, avg, max) = (309840.090, 309840.094, 309840.098), stdev = 0.004
[info]   CI (99.9%): [309840.080, 309840.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   810.347 ±(99.9%) 1162.984 MB/sec [Average]
[info]   (min, avg, max) = (675.199, 810.347, 1350.623), stdev = 302.023
[info]   CI (99.9%): [≈ 0, 1973.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   282034.097 ±(99.9%) 405689.645 B/op [Average]
[info]   (min, avg, max) = (232609.071, 282034.097, 470467.285), stdev = 105356.312
[info]   CI (99.9%): [≈ 0, 687723.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 9.000), stdev = 1.789
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 61.18% complete, ETA 00:43:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1813.783 ops/s
[info] # Warmup Iteration   2: 4048.827 ops/s
[info] # Warmup Iteration   3: 4097.545 ops/s
[info] # Warmup Iteration   4: 4167.545 ops/s
[info] # Warmup Iteration   5: 4198.553 ops/s
[info] Iteration   1: 4183.928 ops/s
[info]                  ·gc.alloc.rate:                   777.220 MB/sec
[info]                  ·gc.alloc.rate.norm:              292424.097 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.931 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        253562.464 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 250.556 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 4203.532 ops/s
[info]                  ·gc.alloc.rate:            780.945 MB/sec
[info]                  ·gc.alloc.rate.norm:       292424.097 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.607 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 252605.824 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 4186.745 ops/s
[info]                  ·gc.alloc.rate:            777.834 MB/sec
[info]                  ·gc.alloc.rate.norm:       292424.105 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.647 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 253631.205 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 4174.658 ops/s
[info]                  ·gc.alloc.rate:            775.560 MB/sec
[info]                  ·gc.alloc.rate.norm:       292424.098 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.608 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 254360.031 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 4206.993 ops/s
[info]                  ·gc.alloc.rate:            781.556 MB/sec
[info]                  ·gc.alloc.rate.norm:       292424.105 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.654 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 252425.734 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala":
[info]   4191.171 ±(99.9%) 52.652 ops/s [Average]
[info]   (min, avg, max) = (4174.658, 4191.171, 4206.993), stdev = 13.674
[info]   CI (99.9%): [4138.519, 4243.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   778.623 ±(99.9%) 9.811 MB/sec [Average]
[info]   (min, avg, max) = (775.560, 778.623, 781.556), stdev = 2.548
[info]   CI (99.9%): [768.812, 788.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   292424.100 ±(99.9%) 0.016 B/op [Average]
[info]   (min, avg, max) = (292424.097, 292424.100, 292424.105), stdev = 0.004
[info]   CI (99.9%): [292424.085, 292424.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   674.489 ±(99.9%) 1.204 MB/sec [Average]
[info]   (min, avg, max) = (673.931, 674.489, 674.654), stdev = 0.313
[info]   CI (99.9%): [673.285, 675.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   253317.051 ±(99.9%) 3072.694 B/op [Average]
[info]   (min, avg, max) = (252425.734, 253317.051, 254360.031), stdev = 797.969
[info]   CI (99.9%): [250244.357, 256389.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   50.111 ±(99.9%) 431.472 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 50.111, 250.556), stdev = 112.052
[info]   CI (99.9%): [≈ 0, 481.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 61.41% complete, ETA 00:43:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32153.372 ops/s
[info] # Warmup Iteration   2: 39292.935 ops/s
[info] # Warmup Iteration   3: 40774.065 ops/s
[info] # Warmup Iteration   4: 41700.710 ops/s
[info] # Warmup Iteration   5: 40251.359 ops/s
[info] Iteration   1: 41955.062 ops/s
[info]                  ·gc.alloc.rate:            687.964 MB/sec
[info]                  ·gc.alloc.rate.norm:       25800.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.309 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25362.930 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 41932.466 ops/s
[info]                  ·gc.alloc.rate:            687.409 MB/sec
[info]                  ·gc.alloc.rate.norm:       25800.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.134 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25376.839 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 41860.670 ops/s
[info]                  ·gc.alloc.rate:                   686.164 MB/sec
[info]                  ·gc.alloc.rate.norm:              25800.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:             675.404 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        25395.435 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 25.045 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 41829.089 ops/s
[info]                  ·gc.alloc.rate:            685.630 MB/sec
[info]                  ·gc.alloc.rate.norm:       25800.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.012 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25438.099 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 41611.451 ops/s
[info]                  ·gc.alloc.rate:            682.067 MB/sec
[info]                  ·gc.alloc.rate.norm:       25800.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.371 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25546.758 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala":
[info]   41837.747 ±(99.9%) 525.668 ops/s [Average]
[info]   (min, avg, max) = (41611.451, 41837.747, 41955.062), stdev = 136.514
[info]   CI (99.9%): [41312.079, 42363.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   685.847 ±(99.9%) 8.898 MB/sec [Average]
[info]   (min, avg, max) = (682.067, 685.847, 687.964), stdev = 2.311
[info]   CI (99.9%): [676.948, 694.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   25800.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (25800.010, 25800.010, 25800.010), stdev = 0.001
[info]   CI (99.9%): [25800.009, 25800.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   675.846 ±(99.9%) 1.662 MB/sec [Average]
[info]   (min, avg, max) = (675.371, 675.846, 676.309), stdev = 0.432
[info]   CI (99.9%): [674.184, 677.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   25424.012 ±(99.9%) 285.817 B/op [Average]
[info]   (min, avg, max) = (25362.930, 25424.012, 25546.758), stdev = 74.226
[info]   CI (99.9%): [25138.195, 25709.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   5.009 ±(99.9%) 43.129 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.009, 25.045), stdev = 11.200
[info]   CI (99.9%): [≈ 0, 48.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 61.65% complete, ETA 00:43:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1763.711 ops/s
[info] # Warmup Iteration   2: 3808.856 ops/s
[info] # Warmup Iteration   3: 3884.960 ops/s
[info] # Warmup Iteration   4: 3955.190 ops/s
[info] # Warmup Iteration   5: 4008.136 ops/s
[info] Iteration   1: 3968.487 ops/s
[info]                  ·gc.alloc.rate:            1010.920 MB/sec
[info]                  ·gc.alloc.rate.norm:       400992.111 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1349.055 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 535117.122 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 3995.207 ops/s
[info]                  ·gc.alloc.rate:            1017.712 MB/sec
[info]                  ·gc.alloc.rate.norm:       400992.102 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.641 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 265817.690 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 3996.843 ops/s
[info]                  ·gc.alloc.rate:            1018.584 MB/sec
[info]                  ·gc.alloc.rate.norm:       400992.102 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1349.426 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 531236.553 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   4: 3992.533 ops/s
[info]                  ·gc.alloc.rate:            1017.149 MB/sec
[info]                  ·gc.alloc.rate.norm:       400992.102 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.606 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 265950.798 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 3912.290 ops/s
[info]                  ·gc.alloc.rate:            996.710 MB/sec
[info]                  ·gc.alloc.rate.norm:       400992.104 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1349.467 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 542912.082 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson":
[info]   3973.072 ±(99.9%) 138.158 ops/s [Average]
[info]   (min, avg, max) = (3912.290, 3973.072, 3996.843), stdev = 35.879
[info]   CI (99.9%): [3834.914, 4111.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1012.215 ±(99.9%) 35.356 MB/sec [Average]
[info]   (min, avg, max) = (996.710, 1012.215, 1018.584), stdev = 9.182
[info]   CI (99.9%): [976.859, 1047.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   400992.104 ±(99.9%) 0.015 B/op [Average]
[info]   (min, avg, max) = (400992.102, 400992.104, 400992.111), stdev = 0.004
[info]   CI (99.9%): [400992.090, 400992.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1079.439 ±(99.9%) 1422.984 MB/sec [Average]
[info]   (min, avg, max) = (674.606, 1079.439, 1349.467), stdev = 369.544
[info]   CI (99.9%): [≈ 0, 2502.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   428206.849 ±(99.9%) 570816.506 B/op [Average]
[info]   (min, avg, max) = (265817.690, 428206.849, 542912.082), stdev = 148239.234
[info]   CI (99.9%): [≈ 0, 999023.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 9.400, 12.000), stdev = 3.578
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 61.88% complete, ETA 00:43:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9798.200 ops/s
[info] # Warmup Iteration   2: 13681.721 ops/s
[info] # Warmup Iteration   3: 14007.607 ops/s
[info] # Warmup Iteration   4: 14226.372 ops/s
[info] # Warmup Iteration   5: 14285.471 ops/s
[info] Iteration   1: 14387.352 ops/s
[info]                  ·gc.alloc.rate:            801.253 MB/sec
[info]                  ·gc.alloc.rate.norm:       87648.028 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.421 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 73883.404 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 14391.956 ops/s
[info]                  ·gc.alloc.rate:            801.408 MB/sec
[info]                  ·gc.alloc.rate.norm:       87648.028 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.364 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 73862.873 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 14170.917 ops/s
[info]                  ·gc.alloc.rate:            789.162 MB/sec
[info]                  ·gc.alloc.rate.norm:       87648.038 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1350.825 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 150029.076 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 14288.200 ops/s
[info]                  ·gc.alloc.rate:            795.359 MB/sec
[info]                  ·gc.alloc.rate.norm:       87622.163 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.296 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 74395.191 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 14447.519 ops/s
[info]                  ·gc.alloc.rate:            804.355 MB/sec
[info]                  ·gc.alloc.rate.norm:       87624.028 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.405 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 73576.643 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce":
[info]   14337.189 ±(99.9%) 420.651 ops/s [Average]
[info]   (min, avg, max) = (14170.917, 14337.189, 14447.519), stdev = 109.242
[info]   CI (99.9%): [13916.538, 14757.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   798.307 ±(99.9%) 23.359 MB/sec [Average]
[info]   (min, avg, max) = (789.162, 798.307, 804.355), stdev = 6.066
[info]   CI (99.9%): [774.948, 821.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   87638.057 ±(99.9%) 52.654 B/op [Average]
[info]   (min, avg, max) = (87622.163, 87638.057, 87648.038), stdev = 13.674
[info]   CI (99.9%): [87585.404, 87690.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   810.462 ±(99.9%) 1163.173 MB/sec [Average]
[info]   (min, avg, max) = (675.296, 810.462, 1350.825), stdev = 302.072
[info]   CI (99.9%): [≈ 0, 1973.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   89149.437 ±(99.9%) 131052.934 B/op [Average]
[info]   (min, avg, max) = (73576.643, 89149.437, 150029.076), stdev = 34034.031
[info]   CI (99.9%): [≈ 0, 220202.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 9.000), stdev = 1.789
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 62.12% complete, ETA 00:42:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10014.163 ops/s
[info] # Warmup Iteration   2: 16194.507 ops/s
[info] # Warmup Iteration   3: 16294.096 ops/s
[info] # Warmup Iteration   4: 16369.572 ops/s
[info] # Warmup Iteration   5: 16386.120 ops/s
[info] Iteration   1: 16316.474 ops/s
[info]                  ·gc.alloc.rate:            845.206 MB/sec
[info]                  ·gc.alloc.rate.norm:       81536.027 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1349.374 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 130172.486 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 16385.347 ops/s
[info]                  ·gc.alloc.rate:            848.743 MB/sec
[info]                  ·gc.alloc.rate.norm:       81536.031 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.658 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 64812.221 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 16241.926 ops/s
[info]                  ·gc.alloc.rate:            841.586 MB/sec
[info]                  ·gc.alloc.rate.norm:       81536.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.899 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 65386.734 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 16249.919 ops/s
[info]                  ·gc.alloc.rate:            841.781 MB/sec
[info]                  ·gc.alloc.rate.norm:       81536.027 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.682 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 65350.528 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 16183.654 ops/s
[info]                  ·gc.alloc.rate:            838.310 MB/sec
[info]                  ·gc.alloc.rate.norm:       81536.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1349.278 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 131233.937 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala":
[info]   16275.464 ±(99.9%) 298.036 ops/s [Average]
[info]   (min, avg, max) = (16183.654, 16275.464, 16385.347), stdev = 77.399
[info]   CI (99.9%): [15977.428, 16573.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   843.125 ±(99.9%) 15.312 MB/sec [Average]
[info]   (min, avg, max) = (838.310, 843.125, 848.743), stdev = 3.977
[info]   CI (99.9%): [827.813, 858.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   81536.027 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (81536.025, 81536.027, 81536.031), stdev = 0.002
[info]   CI (99.9%): [81536.018, 81536.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   944.578 ±(99.9%) 1422.746 MB/sec [Average]
[info]   (min, avg, max) = (674.658, 944.578, 1349.374), stdev = 369.483
[info]   CI (99.9%): [≈ 0, 2367.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   91391.181 ±(99.9%) 138197.659 B/op [Average]
[info]   (min, avg, max) = (64812.221, 91391.181, 131233.937), stdev = 35889.493
[info]   CI (99.9%): [≈ 0, 229588.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.600, 11.000), stdev = 3.130
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 62.35% complete, ETA 00:42:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 254672.346 ops/s
[info] # Warmup Iteration   2: 262900.163 ops/s
[info] # Warmup Iteration   3: 282066.803 ops/s
[info] # Warmup Iteration   4: 285923.293 ops/s
[info] # Warmup Iteration   5: 286366.886 ops/s
[info] Iteration   1: 289961.438 ops/s
[info]                  ·gc.alloc.rate:                   1022.873 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             675.472 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3666.362 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.616 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 282012.645 ops/s
[info]                  ·gc.alloc.rate:            994.854 MB/sec
[info]                  ·gc.alloc.rate.norm:       5552.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1351.611 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7542.963 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 279896.486 ops/s
[info]                  ·gc.alloc.rate:            987.535 MB/sec
[info]                  ·gc.alloc.rate.norm:       5552.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.554 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3798.021 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 280721.432 ops/s
[info]                  ·gc.alloc.rate:                   990.217 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1350.749 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        7573.453 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.734 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 286251.133 ops/s
[info]                  ·gc.alloc.rate:            1009.692 MB/sec
[info]                  ·gc.alloc.rate.norm:       5552.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.027 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3717.277 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala":
[info]   283768.627 ±(99.9%) 16322.834 ops/s [Average]
[info]   (min, avg, max) = (279896.486, 283768.627, 289961.438), stdev = 4238.988
[info]   CI (99.9%): [267445.793, 300091.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1001.034 ±(99.9%) 57.416 MB/sec [Average]
[info]   (min, avg, max) = (987.535, 1001.034, 1022.873), stdev = 14.911
[info]   CI (99.9%): [943.618, 1058.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5552.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5552.001, 5552.001, 5552.002), stdev = 0.001
[info]   CI (99.9%): [5552.001, 5552.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   945.883 ±(99.9%) 1424.678 MB/sec [Average]
[info]   (min, avg, max) = (675.472, 945.883, 1351.611), stdev = 369.984
[info]   CI (99.9%): [≈ 0, 2370.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   5259.615 ±(99.9%) 8082.007 B/op [Average]
[info]   (min, avg, max) = (3666.362, 5259.615, 7573.453), stdev = 2098.871
[info]   CI (99.9%): [≈ 0, 13341.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.470 ±(99.9%) 7.753 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.470, 3.734), stdev = 2.013
[info]   CI (99.9%): [≈ 0, 9.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 9.000), stdev = 2.588
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 62.59% complete, ETA 00:42:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 289805.395 ops/s
[info] # Warmup Iteration   2: 306472.181 ops/s
[info] # Warmup Iteration   3: 311267.714 ops/s
[info] # Warmup Iteration   4: 293836.901 ops/s
[info] # Warmup Iteration   5: 293664.941 ops/s
[info] Iteration   1: 310005.118 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 294168.092 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 312869.012 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 307343.766 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 313374.243 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   307552.046 ±(99.9%) 30280.808 ops/s [Average]
[info]   (min, avg, max) = (294168.092, 307552.046, 313374.243), stdev = 7863.830
[info]   CI (99.9%): [277271.238, 337832.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 62.82% complete, ETA 00:42:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10428.218 ops/s
[info] # Warmup Iteration   2: 14585.794 ops/s
[info] # Warmup Iteration   3: 15141.840 ops/s
[info] # Warmup Iteration   4: 15162.269 ops/s
[info] # Warmup Iteration   5: 15037.940 ops/s
[info] Iteration   1: 14991.422 ops/s
[info]                  ·gc.alloc.rate:            851.853 MB/sec
[info]                  ·gc.alloc.rate.norm:       89440.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1349.442 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 141684.339 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 15135.941 ops/s
[info]                  ·gc.alloc.rate:            860.060 MB/sec
[info]                  ·gc.alloc.rate.norm:       89440.044 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.697 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 70163.649 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 15134.391 ops/s
[info]                  ·gc.alloc.rate:            859.984 MB/sec
[info]                  ·gc.alloc.rate.norm:       89433.615 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.730 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 70168.284 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 15095.799 ops/s
[info]                  ·gc.alloc.rate:            857.643 MB/sec
[info]                  ·gc.alloc.rate.norm:       89424.027 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1349.408 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 140699.051 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   5: 15147.402 ops/s
[info]                  ·gc.alloc.rate:            860.675 MB/sec
[info]                  ·gc.alloc.rate.norm:       89423.900 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.767 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 70108.078 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson":
[info]   15100.991 ±(99.9%) 247.486 ops/s [Average]
[info]   (min, avg, max) = (14991.422, 15100.991, 15147.402), stdev = 64.271
[info]   CI (99.9%): [14853.505, 15348.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   858.043 ±(99.9%) 14.049 MB/sec [Average]
[info]   (min, avg, max) = (851.853, 858.043, 860.675), stdev = 3.648
[info]   CI (99.9%): [843.994, 872.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   89432.323 ±(99.9%) 31.071 B/op [Average]
[info]   (min, avg, max) = (89423.900, 89432.323, 89440.044), stdev = 8.069
[info]   CI (99.9%): [89401.252, 89463.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   944.609 ±(99.9%) 1422.986 MB/sec [Average]
[info]   (min, avg, max) = (674.697, 944.609, 1349.442), stdev = 369.545
[info]   CI (99.9%): [≈ 0, 2367.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   98564.680 ±(99.9%) 149845.995 B/op [Average]
[info]   (min, avg, max) = (70108.078, 98564.680, 141684.339), stdev = 38914.529
[info]   CI (99.9%): [≈ 0, 248410.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.600, 11.000), stdev = 3.130
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63.06% complete, ETA 00:41:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 825926.230 ops/s
[info] # Warmup Iteration   2: 878315.799 ops/s
[info] # Warmup Iteration   3: 883318.689 ops/s
[info] # Warmup Iteration   4: 883110.304 ops/s
[info] # Warmup Iteration   5: 882708.992 ops/s
[info] Iteration   1: 883192.155 ops/s
[info]                  ·gc.alloc.rate:      35.907 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 883352.023 ops/s
[info]                  ·gc.alloc.rate:      35.915 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 885823.752 ops/s
[info]                  ·gc.alloc.rate:      36.023 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 885640.734 ops/s
[info]                  ·gc.alloc.rate:      36.021 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 885425.661 ops/s
[info]                  ·gc.alloc.rate:      36.014 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala":
[info]   884686.865 ±(99.9%) 5007.376 ops/s [Average]
[info]   (min, avg, max) = (883192.155, 884686.865, 885823.752), stdev = 1300.400
[info]   CI (99.9%): [879679.489, 889694.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   35.976 ±(99.9%) 0.229 MB/sec [Average]
[info]   (min, avg, max) = (35.907, 35.976, 36.023), stdev = 0.060
[info]   CI (99.9%): [35.747, 36.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   64.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (64.000, 64.000, 64.000), stdev = 0.001
[info]   CI (99.9%): [64.000, 64.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 63.29% complete, ETA 00:41:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27024.303 ops/s
[info] # Warmup Iteration   2: 66721.081 ops/s
[info] # Warmup Iteration   3: 67902.207 ops/s
[info] # Warmup Iteration   4: 67685.123 ops/s
[info] # Warmup Iteration   5: 67949.565 ops/s
[info] Iteration   1: 68753.202 ops/s
[info]                  ·gc.alloc.rate:                                  3102.098 MB/sec
[info]                  ·gc.alloc.rate.norm:                             71024.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.065 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3406.657 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       77997.037 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   2: 69132.977 ops/s
[info]                  ·gc.alloc.rate:                                  3119.084 MB/sec
[info]                  ·gc.alloc.rate.norm:                             71024.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.112 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.032 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       62051.121 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 68921.092 ops/s
[info]                  ·gc.alloc.rate:                                  3109.892 MB/sec
[info]                  ·gc.alloc.rate.norm:                             71024.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.013 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.307 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3406.695 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       77802.432 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 68805.421 ops/s
[info]                  ·gc.alloc.rate:                                  3104.854 MB/sec
[info]                  ·gc.alloc.rate.norm:                             71024.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.052 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3407.108 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       77938.100 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   5: 69298.281 ops/s
[info]                  ·gc.alloc.rate:                                  3126.846 MB/sec
[info]                  ·gc.alloc.rate.norm:                             71024.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.097 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.428 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       61906.090 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson":
[info]   68982.194 ±(99.9%) 882.432 ops/s [Average]
[info]   (min, avg, max) = (68753.202, 68982.194, 69298.281), stdev = 229.165
[info]   CI (99.9%): [68099.763, 69864.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3112.555 ±(99.9%) 39.580 MB/sec [Average]
[info]   (min, avg, max) = (3102.098, 3112.555, 3126.846), stdev = 10.279
[info]   CI (99.9%): [3072.975, 3152.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   71024.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (71024.006, 71024.006, 71024.006), stdev = 0.001
[info]   CI (99.9%): [71024.005, 71024.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.006 ±(99.9%) 0.017 MB/sec [Average]
[info]   (min, avg, max) = (0.002, 0.006, 0.013), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.127 ±(99.9%) 0.399 B/op [Average]
[info]   (min, avg, max) = (0.052, 0.127, 0.307), stdev = 0.104
[info]   CI (99.9%): [≈ 0, 0.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   3134.184 ±(99.9%) 1437.531 MB/sec [Average]
[info]   (min, avg, max) = (2725.032, 3134.184, 3407.108), stdev = 373.322
[info]   CI (99.9%): [1696.653, 4571.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   71538.956 ±(99.9%) 33607.657 B/op [Average]
[info]   (min, avg, max) = (61906.090, 71538.956, 77997.037), stdev = 8727.802
[info]   CI (99.9%): [37931.299, 105146.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.600, 11.000), stdev = 2.793
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63.53% complete, ETA 00:41:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 633818.168 ops/s
[info] # Warmup Iteration   2: 972018.621 ops/s
[info] # Warmup Iteration   3: 975542.650 ops/s
[info] # Warmup Iteration   4: 978067.781 ops/s
[info] # Warmup Iteration   5: 958138.394 ops/s
[info] Iteration   1: 968871.211 ops/s
[info]                  ·gc.alloc.rate:            556.438 MB/sec
[info]                  ·gc.alloc.rate.norm:       904.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.332 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1100.407 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 979156.130 ops/s
[info]                  ·gc.alloc.rate:            562.303 MB/sec
[info]                  ·gc.alloc.rate.norm:       904.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.303 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1088.884 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 975112.409 ops/s
[info]                  ·gc.alloc.rate:            560.006 MB/sec
[info]                  ·gc.alloc.rate.norm:       904.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.353 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1093.430 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 979783.782 ops/s
[info]                  ·gc.alloc.rate:            562.657 MB/sec
[info]                  ·gc.alloc.rate.norm:       904.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.320 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1088.225 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 986537.711 ops/s
[info]                  ·gc.alloc.rate:      566.586 MB/sec
[info]                  ·gc.alloc.rate.norm: 904.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala":
[info]   977892.249 ±(99.9%) 25031.106 ops/s [Average]
[info]   (min, avg, max) = (968871.211, 977892.249, 986537.711), stdev = 6500.499
[info]   CI (99.9%): [952861.142, 1002923.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   561.598 ±(99.9%) 14.363 MB/sec [Average]
[info]   (min, avg, max) = (556.438, 561.598, 566.586), stdev = 3.730
[info]   CI (99.9%): [547.235, 575.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   904.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (904.000, 904.000, 904.000), stdev = 0.001
[info]   CI (99.9%): [904.000, 904.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   541.862 ±(99.9%) 1166.398 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 541.862, 677.353), stdev = 302.910
[info]   CI (99.9%): [≈ 0, 1708.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   874.189 ±(99.9%) 1881.851 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 874.189, 1100.407), stdev = 488.711
[info]   CI (99.9%): [≈ 0, 2756.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.800, 5.000), stdev = 2.168
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63.76% complete, ETA 00:41:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 658087.516 ops/s
[info] # Warmup Iteration   2: 671259.033 ops/s
[info] # Warmup Iteration   3: 673674.430 ops/s
[info] # Warmup Iteration   4: 662075.269 ops/s
[info] # Warmup Iteration   5: 692816.349 ops/s
[info] Iteration   1: 692889.140 ops/s
[info]                  ·gc.alloc.rate:      186.692 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 692778.879 ops/s
[info]                  ·gc.alloc.rate:      186.645 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 690504.349 ops/s
[info]                  ·gc.alloc.rate:            185.993 MB/sec
[info]                  ·gc.alloc.rate.norm:       424.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.019 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1545.654 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 693814.874 ops/s
[info]                  ·gc.alloc.rate:      186.913 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 693974.663 ops/s
[info]                  ·gc.alloc.rate:      186.979 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala":
[info]   692792.381 ±(99.9%) 5338.358 ops/s [Average]
[info]   (min, avg, max) = (690504.349, 692792.381, 693974.663), stdev = 1386.355
[info]   CI (99.9%): [687454.023, 698130.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   186.644 ±(99.9%) 1.505 MB/sec [Average]
[info]   (min, avg, max) = (185.993, 186.644, 186.979), stdev = 0.391
[info]   CI (99.9%): [185.139, 188.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   424.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (424.001, 424.001, 424.001), stdev = 0.001
[info]   CI (99.9%): [424.001, 424.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   135.604 ±(99.9%) 1167.589 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 135.604, 678.019), stdev = 303.219
[info]   CI (99.9%): [≈ 0, 1303.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   309.131 ±(99.9%) 2661.710 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 309.131, 1545.654), stdev = 691.238
[info]   CI (99.9%): [≈ 0, 2970.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 4.000), stdev = 1.789
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 64.00% complete, ETA 00:40:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1347418.489 ops/s
[info] # Warmup Iteration   2: 1513989.742 ops/s
[info] # Warmup Iteration   3: 1433394.333 ops/s
[info] # Warmup Iteration   4: 1517445.266 ops/s
[info] # Warmup Iteration   5: 1518083.445 ops/s
[info] Iteration   1: 1517621.633 ops/s
[info]                  ·gc.alloc.rate:      15.427 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1518802.445 ops/s
[info]                  ·gc.alloc.rate:      15.438 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1517454.040 ops/s
[info]                  ·gc.alloc.rate:      15.425 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1518086.951 ops/s
[info]                  ·gc.alloc.rate:      15.433 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1518079.249 ops/s
[info]                  ·gc.alloc.rate:      15.433 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc":
[info]   1518008.864 ±(99.9%) 2018.009 ops/s [Average]
[info]   (min, avg, max) = (1517454.040, 1518008.864, 1518802.445), stdev = 524.071
[info]   CI (99.9%): [1515990.854, 1520026.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   15.431 ±(99.9%) 0.019 MB/sec [Average]
[info]   (min, avg, max) = (15.425, 15.431, 15.438), stdev = 0.005
[info]   CI (99.9%): [15.412, 15.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.000, 16.000, 16.000), stdev = 0.001
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 64.24% complete, ETA 00:40:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19314.141 ops/s
[info] # Warmup Iteration   2: 39432.880 ops/s
[info] # Warmup Iteration   3: 39098.721 ops/s
[info] # Warmup Iteration   4: 39387.740 ops/s
[info] # Warmup Iteration   5: 39311.911 ops/s
[info] Iteration   1: 39406.399 ops/s
[info]                  ·gc.alloc.rate:            1653.895 MB/sec
[info]                  ·gc.alloc.rate.norm:       66064.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.700 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 54112.843 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 39471.952 ops/s
[info]                  ·gc.alloc.rate:                   1656.568 MB/sec
[info]                  ·gc.alloc.rate.norm:              66064.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.990 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        53997.189 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 185.922 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 39670.711 ops/s
[info]                  ·gc.alloc.rate:                                  1664.921 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66064.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.028 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.127 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2043.925 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       81102.844 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 39844.825 ops/s
[info]                  ·gc.alloc.rate:                                  1672.390 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66064.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.052 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.787 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       53833.848 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 39740.474 ops/s
[info]                  ·gc.alloc.rate:            1667.954 MB/sec
[info]                  ·gc.alloc.rate.norm:       66064.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.093 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 80962.055 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson":
[info]   39626.872 ±(99.9%) 707.251 ops/s [Average]
[info]   (min, avg, max) = (39406.399, 39626.872, 39844.825), stdev = 183.671
[info]   CI (99.9%): [38919.621, 40334.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1663.146 ±(99.9%) 29.862 MB/sec [Average]
[info]   (min, avg, max) = (1653.895, 1663.146, 1672.390), stdev = 7.755
[info]   CI (99.9%): [1633.283, 1693.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   66064.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (66064.010, 66064.010, 66064.011), stdev = 0.001
[info]   CI (99.9%): [66064.009, 66064.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.006 ±(99.9%) 0.048 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.028), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.236 ±(99.9%) 1.921 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.236, 1.127), stdev = 0.499
[info]   CI (99.9%): [≈ 0, 2.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1631.899 ±(99.9%) 1448.685 MB/sec [Average]
[info]   (min, avg, max) = (1353.990, 1631.899, 2044.093), stdev = 376.219
[info]   CI (99.9%): [183.214, 3080.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   64801.755 ±(99.9%) 57054.774 B/op [Average]
[info]   (min, avg, max) = (53833.848, 64801.755, 81102.844), stdev = 14816.944
[info]   CI (99.9%): [7746.981, 121856.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   37.184 ±(99.9%) 320.170 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 37.184, 185.922), stdev = 83.147
[info]   CI (99.9%): [≈ 0, 357.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.200, 11.000), stdev = 3.701
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce
[info] # Run progress: 64.47% complete, ETA 00:40:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 360162.793 ops/s
[info] # Warmup Iteration   2: 627072.514 ops/s
[info] # Warmup Iteration   3: 638625.566 ops/s
[info] # Warmup Iteration   4: 653084.455 ops/s
[info] # Warmup Iteration   5: 636690.731 ops/s
[info] Iteration   1: 634249.390 ops/s
[info]                  ·gc.alloc.rate:                   2024.286 MB/sec
[info]                  ·gc.alloc.rate.norm:              5024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2033.819 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5047.659 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 8.264 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 638088.663 ops/s
[info]                  ·gc.alloc.rate:                                  2037.094 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5024.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.136 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.334 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.538 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5042.360 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 634782.647 ops/s
[info]                  ·gc.alloc.rate:            2026.161 MB/sec
[info]                  ·gc.alloc.rate.norm:       5024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.141 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5068.584 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   4: 632913.707 ops/s
[info]                  ·gc.alloc.rate:                                  2020.073 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5024.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.068 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5083.678 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 648071.199 ops/s
[info]                  ·gc.alloc.rate:                                  2068.552 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5024.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.071 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4964.541 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce":
[info]   637621.121 ±(99.9%) 23659.378 ops/s [Average]
[info]   (min, avg, max) = (632913.707, 637621.121, 648071.199), stdev = 6144.265
[info]   CI (99.9%): [613961.743, 661280.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate":
[info]   2035.233 ±(99.9%) 75.693 MB/sec [Average]
[info]   (min, avg, max) = (2020.073, 2035.233, 2068.552), stdev = 19.657
[info]   CI (99.9%): [1959.540, 2110.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5024.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5024.001, 5024.001, 5024.001), stdev = 0.001
[info]   CI (99.9%): [5024.001, 5024.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.028 ±(99.9%) 0.232 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.136), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.068 ±(99.9%) 0.573 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.068, 0.334), stdev = 0.149
[info]   CI (99.9%): [≈ 0, 0.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2042.127 ±(99.9%) 17.901 MB/sec [Average]
[info]   (min, avg, max) = (2033.819, 2042.127, 2044.538), stdev = 4.649
[info]   CI (99.9%): [2024.226, 2060.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5041.364 ±(99.9%) 177.233 B/op [Average]
[info]   (min, avg, max) = (4964.541, 5041.364, 5083.678), stdev = 46.027
[info]   CI (99.9%): [4864.132, 5218.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.653 ±(99.9%) 14.231 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.653, 8.264), stdev = 3.696
[info]   CI (99.9%): [≈ 0, 15.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.800, 11.000), stdev = 3.421
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava
[info] # Run progress: 64.71% complete, ETA 00:39:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.926 ops/s
[info] # Warmup Iteration   2: 4872108.537 ops/s
[info] # Warmup Iteration   3: 5075523.475 ops/s
[info] # Warmup Iteration   4: 5035931.155 ops/s
[info] # Warmup Iteration   5: 5317672.372 ops/s
[info] Iteration   1: 5263698.675 ops/s
[info]                  ·gc.alloc.rate:            321.036 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.730 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 201.766 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 5186073.410 ops/s
[info]                  ·gc.alloc.rate:      316.308 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 5127717.230 ops/s
[info]                  ·gc.alloc.rate:            312.748 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.747 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 207.118 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 5310898.653 ops/s
[info]                  ·gc.alloc.rate:      323.906 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 5191040.504 ops/s
[info]                  ·gc.alloc.rate:            316.676 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.850 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 204.580 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava":
[info]   5215885.694 ±(99.9%) 276290.594 ops/s [Average]
[info]   (min, avg, max) = (5127717.230, 5215885.694, 5310898.653), stdev = 71751.790
[info]   CI (99.9%): [4939595.101, 5492176.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   318.135 ±(99.9%) 16.807 MB/sec [Average]
[info]   (min, avg, max) = (312.748, 318.135, 323.906), stdev = 4.365
[info]   CI (99.9%): [301.328, 334.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   96.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (96.000, 96.000, 96.000), stdev = 0.001
[info]   CI (99.9%): [96.000, 96.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   404.865 ±(99.9%) 1423.159 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.865, 674.850), stdev = 369.590
[info]   CI (99.9%): [≈ 0, 1828.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   122.693 ±(99.9%) 431.344 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 122.693, 207.118), stdev = 112.019
[info]   CI (99.9%): [≈ 0, 554.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.200, 6.000), stdev = 2.950
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala
[info] # Run progress: 64.94% complete, ETA 00:39:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 146364.116 ops/s
[info] # Warmup Iteration   2: 774790.365 ops/s
[info] # Warmup Iteration   3: 770962.394 ops/s
[info] # Warmup Iteration   4: 778767.096 ops/s
[info] # Warmup Iteration   5: 775947.411 ops/s
[info] Iteration   1: 770459.298 ops/s
[info]                  ·gc.alloc.rate:            955.372 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.655 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2767.808 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 776980.154 ops/s
[info]                  ·gc.alloc.rate:            963.489 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.666 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1370.906 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 773371.285 ops/s
[info]                  ·gc.alloc.rate:                   959.019 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.018 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2755.986 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.356 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 784710.052 ops/s
[info]                  ·gc.alloc.rate:            973.120 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.370 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1358.749 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 786726.841 ops/s
[info]                  ·gc.alloc.rate:            975.649 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.740 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2710.456 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala":
[info]   778449.526 ±(99.9%) 27194.071 ops/s [Average]
[info]   (min, avg, max) = (770459.298, 778449.526, 786726.841), stdev = 7062.214
[info]   CI (99.9%): [751255.455, 805643.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   965.330 ±(99.9%) 33.874 MB/sec [Average]
[info]   (min, avg, max) = (955.372, 965.330, 975.649), stdev = 8.797
[info]   CI (99.9%): [931.456, 999.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1952.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1952.001, 1952.001, 1952.001), stdev = 0.001
[info]   CI (99.9%): [1952.000, 1952.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1083.490 ±(99.9%) 1428.806 MB/sec [Average]
[info]   (min, avg, max) = (676.666, 1083.490, 1354.740), stdev = 371.056
[info]   CI (99.9%): [≈ 0, 2512.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   2192.781 ±(99.9%) 2911.588 B/op [Average]
[info]   (min, avg, max) = (1358.749, 2192.781, 2767.808), stdev = 756.130
[info]   CI (99.9%): [≈ 0, 5104.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.271 ±(99.9%) 2.334 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.271, 1.356), stdev = 0.606
[info]   CI (99.9%): [≈ 0, 2.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 8.000, 10.000), stdev = 2.739
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala
[info] # Run progress: 65.18% complete, ETA 00:39:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6462882.288 ops/s
[info] # Warmup Iteration   2: 7177716.449 ops/s
[info] # Warmup Iteration   3: 6615785.716 ops/s
[info] # Warmup Iteration   4: 7111542.092 ops/s
[info] # Warmup Iteration   5: 6861125.306 ops/s
[info] Iteration   1: 7109901.238 ops/s
[info]                  ·gc.alloc.rate:      325.203 MB/sec
[info]                  ·gc.alloc.rate.norm: 72.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 7121523.436 ops/s
[info]                  ·gc.alloc.rate:            325.757 MB/sec
[info]                  ·gc.alloc.rate.norm:       72.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.076 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 149.871 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 7156323.962 ops/s
[info]                  ·gc.alloc.rate:      327.318 MB/sec
[info]                  ·gc.alloc.rate.norm: 72.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 7050393.582 ops/s
[info]                  ·gc.alloc.rate:            322.530 MB/sec
[info]                  ·gc.alloc.rate.norm:       72.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.100 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 151.376 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 7169702.104 ops/s
[info]                  ·gc.alloc.rate:      327.962 MB/sec
[info]                  ·gc.alloc.rate.norm: 72.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala":
[info]   7121568.865 ±(99.9%) 179858.277 ops/s [Average]
[info]   (min, avg, max) = (7050393.582, 7121568.865, 7169702.104), stdev = 46708.623
[info]   CI (99.9%): [6941710.588, 7301427.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   325.754 ±(99.9%) 8.173 MB/sec [Average]
[info]   (min, avg, max) = (322.530, 325.754, 327.962), stdev = 2.123
[info]   CI (99.9%): [317.581, 333.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   72.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (72.000, 72.000, 72.000), stdev = 0.001
[info]   CI (99.9%): [72.000, 72.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   271.235 ±(99.9%) 1430.145 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 271.235, 678.100), stdev = 371.404
[info]   CI (99.9%): [≈ 0, 1701.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   60.249 ±(99.9%) 317.684 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 60.249, 151.376), stdev = 82.502
[info]   CI (99.9%): [≈ 0, 377.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.643
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson
[info] # Run progress: 65.41% complete, ETA 00:39:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24853.898 ops/s
[info] # Warmup Iteration   2: 255926.024 ops/s
[info] # Warmup Iteration   3: 275320.411 ops/s
[info] # Warmup Iteration   4: 274207.931 ops/s
[info] # Warmup Iteration   5: 274529.593 ops/s
[info] Iteration   1: 273450.304 ops/s
[info]                  ·gc.alloc.rate:            1417.622 MB/sec
[info]                  ·gc.alloc.rate.norm:       8160.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.506 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7790.944 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 274378.394 ops/s
[info]                  ·gc.alloc.rate:                   1422.383 MB/sec
[info]                  ·gc.alloc.rate.norm:              8160.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.464 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        7764.626 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.821 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 275552.691 ops/s
[info]                  ·gc.alloc.rate:            1428.516 MB/sec
[info]                  ·gc.alloc.rate.norm:       8160.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.763 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7738.709 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 274727.914 ops/s
[info]                  ·gc.alloc.rate:                   1424.425 MB/sec
[info]                  ·gc.alloc.rate.norm:              8160.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1358.240 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        7780.854 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 26.712 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 276172.743 ops/s
[info]                  ·gc.alloc.rate:                                  1431.754 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8160.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.136 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.774 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.162 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11650.296 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson":
[info]   274856.409 ±(99.9%) 4056.761 ops/s [Average]
[info]   (min, avg, max) = (273450.304, 274856.409, 276172.743), stdev = 1053.528
[info]   CI (99.9%): [270799.648, 278913.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1424.940 ±(99.9%) 21.055 MB/sec [Average]
[info]   (min, avg, max) = (1417.622, 1424.940, 1431.754), stdev = 5.468
[info]   CI (99.9%): [1403.885, 1445.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8160.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8160.001, 8160.002, 8160.002), stdev = 0.001
[info]   CI (99.9%): [8160.001, 8160.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.027 ±(99.9%) 0.234 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.136), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.155 ±(99.9%) 1.333 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.155, 0.774), stdev = 0.346
[info]   CI (99.9%): [≈ 0, 1.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1492.827 ±(99.9%) 1186.813 MB/sec [Average]
[info]   (min, avg, max) = (1353.464, 1492.827, 2044.162), stdev = 308.212
[info]   CI (99.9%): [306.014, 2679.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   8545.086 ±(99.9%) 6684.631 B/op [Average]
[info]   (min, avg, max) = (7738.709, 8545.086, 11650.296), stdev = 1735.978
[info]   CI (99.9%): [1860.454, 15229.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.822 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.663), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   6.107 ±(99.9%) 44.810 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.107, 26.712), stdev = 11.637
[info]   CI (99.9%): [≈ 0, 50.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.000, 10.000), stdev = 2.550
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce
[info] # Run progress: 65.65% complete, ETA 00:38:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2095.241 ops/s
[info] # Warmup Iteration   2: 3529.832 ops/s
[info] # Warmup Iteration   3: 3553.451 ops/s
[info] # Warmup Iteration   4: 3607.042 ops/s
[info] # Warmup Iteration   5: 3642.056 ops/s
[info] Iteration   1: 3646.660 ops/s
[info]                  ·gc.alloc.rate:                   1722.206 MB/sec
[info]                  ·gc.alloc.rate.norm:              743312.112 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2033.227 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        877550.035 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 287.439 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 3665.759 ops/s
[info]                  ·gc.alloc.rate:                                  1731.652 MB/sec
[info]                  ·gc.alloc.rate.norm:                             743312.111 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.085 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 36.298 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1359.632 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       583622.475 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1429.746 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 3667.467 ops/s
[info]                  ·gc.alloc.rate:                                  1732.182 MB/sec
[info]                  ·gc.alloc.rate.norm:                             743312.111 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.138 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 59.290 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2043.956 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       877099.957 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 3618.103 ops/s
[info]                  ·gc.alloc.rate:                                  1708.670 MB/sec
[info]                  ·gc.alloc.rate.norm:                             743312.122 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.154 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 66.838 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.711 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       592811.964 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 3621.064 ops/s
[info]                  ·gc.alloc.rate:                                  1709.926 MB/sec
[info]                  ·gc.alloc.rate.norm:                             743312.113 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.298 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 129.679 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2043.876 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       888481.431 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce":
[info]   3643.811 ±(99.9%) 90.874 ops/s [Average]
[info]   (min, avg, max) = (3618.103, 3643.811, 3667.467), stdev = 23.600
[info]   CI (99.9%): [3552.936, 3734.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.alloc.rate":
[info]   1720.927 ±(99.9%) 43.676 MB/sec [Average]
[info]   (min, avg, max) = (1708.670, 1720.927, 1732.182), stdev = 11.342
[info]   CI (99.9%): [1677.251, 1764.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   743312.114 ±(99.9%) 0.017 B/op [Average]
[info]   (min, avg, max) = (743312.111, 743312.114, 743312.122), stdev = 0.004
[info]   CI (99.9%): [743312.097, 743312.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.135 ±(99.9%) 0.421 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.135, 0.298), stdev = 0.109
[info]   CI (99.9%): [≈ 0, 0.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   58.421 ±(99.9%) 183.176 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 58.421, 129.679), stdev = 47.570
[info]   CI (99.9%): [≈ 0, 241.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1768.680 ±(99.9%) 1432.555 MB/sec [Average]
[info]   (min, avg, max) = (1359.632, 1768.680, 2043.956), stdev = 372.030
[info]   CI (99.9%): [336.125, 3201.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   763913.172 ±(99.9%) 617971.953 B/op [Average]
[info]   (min, avg, max) = (583622.475, 763913.172, 888481.431), stdev = 160485.354
[info]   CI (99.9%): [145941.219, 1381885.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.561 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.331), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   343.437 ±(99.9%) 2386.973 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 343.437, 1429.746), stdev = 619.889
[info]   CI (99.9%): [≈ 0, 2730.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 12.000), stdev = 3.633
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala
[info] # Run progress: 65.88% complete, ETA 00:38:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2047.599 ops/s
[info] # Warmup Iteration   2: 4512.054 ops/s
[info] # Warmup Iteration   3: 4777.839 ops/s
[info] # Warmup Iteration   4: 4774.743 ops/s
[info] # Warmup Iteration   5: 4764.080 ops/s
[info] Iteration   1: 4773.679 ops/s
[info]                  ·gc.alloc.rate:                   1972.411 MB/sec
[info]                  ·gc.alloc.rate.norm:              650392.085 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2029.848 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        669331.863 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1317.582 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   2: 4817.386 ops/s
[info]                  ·gc.alloc.rate:                                  1990.806 MB/sec
[info]                  ·gc.alloc.rate.norm:                             650392.091 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.016 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.238 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2043.394 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       667572.353 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                217.592 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 4837.145 ops/s
[info]                  ·gc.alloc.rate:                                  1998.677 MB/sec
[info]                  ·gc.alloc.rate.norm:                             650392.084 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.013 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.074 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.082 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       665167.372 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 4734.702 ops/s
[info]                  ·gc.alloc.rate:                                  1957.062 MB/sec
[info]                  ·gc.alloc.rate.norm:                             650392.086 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.013 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.260 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.629 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       679493.189 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 4738.079 ops/s
[info]                  ·gc.alloc.rate:                                  1958.010 MB/sec
[info]                  ·gc.alloc.rate.norm:                             650392.093 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.017 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.661 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2043.893 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       678919.777 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala":
[info]   4780.198 ±(99.9%) 177.634 ops/s [Average]
[info]   (min, avg, max) = (4734.702, 4780.198, 4837.145), stdev = 46.131
[info]   CI (99.9%): [4602.564, 4957.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1975.393 ±(99.9%) 72.725 MB/sec [Average]
[info]   (min, avg, max) = (1957.062, 1975.393, 1998.677), stdev = 18.887
[info]   CI (99.9%): [1902.668, 2048.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   650392.088 ±(99.9%) 0.015 B/op [Average]
[info]   (min, avg, max) = (650392.084, 650392.088, 650392.093), stdev = 0.004
[info]   CI (99.9%): [650392.073, 650392.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.026 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.017), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   3.847 ±(99.9%) 8.663 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.847, 5.661), stdev = 2.250
[info]   CI (99.9%): [≈ 0, 12.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   2041.169 ±(99.9%) 24.428 MB/sec [Average]
[info]   (min, avg, max) = (2029.848, 2041.169, 2044.629), stdev = 6.344
[info]   CI (99.9%): [2016.741, 2065.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   672096.911 ±(99.9%) 25643.096 B/op [Average]
[info]   (min, avg, max) = (665167.372, 672096.911, 679493.189), stdev = 6659.431
[info]   CI (99.9%): [646453.815, 697740.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.687 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   307.035 ±(99.9%) 2205.328 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 307.035, 1317.582), stdev = 572.717
[info]   CI (99.9%): [≈ 0, 2512.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 16.000), stdev = 5.413
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala
[info] # Run progress: 66.12% complete, ETA 00:38:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37182.721 ops/s
[info] # Warmup Iteration   2: 40792.865 ops/s
[info] # Warmup Iteration   3: 40513.241 ops/s
[info] # Warmup Iteration   4: 41243.109 ops/s
[info] # Warmup Iteration   5: 41702.766 ops/s
[info] Iteration   1: 42213.196 ops/s
[info]                  ·gc.alloc.rate:            702.363 MB/sec
[info]                  ·gc.alloc.rate.norm:       26184.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1357.692 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 50614.573 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 42381.922 ops/s
[info]                  ·gc.alloc.rate:            705.013 MB/sec
[info]                  ·gc.alloc.rate.norm:       26184.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.723 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25207.581 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 42407.036 ops/s
[info]                  ·gc.alloc.rate:            705.510 MB/sec
[info]                  ·gc.alloc.rate.norm:       26184.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.817 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25193.317 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 42150.812 ops/s
[info]                  ·gc.alloc.rate:            701.169 MB/sec
[info]                  ·gc.alloc.rate.norm:       26184.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.736 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25346.308 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 42391.569 ops/s
[info]                  ·gc.alloc.rate:            705.552 MB/sec
[info]                  ·gc.alloc.rate.norm:       26184.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      679.065 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25201.041 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala":
[info]   42308.907 ±(99.9%) 455.404 ops/s [Average]
[info]   (min, avg, max) = (42150.812, 42308.907, 42407.036), stdev = 118.267
[info]   CI (99.9%): [41853.503, 42764.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   703.922 ±(99.9%) 7.793 MB/sec [Average]
[info]   (min, avg, max) = (701.169, 703.922, 705.552), stdev = 2.024
[info]   CI (99.9%): [696.129, 711.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   26184.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (26184.010, 26184.010, 26184.010), stdev = 0.001
[info]   CI (99.9%): [26184.010, 26184.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   814.607 ±(99.9%) 1169.032 MB/sec [Average]
[info]   (min, avg, max) = (678.723, 814.607, 1357.692), stdev = 303.594
[info]   CI (99.9%): [≈ 0, 1983.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   30312.564 ±(99.9%) 43702.285 B/op [Average]
[info]   (min, avg, max) = (25193.317, 30312.564, 50614.573), stdev = 11349.345
[info]   CI (99.9%): [≈ 0, 74014.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 7.000), stdev = 1.732
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce
[info] # Run progress: 66.35% complete, ETA 00:38:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2710.213 ops/s
[info] # Warmup Iteration   2: 3953.377 ops/s
[info] # Warmup Iteration   3: 4113.384 ops/s
[info] # Warmup Iteration   4: 4129.672 ops/s
[info] # Warmup Iteration   5: 4149.474 ops/s
[info] Iteration   1: 4150.445 ops/s
[info]                  ·gc.alloc.rate:            763.879 MB/sec
[info]                  ·gc.alloc.rate.norm:       289616.106 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.097 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 257093.056 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 4165.860 ops/s
[info]                  ·gc.alloc.rate:            766.564 MB/sec
[info]                  ·gc.alloc.rate.norm:       289616.098 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.032 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 256167.595 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 4164.523 ops/s
[info]                  ·gc.alloc.rate:            766.352 MB/sec
[info]                  ·gc.alloc.rate.norm:       289616.098 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.006 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 256229.085 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 4161.864 ops/s
[info]                  ·gc.alloc.rate:            765.892 MB/sec
[info]                  ·gc.alloc.rate.norm:       289616.098 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.088 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 256413.732 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 4163.161 ops/s
[info]                  ·gc.alloc.rate:            766.041 MB/sec
[info]                  ·gc.alloc.rate.norm:       289616.106 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.057 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 256352.154 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce":
[info]   4161.171 ±(99.9%) 23.792 ops/s [Average]
[info]   (min, avg, max) = (4150.445, 4161.171, 4165.860), stdev = 6.179
[info]   CI (99.9%): [4137.379, 4184.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.alloc.rate":
[info]   765.745 ±(99.9%) 4.143 MB/sec [Average]
[info]   (min, avg, max) = (763.879, 765.745, 766.564), stdev = 1.076
[info]   CI (99.9%): [761.602, 769.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   289616.101 ±(99.9%) 0.017 B/op [Average]
[info]   (min, avg, max) = (289616.098, 289616.101, 289616.106), stdev = 0.004
[info]   CI (99.9%): [289616.084, 289616.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   678.056 ±(99.9%) 0.147 MB/sec [Average]
[info]   (min, avg, max) = (678.006, 678.056, 678.097), stdev = 0.038
[info]   CI (99.9%): [677.909, 678.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   256451.124 ±(99.9%) 1431.694 B/op [Average]
[info]   (min, avg, max) = (256167.595, 256451.124, 257093.056), stdev = 371.806
[info]   CI (99.9%): [255019.430, 257882.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala
[info] # Run progress: 66.59% complete, ETA 00:37:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_5cbb92e4/target/1bdf7fe1/jackson-module-afterburner-2.9.5.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 2055.741 ops/s
[info] # Warmup Iteration   2: 4271.892 ops/s
[info] # Warmup Iteration   3: 4328.341 ops/s
[info] # Warmup Iteration   4: 4275.375 ops/s
[info] # Warmup Iteration   5: 4383.797 ops/s
[info] Iteration   1: 4348.244 ops/s
[info]                  ·gc.alloc.rate:                   436.080 MB/sec
[info]                  ·gc.alloc.rate.norm:              157862.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.028 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        244723.992 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 241.107 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 4336.936 ops/s
[info]                  ·gc.alloc.rate:            435.137 MB/sec
[info]                  ·gc.alloc.rate.norm:       157861.704 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.945 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 245586.265 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 4331.224 ops/s
[info]                  ·gc.alloc.rate:      434.333 MB/sec
[info]                  ·gc.alloc.rate.norm: 157860.571 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 4336.662 ops/s
[info]                  ·gc.alloc.rate:            434.928 MB/sec
[info]                  ·gc.alloc.rate.norm:       157861.442 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.620 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 245586.265 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 4338.740 ops/s
[info]                  ·gc.alloc.rate:            435.192 MB/sec
[info]                  ·gc.alloc.rate.norm:       157861.082 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.055 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 245231.484 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala":
[info]   4338.361 ±(99.9%) 23.867 ops/s [Average]
[info]   (min, avg, max) = (4331.224, 4338.361, 4348.244), stdev = 6.198
[info]   CI (99.9%): [4314.494, 4362.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   435.134 ±(99.9%) 2.422 MB/sec [Average]
[info]   (min, avg, max) = (434.333, 435.134, 436.080), stdev = 0.629
[info]   CI (99.9%): [432.712, 437.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   157861.364 ±(99.9%) 2.163 B/op [Average]
[info]   (min, avg, max) = (157860.571, 157861.364, 157862.021), stdev = 0.562
[info]   CI (99.9%): [157859.201, 157863.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   541.130 ±(99.9%) 1164.823 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 541.130, 676.945), stdev = 302.501
[info]   CI (99.9%): [≈ 0, 1705.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   196225.601 ±(99.9%) 422392.591 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 196225.601, 245586.265), stdev = 109694.014
[info]   CI (99.9%): [≈ 0, 618618.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   48.221 ±(99.9%) 415.201 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 48.221, 241.107), stdev = 107.826
[info]   CI (99.9%): [≈ 0, 463.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.200, 6.000), stdev = 2.387
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala
[info] # Run progress: 66.82% complete, ETA 00:37:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5867.627 ops/s
[info] # Warmup Iteration   2: 6504.859 ops/s
[info] # Warmup Iteration   3: 6495.611 ops/s
[info] # Warmup Iteration   4: 6359.240 ops/s
[info] # Warmup Iteration   5: 6509.381 ops/s
[info] Iteration   1: 6503.508 ops/s
[info]                  ·gc.alloc.rate:      173.759 MB/sec
[info]                  ·gc.alloc.rate.norm: 42056.068 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 6501.747 ops/s
[info]                  ·gc.alloc.rate:      173.757 MB/sec
[info]                  ·gc.alloc.rate.norm: 42056.063 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 6462.986 ops/s
[info]                  ·gc.alloc.rate:            172.679 MB/sec
[info]                  ·gc.alloc.rate.norm:       42056.063 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.939 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 165112.199 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 6497.055 ops/s
[info]                  ·gc.alloc.rate:      173.666 MB/sec
[info]                  ·gc.alloc.rate.norm: 42056.063 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 6502.398 ops/s
[info]                  ·gc.alloc.rate:      173.748 MB/sec
[info]                  ·gc.alloc.rate.norm: 42056.063 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala":
[info]   6493.539 ±(99.9%) 66.447 ops/s [Average]
[info]   (min, avg, max) = (6462.986, 6493.539, 6503.508), stdev = 17.256
[info]   CI (99.9%): [6427.091, 6559.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   173.522 ±(99.9%) 1.820 MB/sec [Average]
[info]   (min, avg, max) = (172.679, 173.522, 173.759), stdev = 0.473
[info]   CI (99.9%): [171.702, 175.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   42056.064 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (42056.063, 42056.064, 42056.068), stdev = 0.002
[info]   CI (99.9%): [42056.056, 42056.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   135.588 ±(99.9%) 1167.451 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 135.588, 677.939), stdev = 303.183
[info]   CI (99.9%): [≈ 0, 1303.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   33022.440 ±(99.9%) 284333.166 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 33022.440, 165112.199), stdev = 73840.420
[info]   CI (99.9%): [≈ 0, 317355.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 4.000), stdev = 1.789
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 67.06% complete, ETA 00:37:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5975.181 ops/s
[info] # Warmup Iteration   2: 6643.801 ops/s
[info] # Warmup Iteration   3: 6645.367 ops/s
[info] # Warmup Iteration   4: 6663.647 ops/s
[info] # Warmup Iteration   5: 6567.672 ops/s
[info] Iteration   1: 6447.236 ops/s
[info]                  ·gc.alloc.rate:            125.143 MB/sec
[info]                  ·gc.alloc.rate.norm:       30552.063 B/op
[info]                  ·gc.churn.G1_Old_Gen:      681.982 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 166497.414 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 6640.681 ops/s
[info]                  ·gc.alloc.rate:      128.890 MB/sec
[info]                  ·gc.alloc.rate.norm: 30552.061 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 6642.924 ops/s
[info]                  ·gc.alloc.rate:      128.967 MB/sec
[info]                  ·gc.alloc.rate.norm: 30552.061 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 6633.697 ops/s
[info]                  ·gc.alloc.rate:      128.770 MB/sec
[info]                  ·gc.alloc.rate.norm: 30552.061 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 6629.568 ops/s
[info]                  ·gc.alloc.rate:      128.686 MB/sec
[info]                  ·gc.alloc.rate.norm: 30552.062 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc":
[info]   6598.821 ±(99.9%) 326.948 ops/s [Average]
[info]   (min, avg, max) = (6447.236, 6598.821, 6642.924), stdev = 84.907
[info]   CI (99.9%): [6271.873, 6925.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   128.091 ±(99.9%) 6.360 MB/sec [Average]
[info]   (min, avg, max) = (125.143, 128.091, 128.967), stdev = 1.652
[info]   CI (99.9%): [121.731, 134.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   30552.062 ±(99.9%) 0.003 B/op [Average]
[info]   (min, avg, max) = (30552.061, 30552.062, 30552.063), stdev = 0.001
[info]   CI (99.9%): [30552.059, 30552.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   136.396 ±(99.9%) 1174.414 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 136.396, 681.982), stdev = 304.992
[info]   CI (99.9%): [≈ 0, 1310.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   33299.483 ±(99.9%) 286718.590 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 33299.483, 166497.414), stdev = 74459.907
[info]   CI (99.9%): [≈ 0, 320018.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   3.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 3.000), stdev = 1.342
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce
[info] # Run progress: 67.29% complete, ETA 00:37:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4845.675 ops/s
[info] # Warmup Iteration   2: 7135.422 ops/s
[info] # Warmup Iteration   3: 7309.385 ops/s
[info] # Warmup Iteration   4: 7266.423 ops/s
[info] # Warmup Iteration   5: 7319.299 ops/s
[info] Iteration   1: 7352.058 ops/s
[info]                  ·gc.alloc.rate:            1674.603 MB/sec
[info]                  ·gc.alloc.rate.norm:       358544.055 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.887 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 290304.696 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 7350.772 ops/s
[info]                  ·gc.alloc.rate:                   1674.464 MB/sec
[info]                  ·gc.alloc.rate.norm:              358544.060 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2033.937 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        435516.266 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 713.026 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 7429.472 ops/s
[info]                  ·gc.alloc.rate:                                  1692.118 MB/sec
[info]                  ·gc.alloc.rate.norm:                             358544.059 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.099 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 20.987 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.531 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       288707.643 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 7222.948 ops/s
[info]                  ·gc.alloc.rate:                                  1645.366 MB/sec
[info]                  ·gc.alloc.rate.norm:                             358550.079 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.055 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 11.978 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2043.956 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       445408.961 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        18.000 ms
[info] Iteration   5: 7407.107 ops/s
[info]                  ·gc.alloc.rate:            1688.139 MB/sec
[info]                  ·gc.alloc.rate.norm:       358568.055 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1363.272 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 289564.921 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce":
[info]   7352.472 ±(99.9%) 308.614 ops/s [Average]
[info]   (min, avg, max) = (7222.948, 7352.472, 7429.472), stdev = 80.146
[info]   CI (99.9%): [7043.858, 7661.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1674.938 ±(99.9%) 70.590 MB/sec [Average]
[info]   (min, avg, max) = (1645.366, 1674.938, 1692.118), stdev = 18.332
[info]   CI (99.9%): [1604.348, 1745.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   358550.062 ±(99.9%) 40.012 B/op [Average]
[info]   (min, avg, max) = (358544.055, 358550.062, 358568.055), stdev = 10.391
[info]   CI (99.9%): [358510.050, 358590.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.031 ±(99.9%) 0.173 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.099), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   6.593 ±(99.9%) 36.863 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.593, 20.987), stdev = 9.573
[info]   CI (99.9%): [≈ 0, 43.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1631.917 ±(99.9%) 1430.876 MB/sec [Average]
[info]   (min, avg, max) = (1355.887, 1631.917, 2043.956), stdev = 371.594
[info]   CI (99.9%): [201.041, 3062.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   349900.497 ±(99.9%) 318630.799 B/op [Average]
[info]   (min, avg, max) = (288707.643, 349900.497, 445408.961), stdev = 82747.407
[info]   CI (99.9%): [31269.698, 668531.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   142.605 ±(99.9%) 1227.874 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 142.605, 713.026), stdev = 318.875
[info]   CI (99.9%): [≈ 0, 1370.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 9.000, 18.000), stdev = 5.831
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava
[info] # Run progress: 67.53% complete, ETA 00:36:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 128.923 ops/s
[info] # Warmup Iteration   2: 11130.062 ops/s
[info] # Warmup Iteration   3: 11260.232 ops/s
[info] # Warmup Iteration   4: 11191.347 ops/s
[info] # Warmup Iteration   5: 11287.407 ops/s
[info] Iteration   1: 11287.934 ops/s
[info]                  ·gc.alloc.rate:      260.223 MB/sec
[info]                  ·gc.alloc.rate.norm: 36280.036 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 10681.885 ops/s
[info]                  ·gc.alloc.rate:            246.267 MB/sec
[info]                  ·gc.alloc.rate.norm:       36280.038 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.859 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 99420.394 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 11286.048 ops/s
[info]                  ·gc.alloc.rate:      260.171 MB/sec
[info]                  ·gc.alloc.rate.norm: 36280.042 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 11226.182 ops/s
[info]                  ·gc.alloc.rate:            258.754 MB/sec
[info]                  ·gc.alloc.rate.norm:       36280.036 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.723 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 94603.446 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 11299.156 ops/s
[info]                  ·gc.alloc.rate:      260.472 MB/sec
[info]                  ·gc.alloc.rate.norm: 36280.036 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava":
[info]   11156.241 ±(99.9%) 1026.980 ops/s [Average]
[info]   (min, avg, max) = (10681.885, 11156.241, 11299.156), stdev = 266.703
[info]   CI (99.9%): [10129.261, 12183.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   257.177 ±(99.9%) 23.629 MB/sec [Average]
[info]   (min, avg, max) = (246.267, 257.177, 260.472), stdev = 6.136
[info]   CI (99.9%): [233.548, 280.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   36280.038 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (36280.036, 36280.038, 36280.042), stdev = 0.002
[info]   CI (99.9%): [36280.028, 36280.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   269.917 ±(99.9%) 1423.192 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.917, 674.859), stdev = 369.598
[info]   CI (99.9%): [≈ 0, 1693.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   38804.768 ±(99.9%) 204711.406 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 38804.768, 99420.394), stdev = 53162.902
[info]   CI (99.9%): [≈ 0, 243516.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 6.000), stdev = 3.033
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala
[info] # Run progress: 67.76% complete, ETA 00:36:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6499.110 ops/s
[info] # Warmup Iteration   2: 13358.486 ops/s
[info] # Warmup Iteration   3: 13169.272 ops/s
[info] # Warmup Iteration   4: 13179.425 ops/s
[info] # Warmup Iteration   5: 13107.837 ops/s
[info] Iteration   1: 13168.619 ops/s
[info]                  ·gc.alloc.rate:      334.614 MB/sec
[info]                  ·gc.alloc.rate.norm: 39992.031 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 13108.161 ops/s
[info]                  ·gc.alloc.rate:            333.102 MB/sec
[info]                  ·gc.alloc.rate.norm:       39992.031 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.802 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 81256.442 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 13188.537 ops/s
[info]                  ·gc.alloc.rate:      335.110 MB/sec
[info]                  ·gc.alloc.rate.norm: 39992.033 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 13018.971 ops/s
[info]                  ·gc.alloc.rate:            330.793 MB/sec
[info]                  ·gc.alloc.rate.norm:       39992.039 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.755 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 81818.080 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 13024.118 ops/s
[info]                  ·gc.alloc.rate:      331.023 MB/sec
[info]                  ·gc.alloc.rate.norm: 39992.031 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala":
[info]   13101.681 ±(99.9%) 303.955 ops/s [Average]
[info]   (min, avg, max) = (13018.971, 13101.681, 13188.537), stdev = 78.936
[info]   CI (99.9%): [12797.726, 13405.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   332.928 ±(99.9%) 7.659 MB/sec [Average]
[info]   (min, avg, max) = (330.793, 332.928, 335.110), stdev = 1.989
[info]   CI (99.9%): [325.269, 340.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   39992.033 ±(99.9%) 0.014 B/op [Average]
[info]   (min, avg, max) = (39992.031, 39992.033, 39992.039), stdev = 0.004
[info]   CI (99.9%): [39992.020, 39992.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   270.711 ±(99.9%) 1427.383 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 270.711, 676.802), stdev = 370.687
[info]   CI (99.9%): [≈ 0, 1698.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   32614.904 ±(99.9%) 171970.677 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 32614.904, 81818.080), stdev = 44660.239
[info]   CI (99.9%): [≈ 0, 204585.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 5.000), stdev = 2.739
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala
[info] # Run progress: 68.00% complete, ETA 00:36:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18871.317 ops/s
[info] # Warmup Iteration   2: 22143.820 ops/s
[info] # Warmup Iteration   3: 22243.888 ops/s
[info] # Warmup Iteration   4: 22751.704 ops/s
[info] # Warmup Iteration   5: 22750.642 ops/s
[info] Iteration   1: 22518.604 ops/s
[info]                  ·gc.alloc.rate:      421.988 MB/sec
[info]                  ·gc.alloc.rate.norm: 29496.020 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 22323.255 ops/s
[info]                  ·gc.alloc.rate:            418.299 MB/sec
[info]                  ·gc.alloc.rate.norm:       29496.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.018 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 47809.843 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 22537.571 ops/s
[info]                  ·gc.alloc.rate:      422.321 MB/sec
[info]                  ·gc.alloc.rate.norm: 29496.020 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 22454.849 ops/s
[info]                  ·gc.alloc.rate:            420.803 MB/sec
[info]                  ·gc.alloc.rate.norm:       29496.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.067 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 47528.847 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 22485.333 ops/s
[info]                  ·gc.alloc.rate:            421.349 MB/sec
[info]                  ·gc.alloc.rate.norm:       29496.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.041 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 47465.444 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala":
[info]   22463.922 ±(99.9%) 326.410 ops/s [Average]
[info]   (min, avg, max) = (22323.255, 22463.922, 22537.571), stdev = 84.768
[info]   CI (99.9%): [22137.512, 22790.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   420.952 ±(99.9%) 6.138 MB/sec [Average]
[info]   (min, avg, max) = (418.299, 420.952, 422.321), stdev = 1.594
[info]   CI (99.9%): [414.814, 427.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   29496.019 ±(99.9%) 0.003 B/op [Average]
[info]   (min, avg, max) = (29496.018, 29496.019, 29496.020), stdev = 0.001
[info]   CI (99.9%): [29496.016, 29496.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   406.825 ±(99.9%) 1430.048 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 406.825, 678.067), stdev = 371.379
[info]   CI (99.9%): [≈ 0, 1836.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   28560.827 ±(99.9%) 100396.571 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 28560.827, 47809.843), stdev = 26072.671
[info]   CI (99.9%): [≈ 0, 128957.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson
[info] # Run progress: 68.24% complete, ETA 00:35:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 680.445 ops/s
[info] # Warmup Iteration   2: 2042.242 ops/s
[info] # Warmup Iteration   3: 2120.447 ops/s
[info] # Warmup Iteration   4: 2105.453 ops/s
[info] # Warmup Iteration   5: 2165.864 ops/s
[info] Iteration   1: 2170.590 ops/s
[info]                  ·gc.alloc.rate:            1378.755 MB/sec
[info]                  ·gc.alloc.rate.norm:       999800.203 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.436 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 981440.088 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 2169.969 ops/s
[info]                  ·gc.alloc.rate:            1378.324 MB/sec
[info]                  ·gc.alloc.rate.norm:       999800.188 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.012 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 981440.088 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 2164.107 ops/s
[info]                  ·gc.alloc.rate:            1374.684 MB/sec
[info]                  ·gc.alloc.rate.norm:       999800.188 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.180 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 984160.015 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 2167.725 ops/s
[info]                  ·gc.alloc.rate:                   1377.097 MB/sec
[info]                  ·gc.alloc.rate.norm:              999800.188 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1357.050 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        985245.684 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.661 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3384.063 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 2156.915 ops/s
[info]                  ·gc.alloc.rate:                                  1370.192 MB/sec
[info]                  ·gc.alloc.rate.norm:                             999800.204 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.145 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 105.828 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.456 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       994155.003 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson":
[info]   2165.861 ±(99.9%) 21.597 ops/s [Average]
[info]   (min, avg, max) = (2156.915, 2165.861, 2170.590), stdev = 5.609
[info]   CI (99.9%): [2144.265, 2187.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1375.811 ±(99.9%) 13.543 MB/sec [Average]
[info]   (min, avg, max) = (1370.192, 1375.811, 1378.755), stdev = 3.517
[info]   CI (99.9%): [1362.268, 1389.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   999800.194 ±(99.9%) 0.032 B/op [Average]
[info]   (min, avg, max) = (999800.188, 999800.194, 999800.204), stdev = 0.008
[info]   CI (99.9%): [999800.162, 999800.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.029 ±(99.9%) 0.250 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.145), stdev = 0.065
[info]   CI (99.9%): [≈ 0, 0.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   21.166 ±(99.9%) 182.242 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21.166, 105.828), stdev = 47.328
[info]   CI (99.9%): [≈ 0, 203.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1355.827 ±(99.9%) 15.651 MB/sec [Average]
[info]   (min, avg, max) = (1353.012, 1355.827, 1362.456), stdev = 4.065
[info]   CI (99.9%): [1340.176, 1371.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   985288.176 ±(99.9%) 20147.989 B/op [Average]
[info]   (min, avg, max) = (981440.088, 985288.176, 994155.003), stdev = 5232.369
[info]   CI (99.9%): [965140.187, 1005436.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.027 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.661), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   676.813 ±(99.9%) 5827.560 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 676.813, 3384.063), stdev = 1513.399
[info]   CI (99.9%): [≈ 0, 6504.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 9.200, 10.000), stdev = 1.095
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce
[info] # Run progress: 68.47% complete, ETA 00:35:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4986.886 ops/s
[info] # Warmup Iteration   2: 7244.507 ops/s
[info] # Warmup Iteration   3: 7448.777 ops/s
[info] # Warmup Iteration   4: 7326.904 ops/s
[info] # Warmup Iteration   5: 7251.324 ops/s
[info] Iteration   1: 7296.926 ops/s
[info]                  ·gc.alloc.rate:            1439.669 MB/sec
[info]                  ·gc.alloc.rate.norm:       310552.056 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.281 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 292348.563 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 7335.066 ops/s
[info]                  ·gc.alloc.rate:            1447.167 MB/sec
[info]                  ·gc.alloc.rate.norm:       310552.056 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.618 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 290691.507 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 7210.616 ops/s
[info]                  ·gc.alloc.rate:                                  1422.600 MB/sec
[info]                  ·gc.alloc.rate.norm:                             310552.061 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.042 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 9.077 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.698 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       296602.196 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                872.359 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 7231.195 ops/s
[info]                  ·gc.alloc.rate:                                  1426.758 MB/sec
[info]                  ·gc.alloc.rate.norm:                             310564.685 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.653 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       296610.880 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 7362.683 ops/s
[info]                  ·gc.alloc.rate:                                  1453.542 MB/sec
[info]                  ·gc.alloc.rate.norm:                             310600.055 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.035 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 7.538 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.198 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       291294.840 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce":
[info]   7287.297 ±(99.9%) 251.659 ops/s [Average]
[info]   (min, avg, max) = (7210.616, 7287.297, 7362.683), stdev = 65.355
[info]   CI (99.9%): [7035.638, 7538.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate":
[info]   1437.947 ±(99.9%) 50.644 MB/sec [Average]
[info]   (min, avg, max) = (1422.600, 1437.947, 1453.542), stdev = 13.152
[info]   CI (99.9%): [1387.303, 1488.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   310564.183 ±(99.9%) 80.038 B/op [Average]
[info]   (min, avg, max) = (310552.056, 310564.183, 310600.055), stdev = 20.786
[info]   CI (99.9%): [310484.145, 310644.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.079 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.042), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   3.528 ±(99.9%) 17.009 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.528, 9.077), stdev = 4.417
[info]   CI (99.9%): [≈ 0, 20.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1358.889 ±(99.9%) 15.406 MB/sec [Average]
[info]   (min, avg, max) = (1354.618, 1358.889, 1363.198), stdev = 4.001
[info]   CI (99.9%): [1343.483, 1374.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   293509.597 ±(99.9%) 11123.115 B/op [Average]
[info]   (min, avg, max) = (290691.507, 293509.597, 296610.880), stdev = 2888.638
[info]   CI (99.9%): [282386.482, 304632.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   174.472 ±(99.9%) 1502.256 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 174.472, 872.359), stdev = 390.131
[info]   CI (99.9%): [≈ 0, 1676.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 8.000), stdev = 2.280
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava
[info] # Run progress: 68.71% complete, ETA 00:35:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3485.369 ops/s
[info] # Warmup Iteration   2: 53507.692 ops/s
[info] # Warmup Iteration   3: 53519.648 ops/s
[info] # Warmup Iteration   4: 53082.275 ops/s
[info] # Warmup Iteration   5: 54877.683 ops/s
[info] Iteration   1: 55176.530 ops/s
[info]                  ·gc.alloc.rate:      515.717 MB/sec
[info]                  ·gc.alloc.rate.norm: 14712.007 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 54730.297 ops/s
[info]                  ·gc.alloc.rate:            511.556 MB/sec
[info]                  ·gc.alloc.rate.norm:       14712.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.749 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19405.303 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 54808.458 ops/s
[info]                  ·gc.alloc.rate:                   512.255 MB/sec
[info]                  ·gc.alloc.rate.norm:              14712.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.993 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        19357.149 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 19.128 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 54802.226 ops/s
[info]                  ·gc.alloc.rate:            512.238 MB/sec
[info]                  ·gc.alloc.rate.norm:       14712.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.760 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19379.812 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 54899.245 ops/s
[info]                  ·gc.alloc.rate:      513.129 MB/sec
[info]                  ·gc.alloc.rate.norm: 14712.007 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava":
[info]   54883.351 ±(99.9%) 671.996 ops/s [Average]
[info]   (min, avg, max) = (54730.297, 54883.351, 55176.530), stdev = 174.515
[info]   CI (99.9%): [54211.355, 55555.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   512.979 ±(99.9%) 6.273 MB/sec [Average]
[info]   (min, avg, max) = (511.556, 512.979, 515.717), stdev = 1.629
[info]   CI (99.9%): [506.706, 519.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   14712.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (14712.007, 14712.008, 14712.008), stdev = 0.001
[info]   CI (99.9%): [14712.006, 14712.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   404.700 ±(99.9%) 1422.579 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.700, 674.760), stdev = 369.439
[info]   CI (99.9%): [≈ 0, 1827.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   11628.453 ±(99.9%) 40875.703 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11628.453, 19405.303), stdev = 10615.290
[info]   CI (99.9%): [≈ 0, 52504.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   3.826 ±(99.9%) 32.939 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.826, 19.128), stdev = 8.554
[info]   CI (99.9%): [≈ 0, 36.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.400, 6.000), stdev = 3.130
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala
[info] # Run progress: 68.94% complete, ETA 00:35:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_5cbb92e4/target/1bdf7fe1/jackson-module-afterburner-2.9.5.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 17620.962 ops/s
[info] # Warmup Iteration   2: 36031.827 ops/s
[info] # Warmup Iteration   3: 36837.684 ops/s
[info] # Warmup Iteration   4: 36900.111 ops/s
[info] # Warmup Iteration   5: 36798.693 ops/s
[info] Iteration   1: 35611.758 ops/s
[info]                  ·gc.alloc.rate:            530.116 MB/sec
[info]                  ·gc.alloc.rate.norm:       23431.876 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.687 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 29910.529 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 36770.119 ops/s
[info]                  ·gc.alloc.rate:            547.363 MB/sec
[info]                  ·gc.alloc.rate.norm:       23431.868 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.683 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28967.921 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 36731.318 ops/s
[info]                  ·gc.alloc.rate:            546.789 MB/sec
[info]                  ·gc.alloc.rate.norm:       23431.939 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.690 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28998.672 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 37006.250 ops/s
[info]                  ·gc.alloc.rate:      550.931 MB/sec
[info]                  ·gc.alloc.rate.norm: 23431.799 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 36816.444 ops/s
[info]                  ·gc.alloc.rate:            548.104 MB/sec
[info]                  ·gc.alloc.rate.norm:       23431.866 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.699 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28929.376 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala":
[info]   36587.178 ±(99.9%) 2138.644 ops/s [Average]
[info]   (min, avg, max) = (35611.758, 36587.178, 37006.250), stdev = 555.399
[info]   CI (99.9%): [34448.534, 38725.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   544.661 ±(99.9%) 31.903 MB/sec [Average]
[info]   (min, avg, max) = (530.116, 544.661, 550.931), stdev = 8.285
[info]   CI (99.9%): [512.758, 576.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   23431.869 ±(99.9%) 0.191 B/op [Average]
[info]   (min, avg, max) = (23431.799, 23431.869, 23431.939), stdev = 0.050
[info]   CI (99.9%): [23431.679, 23432.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   541.352 ±(99.9%) 1165.301 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 541.352, 676.699), stdev = 302.625
[info]   CI (99.9%): [≈ 0, 1706.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   23361.300 ±(99.9%) 50311.738 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 23361.300, 29910.529), stdev = 13065.799
[info]   CI (99.9%): [≈ 0, 73673.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.000, 5.000), stdev = 2.236
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala
[info] # Run progress: 69.18% complete, ETA 00:34:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 65157.223 ops/s
[info] # Warmup Iteration   2: 71316.132 ops/s
[info] # Warmup Iteration   3: 74052.814 ops/s
[info] # Warmup Iteration   4: 74089.220 ops/s
[info] # Warmup Iteration   5: 73659.708 ops/s
[info] Iteration   1: 74817.077 ops/s
[info]                  ·gc.alloc.rate:      562.474 MB/sec
[info]                  ·gc.alloc.rate.norm: 11832.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 74547.039 ops/s
[info]                  ·gc.alloc.rate:            560.505 MB/sec
[info]                  ·gc.alloc.rate.norm:       11832.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.542 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14302.599 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 74360.118 ops/s
[info]                  ·gc.alloc.rate:            558.921 MB/sec
[info]                  ·gc.alloc.rate.norm:       11832.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.326 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14338.561 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 74154.433 ops/s
[info]                  ·gc.alloc.rate:            557.425 MB/sec
[info]                  ·gc.alloc.rate.norm:       11832.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.362 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14377.805 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 73840.193 ops/s
[info]                  ·gc.alloc.rate:            555.056 MB/sec
[info]                  ·gc.alloc.rate.norm:       11832.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.378 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14439.519 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala":
[info]   74343.772 ±(99.9%) 1434.389 ops/s [Average]
[info]   (min, avg, max) = (73840.193, 74343.772, 74817.077), stdev = 372.506
[info]   CI (99.9%): [72909.383, 75778.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   558.876 ±(99.9%) 10.941 MB/sec [Average]
[info]   (min, avg, max) = (555.056, 558.876, 562.474), stdev = 2.841
[info]   CI (99.9%): [547.935, 569.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   11832.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11832.005, 11832.006, 11832.006), stdev = 0.001
[info]   CI (99.9%): [11832.005, 11832.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   541.922 ±(99.9%) 1166.527 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 541.922, 677.542), stdev = 302.943
[info]   CI (99.9%): [≈ 0, 1708.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   11491.697 ±(99.9%) 24737.516 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11491.697, 14439.519), stdev = 6424.254
[info]   CI (99.9%): [≈ 0, 36229.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 69.41% complete, ETA 00:34:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 78991.046 ops/s
[info] # Warmup Iteration   2: 95501.259 ops/s
[info] # Warmup Iteration   3: 94278.114 ops/s
[info] # Warmup Iteration   4: 94289.542 ops/s
[info] # Warmup Iteration   5: 93490.927 ops/s
[info] Iteration   1: 94240.947 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 94299.196 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 94272.539 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 94288.023 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 94265.986 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   94273.338 ±(99.9%) 85.848 ops/s [Average]
[info]   (min, avg, max) = (94240.947, 94273.338, 94299.196), stdev = 22.294
[info]   CI (99.9%): [94187.491, 94359.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.004, 0.004, 0.004), stdev = 0.001
[info]   CI (99.9%): [0.004, 0.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson
[info] # Run progress: 69.65% complete, ETA 00:34:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2072.668 ops/s
[info] # Warmup Iteration   2: 4902.333 ops/s
[info] # Warmup Iteration   3: 5066.153 ops/s
[info] # Warmup Iteration   4: 5104.347 ops/s
[info] # Warmup Iteration   5: 5124.258 ops/s
[info] Iteration   1: 5141.431 ops/s
[info]                  ·gc.alloc.rate:            1488.251 MB/sec
[info]                  ·gc.alloc.rate.norm:       455617.126 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.266 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 414292.520 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 5127.762 ops/s
[info]                  ·gc.alloc.rate:            1484.266 MB/sec
[info]                  ·gc.alloc.rate.norm:       455615.100 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.333 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 415423.364 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 5111.889 ops/s
[info]                  ·gc.alloc.rate:                   1479.679 MB/sec
[info]                  ·gc.alloc.rate.norm:              455615.215 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2034.053 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        626315.491 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1435.563 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   4: 5145.587 ops/s
[info]                  ·gc.alloc.rate:                                  1489.492 MB/sec
[info]                  ·gc.alloc.rate.norm:                             455616.233 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.175 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 53.454 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.669 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       416822.711 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 5144.239 ops/s
[info]                  ·gc.alloc.rate:                                  1489.613 MB/sec
[info]                  ·gc.alloc.rate.norm:                             455616.627 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.044 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 13.410 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.044 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       416903.711 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson":
[info]   5134.182 ±(99.9%) 55.198 ops/s [Average]
[info]   (min, avg, max) = (5111.889, 5134.182, 5145.587), stdev = 14.335
[info]   CI (99.9%): [5078.983, 5189.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1486.260 ±(99.9%) 16.444 MB/sec [Average]
[info]   (min, avg, max) = (1479.679, 1486.260, 1489.613), stdev = 4.270
[info]   CI (99.9%): [1469.817, 1502.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   455616.060 ±(99.9%) 3.403 B/op [Average]
[info]   (min, avg, max) = (455615.100, 455616.060, 455617.126), stdev = 0.884
[info]   CI (99.9%): [455612.657, 455619.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.044 ±(99.9%) 0.291 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.044, 0.175), stdev = 0.076
[info]   CI (99.9%): [≈ 0, 0.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   13.373 ±(99.9%) 89.128 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.373, 53.454), stdev = 23.146
[info]   CI (99.9%): [≈ 0, 102.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1493.273 ±(99.9%) 1164.216 MB/sec [Average]
[info]   (min, avg, max) = (1353.266, 1493.273, 2034.053), stdev = 302.343
[info]   CI (99.9%): [329.057, 2657.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   457951.559 ±(99.9%) 362439.906 B/op [Average]
[info]   (min, avg, max) = (414292.520, 457951.559, 626315.491), stdev = 94124.493
[info]   CI (99.9%): [95511.653, 820391.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   287.113 ±(99.9%) 2472.126 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 287.113, 1435.563), stdev = 642.003
[info]   CI (99.9%): [≈ 0, 2759.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.600, 13.000), stdev = 4.827
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce
[info] # Run progress: 69.88% complete, ETA 00:34:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3170464.126 ops/s
[info] # Warmup Iteration   2: 4844928.928 ops/s
[info] # Warmup Iteration   3: 4901464.836 ops/s
[info] # Warmup Iteration   4: 4909213.042 ops/s
[info] # Warmup Iteration   5: 4914630.660 ops/s
[info] Iteration   1: 4919370.907 ops/s
[info]                  ·gc.alloc.rate:            3051.359 MB/sec
[info]                  ·gc.alloc.rate.norm:       976.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      3408.069 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1090.096 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 4908744.537 ops/s
[info]                  ·gc.alloc.rate:            3043.742 MB/sec
[info]                  ·gc.alloc.rate.norm:       976.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.519 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 873.959 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 4903219.292 ops/s
[info]                  ·gc.alloc.rate:                                  3040.240 MB/sec
[info]                  ·gc.alloc.rate.norm:                             976.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3406.818 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1093.682 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 4868441.023 ops/s
[info]                  ·gc.alloc.rate:                                  3018.490 MB/sec
[info]                  ·gc.alloc.rate.norm:                             976.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.296 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       881.199 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 4870213.637 ops/s
[info]                  ·gc.alloc.rate:                                  3019.655 MB/sec
[info]                  ·gc.alloc.rate.norm:                             976.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3406.763 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1101.119 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce":
[info]   4893997.879 ±(99.9%) 89587.115 ops/s [Average]
[info]   (min, avg, max) = (4868441.023, 4893997.879, 4919370.907), stdev = 23265.489
[info]   CI (99.9%): [4804410.764, 4983584.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate":
[info]   3034.697 ±(99.9%) 57.085 MB/sec [Average]
[info]   (min, avg, max) = (3018.490, 3034.697, 3051.359), stdev = 14.825
[info]   CI (99.9%): [2977.612, 3091.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   976.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (976.000, 976.000, 976.000), stdev = 0.001
[info]   CI (99.9%): [976.000, 976.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.003 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   3134.493 ±(99.9%) 1437.994 MB/sec [Average]
[info]   (min, avg, max) = (2725.296, 3134.493, 3408.069), stdev = 373.442
[info]   CI (99.9%): [1696.499, 4572.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   1008.011 ±(99.9%) 458.848 B/op [Average]
[info]   (min, avg, max) = (873.959, 1008.011, 1101.119), stdev = 119.161
[info]   CI (99.9%): [549.163, 1466.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.800, 10.000), stdev = 1.924
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava
[info] # Run progress: 70.12% complete, ETA 00:33:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.934 ops/s
[info] # Warmup Iteration   2: 38120677.434 ops/s
[info] # Warmup Iteration   3: 37668918.336 ops/s
[info] # Warmup Iteration   4: 38267271.029 ops/s
[info] # Warmup Iteration   5: 36734386.045 ops/s
[info] Iteration   1: 38288836.280 ops/s
[info]                  ·gc.alloc.rate:      389.227 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 37660603.372 ops/s
[info]                  ·gc.alloc.rate:            382.815 MB/sec
[info]                  ·gc.alloc.rate.norm:       16.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.730 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28.201 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 37065267.127 ops/s
[info]                  ·gc.alloc.rate:            376.842 MB/sec
[info]                  ·gc.alloc.rate.norm:       16.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.879 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28.654 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 38244105.067 ops/s
[info]                  ·gc.alloc.rate:      388.728 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 38063941.043 ops/s
[info]                  ·gc.alloc.rate:            386.906 MB/sec
[info]                  ·gc.alloc.rate.norm:       16.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.709 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27.902 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava":
[info]   37864550.578 ±(99.9%) 1967491.613 ops/s [Average]
[info]   (min, avg, max) = (37065267.127, 37864550.578, 38288836.280), stdev = 510951.324
[info]   CI (99.9%): [35897058.965, 39832042.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   384.903 ±(99.9%) 19.886 MB/sec [Average]
[info]   (min, avg, max) = (376.842, 384.903, 389.227), stdev = 5.164
[info]   CI (99.9%): [365.018, 404.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   16.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.000, 16.000, 16.000), stdev = 0.001
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   404.864 ±(99.9%) 1423.153 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.864, 674.879), stdev = 369.588
[info]   CI (99.9%): [≈ 0, 1828.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   16.951 ±(99.9%) 59.595 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.951, 28.654), stdev = 15.477
[info]   CI (99.9%): [≈ 0, 76.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.200, 6.000), stdev = 2.950
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala
[info] # Run progress: 70.35% complete, ETA 00:33:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2788590.966 ops/s
[info] # Warmup Iteration   2: 7360544.145 ops/s
[info] # Warmup Iteration   3: 7047975.707 ops/s
[info] # Warmup Iteration   4: 7319069.463 ops/s
[info] # Warmup Iteration   5: 7454419.258 ops/s
[info] Iteration   1: 7399036.072 ops/s
[info]                  ·gc.alloc.rate:                                  2782.632 MB/sec
[info]                  ·gc.alloc.rate.norm:                             592.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.038 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.336 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       579.810 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 7483437.913 ops/s
[info]                  ·gc.alloc.rate:            2814.462 MB/sec
[info]                  ·gc.alloc.rate.norm:       592.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      3406.816 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 716.597 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 7506107.096 ops/s
[info]                  ·gc.alloc.rate:            2823.359 MB/sec
[info]                  ·gc.alloc.rate.norm:       592.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.806 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 571.545 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 7515238.196 ops/s
[info]                  ·gc.alloc.rate:                                  2827.319 MB/sec
[info]                  ·gc.alloc.rate.norm:                             592.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2726.310 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       570.850 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 7427493.442 ops/s
[info]                  ·gc.alloc.rate:            2793.479 MB/sec
[info]                  ·gc.alloc.rate.norm:       592.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.456 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 577.584 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala":
[info]   7466262.543 ±(99.9%) 195433.343 ops/s [Average]
[info]   (min, avg, max) = (7399036.072, 7466262.543, 7515238.196), stdev = 50753.418
[info]   CI (99.9%): [7270829.201, 7661695.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2808.250 ±(99.9%) 74.690 MB/sec [Average]
[info]   (min, avg, max) = (2782.632, 2808.250, 2827.319), stdev = 19.397
[info]   CI (99.9%): [2733.560, 2882.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   592.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (592.000, 592.000, 592.000), stdev = 0.001
[info]   CI (99.9%): [592.000, 592.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.008 ±(99.9%) 0.065 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.038), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.002 ±(99.9%) 0.014 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.008), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   2861.945 ±(99.9%) 1172.877 MB/sec [Average]
[info]   (min, avg, max) = (2725.336, 2861.945, 3406.816), stdev = 304.593
[info]   CI (99.9%): [1689.068, 4034.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   603.277 ±(99.9%) 244.377 B/op [Average]
[info]   (min, avg, max) = (570.850, 603.277, 716.597), stdev = 63.464
[info]   CI (99.9%): [358.901, 847.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 7.000), stdev = 1.140
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala
[info] # Run progress: 70.59% complete, ETA 00:33:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37754945.489 ops/s
[info] # Warmup Iteration   2: 35699675.043 ops/s
[info] # Warmup Iteration   3: 35595817.699 ops/s
[info] # Warmup Iteration   4: 35584244.369 ops/s
[info] # Warmup Iteration   5: 35622972.079 ops/s
[info] Iteration   1: 35587468.237 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 35701209.391 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 35726325.030 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 35611880.667 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 35723218.906 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala":
[info]   35670020.446 ±(99.9%) 252269.594 ops/s [Average]
[info]   (min, avg, max) = (35587468.237, 35670020.446, 35726325.030), stdev = 65513.613
[info]   CI (99.9%): [35417750.852, 35922290.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala
[info] # Run progress: 70.82% complete, ETA 00:33:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22893669.642 ops/s
[info] # Warmup Iteration   2: 28766202.353 ops/s
[info] # Warmup Iteration   3: 28255651.146 ops/s
[info] # Warmup Iteration   4: 28457812.079 ops/s
[info] # Warmup Iteration   5: 28443468.352 ops/s
[info] Iteration   1: 28524429.851 ops/s
[info]                  ·gc.alloc.rate:            1014.710 MB/sec
[info]                  ·gc.alloc.rate.norm:       56.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.978 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 37.416 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 28425597.048 ops/s
[info]                  ·gc.alloc.rate:            1011.615 MB/sec
[info]                  ·gc.alloc.rate.norm:       56.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.527 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 75.093 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 27708753.658 ops/s
[info]                  ·gc.alloc.rate:            985.701 MB/sec
[info]                  ·gc.alloc.rate.norm:       56.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.979 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 38.518 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 27805198.772 ops/s
[info]                  ·gc.alloc.rate:            989.250 MB/sec
[info]                  ·gc.alloc.rate.norm:       56.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.118 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 76.768 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 28612777.250 ops/s
[info]                  ·gc.alloc.rate:            1018.134 MB/sec
[info]                  ·gc.alloc.rate.norm:       56.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.160 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 37.301 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala":
[info]   28215351.316 ±(99.9%) 1636576.307 ops/s [Average]
[info]   (min, avg, max) = (27708753.658, 28215351.316, 28612777.250), stdev = 425013.670
[info]   CI (99.9%): [26578775.008, 29851927.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate":
[info]   1003.882 ±(99.9%) 58.551 MB/sec [Average]
[info]   (min, avg, max) = (985.701, 1003.882, 1018.134), stdev = 15.205
[info]   CI (99.9%): [945.331, 1062.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate.norm":
[info]   56.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (56.000, 56.000, 56.000), stdev = 0.001
[info]   CI (99.9%): [56.000, 56.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.G1_Old_Gen":
[info]   949.352 ±(99.9%) 1430.557 MB/sec [Average]
[info]   (min, avg, max) = (677.978, 949.352, 1356.527), stdev = 371.511
[info]   CI (99.9%): [≈ 0, 2379.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.G1_Old_Gen.norm":
[info]   53.019 ±(99.9%) 80.590 B/op [Average]
[info]   (min, avg, max) = (37.301, 53.019, 76.768), stdev = 20.929
[info]   CI (99.9%): [≈ 0, 133.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 7.000), stdev = 1.817
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson
[info] # Run progress: 71.06% complete, ETA 00:32:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3264036.344 ops/s
[info] # Warmup Iteration   2: 6159031.016 ops/s
[info] # Warmup Iteration   3: 6027391.279 ops/s
[info] # Warmup Iteration   4: 6123115.740 ops/s
[info] # Warmup Iteration   5: 6041703.359 ops/s
[info] Iteration   1: 6136091.440 ops/s
[info]                  ·gc.alloc.rate:                                  2962.606 MB/sec
[info]                  ·gc.alloc.rate.norm:                             760.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3406.784 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       873.945 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 6207811.063 ops/s
[info]                  ·gc.alloc.rate:            2997.102 MB/sec
[info]                  ·gc.alloc.rate.norm:       760.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.315 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 691.081 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 6278121.728 ops/s
[info]                  ·gc.alloc.rate:            3031.334 MB/sec
[info]                  ·gc.alloc.rate.norm:       760.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.465 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 683.314 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 6225765.465 ops/s
[info]                  ·gc.alloc.rate:                                  3005.769 MB/sec
[info]                  ·gc.alloc.rate.norm:                             760.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3406.649 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       861.361 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 6217694.145 ops/s
[info]                  ·gc.alloc.rate:            3001.891 MB/sec
[info]                  ·gc.alloc.rate.norm:       760.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.370 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 689.992 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson":
[info]   6213096.768 ±(99.9%) 196039.345 ops/s [Average]
[info]   (min, avg, max) = (6136091.440, 6213096.768, 6278121.728), stdev = 50910.795
[info]   CI (99.9%): [6017057.423, 6409136.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2999.740 ±(99.9%) 94.812 MB/sec [Average]
[info]   (min, avg, max) = (2962.606, 2999.740, 3031.334), stdev = 24.622
[info]   CI (99.9%): [2904.928, 3094.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   760.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (760.000, 760.000, 760.000), stdev = 0.001
[info]   CI (99.9%): [760.000, 760.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.003 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.002), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2997.917 ±(99.9%) 1436.989 MB/sec [Average]
[info]   (min, avg, max) = (2725.315, 2997.917, 3406.784), stdev = 373.182
[info]   CI (99.9%): [1560.928, 4434.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   759.939 ±(99.9%) 379.192 B/op [Average]
[info]   (min, avg, max) = (683.314, 759.939, 873.945), stdev = 98.475
[info]   CI (99.9%): [380.747, 1139.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 11.000), stdev = 2.702
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce
[info] # Run progress: 71.29% complete, ETA 00:32:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12905948.762 ops/s
[info] # Warmup Iteration   2: 20096260.273 ops/s
[info] # Warmup Iteration   3: 20058644.453 ops/s
[info] # Warmup Iteration   4: 20207544.341 ops/s
[info] # Warmup Iteration   5: 20211001.243 ops/s
[info] Iteration   1: 20398212.406 ops/s
[info]                  ·gc.alloc.rate:                                  2280.587 MB/sec
[info]                  ·gc.alloc.rate.norm:                             176.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.139 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2040.611 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       157.480 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.257 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 20417972.088 ops/s
[info]                  ·gc.alloc.rate:                                  2282.896 MB/sec
[info]                  ·gc.alloc.rate.norm:                             176.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.015 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.022 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       157.584 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 20127255.718 ops/s
[info]                  ·gc.alloc.rate:                                  2250.540 MB/sec
[info]                  ·gc.alloc.rate.norm:                             176.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.635 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       213.154 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 20144232.614 ops/s
[info]                  ·gc.alloc.rate:            2252.286 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.078 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 159.730 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 20134089.829 ops/s
[info]                  ·gc.alloc.rate:                                  2251.115 MB/sec
[info]                  ·gc.alloc.rate.norm:                             176.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2043.973 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       159.805 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce":
[info]   20244352.531 ±(99.9%) 576665.705 ops/s [Average]
[info]   (min, avg, max) = (20127255.718, 20244352.531, 20417972.088), stdev = 149758.252
[info]   CI (99.9%): [19667686.826, 20821018.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate":
[info]   2263.485 ±(99.9%) 64.297 MB/sec [Average]
[info]   (min, avg, max) = (2250.540, 2263.485, 2282.896), stdev = 16.698
[info]   CI (99.9%): [2199.187, 2327.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   176.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (176.000, 176.000, 176.000), stdev = 0.001
[info]   CI (99.9%): [176.000, 176.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.031 ±(99.9%) 0.233 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.139), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.002 ±(99.9%) 0.018 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.011), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   2179.664 ±(99.9%) 1175.258 MB/sec [Average]
[info]   (min, avg, max) = (2040.611, 2179.664, 2725.635), stdev = 305.211
[info]   CI (99.9%): [1004.406, 3354.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   169.551 ±(99.9%) 93.958 B/op [Average]
[info]   (min, avg, max) = (157.480, 169.551, 213.154), stdev = 24.401
[info]   CI (99.9%): [75.592, 263.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   0.051 ±(99.9%) 0.443 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.051, 0.257), stdev = 0.115
[info]   CI (99.9%): [≈ 0, 0.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 7.000), stdev = 1.517
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava
[info] # Run progress: 71.53% complete, ETA 00:32:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.923 ops/s
[info] # Warmup Iteration   2: 53718563.623 ops/s
[info] # Warmup Iteration   3: 54336463.958 ops/s
[info] # Warmup Iteration   4: 54991914.936 ops/s
[info] # Warmup Iteration   5: 54533839.729 ops/s
[info] Iteration   1: 54726441.229 ops/s
[info]                  ·gc.alloc.rate:            1668.884 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2024.228 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 58.220 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 54376253.312 ops/s
[info]                  ·gc.alloc.rate:                   1658.181 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.788 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        39.044 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 54466277.975 ops/s
[info]                  ·gc.alloc.rate:                                  1661.614 MB/sec
[info]                  ·gc.alloc.rate.norm:                             48.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.396 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2035.756 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       58.808 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     6.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.192 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   4: 55207423.978 ops/s
[info]                  ·gc.alloc.rate:                                  1683.608 MB/sec
[info]                  ·gc.alloc.rate.norm:                             48.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.048 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.837 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       38.855 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 55440086.907 ops/s
[info]                  ·gc.alloc.rate:                                  1690.738 MB/sec
[info]                  ·gc.alloc.rate.norm:                             48.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.192 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       58.035 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava":
[info]   54843296.680 ±(99.9%) 1788244.878 ops/s [Average]
[info]   (min, avg, max) = (54376253.312, 54843296.680, 55440086.907), stdev = 464401.516
[info]   CI (99.9%): [53055051.802, 56631541.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   1672.605 ±(99.9%) 54.203 MB/sec [Average]
[info]   (min, avg, max) = (1658.181, 1672.605, 1690.738), stdev = 14.076
[info]   CI (99.9%): [1618.402, 1726.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.089 ±(99.9%) 0.666 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.089, 0.396), stdev = 0.173
[info]   CI (99.9%): [≈ 0, 0.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.003 ±(99.9%) 0.019 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.011), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   1763.160 ±(99.9%) 1432.272 MB/sec [Average]
[info]   (min, avg, max) = (1348.788, 1763.160, 2044.192), stdev = 371.957
[info]   CI (99.9%): [330.888, 3195.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   50.592 ±(99.9%) 40.942 B/op [Average]
[info]   (min, avg, max) = (38.855, 50.592, 58.808), stdev = 10.633
[info]   CI (99.9%): [9.650, 91.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   1.466 ±(99.9%) 11.244 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.466, 6.664), stdev = 2.920
[info]   CI (99.9%): [≈ 0, 12.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.042 ±(99.9%) 0.325 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.192), stdev = 0.084
[info]   CI (99.9%): [≈ 0, 0.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.000, 16.000), stdev = 5.874
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala
[info] # Run progress: 71.76% complete, ETA 00:31:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3103966.701 ops/s
[info] # Warmup Iteration   2: 8079524.619 ops/s
[info] # Warmup Iteration   3: 8186746.772 ops/s
[info] # Warmup Iteration   4: 8276669.331 ops/s
[info] # Warmup Iteration   5: 8328446.122 ops/s
[info] Iteration   1: 8420418.724 ops/s
[info]                  ·gc.alloc.rate:                                  2054.188 MB/sec
[info]                  ·gc.alloc.rate.norm:                             384.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.045 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2034.821 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       380.380 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.872 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   2: 8369611.006 ops/s
[info]                  ·gc.alloc.rate:                                  2041.818 MB/sec
[info]                  ·gc.alloc.rate.norm:                             384.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.056 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.128 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       384.435 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 8507982.431 ops/s
[info]                  ·gc.alloc.rate:            2075.663 MB/sec
[info]                  ·gc.alloc.rate.norm:       384.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.147 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 378.169 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 8505480.136 ops/s
[info]                  ·gc.alloc.rate:                                  2075.142 MB/sec
[info]                  ·gc.alloc.rate.norm:                             384.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.253 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       378.284 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 8505203.281 ops/s
[info]                  ·gc.alloc.rate:            2075.179 MB/sec
[info]                  ·gc.alloc.rate.norm:       384.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.401 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 378.305 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala":
[info]   8461739.116 ±(99.9%) 244567.567 ops/s [Average]
[info]   (min, avg, max) = (8369611.006, 8461739.116, 8507982.431), stdev = 63513.420
[info]   CI (99.9%): [8217171.549, 8706306.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2064.398 ±(99.9%) 60.047 MB/sec [Average]
[info]   (min, avg, max) = (2041.818, 2064.398, 2075.663), stdev = 15.594
[info]   CI (99.9%): [2004.351, 2124.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   384.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (384.000, 384.000, 384.000), stdev = 0.001
[info]   CI (99.9%): [384.000, 384.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.106 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.056), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.004 ±(99.9%) 0.020 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.010), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   2042.350 ±(99.9%) 16.211 MB/sec [Average]
[info]   (min, avg, max) = (2034.821, 2042.350, 2044.401), stdev = 4.210
[info]   CI (99.9%): [2026.139, 2058.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   379.914 ±(99.9%) 10.358 B/op [Average]
[info]   (min, avg, max) = (378.169, 379.914, 384.435), stdev = 2.690
[info]   CI (99.9%): [369.557, 390.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.174 ±(99.9%) 1.501 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.174, 0.872), stdev = 0.390
[info]   CI (99.9%): [≈ 0, 1.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 11.000), stdev = 3.391
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala
[info] # Run progress: 72.00% complete, ETA 00:31:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31588393.808 ops/s
[info] # Warmup Iteration   2: 42553090.957 ops/s
[info] # Warmup Iteration   3: 43969110.126 ops/s
[info] # Warmup Iteration   4: 44964716.108 ops/s
[info] # Warmup Iteration   5: 44596222.667 ops/s
[info] Iteration   1: 45009918.767 ops/s
[info]                  ·gc.alloc.rate:            915.090 MB/sec
[info]                  ·gc.alloc.rate.norm:       32.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.081 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23.712 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 44935889.446 ops/s
[info]                  ·gc.alloc.rate:                   913.728 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.517 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        23.728 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 44858211.346 ops/s
[info]                  ·gc.alloc.rate:                   911.853 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.268 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        47.561 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 45038124.353 ops/s
[info]                  ·gc.alloc.rate:            915.633 MB/sec
[info]                  ·gc.alloc.rate.norm:       32.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.039 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23.696 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 44549857.173 ops/s
[info]                  ·gc.alloc.rate:            905.697 MB/sec
[info]                  ·gc.alloc.rate.norm:       32.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.460 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 47.891 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala":
[info]   44878400.217 ±(99.9%) 756683.528 ops/s [Average]
[info]   (min, avg, max) = (44549857.173, 44878400.217, 45038124.353), stdev = 196508.309
[info]   CI (99.9%): [44121716.689, 45635083.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   912.400 ±(99.9%) 15.484 MB/sec [Average]
[info]   (min, avg, max) = (905.697, 912.400, 915.633), stdev = 4.021
[info]   CI (99.9%): [896.916, 927.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   32.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (32.000, 32.000, 32.000), stdev = 0.001
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   948.873 ±(99.9%) 1428.874 MB/sec [Average]
[info]   (min, avg, max) = (677.517, 948.873, 1355.460), stdev = 371.074
[info]   CI (99.9%): [≈ 0, 2377.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   33.318 ±(99.9%) 50.649 B/op [Average]
[info]   (min, avg, max) = (23.696, 33.318, 47.891), stdev = 13.154
[info]   CI (99.9%): [≈ 0, 83.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.009 ±(99.9%) 0.049 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.023), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 2.049
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 72.24% complete, ETA 00:31:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35627977.501 ops/s
[info] # Warmup Iteration   2: 49691948.151 ops/s
[info] # Warmup Iteration   3: 51084340.406 ops/s
[info] # Warmup Iteration   4: 51056064.447 ops/s
[info] # Warmup Iteration   5: 49913232.069 ops/s
[info] Iteration   1: 50907470.261 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 50958926.739 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 50953309.710 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 50973427.544 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 50970789.332 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc":
[info]   50952784.717 ±(99.9%) 102634.153 ops/s [Average]
[info]   (min, avg, max) = (50907470.261, 50952784.717, 50973427.544), stdev = 26653.764
[info]   CI (99.9%): [50850150.565, 51055418.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala
[info] # Run progress: 72.47% complete, ETA 00:31:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 41330428.928 ops/s
[info] # Warmup Iteration   2: 39043014.110 ops/s
[info] # Warmup Iteration   3: 39578198.922 ops/s
[info] # Warmup Iteration   4: 40087017.346 ops/s
[info] # Warmup Iteration   5: 40478633.216 ops/s
[info] Iteration   1: 40539596.963 ops/s
[info]                  ·gc.alloc.rate:                                  2060.371 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.080 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2040.831 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       79.241 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.129 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 40722386.134 ops/s
[info]                  ·gc.alloc.rate:                                  2069.698 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.147 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       79.012 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   3: 40724728.059 ops/s
[info]                  ·gc.alloc.rate:                                  2069.670 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2043.989 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       79.007 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 40739847.664 ops/s
[info]                  ·gc.alloc.rate:            2070.468 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.002 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 78.977 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 40000620.038 ops/s
[info]                  ·gc.alloc.rate:                                  2032.892 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2043.945 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       80.435 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala":
[info]   40545435.772 ±(99.9%) 1214802.508 ops/s [Average]
[info]   (min, avg, max) = (40000620.038, 40545435.772, 40739847.664), stdev = 315480.353
[info]   CI (99.9%): [39330633.264, 41760238.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate":
[info]   2060.620 ±(99.9%) 61.796 MB/sec [Average]
[info]   (min, avg, max) = (2032.892, 2060.620, 2070.468), stdev = 16.048
[info]   CI (99.9%): [1998.824, 2122.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm":
[info]   80.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (80.000, 80.000, 80.000), stdev = 0.001
[info]   CI (99.9%): [80.000, 80.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.080), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.G1_Old_Gen":
[info]   2043.383 ±(99.9%) 5.500 MB/sec [Average]
[info]   (min, avg, max) = (2040.831, 2043.383, 2044.147), stdev = 1.428
[info]   CI (99.9%): [2037.883, 2048.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.G1_Old_Gen.norm":
[info]   79.335 ±(99.9%) 2.403 B/op [Average]
[info]   (min, avg, max) = (78.977, 79.335, 80.435), stdev = 0.624
[info]   CI (99.9%): [76.931, 81.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.026 ±(99.9%) 0.223 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.129), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 7.000), stdev = 1.643
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson
[info] # Run progress: 72.71% complete, ETA 00:30:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1406621.373 ops/s
[info] # Warmup Iteration   2: 2057003.635 ops/s
[info] # Warmup Iteration   3: 2155257.893 ops/s
[info] # Warmup Iteration   4: 2136826.220 ops/s
[info] # Warmup Iteration   5: 2195633.739 ops/s
[info] Iteration   1: 2166389.521 ops/s
[info]                  ·gc.alloc.rate:            1739.621 MB/sec
[info]                  ·gc.alloc.rate.norm:       1264.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2032.082 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1476.501 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 2186896.920 ops/s
[info]                  ·gc.alloc.rate:                                  1756.179 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1264.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.069 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.049 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2036.199 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1465.544 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                2.876 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 2200095.833 ops/s
[info]                  ·gc.alloc.rate:                                  1767.249 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1264.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.142 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.102 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.113 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       974.947 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 2208705.351 ops/s
[info]                  ·gc.alloc.rate:            1773.657 MB/sec
[info]                  ·gc.alloc.rate.norm:       1264.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.108 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1456.738 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 2211447.636 ops/s
[info]                  ·gc.alloc.rate:                                  1775.806 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1264.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.713 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       969.964 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson":
[info]   2194707.052 ±(99.9%) 71213.993 ops/s [Average]
[info]   (min, avg, max) = (2166389.521, 2194707.052, 2211447.636), stdev = 18494.048
[info]   CI (99.9%): [2123493.059, 2265921.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1762.502 ±(99.9%) 57.357 MB/sec [Average]
[info]   (min, avg, max) = (1739.621, 1762.502, 1775.806), stdev = 14.895
[info]   CI (99.9%): [1705.145, 1819.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1264.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1264.000, 1264.000, 1264.000), stdev = 0.001
[info]   CI (99.9%): [1264.000, 1264.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.042 ±(99.9%) 0.243 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.142), stdev = 0.063
[info]   CI (99.9%): [≈ 0, 0.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.030 ±(99.9%) 0.174 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.102), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1767.643 ±(99.9%) 1422.781 MB/sec [Average]
[info]   (min, avg, max) = (1362.713, 1767.643, 2044.108), stdev = 369.492
[info]   CI (99.9%): [344.862, 3190.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   1268.739 ±(99.9%) 1041.847 B/op [Average]
[info]   (min, avg, max) = (969.964, 1268.739, 1476.501), stdev = 270.564
[info]   CI (99.9%): [226.892, 2310.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   0.575 ±(99.9%) 4.953 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.575, 2.876), stdev = 1.286
[info]   CI (99.9%): [≈ 0, 5.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.200, 17.000), stdev = 5.805
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 72.94% complete, ETA 00:30:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 130342.804 ops/s
[info] # Warmup Iteration   2: 140039.589 ops/s
[info] # Warmup Iteration   3: 138205.884 ops/s
[info] # Warmup Iteration   4: 142130.613 ops/s
[info] # Warmup Iteration   5: 141995.903 ops/s
[info] Iteration   1: 140514.282 ops/s
[info]                  ·gc.alloc.rate:                                  2577.910 MB/sec
[info]                  ·gc.alloc.rate.norm:                             28872.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.088 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.984 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       30530.400 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 142288.486 ops/s
[info]                  ·gc.alloc.rate:                                  2610.702 MB/sec
[info]                  ·gc.alloc.rate.norm:                             28872.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.060 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2726.305 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       30150.465 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 142409.209 ops/s
[info]                  ·gc.alloc.rate:            2613.093 MB/sec
[info]                  ·gc.alloc.rate.norm:       28872.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2726.484 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30124.852 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 139500.208 ops/s
[info]                  ·gc.alloc.rate:            2558.682 MB/sec
[info]                  ·gc.alloc.rate.norm:       28872.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.373 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30752.939 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 142645.149 ops/s
[info]                  ·gc.alloc.rate:                                  2616.497 MB/sec
[info]                  ·gc.alloc.rate.norm:                             28872.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.097 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       22555.791 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala":
[info]   141471.467 ±(99.9%) 5351.728 ops/s [Average]
[info]   (min, avg, max) = (139500.208, 141471.467, 142645.149), stdev = 1389.827
[info]   CI (99.9%): [136119.738, 146823.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2595.377 ±(99.9%) 99.045 MB/sec [Average]
[info]   (min, avg, max) = (2558.682, 2595.377, 2616.497), stdev = 25.722
[info]   CI (99.9%): [2496.332, 2694.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   28872.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (28872.003, 28872.003, 28872.003), stdev = 0.001
[info]   CI (99.9%): [28872.003, 28872.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.003 ±(99.9%) 0.013 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.008), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.035 ±(99.9%) 0.148 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.035, 0.088), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   2589.648 ±(99.9%) 1174.343 MB/sec [Average]
[info]   (min, avg, max) = (2044.097, 2589.648, 2726.484), stdev = 304.973
[info]   CI (99.9%): [1415.306, 3763.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   28822.889 ±(99.9%) 13528.696 B/op [Average]
[info]   (min, avg, max) = (22555.791, 28822.889, 30752.939), stdev = 3513.359
[info]   CI (99.9%): [15294.194, 42351.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.000, 10.000), stdev = 2.236
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 73.18% complete, ETA 00:30:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8074.539 ops/s
[info] # Warmup Iteration   2: 19569.597 ops/s
[info] # Warmup Iteration   3: 20580.425 ops/s
[info] # Warmup Iteration   4: 20443.051 ops/s
[info] # Warmup Iteration   5: 20438.591 ops/s
[info] Iteration   1: 20394.172 ops/s
[info]                  ·gc.alloc.rate:            1612.320 MB/sec
[info]                  ·gc.alloc.rate.norm:       124440.027 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.337 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 104451.514 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 20439.505 ops/s
[info]                  ·gc.alloc.rate:                   1615.913 MB/sec
[info]                  ·gc.alloc.rate.norm:              124440.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2030.717 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        156383.693 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      5.328 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 410.321 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   3: 20757.889 ops/s
[info]                  ·gc.alloc.rate:                                  1641.431 MB/sec
[info]                  ·gc.alloc.rate.norm:                             124440.020 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.046 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.511 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.813 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       103317.433 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 20772.248 ops/s
[info]                  ·gc.alloc.rate:                                  1642.120 MB/sec
[info]                  ·gc.alloc.rate.norm:                             124440.021 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.031 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.358 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2043.995 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       154894.096 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 20814.288 ops/s
[info]                  ·gc.alloc.rate:            1645.741 MB/sec
[info]                  ·gc.alloc.rate.norm:       124440.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.913 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 103054.400 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson":
[info]   20635.620 ±(99.9%) 775.637 ops/s [Average]
[info]   (min, avg, max) = (20394.172, 20635.620, 20814.288), stdev = 201.430
[info]   CI (99.9%): [19859.983, 21411.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1631.505 ±(99.9%) 61.642 MB/sec [Average]
[info]   (min, avg, max) = (1612.320, 1631.505, 1645.741), stdev = 16.008
[info]   CI (99.9%): [1569.864, 1693.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   124440.021 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (124440.020, 124440.021, 124440.027), stdev = 0.003
[info]   CI (99.9%): [124440.010, 124440.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.084 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.046), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.174 ±(99.9%) 6.384 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.174, 3.511), stdev = 1.658
[info]   CI (99.9%): [≈ 0, 7.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1630.755 ±(99.9%) 1429.453 MB/sec [Average]
[info]   (min, avg, max) = (1353.337, 1630.755, 2043.995), stdev = 371.224
[info]   CI (99.9%): [201.302, 3060.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   124420.227 ±(99.9%) 109775.366 B/op [Average]
[info]   (min, avg, max) = (103054.400, 124420.227, 156383.693), stdev = 28508.314
[info]   CI (99.9%): [14644.861, 234195.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 9.176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 5.328), stdev = 2.383
[info]   CI (99.9%): [≈ 0, 10.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   82.064 ±(99.9%) 706.598 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 82.064, 410.321), stdev = 183.501
[info]   CI (99.9%): [≈ 0, 788.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.800, 15.000), stdev = 5.263
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 73.41% complete, ETA 00:30:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 73453.426 ops/s
[info] # Warmup Iteration   2: 133318.194 ops/s
[info] # Warmup Iteration   3: 130894.700 ops/s
[info] # Warmup Iteration   4: 133208.131 ops/s
[info] # Warmup Iteration   5: 131075.226 ops/s
[info] Iteration   1: 128627.421 ops/s
[info]                  ·gc.alloc.rate:                   1428.925 MB/sec
[info]                  ·gc.alloc.rate.norm:              17488.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2030.644 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        24852.176 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 8.151 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 128993.246 ops/s
[info]                  ·gc.alloc.rate:            1433.670 MB/sec
[info]                  ·gc.alloc.rate.norm:       17488.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.950 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16515.568 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 133340.509 ops/s
[info]                  ·gc.alloc.rate:                   1481.767 MB/sec
[info]                  ·gc.alloc.rate.norm:              17488.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1358.371 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        16031.661 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 55.038 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 133673.284 ops/s
[info]                  ·gc.alloc.rate:                                  1485.199 MB/sec
[info]                  ·gc.alloc.rate.norm:                             17488.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.058 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.682 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.788 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       16046.632 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 134070.711 ops/s
[info]                  ·gc.alloc.rate:                                  1489.616 MB/sec
[info]                  ·gc.alloc.rate.norm:                             17488.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.632 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       15997.215 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala":
[info]   131741.034 ±(99.9%) 10361.780 ops/s [Average]
[info]   (min, avg, max) = (128627.421, 131741.034, 134070.711), stdev = 2690.921
[info]   CI (99.9%): [121379.254, 142102.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1463.836 ±(99.9%) 115.057 MB/sec [Average]
[info]   (min, avg, max) = (1428.925, 1463.836, 1489.616), stdev = 29.880
[info]   CI (99.9%): [1348.779, 1578.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   17488.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (17488.003, 17488.003, 17488.003), stdev = 0.001
[info]   CI (99.9%): [17488.003, 17488.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.099 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.058), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.139 ±(99.9%) 1.168 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.139, 0.682), stdev = 0.303
[info]   CI (99.9%): [≈ 0, 1.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1493.677 ±(99.9%) 1155.946 MB/sec [Average]
[info]   (min, avg, max) = (1353.950, 1493.677, 2030.644), stdev = 300.196
[info]   CI (99.9%): [337.731, 2649.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   17888.650 ±(99.9%) 15011.959 B/op [Average]
[info]   (min, avg, max) = (15997.215, 17888.650, 24852.176), stdev = 3898.558
[info]   CI (99.9%): [2876.691, 32900.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.823 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.663), stdev = 2.032
[info]   CI (99.9%): [≈ 0, 8.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   12.638 ±(99.9%) 92.275 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.638, 55.038), stdev = 23.964
[info]   CI (99.9%): [≈ 0, 104.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.000, 14.000), stdev = 4.848
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 73.65% complete, ETA 00:29:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 427869.286 ops/s
[info] # Warmup Iteration   2: 491734.085 ops/s
[info] # Warmup Iteration   3: 489323.734 ops/s
[info] # Warmup Iteration   4: 492642.323 ops/s
[info] # Warmup Iteration   5: 489812.401 ops/s
[info] Iteration   1: 493057.798 ops/s
[info]                  ·gc.alloc.rate:            1019.965 MB/sec
[info]                  ·gc.alloc.rate.norm:       3256.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.429 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2162.534 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 493743.582 ops/s
[info]                  ·gc.alloc.rate:            1021.519 MB/sec
[info]                  ·gc.alloc.rate.norm:       3256.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.004 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4318.955 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 494530.750 ops/s
[info]                  ·gc.alloc.rate:            1023.320 MB/sec
[info]                  ·gc.alloc.rate.norm:       3256.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.566 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2155.880 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 492722.925 ops/s
[info]                  ·gc.alloc.rate:                   1019.211 MB/sec
[info]                  ·gc.alloc.rate.norm:              3256.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.393 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4329.978 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.128 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 493561.566 ops/s
[info]                  ·gc.alloc.rate:            1020.960 MB/sec
[info]                  ·gc.alloc.rate.norm:       3256.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.045 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2162.389 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala":
[info]   493523.324 ±(99.9%) 2669.358 ops/s [Average]
[info]   (min, avg, max) = (492722.925, 493523.324, 494530.750), stdev = 693.224
[info]   CI (99.9%): [490853.967, 496192.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1020.995 ±(99.9%) 6.066 MB/sec [Average]
[info]   (min, avg, max) = (1019.211, 1020.995, 1023.320), stdev = 1.575
[info]   CI (99.9%): [1014.929, 1027.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3256.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3256.001, 3256.001, 3256.001), stdev = 0.001
[info]   CI (99.9%): [3256.001, 3256.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   948.687 ±(99.9%) 1428.944 MB/sec [Average]
[info]   (min, avg, max) = (677.429, 948.687, 1355.393), stdev = 371.092
[info]   CI (99.9%): [≈ 0, 2377.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   3025.947 ±(99.9%) 4564.514 B/op [Average]
[info]   (min, avg, max) = (2155.880, 3025.947, 4329.978), stdev = 1185.390
[info]   CI (99.9%): [≈ 0, 7590.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.426 ±(99.9%) 3.664 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.426, 2.128), stdev = 0.952
[info]   CI (99.9%): [≈ 0, 4.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 2.049
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 73.88% complete, ETA 00:29:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 485537.132 ops/s
[info] # Warmup Iteration   2: 533983.117 ops/s
[info] # Warmup Iteration   3: 547462.544 ops/s
[info] # Warmup Iteration   4: 544930.752 ops/s
[info] # Warmup Iteration   5: 547243.471 ops/s
[info] Iteration   1: 547126.513 ops/s
[info]                  ·gc.alloc.rate:            533.840 MB/sec
[info]                  ·gc.alloc.rate.norm:       1536.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.298 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1948.770 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 544204.923 ops/s
[info]                  ·gc.alloc.rate:            531.061 MB/sec
[info]                  ·gc.alloc.rate.norm:       1536.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.391 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1959.235 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 543702.994 ops/s
[info]                  ·gc.alloc.rate:                   530.543 MB/sec
[info]                  ·gc.alloc.rate.norm:              1536.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.363 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1961.065 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.928 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 544941.877 ops/s
[info]                  ·gc.alloc.rate:            531.730 MB/sec
[info]                  ·gc.alloc.rate.norm:       1536.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.981 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1958.474 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 548469.014 ops/s
[info]                  ·gc.alloc.rate:      535.225 MB/sec
[info]                  ·gc.alloc.rate.norm: 1536.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   545689.064 ±(99.9%) 7820.652 ops/s [Average]
[info]   (min, avg, max) = (543702.994, 545689.064, 548469.014), stdev = 2030.998
[info]   CI (99.9%): [537868.412, 553509.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   532.480 ±(99.9%) 7.631 MB/sec [Average]
[info]   (min, avg, max) = (530.543, 532.480, 535.225), stdev = 1.982
[info]   CI (99.9%): [524.849, 540.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1536.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1536.001, 1536.001, 1536.001), stdev = 0.001
[info]   CI (99.9%): [1536.001, 1536.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   542.007 ±(99.9%) 1166.710 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 542.007, 677.981), stdev = 302.991
[info]   CI (99.9%): [≈ 0, 1708.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   1565.509 ±(99.9%) 3369.926 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1565.509, 1961.065), stdev = 875.159
[info]   CI (99.9%): [≈ 0, 4935.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm":
[info]   0.386 ±(99.9%) 3.321 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.386, 1.928), stdev = 0.862
[info]   CI (99.9%): [≈ 0, 3.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 74.12% complete, ETA 00:29:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22340.946 ops/s
[info] # Warmup Iteration   2: 42815.796 ops/s
[info] # Warmup Iteration   3: 43961.013 ops/s
[info] # Warmup Iteration   4: 44167.732 ops/s
[info] # Warmup Iteration   5: 43416.488 ops/s
[info] Iteration   1: 44030.563 ops/s
[info]                  ·gc.alloc.rate:                   752.147 MB/sec
[info]                  ·gc.alloc.rate.norm:              26888.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.109 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        48407.171 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 23.811 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 44164.027 ops/s
[info]                  ·gc.alloc.rate:                   754.514 MB/sec
[info]                  ·gc.alloc.rate.norm:              26888.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.807 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        24118.839 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 23.739 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 44304.353 ops/s
[info]                  ·gc.alloc.rate:            756.912 MB/sec
[info]                  ·gc.alloc.rate.norm:       26888.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.449 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24065.213 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 44357.142 ops/s
[info]                  ·gc.alloc.rate:            757.804 MB/sec
[info]                  ·gc.alloc.rate.norm:       26888.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.786 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24013.371 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 44315.220 ops/s
[info]                  ·gc.alloc.rate:            757.154 MB/sec
[info]                  ·gc.alloc.rate.norm:       26888.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.862 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24036.668 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson":
[info]   44234.261 ±(99.9%) 520.167 ops/s [Average]
[info]   (min, avg, max) = (44030.563, 44234.261, 44357.142), stdev = 135.086
[info]   CI (99.9%): [43714.094, 44754.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   755.706 ±(99.9%) 9.040 MB/sec [Average]
[info]   (min, avg, max) = (752.147, 755.706, 757.804), stdev = 2.348
[info]   CI (99.9%): [746.667, 764.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   26888.010 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (26888.009, 26888.010, 26888.010), stdev = 0.001
[info]   CI (99.9%): [26888.008, 26888.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   812.403 ±(99.9%) 1166.065 MB/sec [Average]
[info]   (min, avg, max) = (676.786, 812.403, 1354.109), stdev = 302.823
[info]   CI (99.9%): [≈ 0, 1978.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   28928.253 ±(99.9%) 41930.115 B/op [Average]
[info]   (min, avg, max) = (24013.371, 28928.253, 48407.171), stdev = 10889.118
[info]   CI (99.9%): [≈ 0, 70858.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   9.510 ±(99.9%) 50.143 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.510, 23.811), stdev = 13.022
[info]   CI (99.9%): [≈ 0, 59.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 9.000), stdev = 1.949
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 74.35% complete, ETA 00:29:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 295746.170 ops/s
[info] # Warmup Iteration   2: 363295.694 ops/s
[info] # Warmup Iteration   3: 359104.203 ops/s
[info] # Warmup Iteration   4: 365320.242 ops/s
[info] # Warmup Iteration   5: 365448.255 ops/s
[info] Iteration   1: 368465.999 ops/s
[info]                  ·gc.alloc.rate:                                  2500.033 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10680.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.045 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.193 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.458 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11643.004 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 372367.815 ops/s
[info]                  ·gc.alloc.rate:            2526.866 MB/sec
[info]                  ·gc.alloc.rate.norm:       10680.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.386 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8640.764 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 371308.869 ops/s
[info]                  ·gc.alloc.rate:            2519.939 MB/sec
[info]                  ·gc.alloc.rate.norm:       10680.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2726.143 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11553.934 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   4: 372899.962 ops/s
[info]                  ·gc.alloc.rate:                                  2530.170 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10680.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.527 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11504.616 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 373963.701 ops/s
[info]                  ·gc.alloc.rate:                                  2537.938 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10680.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2726.053 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11471.612 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce":
[info]   371801.269 ±(99.9%) 8070.451 ops/s [Average]
[info]   (min, avg, max) = (368465.999, 371801.269, 373963.701), stdev = 2095.871
[info]   CI (99.9%): [363730.818, 379871.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2522.989 ±(99.9%) 55.346 MB/sec [Average]
[info]   (min, avg, max) = (2500.033, 2522.989, 2537.938), stdev = 14.373
[info]   CI (99.9%): [2467.643, 2578.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   10680.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10680.001, 10680.001, 10680.001), stdev = 0.001
[info]   CI (99.9%): [10680.001, 10680.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.009 ±(99.9%) 0.077 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.045), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.040 ±(99.9%) 0.329 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.040, 0.193), stdev = 0.086
[info]   CI (99.9%): [≈ 0, 0.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2589.513 ±(99.9%) 1173.427 MB/sec [Average]
[info]   (min, avg, max) = (2044.386, 2589.513, 2726.143), stdev = 304.735
[info]   CI (99.9%): [1416.086, 3762.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   10962.786 ±(99.9%) 5004.512 B/op [Average]
[info]   (min, avg, max) = (8640.764, 10962.786, 11643.004), stdev = 1299.656
[info]   CI (99.9%): [5958.274, 15967.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.800, 11.000), stdev = 2.683
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 74.59% complete, ETA 00:28:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 221683.003 ops/s
[info] # Warmup Iteration   2: 411482.881 ops/s
[info] # Warmup Iteration   3: 421429.386 ops/s
[info] # Warmup Iteration   4: 418950.427 ops/s
[info] # Warmup Iteration   5: 420413.365 ops/s
[info] Iteration   1: 420754.665 ops/s
[info]                  ·gc.alloc.rate:                   1114.532 MB/sec
[info]                  ·gc.alloc.rate.norm:              4168.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.609 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5065.813 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.492 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 422400.219 ops/s
[info]                  ·gc.alloc.rate:            1118.407 MB/sec
[info]                  ·gc.alloc.rate.norm:       4168.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.341 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2524.267 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 421419.988 ops/s
[info]                  ·gc.alloc.rate:            1115.936 MB/sec
[info]                  ·gc.alloc.rate.norm:       4168.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.420 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5054.997 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 420657.538 ops/s
[info]                  ·gc.alloc.rate:            1113.894 MB/sec
[info]                  ·gc.alloc.rate.norm:       4168.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.425 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5064.284 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 417370.041 ops/s
[info]                  ·gc.alloc.rate:                   1105.198 MB/sec
[info]                  ·gc.alloc.rate.norm:              4168.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.731 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2552.135 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 17.584 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala":
[info]   420520.490 ±(99.9%) 7291.210 ops/s [Average]
[info]   (min, avg, max) = (417370.041, 420520.490, 422400.219), stdev = 1893.504
[info]   CI (99.9%): [413229.280, 427811.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1113.594 ±(99.9%) 19.264 MB/sec [Average]
[info]   (min, avg, max) = (1105.198, 1113.594, 1118.407), stdev = 5.003
[info]   CI (99.9%): [1094.330, 1132.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   4168.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4168.001, 4168.001, 4168.001), stdev = 0.001
[info]   CI (99.9%): [4168.001, 4168.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1083.105 ±(99.9%) 1427.392 MB/sec [Average]
[info]   (min, avg, max) = (676.731, 1083.105, 1354.609), stdev = 370.689
[info]   CI (99.9%): [≈ 0, 2510.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   4052.299 ±(99.9%) 5322.427 B/op [Average]
[info]   (min, avg, max) = (2524.267, 4052.299, 5065.813), stdev = 1382.218
[info]   CI (99.9%): [≈ 0, 9374.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.822 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.663), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   4.015 ±(99.9%) 29.501 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.015, 17.584), stdev = 7.661
[info]   CI (99.9%): [≈ 0, 33.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.600, 10.000), stdev = 2.408
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 74.82% complete, ETA 00:28:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 406740.609 ops/s
[info] # Warmup Iteration   2: 433819.067 ops/s
[info] # Warmup Iteration   3: 433664.996 ops/s
[info] # Warmup Iteration   4: 433528.719 ops/s
[info] # Warmup Iteration   5: 433702.247 ops/s
[info] Iteration   1: 427631.580 ops/s
[info]                  ·gc.alloc.rate:            843.266 MB/sec
[info]                  ·gc.alloc.rate.norm:       3104.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.051 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2495.856 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 427199.658 ops/s
[info]                  ·gc.alloc.rate:            842.386 MB/sec
[info]                  ·gc.alloc.rate.norm:       3104.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.007 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2498.304 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 430793.794 ops/s
[info]                  ·gc.alloc.rate:            849.447 MB/sec
[info]                  ·gc.alloc.rate.norm:       3104.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.985 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4954.964 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 434204.804 ops/s
[info]                  ·gc.alloc.rate:            856.235 MB/sec
[info]                  ·gc.alloc.rate.norm:       3104.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.035 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2457.994 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 434019.575 ops/s
[info]                  ·gc.alloc.rate:            855.863 MB/sec
[info]                  ·gc.alloc.rate.norm:       3104.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.032 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2459.053 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala":
[info]   430769.882 ±(99.9%) 12909.023 ops/s [Average]
[info]   (min, avg, max) = (427199.658, 430769.882, 434204.804), stdev = 3352.432
[info]   CI (99.9%): [417860.859, 443678.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   849.439 ±(99.9%) 25.493 MB/sec [Average]
[info]   (min, avg, max) = (842.386, 849.439, 856.235), stdev = 6.620
[info]   CI (99.9%): [823.947, 874.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3104.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3104.001, 3104.001, 3104.001), stdev = 0.001
[info]   CI (99.9%): [3104.001, 3104.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   813.622 ±(99.9%) 1167.478 MB/sec [Average]
[info]   (min, avg, max) = (678.007, 813.622, 1355.985), stdev = 303.190
[info]   CI (99.9%): [≈ 0, 1981.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   2973.234 ±(99.9%) 4266.470 B/op [Average]
[info]   (min, avg, max) = (2457.994, 2973.234, 4954.964), stdev = 1107.989
[info]   CI (99.9%): [≈ 0, 7239.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 7.000), stdev = 1.732
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 75.06% complete, ETA 00:28:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 57720.546 ops/s
[info] # Warmup Iteration   2: 95136.079 ops/s
[info] # Warmup Iteration   3: 94877.514 ops/s
[info] # Warmup Iteration   4: 96945.713 ops/s
[info] # Warmup Iteration   5: 98055.398 ops/s
[info] Iteration   1: 97570.544 ops/s
[info]                  ·gc.alloc.rate:                                  3532.129 MB/sec
[info]                  ·gc.alloc.rate.norm:                             56984.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.044 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3406.726 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       54960.868 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 97747.834 ops/s
[info]                  ·gc.alloc.rate:                                  3538.494 MB/sec
[info]                  ·gc.alloc.rate.norm:                             56984.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            4088.023 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       65833.635 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 97918.953 ops/s
[info]                  ·gc.alloc.rate:                                  3545.144 MB/sec
[info]                  ·gc.alloc.rate.norm:                             56984.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3407.129 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       54765.571 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 97672.639 ops/s
[info]                  ·gc.alloc.rate:                                  3536.647 MB/sec
[info]                  ·gc.alloc.rate.norm:                             56984.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3407.522 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       54903.482 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 96758.393 ops/s
[info]                  ·gc.alloc.rate:            3502.986 MB/sec
[info]                  ·gc.alloc.rate.norm:       56984.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      3406.966 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 55422.023 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson":
[info]   97533.672 ±(99.9%) 1739.234 ops/s [Average]
[info]   (min, avg, max) = (96758.393, 97533.672, 97918.953), stdev = 451.674
[info]   CI (99.9%): [95794.439, 99272.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3531.080 ±(99.9%) 63.101 MB/sec [Average]
[info]   (min, avg, max) = (3502.986, 3531.080, 3545.144), stdev = 16.387
[info]   CI (99.9%): [3467.980, 3594.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   56984.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (56984.004, 56984.004, 56984.005), stdev = 0.001
[info]   CI (99.9%): [56984.004, 56984.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.004 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.018 ±(99.9%) 0.065 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.044), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   3543.273 ±(99.9%) 1172.616 MB/sec [Average]
[info]   (min, avg, max) = (3406.726, 3543.273, 4088.023), stdev = 304.525
[info]   CI (99.9%): [2370.657, 4715.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   57177.116 ±(99.9%) 18657.988 B/op [Average]
[info]   (min, avg, max) = (54765.571, 57177.116, 65833.635), stdev = 4845.420
[info]   CI (99.9%): [38519.128, 75835.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 75.29% complete, ETA 00:27:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 246841.965 ops/s
[info] # Warmup Iteration   2: 300461.131 ops/s
[info] # Warmup Iteration   3: 308356.610 ops/s
[info] # Warmup Iteration   4: 307984.163 ops/s
[info] # Warmup Iteration   5: 301541.037 ops/s
[info] Iteration   1: 309601.058 ops/s
[info]                  ·gc.alloc.rate:            472.034 MB/sec
[info]                  ·gc.alloc.rate.norm:       2400.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.011 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3447.269 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 310751.857 ops/s
[info]                  ·gc.alloc.rate:      473.816 MB/sec
[info]                  ·gc.alloc.rate.norm: 2400.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 309240.456 ops/s
[info]                  ·gc.alloc.rate:            471.532 MB/sec
[info]                  ·gc.alloc.rate.norm:       2400.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.050 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3451.137 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 309669.745 ops/s
[info]                  ·gc.alloc.rate:            472.186 MB/sec
[info]                  ·gc.alloc.rate.norm:       2400.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.059 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3446.401 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 311454.602 ops/s
[info]                  ·gc.alloc.rate:      475.131 MB/sec
[info]                  ·gc.alloc.rate.norm: 2400.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce":
[info]   310143.543 ±(99.9%) 3562.243 ops/s [Average]
[info]   (min, avg, max) = (309240.456, 310143.543, 311454.602), stdev = 925.103
[info]   CI (99.9%): [306581.300, 313705.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   472.940 ±(99.9%) 5.756 MB/sec [Average]
[info]   (min, avg, max) = (471.532, 472.940, 475.131), stdev = 1.495
[info]   CI (99.9%): [467.184, 478.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2400.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2400.001, 2400.001, 2400.001), stdev = 0.001
[info]   CI (99.9%): [2400.001, 2400.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   406.824 ±(99.9%) 1430.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 406.824, 678.059), stdev = 371.378
[info]   CI (99.9%): [≈ 0, 1836.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2068.961 ±(99.9%) 7272.694 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2068.961, 3451.137), stdev = 1888.696
[info]   CI (99.9%): [≈ 0, 9341.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 4.000), stdev = 2.049
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 75.53% complete, ETA 00:27:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 375990.830 ops/s
[info] # Warmup Iteration   2: 625972.619 ops/s
[info] # Warmup Iteration   3: 628693.469 ops/s
[info] # Warmup Iteration   4: 628208.540 ops/s
[info] # Warmup Iteration   5: 628752.829 ops/s
[info] Iteration   1: 630314.938 ops/s
[info]                  ·gc.alloc.rate:      461.294 MB/sec
[info]                  ·gc.alloc.rate.norm: 1152.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 596026.984 ops/s
[info]                  ·gc.alloc.rate:            436.247 MB/sec
[info]                  ·gc.alloc.rate.norm:       1152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.759 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1787.125 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 593084.500 ops/s
[info]                  ·gc.alloc.rate:            434.073 MB/sec
[info]                  ·gc.alloc.rate.norm:       1152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.709 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1795.940 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 629783.198 ops/s
[info]                  ·gc.alloc.rate:      461.033 MB/sec
[info]                  ·gc.alloc.rate.norm: 1152.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 627886.685 ops/s
[info]                  ·gc.alloc.rate:                   459.624 MB/sec
[info]                  ·gc.alloc.rate.norm:              1152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.814 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1696.363 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.670 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala":
[info]   615419.261 ±(99.9%) 73529.719 ops/s [Average]
[info]   (min, avg, max) = (593084.500, 615419.261, 630314.938), stdev = 19095.435
[info]   CI (99.9%): [541889.542, 688948.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   450.454 ±(99.9%) 53.898 MB/sec [Average]
[info]   (min, avg, max) = (434.073, 450.454, 461.294), stdev = 13.997
[info]   CI (99.9%): [396.556, 504.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1152.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1152.001, 1152.001, 1152.001), stdev = 0.001
[info]   CI (99.9%): [1152.001, 1152.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   406.056 ±(99.9%) 1427.346 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 406.056, 676.814), stdev = 370.677
[info]   CI (99.9%): [≈ 0, 1833.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1055.885 ±(99.9%) 3714.619 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1055.885, 1795.940), stdev = 964.675
[info]   CI (99.9%): [≈ 0, 4770.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.334 ±(99.9%) 2.875 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.334, 1.670), stdev = 0.747
[info]   CI (99.9%): [≈ 0, 3.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 5.000), stdev = 2.588
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 75.76% complete, ETA 00:27:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2190496.729 ops/s
[info] # Warmup Iteration   2: 2240263.815 ops/s
[info] # Warmup Iteration   3: 2451602.168 ops/s
[info] # Warmup Iteration   4: 2441887.724 ops/s
[info] # Warmup Iteration   5: 2432174.366 ops/s
[info] Iteration   1: 2438123.302 ops/s
[info]                  ·gc.alloc.rate:            1127.544 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.325 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 437.316 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 2413918.681 ops/s
[info]                  ·gc.alloc.rate:                   1116.702 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.073 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        883.399 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.434 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 2345481.308 ops/s
[info]                  ·gc.alloc.rate:            1084.688 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.997 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 455.045 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 2450198.095 ops/s
[info]                  ·gc.alloc.rate:                   1133.648 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.253 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        870.309 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.428 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 2427996.142 ops/s
[info]                  ·gc.alloc.rate:                   1123.004 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.422 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        878.668 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.591 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala":
[info]   2415143.506 ±(99.9%) 158490.458 ops/s [Average]
[info]   (min, avg, max) = (2345481.308, 2415143.506, 2450198.095), stdev = 41159.469
[info]   CI (99.9%): [2256653.047, 2573633.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1117.117 ±(99.9%) 73.779 MB/sec [Average]
[info]   (min, avg, max) = (1084.688, 1117.117, 1133.648), stdev = 19.160
[info]   CI (99.9%): [1043.338, 1190.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (728.000, 728.000, 728.000), stdev = 0.001
[info]   CI (99.9%): [728.000, 728.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1084.214 ±(99.9%) 1429.091 MB/sec [Average]
[info]   (min, avg, max) = (677.325, 1084.214, 1355.422), stdev = 371.130
[info]   CI (99.9%): [≈ 0, 2513.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   704.947 ±(99.9%) 910.101 B/op [Average]
[info]   (min, avg, max) = (437.316, 704.947, 883.399), stdev = 236.350
[info]   CI (99.9%): [≈ 0, 1615.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 6.437 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.996), stdev = 1.672
[info]   CI (99.9%): [≈ 0, 7.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.691 ±(99.9%) 4.173 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.691, 2.591), stdev = 1.084
[info]   CI (99.9%): [≈ 0, 4.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 7.000), stdev = 1.949
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 76.00% complete, ETA 00:27:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2256373.934 ops/s
[info] # Warmup Iteration   2: 2462204.051 ops/s
[info] # Warmup Iteration   3: 2399626.730 ops/s
[info] # Warmup Iteration   4: 2441949.059 ops/s
[info] # Warmup Iteration   5: 2317696.840 ops/s
[info] Iteration   1: 2441032.319 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2441191.881 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2439308.550 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2441756.999 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2441034.039 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2440864.757 ±(99.9%) 3540.508 ops/s [Average]
[info]   (min, avg, max) = (2439308.550, 2440864.757, 2441756.999), stdev = 919.459
[info]   CI (99.9%): [2437324.249, 2444405.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 76.24% complete, ETA 00:26:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 293600.548 ops/s
[info] # Warmup Iteration   2: 397218.718 ops/s
[info] # Warmup Iteration   3: 397301.671 ops/s
[info] # Warmup Iteration   4: 401818.211 ops/s
[info] # Warmup Iteration   5: 399397.053 ops/s
[info] Iteration   1: 403485.431 ops/s
[info]                  ·gc.alloc.rate:      580.351 MB/sec
[info]                  ·gc.alloc.rate.norm: 2264.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 401147.722 ops/s
[info]                  ·gc.alloc.rate:            576.996 MB/sec
[info]                  ·gc.alloc.rate.norm:       2264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.423 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2658.057 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 401522.448 ops/s
[info]                  ·gc.alloc.rate:                   577.503 MB/sec
[info]                  ·gc.alloc.rate.norm:              2264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.722 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2652.970 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.611 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 401631.369 ops/s
[info]                  ·gc.alloc.rate:            577.658 MB/sec
[info]                  ·gc.alloc.rate.norm:       2264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.374 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2654.814 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 401830.626 ops/s
[info]                  ·gc.alloc.rate:            577.976 MB/sec
[info]                  ·gc.alloc.rate.norm:       2264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.423 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2653.546 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson":
[info]   401923.519 ±(99.9%) 3495.544 ops/s [Average]
[info]   (min, avg, max) = (401147.722, 401923.519, 403485.431), stdev = 907.782
[info]   CI (99.9%): [398427.975, 405419.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   578.097 ±(99.9%) 5.040 MB/sec [Average]
[info]   (min, avg, max) = (576.996, 578.097, 580.351), stdev = 1.309
[info]   CI (99.9%): [573.057, 583.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2264.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2264.001, 2264.001, 2264.001), stdev = 0.001
[info]   CI (99.9%): [2264.001, 2264.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   541.788 ±(99.9%) 1166.241 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 541.788, 677.423), stdev = 302.869
[info]   CI (99.9%): [≈ 0, 1708.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   2123.878 ±(99.9%) 4571.813 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2123.878, 2658.057), stdev = 1187.285
[info]   CI (99.9%): [≈ 0, 6695.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   0.522 ±(99.9%) 4.497 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.522, 2.611), stdev = 1.168
[info]   CI (99.9%): [≈ 0, 5.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.400, 5.000), stdev = 1.949
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 76.47% complete, ETA 00:26:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30245.627 ops/s
[info] # Warmup Iteration   2: 38103.848 ops/s
[info] # Warmup Iteration   3: 37990.559 ops/s
[info] # Warmup Iteration   4: 39173.754 ops/s
[info] # Warmup Iteration   5: 39362.275 ops/s
[info] Iteration   1: 39228.799 ops/s
[info]                  ·gc.alloc.rate:            1321.846 MB/sec
[info]                  ·gc.alloc.rate.norm:       53040.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.068 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 54413.170 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 39242.232 ops/s
[info]                  ·gc.alloc.rate:            1322.319 MB/sec
[info]                  ·gc.alloc.rate.norm:       53040.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.069 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 54393.761 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 38973.650 ops/s
[info]                  ·gc.alloc.rate:            1313.261 MB/sec
[info]                  ·gc.alloc.rate.norm:       53040.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.074 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 54769.131 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 38337.116 ops/s
[info]                  ·gc.alloc.rate:                   1291.841 MB/sec
[info]                  ·gc.alloc.rate.norm:              53040.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:             678.041 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        27838.785 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 136.733 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 39488.316 ops/s
[info]                  ·gc.alloc.rate:                                  1330.625 MB/sec
[info]                  ·gc.alloc.rate.norm:                             53040.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.116 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.609 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.748 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       54320.458 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce":
[info]   39054.023 ±(99.9%) 1694.936 ops/s [Average]
[info]   (min, avg, max) = (38337.116, 39054.023, 39488.316), stdev = 440.169
[info]   CI (99.9%): [37359.087, 40748.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1315.979 ±(99.9%) 57.086 MB/sec [Average]
[info]   (min, avg, max) = (1291.841, 1315.979, 1330.625), stdev = 14.825
[info]   CI (99.9%): [1258.892, 1373.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   53040.011 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (53040.010, 53040.011, 53040.011), stdev = 0.001
[info]   CI (99.9%): [53040.009, 53040.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.023 ±(99.9%) 0.199 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.116), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.922 ±(99.9%) 7.936 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.922, 4.609), stdev = 2.061
[info]   CI (99.9%): [≈ 0, 8.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1221.800 ±(99.9%) 1170.535 MB/sec [Average]
[info]   (min, avg, max) = (678.041, 1221.800, 1362.748), stdev = 303.984
[info]   CI (99.9%): [51.265, 2392.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   49147.061 ±(99.9%) 45872.553 B/op [Average]
[info]   (min, avg, max) = (27838.785, 49147.061, 54769.131), stdev = 11912.956
[info]   CI (99.9%): [3274.508, 95019.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   27.347 ±(99.9%) 235.462 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 27.347, 136.733), stdev = 61.149
[info]   CI (99.9%): [≈ 0, 262.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 7.000), stdev = 1.949
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76.71% complete, ETA 00:26:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27455.936 ops/s
[info] # Warmup Iteration   2: 51758.586 ops/s
[info] # Warmup Iteration   3: 51777.092 ops/s
[info] # Warmup Iteration   4: 52269.971 ops/s
[info] # Warmup Iteration   5: 52134.097 ops/s
[info] Iteration   1: 51439.808 ops/s
[info]                  ·gc.alloc.rate:            926.489 MB/sec
[info]                  ·gc.alloc.rate.norm:       28352.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.651 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 20706.574 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 52252.900 ops/s
[info]                  ·gc.alloc.rate:            941.073 MB/sec
[info]                  ·gc.alloc.rate.norm:       28352.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.247 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 40769.707 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 52413.830 ops/s
[info]                  ·gc.alloc.rate:            944.076 MB/sec
[info]                  ·gc.alloc.rate.norm:       28352.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.698 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 20322.248 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 52200.353 ops/s
[info]                  ·gc.alloc.rate:                   940.456 MB/sec
[info]                  ·gc.alloc.rate.norm:              28352.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.801 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        20403.593 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 20.082 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 52022.286 ops/s
[info]                  ·gc.alloc.rate:            937.030 MB/sec
[info]                  ·gc.alloc.rate.norm:       28352.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.748 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 40991.017 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala":
[info]   52065.835 ±(99.9%) 1451.028 ops/s [Average]
[info]   (min, avg, max) = (51439.808, 52065.835, 52413.830), stdev = 376.827
[info]   CI (99.9%): [50614.807, 53516.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   937.825 ±(99.9%) 26.236 MB/sec [Average]
[info]   (min, avg, max) = (926.489, 937.825, 944.076), stdev = 6.813
[info]   CI (99.9%): [911.589, 964.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   28352.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (28352.008, 28352.008, 28352.008), stdev = 0.001
[info]   CI (99.9%): [28352.007, 28352.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   947.629 ±(99.9%) 1428.444 MB/sec [Average]
[info]   (min, avg, max) = (676.651, 947.629, 1354.748), stdev = 370.962
[info]   CI (99.9%): [≈ 0, 2376.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   28638.628 ±(99.9%) 43036.008 B/op [Average]
[info]   (min, avg, max) = (20322.248, 28638.628, 40991.017), stdev = 11176.315
[info]   CI (99.9%): [≈ 0, 71674.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   4.016 ±(99.9%) 34.583 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.016, 20.082), stdev = 8.981
[info]   CI (99.9%): [≈ 0, 38.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 9.000), stdev = 2.408
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76.94% complete, ETA 00:26:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 64816.331 ops/s
[info] # Warmup Iteration   2: 73791.828 ops/s
[info] # Warmup Iteration   3: 75017.558 ops/s
[info] # Warmup Iteration   4: 74770.335 ops/s
[info] # Warmup Iteration   5: 74949.438 ops/s
[info] Iteration   1: 74449.971 ops/s
[info]                  ·gc.alloc.rate:            1141.545 MB/sec
[info]                  ·gc.alloc.rate.norm:       24136.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.008 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14335.312 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 74937.382 ops/s
[info]                  ·gc.alloc.rate:            1149.081 MB/sec
[info]                  ·gc.alloc.rate.norm:       24136.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.081 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28483.953 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 75071.103 ops/s
[info]                  ·gc.alloc.rate:            1151.137 MB/sec
[info]                  ·gc.alloc.rate.norm:       24136.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.101 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28433.498 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 74903.488 ops/s
[info]                  ·gc.alloc.rate:            1148.557 MB/sec
[info]                  ·gc.alloc.rate.norm:       24136.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.095 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28497.260 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 74524.377 ops/s
[info]                  ·gc.alloc.rate:                   1142.748 MB/sec
[info]                  ·gc.alloc.rate.norm:              24136.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:             678.049 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        14321.080 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 70.339 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala":
[info]   74777.264 ±(99.9%) 1052.756 ops/s [Average]
[info]   (min, avg, max) = (74449.971, 74777.264, 75071.103), stdev = 273.397
[info]   CI (99.9%): [73724.508, 75830.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1146.614 ±(99.9%) 16.219 MB/sec [Average]
[info]   (min, avg, max) = (1141.545, 1146.614, 1151.137), stdev = 4.212
[info]   CI (99.9%): [1130.394, 1162.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   24136.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (24136.005, 24136.006, 24136.006), stdev = 0.001
[info]   CI (99.9%): [24136.005, 24136.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1084.867 ±(99.9%) 1430.095 MB/sec [Average]
[info]   (min, avg, max) = (678.008, 1084.867, 1356.101), stdev = 371.391
[info]   CI (99.9%): [≈ 0, 2514.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   22814.221 ±(99.9%) 29829.718 B/op [Average]
[info]   (min, avg, max) = (14321.080, 22814.221, 28497.260), stdev = 7746.683
[info]   CI (99.9%): [≈ 0, 52643.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   14.068 ±(99.9%) 121.129 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14.068, 70.339), stdev = 31.457
[info]   CI (99.9%): [≈ 0, 135.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 2.191
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 77.18% complete, ETA 00:25:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8917.451 ops/s
[info] # Warmup Iteration   2: 20358.144 ops/s
[info] # Warmup Iteration   3: 21133.607 ops/s
[info] # Warmup Iteration   4: 21093.826 ops/s
[info] # Warmup Iteration   5: 21060.753 ops/s
[info] Iteration   1: 20847.830 ops/s
[info]                  ·gc.alloc.rate:                   1503.695 MB/sec
[info]                  ·gc.alloc.rate.norm:              113536.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2030.653 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        153323.817 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 50.287 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   2: 21069.816 ops/s
[info]                  ·gc.alloc.rate:            1519.703 MB/sec
[info]                  ·gc.alloc.rate.norm:       113536.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.990 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 101155.690 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 21102.032 ops/s
[info]                  ·gc.alloc.rate:                   1522.070 MB/sec
[info]                  ·gc.alloc.rate.norm:              113536.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1357.975 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        101295.611 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 347.753 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 21252.446 ops/s
[info]                  ·gc.alloc.rate:                                  1533.121 MB/sec
[info]                  ·gc.alloc.rate.norm:                             113536.021 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.040 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.999 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.845 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       100926.118 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 21210.657 ops/s
[info]                  ·gc.alloc.rate:                                  1529.914 MB/sec
[info]                  ·gc.alloc.rate.norm:                             113536.019 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.238 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.030 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       151688.887 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson":
[info]   21096.556 ±(99.9%) 608.628 ops/s [Average]
[info]   (min, avg, max) = (20847.830, 21096.556, 21252.446), stdev = 158.059
[info]   CI (99.9%): [20487.929, 21705.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1521.701 ±(99.9%) 44.166 MB/sec [Average]
[info]   (min, avg, max) = (1503.695, 1521.701, 1533.121), stdev = 11.470
[info]   CI (99.9%): [1477.535, 1565.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   113536.021 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (113536.019, 113536.021, 113536.026), stdev = 0.003
[info]   CI (99.9%): [113536.010, 113536.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.009 ±(99.9%) 0.069 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.040), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.647 ±(99.9%) 5.077 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.647, 2.999), stdev = 1.318
[info]   CI (99.9%): [≈ 0, 5.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1629.898 ±(99.9%) 1432.386 MB/sec [Average]
[info]   (min, avg, max) = (1353.990, 1629.898, 2044.030), stdev = 371.986
[info]   CI (99.9%): [197.513, 3062.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   121678.025 ±(99.9%) 108389.961 B/op [Average]
[info]   (min, avg, max) = (100926.118, 121678.025, 153323.817), stdev = 28148.529
[info]   CI (99.9%): [13288.064, 230067.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.821 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   79.608 ±(99.9%) 583.261 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 79.608, 347.753), stdev = 151.471
[info]   CI (99.9%): [≈ 0, 662.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.000, 17.000), stdev = 5.874
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 77.41% complete, ETA 00:25:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 75926.690 ops/s
[info] # Warmup Iteration   2: 144565.527 ops/s
[info] # Warmup Iteration   3: 142157.635 ops/s
[info] # Warmup Iteration   4: 145229.225 ops/s
[info] # Warmup Iteration   5: 145174.340 ops/s
[info] Iteration   1: 145113.632 ops/s
[info]                  ·gc.alloc.rate:            1336.396 MB/sec
[info]                  ·gc.alloc.rate.norm:       14496.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.400 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14680.454 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 145321.506 ops/s
[info]                  ·gc.alloc.rate:            1338.273 MB/sec
[info]                  ·gc.alloc.rate.norm:       14496.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.362 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14659.446 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 145082.710 ops/s
[info]                  ·gc.alloc.rate:                   1336.093 MB/sec
[info]                  ·gc.alloc.rate.norm:              14496.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.049 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        14690.817 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 7.226 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 144688.944 ops/s
[info]                  ·gc.alloc.rate:                   1332.555 MB/sec
[info]                  ·gc.alloc.rate.norm:              14496.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1357.433 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        14766.635 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 50.720 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 145260.183 ops/s
[info]                  ·gc.alloc.rate:                                  1337.705 MB/sec
[info]                  ·gc.alloc.rate.norm:                             14496.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.064 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.694 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.642 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       14766.236 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala":
[info]   145093.395 ±(99.9%) 950.955 ops/s [Average]
[info]   (min, avg, max) = (144688.944, 145093.395, 145321.506), stdev = 246.960
[info]   CI (99.9%): [144142.440, 146044.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1336.204 ±(99.9%) 8.588 MB/sec [Average]
[info]   (min, avg, max) = (1332.555, 1336.204, 1338.273), stdev = 2.230
[info]   CI (99.9%): [1327.617, 1344.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   14496.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (14496.003, 14496.003, 14496.003), stdev = 0.001
[info]   CI (99.9%): [14496.002, 14496.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.110 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.064), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.139 ±(99.9%) 1.196 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.139, 0.694), stdev = 0.311
[info]   CI (99.9%): [≈ 0, 1.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1356.177 ±(99.9%) 15.348 MB/sec [Average]
[info]   (min, avg, max) = (1353.362, 1356.177, 1362.642), stdev = 3.986
[info]   CI (99.9%): [1340.830, 1371.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   14712.718 ±(99.9%) 193.778 B/op [Average]
[info]   (min, avg, max) = (14659.446, 14712.718, 14766.635), stdev = 50.324
[info]   CI (99.9%): [14518.939, 14906.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.821 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   11.589 ±(99.9%) 85.089 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.589, 50.720), stdev = 22.097
[info]   CI (99.9%): [≈ 0, 96.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.200, 11.000), stdev = 3.834
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 77.65% complete, ETA 00:25:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 469863.188 ops/s
[info] # Warmup Iteration   2: 545716.986 ops/s
[info] # Warmup Iteration   3: 557422.643 ops/s
[info] # Warmup Iteration   4: 553676.398 ops/s
[info] # Warmup Iteration   5: 556611.463 ops/s
[info] Iteration   1: 554480.123 ops/s
[info]                  ·gc.alloc.rate:            611.562 MB/sec
[info]                  ·gc.alloc.rate.norm:       1736.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.410 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1922.921 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 556810.468 ops/s
[info]                  ·gc.alloc.rate:            614.074 MB/sec
[info]                  ·gc.alloc.rate.norm:       1736.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.351 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1914.886 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 556673.945 ops/s
[info]                  ·gc.alloc.rate:            613.962 MB/sec
[info]                  ·gc.alloc.rate.norm:       1736.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.397 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1915.367 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 556826.842 ops/s
[info]                  ·gc.alloc.rate:            614.115 MB/sec
[info]                  ·gc.alloc.rate.norm:       1736.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.378 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1914.834 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 555499.887 ops/s
[info]                  ·gc.alloc.rate:      612.800 MB/sec
[info]                  ·gc.alloc.rate.norm: 1736.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala":
[info]   556058.253 ±(99.9%) 4009.989 ops/s [Average]
[info]   (min, avg, max) = (554480.123, 556058.253, 556826.842), stdev = 1041.381
[info]   CI (99.9%): [552048.264, 560068.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   613.303 ±(99.9%) 4.293 MB/sec [Average]
[info]   (min, avg, max) = (611.562, 613.303, 614.115), stdev = 1.115
[info]   CI (99.9%): [609.010, 617.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1736.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1736.001, 1736.001, 1736.001), stdev = 0.001
[info]   CI (99.9%): [1736.001, 1736.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   541.907 ±(99.9%) 1166.496 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 541.907, 677.410), stdev = 302.935
[info]   CI (99.9%): [≈ 0, 1708.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1533.602 ±(99.9%) 3301.219 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1533.602, 1922.921), stdev = 857.316
[info]   CI (99.9%): [≈ 0, 4834.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 77.88% complete, ETA 00:25:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 453054.292 ops/s
[info] # Warmup Iteration   2: 497483.734 ops/s
[info] # Warmup Iteration   3: 497364.241 ops/s
[info] # Warmup Iteration   4: 498938.306 ops/s
[info] # Warmup Iteration   5: 501813.301 ops/s
[info] Iteration   1: 502843.588 ops/s
[info]                  ·gc.alloc.rate:      5.111 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 497825.395 ops/s
[info]                  ·gc.alloc.rate:      5.060 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 502161.509 ops/s
[info]                  ·gc.alloc.rate:      5.104 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 497746.892 ops/s
[info]                  ·gc.alloc.rate:      5.060 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 499675.350 ops/s
[info]                  ·gc.alloc.rate:      5.080 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   500050.547 ±(99.9%) 9164.236 ops/s [Average]
[info]   (min, avg, max) = (497746.892, 500050.547, 502843.588), stdev = 2379.923
[info]   CI (99.9%): [490886.310, 509214.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   5.083 ±(99.9%) 0.092 MB/sec [Average]
[info]   (min, avg, max) = (5.060, 5.083, 5.111), stdev = 0.024
[info]   CI (99.9%): [4.991, 5.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.001, 16.001, 16.001), stdev = 0.001
[info]   CI (99.9%): [16.001, 16.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 78.12% complete, ETA 00:24:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30880.607 ops/s
[info] # Warmup Iteration   2: 58394.622 ops/s
[info] # Warmup Iteration   3: 60191.117 ops/s
[info] # Warmup Iteration   4: 60090.674 ops/s
[info] # Warmup Iteration   5: 60066.648 ops/s
[info] Iteration   1: 59985.721 ops/s
[info]                  ·gc.alloc.rate:                   1076.122 MB/sec
[info]                  ·gc.alloc.rate.norm:              28240.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.633 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        17756.479 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 17.477 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 60128.823 ops/s
[info]                  ·gc.alloc.rate:            1078.636 MB/sec
[info]                  ·gc.alloc.rate.norm:       28240.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.915 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 35447.131 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 60582.554 ops/s
[info]                  ·gc.alloc.rate:                   1087.065 MB/sec
[info]                  ·gc.alloc.rate.norm:              28240.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.802 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        17582.117 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 17.305 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 60220.463 ops/s
[info]                  ·gc.alloc.rate:            1080.408 MB/sec
[info]                  ·gc.alloc.rate.norm:       28240.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.734 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 35410.396 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 59680.026 ops/s
[info]                  ·gc.alloc.rate:                   1070.758 MB/sec
[info]                  ·gc.alloc.rate.norm:              28240.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.425 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        35695.008 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 122.965 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson":
[info]   60119.517 ±(99.9%) 1270.908 ops/s [Average]
[info]   (min, avg, max) = (59680.026, 60119.517, 60582.554), stdev = 330.051
[info]   CI (99.9%): [58848.609, 61390.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1078.598 ±(99.9%) 22.989 MB/sec [Average]
[info]   (min, avg, max) = (1070.758, 1078.598, 1087.065), stdev = 5.970
[info]   CI (99.9%): [1055.609, 1101.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   28240.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (28240.007, 28240.007, 28240.007), stdev = 0.001
[info]   CI (99.9%): [28240.006, 28240.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1083.102 ±(99.9%) 1428.498 MB/sec [Average]
[info]   (min, avg, max) = (676.633, 1083.102, 1354.734), stdev = 370.976
[info]   CI (99.9%): [≈ 0, 2511.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   28378.226 ±(99.9%) 37646.500 B/op [Average]
[info]   (min, avg, max) = (17582.117, 28378.226, 35695.008), stdev = 9776.677
[info]   CI (99.9%): [≈ 0, 66024.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 7.565 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 4.662), stdev = 1.965
[info]   CI (99.9%): [≈ 0, 8.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   31.549 ±(99.9%) 199.608 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 31.549, 122.965), stdev = 51.837
[info]   CI (99.9%): [≈ 0, 231.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.800, 10.000), stdev = 2.588
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce
[info] # Run progress: 78.35% complete, ETA 00:24:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1194156.783 ops/s
[info] # Warmup Iteration   2: 2079049.882 ops/s
[info] # Warmup Iteration   3: 2118308.200 ops/s
[info] # Warmup Iteration   4: 2128307.213 ops/s
[info] # Warmup Iteration   5: 2107076.103 ops/s
[info] Iteration   1: 2118286.289 ops/s
[info]                  ·gc.alloc.rate:                                  2960.525 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2200.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3406.635 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2531.510 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 2121397.074 ops/s
[info]                  ·gc.alloc.rate:            2965.041 MB/sec
[info]                  ·gc.alloc.rate.norm:       2200.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.459 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2022.235 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 2116342.053 ops/s
[info]                  ·gc.alloc.rate:            2958.152 MB/sec
[info]                  ·gc.alloc.rate.norm:       2200.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.567 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2027.024 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 2134493.667 ops/s
[info]                  ·gc.alloc.rate:                                  2983.916 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2200.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3407.572 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2512.356 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 2136971.668 ops/s
[info]                  ·gc.alloc.rate:                                  2986.886 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2200.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.525 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2007.494 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce":
[info]   2125498.150 ±(99.9%) 36794.550 ops/s [Average]
[info]   (min, avg, max) = (2116342.053, 2125498.150, 2136971.668), stdev = 9555.428
[info]   CI (99.9%): [2088703.600, 2162292.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate":
[info]   2970.904 ±(99.9%) 51.999 MB/sec [Average]
[info]   (min, avg, max) = (2958.152, 2970.904, 2986.886), stdev = 13.504
[info]   CI (99.9%): [2918.904, 3022.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2200.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2200.000, 2200.000, 2200.000), stdev = 0.001
[info]   CI (99.9%): [2200.000, 2200.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.004 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.003 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.002), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2998.151 ±(99.9%) 1437.525 MB/sec [Average]
[info]   (min, avg, max) = (2725.459, 2998.151, 3407.572), stdev = 373.321
[info]   CI (99.9%): [1560.627, 4435.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2220.124 ±(99.9%) 1061.584 B/op [Average]
[info]   (min, avg, max) = (2007.494, 2220.124, 2531.510), stdev = 275.690
[info]   CI (99.9%): [1158.540, 3281.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 6.000), stdev = 0.894
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava
[info] # Run progress: 78.59% complete, ETA 00:24:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.909 ops/s
[info] # Warmup Iteration   2: 857284.263 ops/s
[info] # Warmup Iteration   3: 898503.051 ops/s
[info] # Warmup Iteration   4: 869700.357 ops/s
[info] # Warmup Iteration   5: 895550.637 ops/s
[info] Iteration   1: 889169.039 ops/s
[info]                  ·gc.alloc.rate:            564.907 MB/sec
[info]                  ·gc.alloc.rate.norm:       1000.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.733 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1194.416 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 892432.440 ops/s
[info]                  ·gc.alloc.rate:            567.001 MB/sec
[info]                  ·gc.alloc.rate.norm:       1000.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.760 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1190.051 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 902280.675 ops/s
[info]                  ·gc.alloc.rate:      573.258 MB/sec
[info]                  ·gc.alloc.rate.norm: 1000.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 900922.947 ops/s
[info]                  ·gc.alloc.rate:            572.396 MB/sec
[info]                  ·gc.alloc.rate.norm:       1000.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.730 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1178.782 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 897178.894 ops/s
[info]                  ·gc.alloc.rate:            569.991 MB/sec
[info]                  ·gc.alloc.rate.norm:       1000.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.745 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1183.783 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava":
[info]   896396.799 ±(99.9%) 21411.307 ops/s [Average]
[info]   (min, avg, max) = (889169.039, 896396.799, 902280.675), stdev = 5560.448
[info]   CI (99.9%): [874985.492, 917808.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   569.510 ±(99.9%) 13.627 MB/sec [Average]
[info]   (min, avg, max) = (564.907, 569.510, 573.258), stdev = 3.539
[info]   CI (99.9%): [555.883, 583.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1000.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1000.000, 1000.000, 1000.000), stdev = 0.001
[info]   CI (99.9%): [1000.000, 1000.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   539.793 ±(99.9%) 1161.946 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.793, 674.760), stdev = 301.754
[info]   CI (99.9%): [≈ 0, 1701.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   949.406 ±(99.9%) 2043.798 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 949.406, 1194.416), stdev = 530.768
[info]   CI (99.9%): [≈ 0, 2993.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.000, 5.000), stdev = 2.236
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala
[info] # Run progress: 78.82% complete, ETA 00:23:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29144.689 ops/s
[info] # Warmup Iteration   2: 272052.345 ops/s
[info] # Warmup Iteration   3: 298965.691 ops/s
[info] # Warmup Iteration   4: 302748.668 ops/s
[info] # Warmup Iteration   5: 303412.218 ops/s
[info] Iteration   1: 302576.626 ops/s
[info]                  ·gc.alloc.rate:                   572.060 MB/sec
[info]                  ·gc.alloc.rate.norm:              2976.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.695 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3520.339 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.465 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 303058.106 ops/s
[info]                  ·gc.alloc.rate:            573.061 MB/sec
[info]                  ·gc.alloc.rate.norm:       2976.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.472 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3518.224 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 306165.381 ops/s
[info]                  ·gc.alloc.rate:      578.948 MB/sec
[info]                  ·gc.alloc.rate.norm: 2976.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 306896.754 ops/s
[info]                  ·gc.alloc.rate:            580.296 MB/sec
[info]                  ·gc.alloc.rate.norm:       2976.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.748 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3470.647 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 305733.491 ops/s
[info]                  ·gc.alloc.rate:                   578.120 MB/sec
[info]                  ·gc.alloc.rate.norm:              2976.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.801 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3483.983 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.429 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala":
[info]   304886.072 ±(99.9%) 7474.761 ops/s [Average]
[info]   (min, avg, max) = (302576.626, 304886.072, 306896.754), stdev = 1941.172
[info]   CI (99.9%): [297411.310, 312360.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   576.497 ±(99.9%) 14.222 MB/sec [Average]
[info]   (min, avg, max) = (572.060, 576.497, 580.296), stdev = 3.693
[info]   CI (99.9%): [562.275, 590.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2976.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2976.001, 2976.001, 2976.001), stdev = 0.001
[info]   CI (99.9%): [2976.001, 2976.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   541.543 ±(99.9%) 1165.713 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 541.543, 677.472), stdev = 302.732
[info]   CI (99.9%): [≈ 0, 1707.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   2798.639 ±(99.9%) 6024.850 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2798.639, 3520.339), stdev = 1564.635
[info]   CI (99.9%): [≈ 0, 8823.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.379 ±(99.9%) 7.270 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.379, 3.465), stdev = 1.888
[info]   CI (99.9%): [≈ 0, 8.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.800, 5.000), stdev = 2.168
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala
[info] # Run progress: 79.06% complete, ETA 00:23:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 707927.046 ops/s
[info] # Warmup Iteration   2: 729905.704 ops/s
[info] # Warmup Iteration   3: 736097.236 ops/s
[info] # Warmup Iteration   4: 736390.061 ops/s
[info] # Warmup Iteration   5: 734289.948 ops/s
[info] Iteration   1: 742442.117 ops/s
[info]                  ·gc.alloc.rate:      558.463 MB/sec
[info]                  ·gc.alloc.rate.norm: 1184.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 731436.706 ops/s
[info]                  ·gc.alloc.rate:            550.189 MB/sec
[info]                  ·gc.alloc.rate.norm:       1184.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.038 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1459.129 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 738352.966 ops/s
[info]                  ·gc.alloc.rate:            555.485 MB/sec
[info]                  ·gc.alloc.rate.norm:       1184.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.153 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1445.464 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 740147.937 ops/s
[info]                  ·gc.alloc.rate:            556.687 MB/sec
[info]                  ·gc.alloc.rate.norm:       1184.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.976 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1441.967 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 740339.024 ops/s
[info]                  ·gc.alloc.rate:            557.038 MB/sec
[info]                  ·gc.alloc.rate.norm:       1184.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.217 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1441.571 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala":
[info]   738543.750 ±(99.9%) 16284.645 ops/s [Average]
[info]   (min, avg, max) = (731436.706, 738543.750, 742442.117), stdev = 4229.071
[info]   CI (99.9%): [722259.104, 754828.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   555.572 ±(99.9%) 12.288 MB/sec [Average]
[info]   (min, avg, max) = (550.189, 555.572, 558.463), stdev = 3.191
[info]   CI (99.9%): [543.285, 567.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1184.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1184.001, 1184.001, 1184.001), stdev = 0.001
[info]   CI (99.9%): [1184.000, 1184.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   542.477 ±(99.9%) 1167.722 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 542.477, 678.217), stdev = 303.254
[info]   CI (99.9%): [≈ 0, 1710.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1157.626 ±(99.9%) 2492.029 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1157.626, 1459.129), stdev = 647.172
[info]   CI (99.9%): [≈ 0, 3649.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless
[info] # Run progress: 79.29% complete, ETA 00:23:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4017987.505 ops/s
[info] # Warmup Iteration   2: 4335925.320 ops/s
[info] # Warmup Iteration   3: 4162282.844 ops/s
[info] # Warmup Iteration   4: 4207289.772 ops/s
[info] # Warmup Iteration   5: 4190063.890 ops/s
[info] Iteration   1: 4199876.088 ops/s
[info]                  ·gc.alloc.rate:            1345.146 MB/sec
[info]                  ·gc.alloc.rate.norm:       504.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.468 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 508.242 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 4359786.478 ops/s
[info]                  ·gc.alloc.rate:            1396.120 MB/sec
[info]                  ·gc.alloc.rate.norm:       504.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.226 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 489.598 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 4312046.886 ops/s
[info]                  ·gc.alloc.rate:                   1380.663 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2034.093 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        742.529 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.216 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 4183623.588 ops/s
[info]                  ·gc.alloc.rate:                                  1339.642 MB/sec
[info]                  ·gc.alloc.rate.norm:                             504.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.043 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            681.377 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       256.348 B/op
[info]                  ·gc.count:                                       1.000 counts
[info]                  ·gc.time:                                        1.000 ms
[info] Iteration   5: 4112835.217 ops/s
[info]                  ·gc.alloc.rate:                                  1316.908 MB/sec
[info]                  ·gc.alloc.rate.norm:                             504.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.089 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.034 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.785 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       521.558 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless":
[info]   4233633.651 ±(99.9%) 386486.565 ops/s [Average]
[info]   (min, avg, max) = (4112835.217, 4233633.651, 4359786.478), stdev = 100369.334
[info]   CI (99.9%): [3847147.086, 4620120.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate":
[info]   1355.696 ±(99.9%) 123.745 MB/sec [Average]
[info]   (min, avg, max) = (1316.908, 1355.696, 1396.120), stdev = 32.136
[info]   CI (99.9%): [1231.950, 1479.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm":
[info]   504.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (504.000, 504.000, 504.000), stdev = 0.001
[info]   CI (99.9%): [504.000, 504.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.026 ±(99.9%) 0.153 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.089), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.010 ±(99.9%) 0.058 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.034), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Old_Gen":
[info]   1358.190 ±(99.9%) 1841.627 MB/sec [Average]
[info]   (min, avg, max) = (681.377, 1358.190, 2034.093), stdev = 478.265
[info]   CI (99.9%): [≈ 0, 3199.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Old_Gen.norm":
[info]   503.655 ±(99.9%) 663.499 B/op [Average]
[info]   (min, avg, max) = (256.348, 503.655, 742.529), stdev = 172.309
[info]   CI (99.9%): [≈ 0, 1167.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Survivor_Space.norm":
[info]   0.243 ±(99.9%) 2.093 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.243, 1.216), stdev = 0.544
[info]   CI (99.9%): [≈ 0, 2.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 5.200, 10.000), stdev = 3.421
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump
[info] # Run progress: 79.53% complete, ETA 00:23:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7230502.016 ops/s
[info] # Warmup Iteration   2: 7845698.936 ops/s
[info] # Warmup Iteration   3: 8160212.232 ops/s
[info] # Warmup Iteration   4: 8036845.482 ops/s
[info] # Warmup Iteration   5: 7983038.624 ops/s
[info] Iteration   1: 7943289.257 ops/s
[info]                  ·gc.alloc.rate:            645.909 MB/sec
[info]                  ·gc.alloc.rate.norm:       128.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.010 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 134.361 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 7818074.000 ops/s
[info]                  ·gc.alloc.rate:            635.752 MB/sec
[info]                  ·gc.alloc.rate.norm:       128.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.028 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 136.512 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 7835585.538 ops/s
[info]                  ·gc.alloc.rate:            637.171 MB/sec
[info]                  ·gc.alloc.rate.norm:       128.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.020 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 136.206 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 8043724.205 ops/s
[info]                  ·gc.alloc.rate:            654.075 MB/sec
[info]                  ·gc.alloc.rate.norm:       128.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.990 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 132.680 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 8150079.526 ops/s
[info]                  ·gc.alloc.rate:            662.770 MB/sec
[info]                  ·gc.alloc.rate.norm:       128.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.041 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 130.949 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump":
[info]   7958150.505 ±(99.9%) 541231.470 ops/s [Average]
[info]   (min, avg, max) = (7818074.000, 7958150.505, 8150079.526), stdev = 140556.094
[info]   CI (99.9%): [7416919.035, 8499381.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate":
[info]   647.136 ±(99.9%) 44.029 MB/sec [Average]
[info]   (min, avg, max) = (635.752, 647.136, 662.770), stdev = 11.434
[info]   CI (99.9%): [603.107, 691.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm":
[info]   128.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (128.000, 128.000, 128.000), stdev = 0.001
[info]   CI (99.9%): [128.000, 128.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.G1_Old_Gen":
[info]   678.018 ±(99.9%) 0.073 MB/sec [Average]
[info]   (min, avg, max) = (677.990, 678.018, 678.041), stdev = 0.019
[info]   CI (99.9%): [677.944, 678.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.G1_Old_Gen.norm":
[info]   134.142 ±(99.9%) 9.083 B/op [Average]
[info]   (min, avg, max) = (130.949, 134.142, 136.512), stdev = 2.359
[info]   CI (99.9%): [125.059, 143.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson
[info] # Run progress: 79.76% complete, ETA 00:22:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19153.753 ops/s
[info] # Warmup Iteration   2: 176022.777 ops/s
[info] # Warmup Iteration   3: 184097.233 ops/s
[info] # Warmup Iteration   4: 187566.407 ops/s
[info] # Warmup Iteration   5: 188370.400 ops/s
[info] Iteration   1: 185283.003 ops/s
[info]                  ·gc.alloc.rate:                   1259.028 MB/sec
[info]                  ·gc.alloc.rate.norm:              10696.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.113 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        11503.786 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.659 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 180170.915 ops/s
[info]                  ·gc.alloc.rate:            1224.330 MB/sec
[info]                  ·gc.alloc.rate.norm:       10696.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.786 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11835.692 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 185790.047 ops/s
[info]                  ·gc.alloc.rate:                   1262.406 MB/sec
[info]                  ·gc.alloc.rate.norm:              10696.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.932 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        11471.471 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.643 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 185238.417 ops/s
[info]                  ·gc.alloc.rate:                   1258.818 MB/sec
[info]                  ·gc.alloc.rate.norm:              10696.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.135 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        11505.897 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 39.617 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 187197.851 ops/s
[info]                  ·gc.alloc.rate:            1272.491 MB/sec
[info]                  ·gc.alloc.rate.norm:       10696.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      681.588 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5729.128 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson":
[info]   184736.047 ±(99.9%) 10289.826 ops/s [Average]
[info]   (min, avg, max) = (180170.915, 184736.047, 187197.851), stdev = 2672.235
[info]   CI (99.9%): [174446.221, 195025.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1255.415 ±(99.9%) 70.251 MB/sec [Average]
[info]   (min, avg, max) = (1224.330, 1255.415, 1272.491), stdev = 18.244
[info]   CI (99.9%): [1185.164, 1325.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10696.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10696.002, 10696.002, 10696.002), stdev = 0.001
[info]   CI (99.9%): [10696.002, 10696.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1219.711 ±(99.9%) 1158.350 MB/sec [Average]
[info]   (min, avg, max) = (681.588, 1219.711, 1354.786), stdev = 300.820
[info]   CI (99.9%): [61.360, 2378.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   10409.195 ±(99.9%) 10090.458 B/op [Average]
[info]   (min, avg, max) = (5729.128, 10409.195, 11835.692), stdev = 2620.460
[info]   CI (99.9%): [318.737, 20499.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 7.565 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 4.663), stdev = 1.965
[info]   CI (99.9%): [≈ 0, 8.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   10.184 ±(99.9%) 64.285 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.184, 39.617), stdev = 16.695
[info]   CI (99.9%): [≈ 0, 74.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.400, 10.000), stdev = 3.578
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80.00% complete, ETA 00:22:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 841443.789 ops/s
[info] # Warmup Iteration   2: 890813.119 ops/s
[info] # Warmup Iteration   3: 894268.866 ops/s
[info] # Warmup Iteration   4: 889144.086 ops/s
[info] # Warmup Iteration   5: 866109.315 ops/s
[info] Iteration   1: 893944.301 ops/s
[info]                  ·gc.alloc.rate:      49.973 MB/sec
[info]                  ·gc.alloc.rate.norm: 88.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 889984.903 ops/s
[info]                  ·gc.alloc.rate:      49.757 MB/sec
[info]                  ·gc.alloc.rate.norm: 88.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 888643.103 ops/s
[info]                  ·gc.alloc.rate:      49.679 MB/sec
[info]                  ·gc.alloc.rate.norm: 88.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 894111.935 ops/s
[info]                  ·gc.alloc.rate:      50.011 MB/sec
[info]                  ·gc.alloc.rate.norm: 88.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 894098.620 ops/s
[info]                  ·gc.alloc.rate:      49.987 MB/sec
[info]                  ·gc.alloc.rate.norm: 88.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala":
[info]   892156.572 ±(99.9%) 10160.809 ops/s [Average]
[info]   (min, avg, max) = (888643.103, 892156.572, 894111.935), stdev = 2638.730
[info]   CI (99.9%): [881995.763, 902317.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   49.881 ±(99.9%) 0.586 MB/sec [Average]
[info]   (min, avg, max) = (49.679, 49.881, 50.011), stdev = 0.152
[info]   CI (99.9%): [49.295, 50.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   88.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (88.000, 88.000, 88.000), stdev = 0.001
[info]   CI (99.9%): [88.000, 88.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 80.24% complete, ETA 00:22:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26346.319 ops/s
[info] # Warmup Iteration   2: 57719.696 ops/s
[info] # Warmup Iteration   3: 57597.945 ops/s
[info] # Warmup Iteration   4: 58094.170 ops/s
[info] # Warmup Iteration   5: 59806.367 ops/s
[info] Iteration   1: 60037.417 ops/s
[info]                  ·gc.alloc.rate:                                  2789.604 MB/sec
[info]                  ·gc.alloc.rate.norm:                             73136.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.029 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.754 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.559 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       71456.909 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 60125.512 ops/s
[info]                  ·gc.alloc.rate:            2794.506 MB/sec
[info]                  ·gc.alloc.rate.norm:       73136.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      3407.884 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 89188.942 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 60491.670 ops/s
[info]                  ·gc.alloc.rate:                                  2811.228 MB/sec
[info]                  ·gc.alloc.rate.norm:                             73136.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.217 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2726.030 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       70919.523 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 59721.804 ops/s
[info]                  ·gc.alloc.rate:            2774.977 MB/sec
[info]                  ·gc.alloc.rate.norm:       73136.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.474 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 71831.335 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 60700.660 ops/s
[info]                  ·gc.alloc.rate:                                  2820.957 MB/sec
[info]                  ·gc.alloc.rate.norm:                             73136.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.093 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2726.047 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       70675.380 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson":
[info]   60215.413 ±(99.9%) 1485.366 ops/s [Average]
[info]   (min, avg, max) = (59721.804, 60215.413, 60700.660), stdev = 385.745
[info]   CI (99.9%): [58730.046, 61700.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2798.254 ±(99.9%) 69.803 MB/sec [Average]
[info]   (min, avg, max) = (2774.977, 2798.254, 2820.957), stdev = 18.128
[info]   CI (99.9%): [2728.451, 2868.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   73136.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (73136.007, 73136.007, 73136.007), stdev = 0.001
[info]   CI (99.9%): [73136.006, 73136.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.008 ±(99.9%) 0.046 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.029), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.213 ±(99.9%) 1.215 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.213, 0.754), stdev = 0.316
[info]   CI (99.9%): [≈ 0, 1.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2862.199 ±(99.9%) 1174.630 MB/sec [Average]
[info]   (min, avg, max) = (2725.474, 2862.199, 3407.884), stdev = 305.048
[info]   CI (99.9%): [1687.569, 4036.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   74814.418 ±(99.9%) 30991.132 B/op [Average]
[info]   (min, avg, max) = (70675.380, 74814.418, 89188.942), stdev = 8048.299
[info]   CI (99.9%): [43823.286, 105805.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.800, 13.000), stdev = 3.493
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80.47% complete, ETA 00:22:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 667771.208 ops/s
[info] # Warmup Iteration   2: 1033799.827 ops/s
[info] # Warmup Iteration   3: 1035917.391 ops/s
[info] # Warmup Iteration   4: 1036054.437 ops/s
[info] # Warmup Iteration   5: 1041740.116 ops/s
[info] Iteration   1: 1036330.128 ops/s
[info]                  ·gc.alloc.rate:                   579.373 MB/sec
[info]                  ·gc.alloc.rate.norm:              880.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.704 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1027.834 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.012 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 1038122.336 ops/s
[info]                  ·gc.alloc.rate:            580.318 MB/sec
[info]                  ·gc.alloc.rate.norm:       880.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.292 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1027.054 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 1037336.106 ops/s
[info]                  ·gc.alloc.rate:            579.909 MB/sec
[info]                  ·gc.alloc.rate.norm:       880.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.673 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1026.839 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 1039253.615 ops/s
[info]                  ·gc.alloc.rate:                   580.984 MB/sec
[info]                  ·gc.alloc.rate.norm:              880.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.674 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1024.940 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.009 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1041159.143 ops/s
[info]                  ·gc.alloc.rate:            582.062 MB/sec
[info]                  ·gc.alloc.rate.norm:       880.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.359 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1024.078 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala":
[info]   1038440.266 ±(99.9%) 7159.185 ops/s [Average]
[info]   (min, avg, max) = (1036330.128, 1038440.266, 1041159.143), stdev = 1859.218
[info]   CI (99.9%): [1031281.080, 1045599.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   580.529 ±(99.9%) 4.003 MB/sec [Average]
[info]   (min, avg, max) = (579.373, 580.529, 582.062), stdev = 1.040
[info]   CI (99.9%): [576.526, 584.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   880.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (880.000, 880.000, 880.000), stdev = 0.001
[info]   CI (99.9%): [880.000, 880.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   676.941 ±(99.9%) 1.358 MB/sec [Average]
[info]   (min, avg, max) = (676.673, 676.941, 677.359), stdev = 0.353
[info]   CI (99.9%): [675.582, 678.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1026.149 ±(99.9%) 6.054 B/op [Average]
[info]   (min, avg, max) = (1024.078, 1026.149, 1027.834), stdev = 1.572
[info]   CI (99.9%): [1020.095, 1032.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.404 ±(99.9%) 2.131 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.404, 1.012), stdev = 0.553
[info]   CI (99.9%): [≈ 0, 2.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 7.000), stdev = 1.225
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80.71% complete, ETA 00:21:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 632826.267 ops/s
[info] # Warmup Iteration   2: 689075.328 ops/s
[info] # Warmup Iteration   3: 662017.973 ops/s
[info] # Warmup Iteration   4: 680630.263 ops/s
[info] # Warmup Iteration   5: 720013.185 ops/s
[info] Iteration   1: 718907.789 ops/s
[info]                  ·gc.alloc.rate:      200.969 MB/sec
[info]                  ·gc.alloc.rate.norm: 440.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 715034.924 ops/s
[info]                  ·gc.alloc.rate:            199.919 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.211 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1492.672 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 720432.636 ops/s
[info]                  ·gc.alloc.rate:      201.429 MB/sec
[info]                  ·gc.alloc.rate.norm: 440.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 720751.562 ops/s
[info]                  ·gc.alloc.rate:      201.516 MB/sec
[info]                  ·gc.alloc.rate.norm: 440.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 720685.276 ops/s
[info]                  ·gc.alloc.rate:      201.489 MB/sec
[info]                  ·gc.alloc.rate.norm: 440.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala":
[info]   719162.437 ±(99.9%) 9345.047 ops/s [Average]
[info]   (min, avg, max) = (715034.924, 719162.437, 720751.562), stdev = 2426.879
[info]   CI (99.9%): [709817.390, 728507.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   201.064 ±(99.9%) 2.611 MB/sec [Average]
[info]   (min, avg, max) = (199.919, 201.064, 201.516), stdev = 0.678
[info]   CI (99.9%): [198.453, 203.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   440.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (440.001, 440.001, 440.001), stdev = 0.001
[info]   CI (99.9%): [440.001, 440.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   135.642 ±(99.9%) 1167.920 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 135.642, 678.211), stdev = 303.305
[info]   CI (99.9%): [≈ 0, 1303.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   298.534 ±(99.9%) 2570.472 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 298.534, 1492.672), stdev = 667.543
[info]   CI (99.9%): [≈ 0, 2869.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 4.000), stdev = 1.789
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 80.94% complete, ETA 00:21:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 845543.001 ops/s
[info] # Warmup Iteration   2: 912381.537 ops/s
[info] # Warmup Iteration   3: 912895.235 ops/s
[info] # Warmup Iteration   4: 912455.058 ops/s
[info] # Warmup Iteration   5: 911997.859 ops/s
[info] Iteration   1: 878925.918 ops/s
[info]                  ·gc.alloc.rate:      8.934 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 913086.277 ops/s
[info]                  ·gc.alloc.rate:      9.281 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 912890.869 ops/s
[info]                  ·gc.alloc.rate:      9.279 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 913050.031 ops/s
[info]                  ·gc.alloc.rate:      9.282 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 913003.848 ops/s
[info]                  ·gc.alloc.rate:      9.281 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc":
[info]   906191.389 ±(99.9%) 58691.665 ops/s [Average]
[info]   (min, avg, max) = (878925.918, 906191.389, 913086.277), stdev = 15242.039
[info]   CI (99.9%): [847499.724, 964883.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   9.211 ±(99.9%) 0.597 MB/sec [Average]
[info]   (min, avg, max) = (8.934, 9.211, 9.282), stdev = 0.155
[info]   CI (99.9%): [8.614, 9.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.000, 16.000, 16.000), stdev = 0.001
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 81.18% complete, ETA 00:21:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19987.523 ops/s
[info] # Warmup Iteration   2: 38015.861 ops/s
[info] # Warmup Iteration   3: 38126.845 ops/s
[info] # Warmup Iteration   4: 37784.489 ops/s
[info] # Warmup Iteration   5: 38900.261 ops/s
[info] Iteration   1: 38789.291 ops/s
[info]                  ·gc.alloc.rate:                   1628.148 MB/sec
[info]                  ·gc.alloc.rate.norm:              66064.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2031.617 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        82435.220 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 27.028 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 38897.245 ops/s
[info]                  ·gc.alloc.rate:                   1632.461 MB/sec
[info]                  ·gc.alloc.rate.norm:              66064.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.306 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        54766.905 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 188.666 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 39182.798 ops/s
[info]                  ·gc.alloc.rate:                                  1644.536 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66064.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.030 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.189 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.657 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       54740.419 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 39219.572 ops/s
[info]                  ·gc.alloc.rate:                                  1646.135 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66064.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.029 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.176 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.148 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       82037.366 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 39211.339 ops/s
[info]                  ·gc.alloc.rate:                                  1646.180 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66064.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.080 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       54702.733 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson":
[info]   39060.049 ±(99.9%) 777.836 ops/s [Average]
[info]   (min, avg, max) = (38789.291, 39060.049, 39219.572), stdev = 202.001
[info]   CI (99.9%): [38282.214, 39837.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1639.492 ±(99.9%) 32.923 MB/sec [Average]
[info]   (min, avg, max) = (1628.148, 1639.492, 1646.180), stdev = 8.550
[info]   CI (99.9%): [1606.569, 1672.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   66064.011 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (66064.010, 66064.011, 66064.011), stdev = 0.001
[info]   CI (99.9%): [66064.009, 66064.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.062 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.030), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.475 ±(99.9%) 2.488 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.475, 1.189), stdev = 0.646
[info]   CI (99.9%): [≈ 0, 2.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1630.962 ±(99.9%) 1430.564 MB/sec [Average]
[info]   (min, avg, max) = (1353.306, 1630.962, 2044.148), stdev = 371.513
[info]   CI (99.9%): [200.398, 3061.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   65736.529 ±(99.9%) 58001.592 B/op [Average]
[info]   (min, avg, max) = (54702.733, 65736.529, 82435.220), stdev = 15062.829
[info]   CI (99.9%): [7734.936, 123738.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.821 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   43.139 ±(99.9%) 316.482 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 43.139, 188.666), stdev = 82.189
[info]   CI (99.9%): [≈ 0, 359.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.600, 14.000), stdev = 5.177
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 81.41% complete, ETA 00:21:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 220084.258 ops/s
[info] # Warmup Iteration   2: 238321.892 ops/s
[info] # Warmup Iteration   3: 244947.550 ops/s
[info] # Warmup Iteration   4: 246659.195 ops/s
[info] # Warmup Iteration   5: 247000.152 ops/s
[info] Iteration   1: 246490.726 ops/s
[info]                  ·gc.alloc.rate:            964.584 MB/sec
[info]                  ·gc.alloc.rate.norm:       6160.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.040 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8659.906 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 248072.980 ops/s
[info]                  ·gc.alloc.rate:            970.935 MB/sec
[info]                  ·gc.alloc.rate.norm:       6160.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.127 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4302.310 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 247080.101 ops/s
[info]                  ·gc.alloc.rate:            967.025 MB/sec
[info]                  ·gc.alloc.rate.norm:       6160.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.226 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8639.231 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 248171.344 ops/s
[info]                  ·gc.alloc.rate:            971.334 MB/sec
[info]                  ·gc.alloc.rate.norm:       6160.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.122 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4300.507 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 246606.342 ops/s
[info]                  ·gc.alloc.rate:            965.496 MB/sec
[info]                  ·gc.alloc.rate.norm:       6160.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.661 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8655.693 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala":
[info]   247284.299 ±(99.9%) 3068.426 ops/s [Average]
[info]   (min, avg, max) = (246490.726, 247284.299, 248171.344), stdev = 796.860
[info]   CI (99.9%): [244215.873, 250352.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   967.875 ±(99.9%) 11.953 MB/sec [Average]
[info]   (min, avg, max) = (964.584, 967.875, 971.334), stdev = 3.104
[info]   CI (99.9%): [955.922, 979.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6160.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6160.002, 6160.002, 6160.002), stdev = 0.001
[info]   CI (99.9%): [6160.001, 6160.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1085.035 ±(99.9%) 1430.349 MB/sec [Average]
[info]   (min, avg, max) = (678.122, 1085.035, 1356.661), stdev = 371.457
[info]   CI (99.9%): [≈ 0, 2515.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   6911.529 ±(99.9%) 9174.991 B/op [Average]
[info]   (min, avg, max) = (4300.507, 6911.529, 8659.906), stdev = 2382.716
[info]   CI (99.9%): [≈ 0, 16086.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 2.191
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 81.65% complete, ETA 00:20:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9339.536 ops/s
[info] # Warmup Iteration   2: 23373.586 ops/s
[info] # Warmup Iteration   3: 22892.715 ops/s
[info] # Warmup Iteration   4: 23510.579 ops/s
[info] # Warmup Iteration   5: 23789.982 ops/s
[info] Iteration   1: 23995.474 ops/s
[info]                  ·gc.alloc.rate:            1329.683 MB/sec
[info]                  ·gc.alloc.rate.norm:       87200.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.823 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 88783.134 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 24002.366 ops/s
[info]                  ·gc.alloc.rate:                   1329.618 MB/sec
[info]                  ·gc.alloc.rate.norm:              87200.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.029 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        88800.925 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 43.680 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 23921.286 ops/s
[info]                  ·gc.alloc.rate:                   1325.642 MB/sec
[info]                  ·gc.alloc.rate.norm:              87200.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.549 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        89101.568 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 43.828 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 23891.576 ops/s
[info]                  ·gc.alloc.rate:                   1323.671 MB/sec
[info]                  ·gc.alloc.rate.norm:              87200.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1358.231 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        89476.730 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 307.179 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 24084.314 ops/s
[info]                  ·gc.alloc.rate:                                  1334.910 MB/sec
[info]                  ·gc.alloc.rate.norm:                             87200.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.180 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 11.770 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.454 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       89064.534 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson":
[info]   23979.003 ±(99.9%) 291.242 ops/s [Average]
[info]   (min, avg, max) = (23891.576, 23979.003, 24084.314), stdev = 75.635
[info]   CI (99.9%): [23687.761, 24270.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1328.705 ±(99.9%) 16.677 MB/sec [Average]
[info]   (min, avg, max) = (1323.671, 1328.705, 1334.910), stdev = 4.331
[info]   CI (99.9%): [1312.028, 1345.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   87200.017 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (87200.017, 87200.017, 87200.018), stdev = 0.001
[info]   CI (99.9%): [87200.015, 87200.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.036 ±(99.9%) 0.310 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.036, 0.180), stdev = 0.081
[info]   CI (99.9%): [≈ 0, 0.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.354 ±(99.9%) 20.268 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.354, 11.770), stdev = 5.263
[info]   CI (99.9%): [≈ 0, 22.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1356.817 ±(99.9%) 15.868 MB/sec [Average]
[info]   (min, avg, max) = (1353.823, 1356.817, 1363.454), stdev = 4.121
[info]   CI (99.9%): [1340.950, 1372.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   89045.378 ±(99.9%) 1085.919 B/op [Average]
[info]   (min, avg, max) = (88783.134, 89045.378, 89476.730), stdev = 282.010
[info]   CI (99.9%): [87959.459, 90131.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 7.566 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 4.663), stdev = 1.965
[info]   CI (99.9%): [≈ 0, 8.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   78.937 ±(99.9%) 498.476 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 78.937, 307.179), stdev = 129.453
[info]   CI (99.9%): [≈ 0, 577.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.000, 10.000), stdev = 2.915
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 81.88% complete, ETA 00:20:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 59177.145 ops/s
[info] # Warmup Iteration   2: 99106.811 ops/s
[info] # Warmup Iteration   3: 99532.715 ops/s
[info] # Warmup Iteration   4: 99846.601 ops/s
[info] # Warmup Iteration   5: 99660.892 ops/s
[info] Iteration   1: 99672.126 ops/s
[info]                  ·gc.alloc.rate:                   1398.665 MB/sec
[info]                  ·gc.alloc.rate.norm:              22088.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.089 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        21384.054 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 10.518 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 99695.014 ops/s
[info]                  ·gc.alloc.rate:            1399.255 MB/sec
[info]                  ·gc.alloc.rate.norm:       22088.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.348 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 21379.122 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 101857.427 ops/s
[info]                  ·gc.alloc.rate:                   1429.327 MB/sec
[info]                  ·gc.alloc.rate.norm:              22088.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.349 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        20913.883 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 72.046 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 102629.903 ops/s
[info]                  ·gc.alloc.rate:                                  1440.271 MB/sec
[info]                  ·gc.alloc.rate.norm:                             22088.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.082 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.264 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.847 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       20900.625 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 102770.551 ops/s
[info]                  ·gc.alloc.rate:                                  1442.174 MB/sec
[info]                  ·gc.alloc.rate.norm:                             22088.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.025 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.386 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.762 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       20871.752 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala":
[info]   101325.004 ±(99.9%) 5923.210 ops/s [Average]
[info]   (min, avg, max) = (99672.126, 101325.004, 102770.551), stdev = 1538.239
[info]   CI (99.9%): [95401.794, 107248.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1421.938 ±(99.9%) 82.953 MB/sec [Average]
[info]   (min, avg, max) = (1398.665, 1421.938, 1442.174), stdev = 21.543
[info]   CI (99.9%): [1338.986, 1504.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   22088.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (22088.004, 22088.004, 22088.004), stdev = 0.001
[info]   CI (99.9%): [22088.004, 22088.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.022 ±(99.9%) 0.138 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.082), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.330 ±(99.9%) 2.111 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.330, 1.264), stdev = 0.548
[info]   CI (99.9%): [≈ 0, 2.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1357.479 ±(99.9%) 18.773 MB/sec [Average]
[info]   (min, avg, max) = (1353.349, 1357.479, 1362.847), stdev = 4.875
[info]   CI (99.9%): [1338.706, 1376.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   21089.887 ±(99.9%) 1027.068 B/op [Average]
[info]   (min, avg, max) = (20871.752, 21089.887, 21384.054), stdev = 266.726
[info]   CI (99.9%): [20062.820, 22116.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.821 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   16.513 ±(99.9%) 120.819 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.513, 72.046), stdev = 31.376
[info]   CI (99.9%): [≈ 0, 137.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.000, 10.000), stdev = 3.742
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 82.12% complete, ETA 00:20:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 301497.938 ops/s
[info] # Warmup Iteration   2: 341007.894 ops/s
[info] # Warmup Iteration   3: 345775.962 ops/s
[info] # Warmup Iteration   4: 328548.096 ops/s
[info] # Warmup Iteration   5: 332773.109 ops/s
[info] Iteration   1: 337392.758 ops/s
[info]                  ·gc.alloc.rate:            1606.739 MB/sec
[info]                  ·gc.alloc.rate.norm:       7496.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2032.074 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9480.335 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 341791.782 ops/s
[info]                  ·gc.alloc.rate:                   1628.275 MB/sec
[info]                  ·gc.alloc.rate.norm:              7496.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.199 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        6238.858 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 18.404 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 347319.819 ops/s
[info]                  ·gc.alloc.rate:                                  1654.506 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7496.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.069 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.315 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.094 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6175.711 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 347586.590 ops/s
[info]                  ·gc.alloc.rate:                                  1655.278 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7496.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.019 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.088 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.153 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9257.038 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 344382.203 ops/s
[info]                  ·gc.alloc.rate:            1639.945 MB/sec
[info]                  ·gc.alloc.rate.norm:       7496.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.625 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6228.405 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala":
[info]   343694.630 ±(99.9%) 16347.845 ops/s [Average]
[info]   (min, avg, max) = (337392.758, 343694.630, 347586.590), stdev = 4245.484
[info]   CI (99.9%): [327346.785, 360042.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1636.949 ±(99.9%) 77.995 MB/sec [Average]
[info]   (min, avg, max) = (1606.739, 1636.949, 1655.278), stdev = 20.255
[info]   CI (99.9%): [1558.954, 1714.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   7496.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7496.001, 7496.001, 7496.001), stdev = 0.001
[info]   CI (99.9%): [7496.001, 7496.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.116 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.069), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.081 ±(99.9%) 0.525 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.081, 0.315), stdev = 0.136
[info]   CI (99.9%): [≈ 0, 0.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1631.429 ±(99.9%) 1429.698 MB/sec [Average]
[info]   (min, avg, max) = (1355.199, 1631.429, 2044.153), stdev = 371.288
[info]   CI (99.9%): [201.731, 3061.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   7476.069 ±(99.9%) 6660.395 B/op [Average]
[info]   (min, avg, max) = (6175.711, 7476.069, 9480.335), stdev = 1729.684
[info]   CI (99.9%): [815.674, 14136.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.800 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.800, 3.998), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   3.681 ±(99.9%) 31.692 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.681, 18.404), stdev = 8.230
[info]   CI (99.9%): [≈ 0, 35.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 11.000), stdev = 3.578
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 82.35% complete, ETA 00:19:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 347362.011 ops/s
[info] # Warmup Iteration   2: 402861.099 ops/s
[info] # Warmup Iteration   3: 404313.762 ops/s
[info] # Warmup Iteration   4: 405565.129 ops/s
[info] # Warmup Iteration   5: 401288.456 ops/s
[info] Iteration   1: 402533.374 ops/s
[info]                  ·gc.alloc.rate:            1379.498 MB/sec
[info]                  ·gc.alloc.rate.norm:       5392.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2030.996 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7938.495 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 403460.338 ops/s
[info]                  ·gc.alloc.rate:            1382.267 MB/sec
[info]                  ·gc.alloc.rate.norm:       5392.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.944 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5285.418 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 402845.201 ops/s
[info]                  ·gc.alloc.rate:                   1379.914 MB/sec
[info]                  ·gc.alloc.rate.norm:              5392.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.706 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5293.499 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 15.615 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 404649.603 ops/s
[info]                  ·gc.alloc.rate:                                  1386.116 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5392.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.129 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.500 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.707 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5300.942 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 406124.226 ops/s
[info]                  ·gc.alloc.rate:                                  1391.520 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5392.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.009 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5281.523 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   403922.548 ±(99.9%) 5672.390 ops/s [Average]
[info]   (min, avg, max) = (402533.374, 403922.548, 406124.226), stdev = 1473.102
[info]   CI (99.9%): [398250.158, 409594.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1383.863 ±(99.9%) 19.340 MB/sec [Average]
[info]   (min, avg, max) = (1379.498, 1383.863, 1391.520), stdev = 5.023
[info]   CI (99.9%): [1364.523, 1403.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   5392.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5392.001, 5392.001, 5392.001), stdev = 0.001
[info]   CI (99.9%): [5392.001, 5392.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.027 ±(99.9%) 0.219 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.129), stdev = 0.057
[info]   CI (99.9%): [≈ 0, 0.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.105 ±(99.9%) 0.853 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.105, 0.500), stdev = 0.221
[info]   CI (99.9%): [≈ 0, 0.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   1493.272 ±(99.9%) 1157.595 MB/sec [Average]
[info]   (min, avg, max) = (1354.706, 1493.272, 2030.996), stdev = 300.624
[info]   CI (99.9%): [335.678, 2650.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   5819.975 ±(99.9%) 4560.364 B/op [Average]
[info]   (min, avg, max) = (5281.523, 5819.975, 7938.495), stdev = 1184.312
[info]   CI (99.9%): [1259.612, 10380.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm":
[info]   3.123 ±(99.9%) 26.890 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.123, 15.615), stdev = 6.983
[info]   CI (99.9%): [≈ 0, 30.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 11.000), stdev = 3.347
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 82.59% complete, ETA 00:19:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27241.199 ops/s
[info] # Warmup Iteration   2: 52272.965 ops/s
[info] # Warmup Iteration   3: 52207.299 ops/s
[info] # Warmup Iteration   4: 52710.202 ops/s
[info] # Warmup Iteration   5: 52844.487 ops/s
[info] Iteration   1: 51517.517 ops/s
[info]                  ·gc.alloc.rate:            1161.528 MB/sec
[info]                  ·gc.alloc.rate.norm:       35488.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.099 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 41371.611 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 50976.878 ops/s
[info]                  ·gc.alloc.rate:                   1149.221 MB/sec
[info]                  ·gc.alloc.rate.norm:              35488.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.968 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        41810.595 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 20.566 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 51108.576 ops/s
[info]                  ·gc.alloc.rate:            1152.467 MB/sec
[info]                  ·gc.alloc.rate.norm:       35488.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.540 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 41679.670 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 51686.729 ops/s
[info]                  ·gc.alloc.rate:                   1165.360 MB/sec
[info]                  ·gc.alloc.rate.norm:              35488.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.730 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        20608.040 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 20.284 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 51419.853 ops/s
[info]                  ·gc.alloc.rate:                   1159.382 MB/sec
[info]                  ·gc.alloc.rate.norm:              35488.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1358.836 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        41593.168 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 122.333 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson":
[info]   51341.911 ±(99.9%) 1128.419 ops/s [Average]
[info]   (min, avg, max) = (50976.878, 51341.911, 51686.729), stdev = 293.047
[info]   CI (99.9%): [50213.492, 52470.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1157.592 ±(99.9%) 25.497 MB/sec [Average]
[info]   (min, avg, max) = (1149.221, 1157.592, 1165.360), stdev = 6.621
[info]   CI (99.9%): [1132.095, 1183.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   35488.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (35488.008, 35488.008, 35488.009), stdev = 0.001
[info]   CI (99.9%): [35488.007, 35488.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1219.435 ±(99.9%) 1168.243 MB/sec [Average]
[info]   (min, avg, max) = (676.730, 1219.435, 1358.836), stdev = 303.389
[info]   CI (99.9%): [51.192, 2387.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   37412.617 ±(99.9%) 36178.353 B/op [Average]
[info]   (min, avg, max) = (20608.040, 37412.617, 41810.595), stdev = 9395.403
[info]   CI (99.9%): [1234.264, 73590.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 6.438 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.997), stdev = 1.672
[info]   CI (99.9%): [≈ 0, 7.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   32.636 ±(99.9%) 197.042 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 32.636, 122.333), stdev = 51.171
[info]   CI (99.9%): [≈ 0, 229.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 8.600, 10.000), stdev = 2.191
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 82.82% complete, ETA 00:19:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 44233.886 ops/s
[info] # Warmup Iteration   2: 57535.294 ops/s
[info] # Warmup Iteration   3: 57855.768 ops/s
[info] # Warmup Iteration   4: 58232.792 ops/s
[info] # Warmup Iteration   5: 58264.811 ops/s
[info] Iteration   1: 58454.968 ops/s
[info]                  ·gc.alloc.rate:            1314.748 MB/sec
[info]                  ·gc.alloc.rate.norm:       35400.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.191 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 36515.877 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 58451.064 ops/s
[info]                  ·gc.alloc.rate:            1314.769 MB/sec
[info]                  ·gc.alloc.rate.norm:       35400.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.305 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 36518.375 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 57787.936 ops/s
[info]                  ·gc.alloc.rate:            1299.659 MB/sec
[info]                  ·gc.alloc.rate.norm:       35400.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.144 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 36938.555 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 57352.826 ops/s
[info]                  ·gc.alloc.rate:                   1289.907 MB/sec
[info]                  ·gc.alloc.rate.norm:              35400.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:             678.088 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        18609.340 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 91.401 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 57041.100 ops/s
[info]                  ·gc.alloc.rate:                                  1282.908 MB/sec
[info]                  ·gc.alloc.rate.norm:                             35400.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.166 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.578 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.783 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       37604.054 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce":
[info]   57817.579 ±(99.9%) 2456.097 ops/s [Average]
[info]   (min, avg, max) = (57041.100, 57817.579, 58454.968), stdev = 637.841
[info]   CI (99.9%): [55361.481, 60273.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1300.398 ±(99.9%) 55.433 MB/sec [Average]
[info]   (min, avg, max) = (1282.908, 1300.398, 1314.769), stdev = 14.396
[info]   CI (99.9%): [1244.966, 1355.831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   35400.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (35400.007, 35400.007, 35400.008), stdev = 0.001
[info]   CI (99.9%): [35400.006, 35400.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.033 ±(99.9%) 0.286 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.166), stdev = 0.074
[info]   CI (99.9%): [≈ 0, 0.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.916 ±(99.9%) 7.884 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.916, 4.578), stdev = 2.047
[info]   CI (99.9%): [≈ 0, 8.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1221.902 ±(99.9%) 1170.653 MB/sec [Average]
[info]   (min, avg, max) = (678.088, 1221.902, 1362.783), stdev = 304.015
[info]   CI (99.9%): [51.250, 2392.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   33237.240 ±(99.9%) 31534.138 B/op [Average]
[info]   (min, avg, max) = (18609.340, 33237.240, 37604.054), stdev = 8189.316
[info]   CI (99.9%): [1703.102, 64771.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   18.280 ±(99.9%) 157.399 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18.280, 91.401), stdev = 40.876
[info]   CI (99.9%): [≈ 0, 175.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 8.000), stdev = 2.168
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83.06% complete, ETA 00:19:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 53407.250 ops/s
[info] # Warmup Iteration   2: 97939.641 ops/s
[info] # Warmup Iteration   3: 97754.566 ops/s
[info] # Warmup Iteration   4: 99208.878 ops/s
[info] # Warmup Iteration   5: 99007.053 ops/s
[info] Iteration   1: 98990.932 ops/s
[info]                  ·gc.alloc.rate:            672.167 MB/sec
[info]                  ·gc.alloc.rate.norm:       10688.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.385 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10770.974 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 99161.060 ops/s
[info]                  ·gc.alloc.rate:            673.246 MB/sec
[info]                  ·gc.alloc.rate.norm:       10688.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.323 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10752.728 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 99106.868 ops/s
[info]                  ·gc.alloc.rate:            672.949 MB/sec
[info]                  ·gc.alloc.rate.norm:       10688.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.707 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10747.682 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 99232.855 ops/s
[info]                  ·gc.alloc.rate:            673.741 MB/sec
[info]                  ·gc.alloc.rate.norm:       10688.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.629 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10733.821 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 99260.620 ops/s
[info]                  ·gc.alloc.rate:            674.136 MB/sec
[info]                  ·gc.alloc.rate.norm:       10688.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.828 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10730.686 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala":
[info]   99150.467 ±(99.9%) 414.664 ops/s [Average]
[info]   (min, avg, max) = (98990.932, 99150.467, 99260.620), stdev = 107.687
[info]   CI (99.9%): [98735.803, 99565.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   673.248 ±(99.9%) 2.913 MB/sec [Average]
[info]   (min, avg, max) = (672.167, 673.248, 674.136), stdev = 0.756
[info]   CI (99.9%): [670.335, 676.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   10688.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10688.004, 10688.004, 10688.004), stdev = 0.001
[info]   CI (99.9%): [10688.004, 10688.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   676.974 ±(99.9%) 1.365 MB/sec [Average]
[info]   (min, avg, max) = (676.629, 676.974, 677.385), stdev = 0.355
[info]   CI (99.9%): [675.609, 678.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   10747.178 ±(99.9%) 62.319 B/op [Average]
[info]   (min, avg, max) = (10730.686, 10747.178, 10770.974), stdev = 16.184
[info]   CI (99.9%): [10684.859, 10809.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83.29% complete, ETA 00:18:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 165545.369 ops/s
[info] # Warmup Iteration   2: 182877.147 ops/s
[info] # Warmup Iteration   3: 180872.496 ops/s
[info] # Warmup Iteration   4: 180475.750 ops/s
[info] # Warmup Iteration   5: 180551.833 ops/s
[info] Iteration   1: 180900.457 ops/s
[info]                  ·gc.alloc.rate:            744.746 MB/sec
[info]                  ·gc.alloc.rate.norm:       6480.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.089 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5900.026 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 179953.068 ops/s
[info]                  ·gc.alloc.rate:            740.851 MB/sec
[info]                  ·gc.alloc.rate.norm:       6480.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.092 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5931.071 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 180822.405 ops/s
[info]                  ·gc.alloc.rate:            744.387 MB/sec
[info]                  ·gc.alloc.rate.norm:       6480.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.055 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5902.571 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 181164.623 ops/s
[info]                  ·gc.alloc.rate:            745.980 MB/sec
[info]                  ·gc.alloc.rate.norm:       6480.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.216 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5891.364 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 181221.331 ops/s
[info]                  ·gc.alloc.rate:            746.089 MB/sec
[info]                  ·gc.alloc.rate.norm:       6480.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.102 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5889.511 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala":
[info]   180812.377 ±(99.9%) 1961.176 ops/s [Average]
[info]   (min, avg, max) = (179953.068, 180812.377, 181221.331), stdev = 509.311
[info]   CI (99.9%): [178851.201, 182773.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   744.411 ±(99.9%) 8.184 MB/sec [Average]
[info]   (min, avg, max) = (740.851, 744.411, 746.089), stdev = 2.125
[info]   CI (99.9%): [736.227, 752.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6480.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6480.002, 6480.002, 6480.002), stdev = 0.001
[info]   CI (99.9%): [6480.002, 6480.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   678.111 ±(99.9%) 0.237 MB/sec [Average]
[info]   (min, avg, max) = (678.055, 678.111, 678.216), stdev = 0.061
[info]   CI (99.9%): [677.874, 678.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   5902.908 ±(99.9%) 64.269 B/op [Average]
[info]   (min, avg, max) = (5889.511, 5902.908, 5931.071), stdev = 16.690
[info]   CI (99.9%): [5838.639, 5967.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 83.53% complete, ETA 00:18:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8478.502 ops/s
[info] # Warmup Iteration   2: 22467.856 ops/s
[info] # Warmup Iteration   3: 23017.534 ops/s
[info] # Warmup Iteration   4: 23151.539 ops/s
[info] # Warmup Iteration   5: 23008.227 ops/s
[info] Iteration   1: 22988.503 ops/s
[info]                  ·gc.alloc.rate:            1290.681 MB/sec
[info]                  ·gc.alloc.rate.norm:       88352.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.391 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 92713.217 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 23191.070 ops/s
[info]                  ·gc.alloc.rate:            1301.652 MB/sec
[info]                  ·gc.alloc.rate.norm:       88352.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.342 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 91860.592 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 23165.187 ops/s
[info]                  ·gc.alloc.rate:            1300.266 MB/sec
[info]                  ·gc.alloc.rate.norm:       88352.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.360 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 91959.708 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   4: 23103.168 ops/s
[info]                  ·gc.alloc.rate:                   1296.828 MB/sec
[info]                  ·gc.alloc.rate.norm:              88352.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1358.124 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        92528.085 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 317.654 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 23380.371 ops/s
[info]                  ·gc.alloc.rate:                                  1312.601 MB/sec
[info]                  ·gc.alloc.rate.norm:                             88352.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.159 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 10.675 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            681.424 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       45867.074 B/op
[info]                  ·gc.count:                                       1.000 counts
[info]                  ·gc.time:                                        1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson":
[info]   23165.660 ±(99.9%) 551.451 ops/s [Average]
[info]   (min, avg, max) = (22988.503, 23165.660, 23380.371), stdev = 143.210
[info]   CI (99.9%): [22614.209, 23717.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1300.406 ±(99.9%) 30.906 MB/sec [Average]
[info]   (min, avg, max) = (1290.681, 1300.406, 1312.601), stdev = 8.026
[info]   CI (99.9%): [1269.500, 1331.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   88352.019 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (88352.017, 88352.019, 88352.022), stdev = 0.002
[info]   CI (99.9%): [88352.011, 88352.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.032 ±(99.9%) 0.273 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.159), stdev = 0.071
[info]   CI (99.9%): [≈ 0, 0.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.135 ±(99.9%) 18.384 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.135, 10.675), stdev = 4.774
[info]   CI (99.9%): [≈ 0, 20.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1220.128 ±(99.9%) 1159.626 MB/sec [Average]
[info]   (min, avg, max) = (681.424, 1220.128, 1358.124), stdev = 301.151
[info]   CI (99.9%): [60.502, 2379.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   82985.735 ±(99.9%) 79912.938 B/op [Average]
[info]   (min, avg, max) = (45867.074, 82985.735, 92713.217), stdev = 20753.136
[info]   CI (99.9%): [3072.797, 162898.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.663), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   63.531 ±(99.9%) 547.019 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 63.531, 317.654), stdev = 142.059
[info]   CI (99.9%): [≈ 0, 610.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 7.800, 11.000), stdev = 4.087
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83.76% complete, ETA 00:18:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 88275.696 ops/s
[info] # Warmup Iteration   2: 160263.977 ops/s
[info] # Warmup Iteration   3: 165055.826 ops/s
[info] # Warmup Iteration   4: 164203.396 ops/s
[info] # Warmup Iteration   5: 164407.178 ops/s
[info] Iteration   1: 160947.995 ops/s
[info]                  ·gc.alloc.rate:            1035.527 MB/sec
[info]                  ·gc.alloc.rate.norm:       10128.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.664 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6618.128 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 160205.153 ops/s
[info]                  ·gc.alloc.rate:            1030.951 MB/sec
[info]                  ·gc.alloc.rate.norm:       10128.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.603 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13297.717 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 160650.083 ops/s
[info]                  ·gc.alloc.rate:            1033.668 MB/sec
[info]                  ·gc.alloc.rate.norm:       10128.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.697 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6630.361 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 164214.211 ops/s
[info]                  ·gc.alloc.rate:                   1056.643 MB/sec
[info]                  ·gc.alloc.rate.norm:              10128.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.398 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        12972.416 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 6.384 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 165290.239 ops/s
[info]                  ·gc.alloc.rate:            1063.484 MB/sec
[info]                  ·gc.alloc.rate.norm:       10128.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.326 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6450.453 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala":
[info]   162261.536 ±(99.9%) 8935.002 ops/s [Average]
[info]   (min, avg, max) = (160205.153, 162261.536, 165290.239), stdev = 2320.392
[info]   CI (99.9%): [153326.534, 171196.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1044.055 ±(99.9%) 57.382 MB/sec [Average]
[info]   (min, avg, max) = (1030.951, 1044.055, 1063.484), stdev = 14.902
[info]   CI (99.9%): [986.672, 1101.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   10128.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10128.002, 10128.003, 10128.003), stdev = 0.001
[info]   CI (99.9%): [10128.002, 10128.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   947.537 ±(99.9%) 1427.017 MB/sec [Average]
[info]   (min, avg, max) = (676.664, 947.537, 1353.603), stdev = 370.592
[info]   CI (99.9%): [≈ 0, 2374.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   9193.815 ±(99.9%) 13863.833 B/op [Average]
[info]   (min, avg, max) = (6450.453, 9193.815, 13297.717), stdev = 3600.393
[info]   CI (99.9%): [≈ 0, 23057.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.277 ±(99.9%) 10.994 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.277, 6.384), stdev = 2.855
[info]   CI (99.9%): [≈ 0, 12.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.800, 10.000), stdev = 2.490
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 84.00% complete, ETA 00:18:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 488194.399 ops/s
[info] # Warmup Iteration   2: 488027.709 ops/s
[info] # Warmup Iteration   3: 515047.596 ops/s
[info] # Warmup Iteration   4: 531435.316 ops/s
[info] # Warmup Iteration   5: 529504.435 ops/s
[info] Iteration   1: 533085.585 ops/s
[info]                  ·gc.alloc.rate:            593.317 MB/sec
[info]                  ·gc.alloc.rate.norm:       1752.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.021 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2002.124 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 531965.538 ops/s
[info]                  ·gc.alloc.rate:      592.103 MB/sec
[info]                  ·gc.alloc.rate.norm: 1752.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 535601.629 ops/s
[info]                  ·gc.alloc.rate:            596.151 MB/sec
[info]                  ·gc.alloc.rate.norm:       1752.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.375 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1990.707 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 534414.918 ops/s
[info]                  ·gc.alloc.rate:            594.836 MB/sec
[info]                  ·gc.alloc.rate.norm:       1752.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.376 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1995.109 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 534356.187 ops/s
[info]                  ·gc.alloc.rate:                   594.785 MB/sec
[info]                  ·gc.alloc.rate.norm:              1752.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.383 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1995.300 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.962 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala":
[info]   533884.771 ±(99.9%) 5367.831 ops/s [Average]
[info]   (min, avg, max) = (531965.538, 533884.771, 535601.629), stdev = 1394.009
[info]   CI (99.9%): [528516.940, 539252.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   594.238 ±(99.9%) 6.003 MB/sec [Average]
[info]   (min, avg, max) = (592.103, 594.238, 596.151), stdev = 1.559
[info]   CI (99.9%): [588.235, 600.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1752.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1752.001, 1752.001, 1752.001), stdev = 0.001
[info]   CI (99.9%): [1752.001, 1752.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   542.031 ±(99.9%) 1166.763 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 542.031, 678.021), stdev = 303.005
[info]   CI (99.9%): [≈ 0, 1708.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1596.648 ±(99.9%) 3436.941 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1596.648, 2002.124), stdev = 892.563
[info]   CI (99.9%): [≈ 0, 5033.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.392 ±(99.9%) 3.379 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.392, 1.962), stdev = 0.877
[info]   CI (99.9%): [≈ 0, 3.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 84.24% complete, ETA 00:17:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 520331.171 ops/s
[info] # Warmup Iteration   2: 570216.829 ops/s
[info] # Warmup Iteration   3: 570887.892 ops/s
[info] # Warmup Iteration   4: 570850.975 ops/s
[info] # Warmup Iteration   5: 572413.514 ops/s
[info] Iteration   1: 571115.087 ops/s
[info]                  ·gc.alloc.rate:      11.610 MB/sec
[info]                  ·gc.alloc.rate.norm: 32.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 570119.462 ops/s
[info]                  ·gc.alloc.rate:      11.590 MB/sec
[info]                  ·gc.alloc.rate.norm: 32.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 572403.088 ops/s
[info]                  ·gc.alloc.rate:      11.639 MB/sec
[info]                  ·gc.alloc.rate.norm: 32.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 570786.641 ops/s
[info]                  ·gc.alloc.rate:      11.606 MB/sec
[info]                  ·gc.alloc.rate.norm: 32.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 570548.190 ops/s
[info]                  ·gc.alloc.rate:      11.599 MB/sec
[info]                  ·gc.alloc.rate.norm: 32.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   570994.494 ±(99.9%) 3338.505 ops/s [Average]
[info]   (min, avg, max) = (570119.462, 570994.494, 572403.088), stdev = 866.999
[info]   CI (99.9%): [567655.989, 574332.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   11.609 ±(99.9%) 0.071 MB/sec [Average]
[info]   (min, avg, max) = (11.590, 11.609, 11.639), stdev = 0.018
[info]   CI (99.9%): [11.538, 11.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   32.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (32.001, 32.001, 32.001), stdev = 0.001
[info]   CI (99.9%): [32.001, 32.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 84.47% complete, ETA 00:17:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34369.945 ops/s
[info] # Warmup Iteration   2: 61386.188 ops/s
[info] # Warmup Iteration   3: 63146.089 ops/s
[info] # Warmup Iteration   4: 64333.562 ops/s
[info] # Warmup Iteration   5: 64733.537 ops/s
[info] Iteration   1: 64288.651 ops/s
[info]                  ·gc.alloc.rate:                   1036.654 MB/sec
[info]                  ·gc.alloc.rate.norm:              25384.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.963 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        33153.782 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 16.308 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 64641.216 ops/s
[info]                  ·gc.alloc.rate:                   1042.357 MB/sec
[info]                  ·gc.alloc.rate.norm:              25384.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.666 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        16478.526 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 16.219 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 64363.994 ops/s
[info]                  ·gc.alloc.rate:            1037.902 MB/sec
[info]                  ·gc.alloc.rate.norm:       25384.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.013 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 33115.155 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 64405.248 ops/s
[info]                  ·gc.alloc.rate:            1038.615 MB/sec
[info]                  ·gc.alloc.rate.norm:       25384.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.394 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 33077.286 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 64773.899 ops/s
[info]                  ·gc.alloc.rate:            1045.070 MB/sec
[info]                  ·gc.alloc.rate.norm:       25384.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.003 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16443.935 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson":
[info]   64494.602 ±(99.9%) 786.703 ops/s [Average]
[info]   (min, avg, max) = (64288.651, 64494.602, 64773.899), stdev = 204.304
[info]   CI (99.9%): [63707.899, 65281.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1040.119 ±(99.9%) 13.436 MB/sec [Average]
[info]   (min, avg, max) = (1036.654, 1040.119, 1045.070), stdev = 3.489
[info]   CI (99.9%): [1026.683, 1053.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   25384.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (25384.006, 25384.007, 25384.007), stdev = 0.001
[info]   CI (99.9%): [25384.005, 25384.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1083.008 ±(99.9%) 1427.756 MB/sec [Average]
[info]   (min, avg, max) = (676.666, 1083.008, 1354.013), stdev = 370.784
[info]   CI (99.9%): [≈ 0, 2510.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   26453.737 ±(99.9%) 35125.253 B/op [Average]
[info]   (min, avg, max) = (16443.935, 26453.737, 33153.782), stdev = 9121.917
[info]   CI (99.9%): [≈ 0, 61578.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   6.505 ±(99.9%) 34.301 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.505, 16.308), stdev = 8.908
[info]   CI (99.9%): [≈ 0, 40.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 8.000, 11.000), stdev = 2.828
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 84.71% complete, ETA 00:17:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 61811.908 ops/s
[info] # Warmup Iteration   2: 76821.157 ops/s
[info] # Warmup Iteration   3: 75948.625 ops/s
[info] # Warmup Iteration   4: 76681.471 ops/s
[info] # Warmup Iteration   5: 77169.998 ops/s
[info] Iteration   1: 77147.441 ops/s
[info]                  ·gc.alloc.rate:            1348.322 MB/sec
[info]                  ·gc.alloc.rate.norm:       27504.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.368 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27668.132 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 76229.244 ops/s
[info]                  ·gc.alloc.rate:            1332.261 MB/sec
[info]                  ·gc.alloc.rate.norm:       27504.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.365 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28001.636 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 75678.367 ops/s
[info]                  ·gc.alloc.rate:            1322.248 MB/sec
[info]                  ·gc.alloc.rate.norm:       27504.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.971 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28205.477 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 76249.808 ops/s
[info]                  ·gc.alloc.rate:                                  1332.416 MB/sec
[info]                  ·gc.alloc.rate.norm:                             27504.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.042 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1359.445 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       28061.937 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                68.746 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 77178.405 ops/s
[info]                  ·gc.alloc.rate:                                  1348.558 MB/sec
[info]                  ·gc.alloc.rate.norm:                             27504.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.086 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.762 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.721 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       27792.861 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce":
[info]   76496.653 ±(99.9%) 2503.172 ops/s [Average]
[info]   (min, avg, max) = (75678.367, 76496.653, 77178.405), stdev = 650.066
[info]   CI (99.9%): [73993.480, 78999.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1336.761 ±(99.9%) 44.013 MB/sec [Average]
[info]   (min, avg, max) = (1322.248, 1336.761, 1348.558), stdev = 11.430
[info]   CI (99.9%): [1292.748, 1380.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   27504.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (27504.005, 27504.005, 27504.006), stdev = 0.001
[info]   CI (99.9%): [27504.005, 27504.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.148 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.086), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.361 ±(99.9%) 3.017 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.361, 1.762), stdev = 0.784
[info]   CI (99.9%): [≈ 0, 3.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1358.174 ±(99.9%) 11.173 MB/sec [Average]
[info]   (min, avg, max) = (1355.971, 1358.174, 1362.721), stdev = 2.902
[info]   CI (99.9%): [1347.001, 1369.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   27946.008 ±(99.9%) 827.053 B/op [Average]
[info]   (min, avg, max) = (27668.132, 27946.008, 28205.477), stdev = 214.783
[info]   CI (99.9%): [27118.955, 28773.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   13.749 ±(99.9%) 118.384 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.749, 68.746), stdev = 30.744
[info]   CI (99.9%): [≈ 0, 132.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 10.000), stdev = 2.510
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 84.94% complete, ETA 00:17:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 67258.606 ops/s
[info] # Warmup Iteration   2: 145115.515 ops/s
[info] # Warmup Iteration   3: 147128.823 ops/s
[info] # Warmup Iteration   4: 147088.432 ops/s
[info] # Warmup Iteration   5: 146887.650 ops/s
[info] Iteration   1: 147172.352 ops/s
[info]                  ·gc.alloc.rate:            629.067 MB/sec
[info]                  ·gc.alloc.rate.norm:       6728.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.380 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7244.725 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 147758.210 ops/s
[info]                  ·gc.alloc.rate:            631.609 MB/sec
[info]                  ·gc.alloc.rate.norm:       6728.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.773 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7209.097 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 148505.730 ops/s
[info]                  ·gc.alloc.rate:      634.906 MB/sec
[info]                  ·gc.alloc.rate.norm: 6728.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 147712.695 ops/s
[info]                  ·gc.alloc.rate:            631.485 MB/sec
[info]                  ·gc.alloc.rate.norm:       6728.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.814 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7210.952 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 147518.639 ops/s
[info]                  ·gc.alloc.rate:            630.624 MB/sec
[info]                  ·gc.alloc.rate.norm:       6728.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.785 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7220.482 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala":
[info]   147733.525 ±(99.9%) 1884.884 ops/s [Average]
[info]   (min, avg, max) = (147172.352, 147733.525, 148505.730), stdev = 489.498
[info]   CI (99.9%): [145848.641, 149618.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   631.538 ±(99.9%) 8.235 MB/sec [Average]
[info]   (min, avg, max) = (629.067, 631.538, 634.906), stdev = 2.139
[info]   CI (99.9%): [623.303, 639.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   6728.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6728.003, 6728.003, 6728.003), stdev = 0.001
[info]   CI (99.9%): [6728.002, 6728.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   541.551 ±(99.9%) 1165.729 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 541.551, 677.380), stdev = 302.736
[info]   CI (99.9%): [≈ 0, 1707.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   5777.051 ±(99.9%) 12435.658 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5777.051, 7244.725), stdev = 3229.501
[info]   CI (99.9%): [≈ 0, 18212.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.800, 5.000), stdev = 2.168
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 85.18% complete, ETA 00:16:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 191846.206 ops/s
[info] # Warmup Iteration   2: 208710.983 ops/s
[info] # Warmup Iteration   3: 209684.015 ops/s
[info] # Warmup Iteration   4: 207573.735 ops/s
[info] # Warmup Iteration   5: 208700.009 ops/s
[info] Iteration   1: 208856.799 ops/s
[info]                  ·gc.alloc.rate:            744.060 MB/sec
[info]                  ·gc.alloc.rate.norm:       5608.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.000 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5110.108 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 211439.159 ops/s
[info]                  ·gc.alloc.rate:            753.291 MB/sec
[info]                  ·gc.alloc.rate.norm:       5608.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.037 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5047.763 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 210520.604 ops/s
[info]                  ·gc.alloc.rate:            749.998 MB/sec
[info]                  ·gc.alloc.rate.norm:       5608.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.000 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5069.650 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 212019.079 ops/s
[info]                  ·gc.alloc.rate:            755.353 MB/sec
[info]                  ·gc.alloc.rate.norm:       5608.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.996 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5033.671 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 212356.732 ops/s
[info]                  ·gc.alloc.rate:            756.573 MB/sec
[info]                  ·gc.alloc.rate.norm:       5608.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.022 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5025.756 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala":
[info]   211038.475 ±(99.9%) 5407.323 ops/s [Average]
[info]   (min, avg, max) = (208856.799, 211038.475, 212356.732), stdev = 1404.265
[info]   CI (99.9%): [205631.151, 216445.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   751.855 ±(99.9%) 19.327 MB/sec [Average]
[info]   (min, avg, max) = (744.060, 751.855, 756.573), stdev = 5.019
[info]   CI (99.9%): [732.528, 771.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5608.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5608.002, 5608.002, 5608.002), stdev = 0.001
[info]   CI (99.9%): [5608.002, 5608.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   678.011 ±(99.9%) 0.069 MB/sec [Average]
[info]   (min, avg, max) = (677.996, 678.011, 678.037), stdev = 0.018
[info]   CI (99.9%): [677.942, 678.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   5057.389 ±(99.9%) 130.375 B/op [Average]
[info]   (min, avg, max) = (5025.756, 5057.389, 5110.108), stdev = 33.858
[info]   CI (99.9%): [4927.014, 5187.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 85.41% complete, ETA 00:16:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25455.148 ops/s
[info] # Warmup Iteration   2: 41400.515 ops/s
[info] # Warmup Iteration   3: 41665.121 ops/s
[info] # Warmup Iteration   4: 40698.372 ops/s
[info] # Warmup Iteration   5: 41754.654 ops/s
[info] Iteration   1: 41188.176 ops/s
[info]                  ·gc.alloc.rate:            1707.763 MB/sec
[info]                  ·gc.alloc.rate.norm:       65264.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2032.130 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 77660.041 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 41894.403 ops/s
[info]                  ·gc.alloc.rate:                                  1737.031 MB/sec
[info]                  ·gc.alloc.rate.norm:                             65264.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.035 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.307 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.685 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       51048.733 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                150.143 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 41197.115 ops/s
[info]                  ·gc.alloc.rate:                                  1708.148 MB/sec
[info]                  ·gc.alloc.rate.norm:                             65264.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.038 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.465 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.034 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       78097.358 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   4: 42263.226 ops/s
[info]                  ·gc.alloc.rate:            1752.860 MB/sec
[info]                  ·gc.alloc.rate.norm:       65264.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1363.127 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 50753.152 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 42197.869 ops/s
[info]                  ·gc.alloc.rate:                                  1749.793 MB/sec
[info]                  ·gc.alloc.rate.norm:                             65264.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.091 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.354 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       76250.586 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson":
[info]   41748.158 ±(99.9%) 2024.932 ops/s [Average]
[info]   (min, avg, max) = (41188.176, 41748.158, 42263.226), stdev = 525.868
[info]   CI (99.9%): [39723.226, 43773.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1731.119 ±(99.9%) 84.571 MB/sec [Average]
[info]   (min, avg, max) = (1707.763, 1731.119, 1752.860), stdev = 21.963
[info]   CI (99.9%): [1646.548, 1815.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   65264.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (65264.010, 65264.010, 65264.010), stdev = 0.001
[info]   CI (99.9%): [65264.009, 65264.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.076 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.038), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.573 ±(99.9%) 2.871 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.573, 1.465), stdev = 0.746
[info]   CI (99.9%): [≈ 0, 3.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1768.466 ±(99.9%) 1432.769 MB/sec [Average]
[info]   (min, avg, max) = (1358.685, 1768.466, 2044.354), stdev = 372.086
[info]   CI (99.9%): [335.697, 3201.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   66761.974 ±(99.9%) 55817.102 B/op [Average]
[info]   (min, avg, max) = (50753.152, 66761.974, 78097.358), stdev = 14495.524
[info]   CI (99.9%): [10944.872, 122579.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   30.029 ±(99.9%) 258.556 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 30.029, 150.143), stdev = 67.146
[info]   CI (99.9%): [≈ 0, 288.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.600, 14.000), stdev = 5.177
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 85.65% complete, ETA 00:16:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 185765.029 ops/s
[info] # Warmup Iteration   2: 257415.366 ops/s
[info] # Warmup Iteration   3: 263649.977 ops/s
[info] # Warmup Iteration   4: 262938.547 ops/s
[info] # Warmup Iteration   5: 258897.901 ops/s
[info] Iteration   1: 261478.970 ops/s
[info]                  ·gc.alloc.rate:                   1230.605 MB/sec
[info]                  ·gc.alloc.rate.norm:              7408.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.414 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        8159.329 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 4.009 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 261490.841 ops/s
[info]                  ·gc.alloc.rate:            1230.662 MB/sec
[info]                  ·gc.alloc.rate.norm:       7408.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.092 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8163.026 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 262904.040 ops/s
[info]                  ·gc.alloc.rate:            1237.327 MB/sec
[info]                  ·gc.alloc.rate.norm:       7408.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.026 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8118.666 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 264277.863 ops/s
[info]                  ·gc.alloc.rate:            1243.762 MB/sec
[info]                  ·gc.alloc.rate.norm:       7408.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.033 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4038.447 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 262187.367 ops/s
[info]                  ·gc.alloc.rate:                   1234.044 MB/sec
[info]                  ·gc.alloc.rate.norm:              7408.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1359.566 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        8161.509 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 19.994 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce":
[info]   262467.816 ±(99.9%) 4506.040 ops/s [Average]
[info]   (min, avg, max) = (261478.970, 262467.816, 264277.863), stdev = 1170.204
[info]   CI (99.9%): [257961.776, 266973.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1235.280 ±(99.9%) 21.164 MB/sec [Average]
[info]   (min, avg, max) = (1230.605, 1235.280, 1243.762), stdev = 5.496
[info]   CI (99.9%): [1214.116, 1256.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7408.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7408.002, 7408.002, 7408.002), stdev = 0.001
[info]   CI (99.9%): [7408.001, 7408.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1221.026 ±(99.9%) 1168.851 MB/sec [Average]
[info]   (min, avg, max) = (678.033, 1221.026, 1359.566), stdev = 303.547
[info]   CI (99.9%): [52.175, 2389.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   7328.196 ±(99.9%) 7081.790 B/op [Average]
[info]   (min, avg, max) = (4038.447, 7328.196, 8163.026), stdev = 1839.118
[info]   CI (99.9%): [246.405, 14409.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.561 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.331), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   4.801 ±(99.9%) 33.381 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.801, 19.994), stdev = 8.669
[info]   CI (99.9%): [≈ 0, 38.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 8.000), stdev = 1.517
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 85.88% complete, ETA 00:15:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 272882.923 ops/s
[info] # Warmup Iteration   2: 490730.926 ops/s
[info] # Warmup Iteration   3: 492190.276 ops/s
[info] # Warmup Iteration   4: 495786.437 ops/s
[info] # Warmup Iteration   5: 496176.820 ops/s
[info] Iteration   1: 494534.048 ops/s
[info]                  ·gc.alloc.rate:            397.218 MB/sec
[info]                  ·gc.alloc.rate.norm:       1264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.524 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2155.972 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 498399.787 ops/s
[info]                  ·gc.alloc.rate:      400.387 MB/sec
[info]                  ·gc.alloc.rate.norm: 1264.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 504210.127 ops/s
[info]                  ·gc.alloc.rate:            405.015 MB/sec
[info]                  ·gc.alloc.rate.norm:       1264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.887 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2112.480 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 506309.217 ops/s
[info]                  ·gc.alloc.rate:            406.579 MB/sec
[info]                  ·gc.alloc.rate.norm:       1264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.688 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2103.737 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 507828.002 ops/s
[info]                  ·gc.alloc.rate:      407.797 MB/sec
[info]                  ·gc.alloc.rate.norm: 1264.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala":
[info]   502256.236 ±(99.9%) 21593.952 ops/s [Average]
[info]   (min, avg, max) = (494534.048, 502256.236, 507828.002), stdev = 5607.881
[info]   CI (99.9%): [480662.284, 523850.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   403.399 ±(99.9%) 17.149 MB/sec [Average]
[info]   (min, avg, max) = (397.218, 403.399, 407.797), stdev = 4.454
[info]   CI (99.9%): [386.250, 420.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1264.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1264.001, 1264.001, 1264.001), stdev = 0.001
[info]   CI (99.9%): [1264.001, 1264.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   406.220 ±(99.9%) 1427.920 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 406.220, 677.524), stdev = 370.826
[info]   CI (99.9%): [≈ 0, 1834.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1274.438 ±(99.9%) 4480.475 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1274.438, 2155.972), stdev = 1163.565
[info]   CI (99.9%): [≈ 0, 5754.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 5.000), stdev = 2.408
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 86.12% complete, ETA 00:15:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 526269.976 ops/s
[info] # Warmup Iteration   2: 564403.412 ops/s
[info] # Warmup Iteration   3: 557598.407 ops/s
[info] # Warmup Iteration   4: 570668.896 ops/s
[info] # Warmup Iteration   5: 565284.534 ops/s
[info] Iteration   1: 565270.395 ops/s
[info]                  ·gc.alloc.rate:      304.502 MB/sec
[info]                  ·gc.alloc.rate.norm: 848.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 562778.974 ops/s
[info]                  ·gc.alloc.rate:                   303.193 MB/sec
[info]                  ·gc.alloc.rate.norm:              848.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.368 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1894.529 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.863 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 570381.467 ops/s
[info]                  ·gc.alloc.rate:      307.324 MB/sec
[info]                  ·gc.alloc.rate.norm: 848.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 564794.893 ops/s
[info]                  ·gc.alloc.rate:            304.346 MB/sec
[info]                  ·gc.alloc.rate.norm:       848.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.194 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1889.654 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 566026.478 ops/s
[info]                  ·gc.alloc.rate:      304.933 MB/sec
[info]                  ·gc.alloc.rate.norm: 848.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala":
[info]   565850.441 ±(99.9%) 10796.531 ops/s [Average]
[info]   (min, avg, max) = (562778.974, 565850.441, 570381.467), stdev = 2803.825
[info]   CI (99.9%): [555053.911, 576646.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   304.859 ±(99.9%) 5.854 MB/sec [Average]
[info]   (min, avg, max) = (303.193, 304.859, 307.324), stdev = 1.520
[info]   CI (99.9%): [299.005, 310.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   848.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (848.001, 848.001, 848.001), stdev = 0.001
[info]   CI (99.9%): [848.001, 848.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   271.112 ±(99.9%) 1429.497 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 271.112, 678.194), stdev = 371.236
[info]   CI (99.9%): [≈ 0, 1700.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   756.837 ±(99.9%) 3990.586 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 756.837, 1894.529), stdev = 1036.343
[info]   CI (99.9%): [≈ 0, 4747.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.373 ±(99.9%) 3.208 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.373, 1.863), stdev = 0.833
[info]   CI (99.9%): [≈ 0, 3.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.643
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 86.35% complete, ETA 00:15:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 567445.554 ops/s
[info] # Warmup Iteration   2: 622620.360 ops/s
[info] # Warmup Iteration   3: 611298.960 ops/s
[info] # Warmup Iteration   4: 622474.795 ops/s
[info] # Warmup Iteration   5: 602436.624 ops/s
[info] Iteration   1: 618474.931 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 622136.804 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 623298.982 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 623711.495 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 624005.709 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   622325.584 ±(99.9%) 8728.791 ops/s [Average]
[info]   (min, avg, max) = (618474.931, 622325.584, 624005.709), stdev = 2266.839
[info]   CI (99.9%): [613596.793, 631054.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 86.59% complete, ETA 00:15:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20348.659 ops/s
[info] # Warmup Iteration   2: 30332.582 ops/s
[info] # Warmup Iteration   3: 29837.745 ops/s
[info] # Warmup Iteration   4: 30235.356 ops/s
[info] # Warmup Iteration   5: 30364.828 ops/s
[info] Iteration   1: 30463.073 ops/s
[info]                  ·gc.alloc.rate:            1517.653 MB/sec
[info]                  ·gc.alloc.rate.norm:       78416.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.754 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 69999.133 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 30472.461 ops/s
[info]                  ·gc.alloc.rate:            1518.597 MB/sec
[info]                  ·gc.alloc.rate.norm:       78416.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.152 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 69976.167 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 30301.665 ops/s
[info]                  ·gc.alloc.rate:                                  1509.654 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78416.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.065 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.372 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2036.155 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       105764.050 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                207.584 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   4: 30771.085 ops/s
[info]                  ·gc.alloc.rate:                                  1533.094 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78416.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.127 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 6.494 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.835 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       69707.460 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 30841.200 ops/s
[info]                  ·gc.alloc.rate:            1536.676 MB/sec
[info]                  ·gc.alloc.rate.norm:       78416.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.919 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 69549.275 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson":
[info]   30569.897 ±(99.9%) 875.832 ops/s [Average]
[info]   (min, avg, max) = (30301.665, 30569.897, 30841.200), stdev = 227.451
[info]   CI (99.9%): [29694.065, 31445.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1523.135 ±(99.9%) 43.688 MB/sec [Average]
[info]   (min, avg, max) = (1509.654, 1523.135, 1536.676), stdev = 11.346
[info]   CI (99.9%): [1479.447, 1566.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   78416.014 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (78416.013, 78416.014, 78416.014), stdev = 0.001
[info]   CI (99.9%): [78416.012, 78416.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.038 ±(99.9%) 0.219 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.038, 0.127), stdev = 0.057
[info]   CI (99.9%): [≈ 0, 0.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.973 ±(99.9%) 11.239 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.973, 6.494), stdev = 2.919
[info]   CI (99.9%): [≈ 0, 13.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1494.363 ±(99.9%) 1166.348 MB/sec [Average]
[info]   (min, avg, max) = (1354.754, 1494.363, 2036.155), stdev = 302.897
[info]   CI (99.9%): [328.015, 2660.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   76999.217 ±(99.9%) 61922.718 B/op [Average]
[info]   (min, avg, max) = (69549.275, 76999.217, 105764.050), stdev = 16081.133
[info]   CI (99.9%): [15076.499, 138921.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   41.517 ±(99.9%) 357.472 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 41.517, 207.584), stdev = 92.834
[info]   CI (99.9%): [≈ 0, 398.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.400, 11.000), stdev = 4.159
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce
[info] # Run progress: 86.82% complete, ETA 00:14:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 281284.476 ops/s
[info] # Warmup Iteration   2: 599098.825 ops/s
[info] # Warmup Iteration   3: 616002.193 ops/s
[info] # Warmup Iteration   4: 614429.306 ops/s
[info] # Warmup Iteration   5: 613582.806 ops/s
[info] Iteration   1: 613193.932 ops/s
[info]                  ·gc.alloc.rate:            1882.262 MB/sec
[info]                  ·gc.alloc.rate.norm:       4832.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2034.015 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5221.568 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 617272.596 ops/s
[info]                  ·gc.alloc.rate:                                  1894.880 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4832.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.058 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.148 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1359.347 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3466.375 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                8.492 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 617721.812 ops/s
[info]                  ·gc.alloc.rate:                                  1896.230 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4832.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.116 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.295 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.071 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5208.732 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 617751.680 ops/s
[info]                  ·gc.alloc.rate:            1896.389 MB/sec
[info]                  ·gc.alloc.rate.norm:       4832.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.144 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5208.479 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 624920.948 ops/s
[info]                  ·gc.alloc.rate:            1918.310 MB/sec
[info]                  ·gc.alloc.rate.norm:       4832.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2043.996 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5148.590 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce":
[info]   618172.194 ±(99.9%) 16282.091 ops/s [Average]
[info]   (min, avg, max) = (613193.932, 618172.194, 624920.948), stdev = 4228.407
[info]   CI (99.9%): [601890.102, 634454.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate":
[info]   1897.614 ±(99.9%) 50.018 MB/sec [Average]
[info]   (min, avg, max) = (1882.262, 1897.614, 1918.310), stdev = 12.989
[info]   CI (99.9%): [1847.597, 1947.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4832.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4832.001, 4832.001, 4832.001), stdev = 0.001
[info]   CI (99.9%): [4832.001, 4832.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.035 ±(99.9%) 0.200 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.035, 0.116), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.089 ±(99.9%) 0.509 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.089, 0.295), stdev = 0.132
[info]   CI (99.9%): [≈ 0, 0.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1905.115 ±(99.9%) 1174.926 MB/sec [Average]
[info]   (min, avg, max) = (1359.347, 1905.115, 2044.144), stdev = 305.125
[info]   CI (99.9%): [730.188, 3080.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   4850.749 ±(99.9%) 2981.968 B/op [Average]
[info]   (min, avg, max) = (3466.375, 4850.749, 5221.568), stdev = 774.408
[info]   CI (99.9%): [1868.781, 7832.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.698 ±(99.9%) 14.623 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.698, 8.492), stdev = 3.798
[info]   CI (99.9%): [≈ 0, 16.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 11.000), stdev = 3.050
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala
[info] # Run progress: 87.06% complete, ETA 00:14:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 343338.335 ops/s
[info] # Warmup Iteration   2: 1353241.567 ops/s
[info] # Warmup Iteration   3: 1310785.773 ops/s
[info] # Warmup Iteration   4: 1358791.724 ops/s
[info] # Warmup Iteration   5: 1354116.000 ops/s
[info] Iteration   1: 1359095.670 ops/s
[info]                  ·gc.alloc.rate:                   1029.104 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.620 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        783.721 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.771 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 1352663.178 ops/s
[info]                  ·gc.alloc.rate:            1024.297 MB/sec
[info]                  ·gc.alloc.rate.norm:       1192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.664 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1576.456 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 1362076.872 ops/s
[info]                  ·gc.alloc.rate:            1031.425 MB/sec
[info]                  ·gc.alloc.rate.norm:       1192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.660 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 782.005 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 1333001.311 ops/s
[info]                  ·gc.alloc.rate:                   1009.774 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.826 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1598.142 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.786 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 1321124.814 ops/s
[info]                  ·gc.alloc.rate:            1000.488 MB/sec
[info]                  ·gc.alloc.rate.norm:       1192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.374 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 807.036 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala":
[info]   1345592.369 ±(99.9%) 68376.592 ops/s [Average]
[info]   (min, avg, max) = (1321124.814, 1345592.369, 1362076.872), stdev = 17757.184
[info]   CI (99.9%): [1277215.778, 1413968.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1019.018 ±(99.9%) 51.387 MB/sec [Average]
[info]   (min, avg, max) = (1000.488, 1019.018, 1031.425), stdev = 13.345
[info]   CI (99.9%): [967.631, 1070.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1192.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1192.000, 1192.000, 1192.000), stdev = 0.001
[info]   CI (99.9%): [1192.000, 1192.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   947.829 ±(99.9%) 1428.611 MB/sec [Average]
[info]   (min, avg, max) = (676.620, 947.829, 1354.664), stdev = 371.006
[info]   CI (99.9%): [≈ 0, 2376.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1109.472 ±(99.9%) 1680.320 B/op [Average]
[info]   (min, avg, max) = (782.005, 1109.472, 1598.142), stdev = 436.374
[info]   CI (99.9%): [≈ 0, 2789.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.312 ±(99.9%) 1.643 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.312, 0.786), stdev = 0.427
[info]   CI (99.9%): [≈ 0, 1.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.800, 10.000), stdev = 2.950
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala
[info] # Run progress: 87.29% complete, ETA 00:14:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6349047.449 ops/s
[info] # Warmup Iteration   2: 6887343.017 ops/s
[info] # Warmup Iteration   3: 6778403.512 ops/s
[info] # Warmup Iteration   4: 6647743.360 ops/s
[info] # Warmup Iteration   5: 6672218.019 ops/s
[info] Iteration   1: 6992978.229 ops/s
[info]                  ·gc.alloc.rate:      213.287 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 6975416.319 ops/s
[info]                  ·gc.alloc.rate:            212.749 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.823 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 153.155 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 6987155.971 ops/s
[info]                  ·gc.alloc.rate:      213.064 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 6981567.707 ops/s
[info]                  ·gc.alloc.rate:      212.905 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 6835374.462 ops/s
[info]                  ·gc.alloc.rate:            208.421 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.947 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 156.133 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala":
[info]   6954498.538 ±(99.9%) 257648.319 ops/s [Average]
[info]   (min, avg, max) = (6835374.462, 6954498.538, 6992978.229), stdev = 66910.450
[info]   CI (99.9%): [6696850.218, 7212146.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   212.085 ±(99.9%) 7.924 MB/sec [Average]
[info]   (min, avg, max) = (208.421, 212.085, 213.287), stdev = 2.058
[info]   CI (99.9%): [204.161, 220.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   271.354 ±(99.9%) 1430.772 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 271.354, 678.823), stdev = 371.567
[info]   CI (99.9%): [≈ 0, 1702.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   61.858 ±(99.9%) 326.182 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 61.858, 156.133), stdev = 84.708
[info]   CI (99.9%): [≈ 0, 388.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.643
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson
[info] # Run progress: 87.53% complete, ETA 00:14:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29037.261 ops/s
[info] # Warmup Iteration   2: 206080.612 ops/s
[info] # Warmup Iteration   3: 208659.447 ops/s
[info] # Warmup Iteration   4: 206882.037 ops/s
[info] # Warmup Iteration   5: 209045.554 ops/s
[info] Iteration   1: 209132.753 ops/s
[info]                  ·gc.alloc.rate:                   1445.497 MB/sec
[info]                  ·gc.alloc.rate.norm:              10880.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.351 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        10186.433 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.013 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 209759.174 ops/s
[info]                  ·gc.alloc.rate:            1449.724 MB/sec
[info]                  ·gc.alloc.rate.norm:       10880.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2031.925 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 15249.343 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   3: 209681.495 ops/s
[info]                  ·gc.alloc.rate:                   1449.733 MB/sec
[info]                  ·gc.alloc.rate.norm:              10880.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.790 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        10159.961 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 35.000 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 210337.429 ops/s
[info]                  ·gc.alloc.rate:                                  1454.307 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10880.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.103 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.768 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.121 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10197.819 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 211302.602 ops/s
[info]                  ·gc.alloc.rate:                                  1460.536 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10880.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.017 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.128 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.702 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10151.207 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson":
[info]   210042.691 ±(99.9%) 3171.280 ops/s [Average]
[info]   (min, avg, max) = (209132.753, 210042.691, 211302.602), stdev = 823.571
[info]   CI (99.9%): [206871.411, 213213.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1451.959 ±(99.9%) 22.018 MB/sec [Average]
[info]   (min, avg, max) = (1445.497, 1451.959, 1460.536), stdev = 5.718
[info]   CI (99.9%): [1429.942, 1473.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10880.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10880.002, 10880.002, 10880.002), stdev = 0.001
[info]   CI (99.9%): [10880.002, 10880.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.024 ±(99.9%) 0.172 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.103), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.179 ±(99.9%) 1.285 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.179, 0.768), stdev = 0.334
[info]   CI (99.9%): [≈ 0, 1.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1492.978 ±(99.9%) 1160.264 MB/sec [Average]
[info]   (min, avg, max) = (1353.351, 1492.978, 2031.925), stdev = 301.317
[info]   CI (99.9%): [332.713, 2653.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   11188.953 ±(99.9%) 8740.601 B/op [Average]
[info]   (min, avg, max) = (10151.207, 11188.953, 15249.343), stdev = 2269.906
[info]   CI (99.9%): [2448.351, 19929.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.824 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.664), stdev = 2.032
[info]   CI (99.9%): [≈ 0, 8.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   8.003 ±(99.9%) 58.712 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.003, 35.000), stdev = 15.247
[info]   CI (99.9%): [≈ 0, 66.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.200, 15.000), stdev = 5.215
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce
[info] # Run progress: 87.76% complete, ETA 00:13:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 340342.923 ops/s
[info] # Warmup Iteration   2: 819103.060 ops/s
[info] # Warmup Iteration   3: 798916.365 ops/s
[info] # Warmup Iteration   4: 839341.795 ops/s
[info] # Warmup Iteration   5: 837994.006 ops/s
[info] Iteration   1: 837066.437 ops/s
[info]                  ·gc.alloc.rate:                   1285.076 MB/sec
[info]                  ·gc.alloc.rate.norm:              2416.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.766 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2548.900 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.253 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 832653.358 ops/s
[info]                  ·gc.alloc.rate:            1278.366 MB/sec
[info]                  ·gc.alloc.rate.norm:       2416.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.452 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2563.577 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 830649.027 ops/s
[info]                  ·gc.alloc.rate:            1274.977 MB/sec
[info]                  ·gc.alloc.rate.norm:       2416.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.049 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1284.860 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 840006.416 ops/s
[info]                  ·gc.alloc.rate:            1289.248 MB/sec
[info]                  ·gc.alloc.rate.norm:       2416.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.023 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2541.134 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 799401.734 ops/s
[info]                  ·gc.alloc.rate:                   1227.480 MB/sec
[info]                  ·gc.alloc.rate.norm:              2416.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1359.997 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2676.829 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 6.558 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce":
[info]   827955.394 ±(99.9%) 63063.516 ops/s [Average]
[info]   (min, avg, max) = (799401.734, 827955.394, 840006.416), stdev = 16377.395
[info]   CI (99.9%): [764891.878, 891018.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1271.030 ±(99.9%) 96.174 MB/sec [Average]
[info]   (min, avg, max) = (1227.480, 1271.030, 1289.248), stdev = 24.976
[info]   CI (99.9%): [1174.855, 1367.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2416.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2416.000, 2416.001, 2416.001), stdev = 0.001
[info]   CI (99.9%): [2416.000, 2416.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1221.258 ±(99.9%) 1169.315 MB/sec [Average]
[info]   (min, avg, max) = (678.049, 1221.258, 1359.997), stdev = 303.667
[info]   CI (99.9%): [51.942, 2390.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2323.060 ±(99.9%) 2244.813 B/op [Average]
[info]   (min, avg, max) = (1284.860, 2323.060, 2676.829), stdev = 582.971
[info]   CI (99.9%): [78.247, 4567.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.800 ±(99.9%) 5.563 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.800, 3.332), stdev = 1.445
[info]   CI (99.9%): [≈ 0, 6.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.562 ±(99.9%) 10.954 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.562, 6.558), stdev = 2.845
[info]   CI (99.9%): [≈ 0, 12.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.800, 8.000), stdev = 1.643
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala
[info] # Run progress: 88.00% complete, ETA 00:13:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_5cbb92e4/target/1bdf7fe1/jackson-module-afterburner-2.9.5.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 603329.468 ops/s
[info] # Warmup Iteration   2: 2046423.852 ops/s
[info] # Warmup Iteration   3: 2048395.236 ops/s
[info] # Warmup Iteration   4: 2042586.831 ops/s
[info] # Warmup Iteration   5: 2082301.525 ops/s
[info] Iteration   1: 2068552.634 ops/s
[info]                  ·gc.alloc.rate:            851.538 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.682 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 514.939 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 2119304.264 ops/s
[info]                  ·gc.alloc.rate:            872.422 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.677 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 502.609 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 2105810.248 ops/s
[info]                  ·gc.alloc.rate:            867.315 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.057 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1011.661 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 2121877.563 ops/s
[info]                  ·gc.alloc.rate:            873.542 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.686 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 501.971 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 2126285.847 ops/s
[info]                  ·gc.alloc.rate:            875.348 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.710 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 500.953 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala":
[info]   2108366.111 ±(99.9%) 90612.223 ops/s [Average]
[info]   (min, avg, max) = (2068552.634, 2108366.111, 2126285.847), stdev = 23531.707
[info]   CI (99.9%): [2017753.888, 2198978.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   868.033 ±(99.9%) 37.320 MB/sec [Average]
[info]   (min, avg, max) = (851.538, 868.033, 875.348), stdev = 9.692
[info]   CI (99.9%): [830.713, 905.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   648.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (648.000, 648.000, 648.000), stdev = 0.001
[info]   CI (99.9%): [648.000, 648.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   812.162 ±(99.9%) 1166.469 MB/sec [Average]
[info]   (min, avg, max) = (676.677, 812.162, 1354.057), stdev = 302.928
[info]   CI (99.9%): [≈ 0, 1978.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   606.426 ±(99.9%) 872.575 B/op [Average]
[info]   (min, avg, max) = (500.953, 606.426, 1011.661), stdev = 226.605
[info]   CI (99.9%): [≈ 0, 1479.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 9.000), stdev = 1.789
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala
[info] # Run progress: 88.24% complete, ETA 00:13:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3807934.608 ops/s
[info] # Warmup Iteration   2: 5471616.157 ops/s
[info] # Warmup Iteration   3: 5647446.431 ops/s
[info] # Warmup Iteration   4: 5655448.434 ops/s
[info] # Warmup Iteration   5: 5616624.152 ops/s
[info] Iteration   1: 5652284.707 ops/s
[info]                  ·gc.alloc.rate:            632.008 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.368 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 188.632 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 5662845.284 ops/s
[info]                  ·gc.alloc.rate:            633.168 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.350 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 188.281 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 5651502.141 ops/s
[info]                  ·gc.alloc.rate:            631.932 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.381 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 188.658 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 5683684.003 ops/s
[info]                  ·gc.alloc.rate:            635.508 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.343 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 187.586 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 5784575.205 ops/s
[info]                  ·gc.alloc.rate:            646.902 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.496 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 184.324 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala":
[info]   5686978.268 ±(99.9%) 215950.534 ops/s [Average]
[info]   (min, avg, max) = (5651502.141, 5686978.268, 5784575.205), stdev = 56081.668
[info]   CI (99.9%): [5471027.734, 5902928.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   635.904 ±(99.9%) 24.320 MB/sec [Average]
[info]   (min, avg, max) = (631.932, 635.904, 646.902), stdev = 6.316
[info]   CI (99.9%): [611.584, 660.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   176.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (176.000, 176.000, 176.000), stdev = 0.001
[info]   CI (99.9%): [176.000, 176.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   677.387 ±(99.9%) 0.240 MB/sec [Average]
[info]   (min, avg, max) = (677.343, 677.387, 677.496), stdev = 0.062
[info]   CI (99.9%): [677.147, 677.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   187.496 ±(99.9%) 7.029 B/op [Average]
[info]   (min, avg, max) = (184.324, 187.496, 188.658), stdev = 1.825
[info]   CI (99.9%): [180.467, 194.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 88.47% complete, ETA 00:13:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3853822.665 ops/s
[info] # Warmup Iteration   2: 5693655.433 ops/s
[info] # Warmup Iteration   3: 5529388.225 ops/s
[info] # Warmup Iteration   4: 5724189.015 ops/s
[info] # Warmup Iteration   5: 5709815.848 ops/s
[info] Iteration   1: 5736783.784 ops/s
[info]                  ·gc.alloc.rate:      349.986 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 5707461.957 ops/s
[info]                  ·gc.alloc.rate:            348.232 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.629 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 186.808 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 5739021.725 ops/s
[info]                  ·gc.alloc.rate:      350.001 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 5695989.237 ops/s
[info]                  ·gc.alloc.rate:            347.380 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.351 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 187.189 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 5472132.251 ops/s
[info]                  ·gc.alloc.rate:      333.867 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc":
[info]   5670277.791 ±(99.9%) 432465.934 ops/s [Average]
[info]   (min, avg, max) = (5472132.251, 5670277.791, 5739021.725), stdev = 112310.030
[info]   CI (99.9%): [5237811.856, 6102743.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   345.893 ±(99.9%) 26.253 MB/sec [Average]
[info]   (min, avg, max) = (333.867, 345.893, 350.001), stdev = 6.818
[info]   CI (99.9%): [319.640, 372.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   96.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (96.000, 96.000, 96.000), stdev = 0.001
[info]   CI (99.9%): [96.000, 96.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   270.996 ±(99.9%) 1428.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 270.996, 677.629), stdev = 371.077
[info]   CI (99.9%): [≈ 0, 1699.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   74.799 ±(99.9%) 394.396 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 74.799, 187.189), stdev = 102.423
[info]   CI (99.9%): [≈ 0, 469.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.643
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson
[info] # Run progress: 88.71% complete, ETA 00:12:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 46947.144 ops/s
[info] # Warmup Iteration   2: 303967.744 ops/s
[info] # Warmup Iteration   3: 303508.368 ops/s
[info] # Warmup Iteration   4: 309551.694 ops/s
[info] # Warmup Iteration   5: 311492.016 ops/s
[info] Iteration   1: 310142.009 ops/s
[info]                  ·gc.alloc.rate:                   1579.434 MB/sec
[info]                  ·gc.alloc.rate.norm:              8016.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.086 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        6872.306 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.380 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 304621.341 ops/s
[info]                  ·gc.alloc.rate:            1551.594 MB/sec
[info]                  ·gc.alloc.rate.norm:       8016.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2030.498 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10490.165 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   3: 304943.437 ops/s
[info]                  ·gc.alloc.rate:                                  1552.986 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8016.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.030 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.155 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.103 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7010.080 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                24.066 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 313759.378 ops/s
[info]                  ·gc.alloc.rate:                                  1597.900 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8016.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.136 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.685 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.791 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6836.556 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 303976.107 ops/s
[info]                  ·gc.alloc.rate:            1548.054 MB/sec
[info]                  ·gc.alloc.rate.norm:       8016.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.164 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10584.918 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson":
[info]   307488.454 ±(99.9%) 16494.950 ops/s [Average]
[info]   (min, avg, max) = (303976.107, 307488.454, 313759.378), stdev = 4283.686
[info]   CI (99.9%): [290993.504, 323983.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1565.994 ±(99.9%) 83.858 MB/sec [Average]
[info]   (min, avg, max) = (1548.054, 1565.994, 1597.900), stdev = 21.778
[info]   CI (99.9%): [1482.136, 1649.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   8016.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8016.001, 8016.001, 8016.001), stdev = 0.001
[info]   CI (99.9%): [8016.001, 8016.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.033 ±(99.9%) 0.228 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.136), stdev = 0.059
[info]   CI (99.9%): [≈ 0, 0.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.168 ±(99.9%) 1.142 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.168, 0.685), stdev = 0.296
[info]   CI (99.9%): [≈ 0, 1.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1629.928 ±(99.9%) 1432.249 MB/sec [Average]
[info]   (min, avg, max) = (1354.086, 1629.928, 2044.164), stdev = 371.950
[info]   CI (99.9%): [197.680, 3062.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   8358.805 ±(99.9%) 7663.714 B/op [Average]
[info]   (min, avg, max) = (6836.556, 8358.805, 10584.918), stdev = 1990.242
[info]   CI (99.9%): [695.091, 16022.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.822 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   5.489 ±(99.9%) 40.383 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.489, 24.066), stdev = 10.487
[info]   CI (99.9%): [≈ 0, 45.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.800, 15.000), stdev = 4.817
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 88.94% complete, ETA 00:12:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42273.021 ops/s
[info] # Warmup Iteration   2: 53284.816 ops/s
[info] # Warmup Iteration   3: 54843.174 ops/s
[info] # Warmup Iteration   4: 54795.673 ops/s
[info] # Warmup Iteration   5: 54898.739 ops/s
[info] Iteration   1: 54895.636 ops/s
[info]                  ·gc.alloc.rate:            1569.061 MB/sec
[info]                  ·gc.alloc.rate.norm:       44992.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.057 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 38884.248 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 52514.818 ops/s
[info]                  ·gc.alloc.rate:            1501.209 MB/sec
[info]                  ·gc.alloc.rate.norm:       44992.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.258 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 40647.743 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 54466.627 ops/s
[info]                  ·gc.alloc.rate:                                  1556.802 MB/sec
[info]                  ·gc.alloc.rate.norm:                             44992.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.048 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.393 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1359.389 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       39286.712 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                96.244 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 54439.258 ops/s
[info]                  ·gc.alloc.rate:                                  1556.820 MB/sec
[info]                  ·gc.alloc.rate.norm:                             44992.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.095 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.750 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2045.078 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       59102.642 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 55244.996 ops/s
[info]                  ·gc.alloc.rate:                                  1579.191 MB/sec
[info]                  ·gc.alloc.rate.norm:                             44992.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.228 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.828 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       38827.714 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce":
[info]   54312.267 ±(99.9%) 4075.630 ops/s [Average]
[info]   (min, avg, max) = (52514.818, 54312.267, 55244.996), stdev = 1058.428
[info]   CI (99.9%): [50236.637, 58387.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1552.616 ±(99.9%) 116.391 MB/sec [Average]
[info]   (min, avg, max) = (1501.209, 1552.616, 1579.191), stdev = 30.226
[info]   CI (99.9%): [1436.226, 1669.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   44992.008 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (44992.007, 44992.008, 44992.008), stdev = 0.001
[info]   CI (99.9%): [44992.006, 44992.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.030 ±(99.9%) 0.159 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.095), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.874 ±(99.9%) 4.610 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.874, 2.750), stdev = 1.197
[info]   CI (99.9%): [≈ 0, 5.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1495.922 ±(99.9%) 1182.147 MB/sec [Average]
[info]   (min, avg, max) = (1356.057, 1495.922, 2045.078), stdev = 307.000
[info]   CI (99.9%): [313.775, 2678.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   43349.811 ±(99.9%) 34027.158 B/op [Average]
[info]   (min, avg, max) = (38827.714, 43349.811, 59102.642), stdev = 8836.745
[info]   CI (99.9%): [9322.653, 77376.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   19.249 ±(99.9%) 165.738 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19.249, 96.244), stdev = 43.042
[info]   CI (99.9%): [≈ 0, 184.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 1.817
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 89.18% complete, ETA 00:12:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38864.194 ops/s
[info] # Warmup Iteration   2: 78310.527 ops/s
[info] # Warmup Iteration   3: 76498.190 ops/s
[info] # Warmup Iteration   4: 76414.858 ops/s
[info] # Warmup Iteration   5: 79555.630 ops/s
[info] Iteration   1: 79126.918 ops/s
[info]                  ·gc.alloc.rate:            1218.508 MB/sec
[info]                  ·gc.alloc.rate.norm:       24240.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.390 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26923.255 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 78042.081 ops/s
[info]                  ·gc.alloc.rate:            1201.751 MB/sec
[info]                  ·gc.alloc.rate.norm:       24240.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.333 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27297.501 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 79333.828 ops/s
[info]                  ·gc.alloc.rate:                   1221.878 MB/sec
[info]                  ·gc.alloc.rate.norm:              24240.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.208 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        26865.217 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 13.215 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 79256.789 ops/s
[info]                  ·gc.alloc.rate:                   1220.846 MB/sec
[info]                  ·gc.alloc.rate.norm:              24240.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.079 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        26905.219 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 79.366 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 79577.773 ops/s
[info]                  ·gc.alloc.rate:            1225.502 MB/sec
[info]                  ·gc.alloc.rate.norm:       24240.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      681.368 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13477.231 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala":
[info]   79067.478 ±(99.9%) 2296.026 ops/s [Average]
[info]   (min, avg, max) = (78042.081, 79067.478, 79577.773), stdev = 596.271
[info]   CI (99.9%): [76771.451, 81363.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1217.697 ±(99.9%) 35.670 MB/sec [Average]
[info]   (min, avg, max) = (1201.751, 1217.697, 1225.502), stdev = 9.263
[info]   CI (99.9%): [1182.027, 1253.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   24240.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (24240.005, 24240.005, 24240.006), stdev = 0.001
[info]   CI (99.9%): [24240.005, 24240.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1219.476 ±(99.9%) 1158.320 MB/sec [Average]
[info]   (min, avg, max) = (681.368, 1219.476, 1355.079), stdev = 300.812
[info]   CI (99.9%): [61.156, 2377.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   24293.685 ±(99.9%) 23292.904 B/op [Average]
[info]   (min, avg, max) = (13477.231, 24293.685, 27297.501), stdev = 6049.093
[info]   CI (99.9%): [1000.781, 47586.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.690 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.997), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   18.516 ±(99.9%) 132.825 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18.516, 79.366), stdev = 34.494
[info]   CI (99.9%): [≈ 0, 151.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.000, 10.000), stdev = 3.391
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 89.41% complete, ETA 00:11:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 94122.214 ops/s
[info] # Warmup Iteration   2: 107491.784 ops/s
[info] # Warmup Iteration   3: 108057.644 ops/s
[info] # Warmup Iteration   4: 108050.661 ops/s
[info] # Warmup Iteration   5: 108707.692 ops/s
[info] Iteration   1: 108671.864 ops/s
[info]                  ·gc.alloc.rate:            1597.269 MB/sec
[info]                  ·gc.alloc.rate.norm:       23136.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.045 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19641.927 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 108223.624 ops/s
[info]                  ·gc.alloc.rate:                   1590.745 MB/sec
[info]                  ·gc.alloc.rate.norm:              23136.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2034.067 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        29583.740 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 48.434 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 108873.182 ops/s
[info]                  ·gc.alloc.rate:                                  1600.234 MB/sec
[info]                  ·gc.alloc.rate.norm:                             23136.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.046 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.671 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.714 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       19701.966 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 109043.132 ops/s
[info]                  ·gc.alloc.rate:                                  1602.644 MB/sec
[info]                  ·gc.alloc.rate.norm:                             23136.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.017 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.243 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.639 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       19671.256 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 108960.460 ops/s
[info]                  ·gc.alloc.rate:            1601.584 MB/sec
[info]                  ·gc.alloc.rate.norm:       23136.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.162 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 29529.357 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala":
[info]   108754.452 ±(99.9%) 1260.272 ops/s [Average]
[info]   (min, avg, max) = (108223.624, 108754.452, 109043.132), stdev = 327.289
[info]   CI (99.9%): [107494.181, 110014.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1598.495 ±(99.9%) 18.401 MB/sec [Average]
[info]   (min, avg, max) = (1590.745, 1598.495, 1602.644), stdev = 4.779
[info]   CI (99.9%): [1580.095, 1616.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   23136.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (23136.004, 23136.004, 23136.004), stdev = 0.001
[info]   CI (99.9%): [23136.003, 23136.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.078 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.046), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.183 ±(99.9%) 1.127 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.183, 0.671), stdev = 0.293
[info]   CI (99.9%): [≈ 0, 1.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1631.925 ±(99.9%) 1431.431 MB/sec [Average]
[info]   (min, avg, max) = (1356.045, 1631.925, 2044.162), stdev = 371.738
[info]   CI (99.9%): [200.494, 3063.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   23625.649 ±(99.9%) 20848.238 B/op [Average]
[info]   (min, avg, max) = (19641.927, 23625.649, 29583.740), stdev = 5414.221
[info]   CI (99.9%): [2777.411, 44473.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   9.687 ±(99.9%) 83.407 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.687, 48.434), stdev = 21.661
[info]   CI (99.9%): [≈ 0, 93.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.200, 10.000), stdev = 3.271
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 89.65% complete, ETA 00:11:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23450.242 ops/s
[info] # Warmup Iteration   2: 39870.905 ops/s
[info] # Warmup Iteration   3: 41084.274 ops/s
[info] # Warmup Iteration   4: 41568.045 ops/s
[info] # Warmup Iteration   5: 41278.778 ops/s
[info] Iteration   1: 41832.034 ops/s
[info]                  ·gc.alloc.rate:                                  2199.522 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82760.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.106 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.985 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2040.154 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       76763.582 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                150.369 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 41523.064 ops/s
[info]                  ·gc.alloc.rate:                                  2183.382 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82760.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.024 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.921 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2724.549 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       103272.672 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   3: 41938.157 ops/s
[info]                  ·gc.alloc.rate:            2204.999 MB/sec
[info]                  ·gc.alloc.rate.norm:       82760.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.014 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 76717.757 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 41893.111 ops/s
[info]                  ·gc.alloc.rate:                                  2203.555 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82760.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.204 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.918 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       76801.980 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 41745.156 ops/s
[info]                  ·gc.alloc.rate:            2194.700 MB/sec
[info]                  ·gc.alloc.rate.norm:       82760.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2043.968 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 77076.062 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson":
[info]   41786.304 ±(99.9%) 631.396 ops/s [Average]
[info]   (min, avg, max) = (41523.064, 41786.304, 41938.157), stdev = 163.972
[info]   CI (99.9%): [41154.908, 42417.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2197.232 ±(99.9%) 33.557 MB/sec [Average]
[info]   (min, avg, max) = (2183.382, 2197.232, 2204.999), stdev = 8.715
[info]   CI (99.9%): [2163.674, 2230.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   82760.010 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (82760.010, 82760.010, 82760.011), stdev = 0.001
[info]   CI (99.9%): [82760.008, 82760.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.027 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.106), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.022 ±(99.9%) 6.542 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.022, 3.985), stdev = 1.699
[info]   CI (99.9%): [≈ 0, 7.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2179.520 ±(99.9%) 1173.236 MB/sec [Average]
[info]   (min, avg, max) = (2040.154, 2179.520, 2724.549), stdev = 304.686
[info]   CI (99.9%): [1006.284, 3352.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   82126.411 ±(99.9%) 45522.097 B/op [Average]
[info]   (min, avg, max) = (76717.757, 82126.411, 103272.672), stdev = 11821.944
[info]   CI (99.9%): [36604.314, 127648.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   30.074 ±(99.9%) 258.945 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 30.074, 150.369), stdev = 67.247
[info]   CI (99.9%): [≈ 0, 289.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.800, 11.000), stdev = 2.950
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 89.88% complete, ETA 00:11:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 173210.058 ops/s
[info] # Warmup Iteration   2: 238488.724 ops/s
[info] # Warmup Iteration   3: 233960.217 ops/s
[info] # Warmup Iteration   4: 238221.233 ops/s
[info] # Warmup Iteration   5: 239089.376 ops/s
[info] Iteration   1: 237458.410 ops/s
[info]                  ·gc.alloc.rate:            1129.644 MB/sec
[info]                  ·gc.alloc.rate.norm:       7488.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.133 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8989.321 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 229562.665 ops/s
[info]                  ·gc.alloc.rate:            1092.089 MB/sec
[info]                  ·gc.alloc.rate.norm:       7488.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.155 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9298.591 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 233817.471 ops/s
[info]                  ·gc.alloc.rate:            1112.715 MB/sec
[info]                  ·gc.alloc.rate.norm:       7488.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.313 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4564.699 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 232539.095 ops/s
[info]                  ·gc.alloc.rate:            1106.222 MB/sec
[info]                  ·gc.alloc.rate.norm:       7488.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.150 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9179.763 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 233665.603 ops/s
[info]                  ·gc.alloc.rate:                   1111.582 MB/sec
[info]                  ·gc.alloc.rate.norm:              7488.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1356.079 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        9135.024 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 22.434 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce":
[info]   233408.649 ±(99.9%) 10922.100 ops/s [Average]
[info]   (min, avg, max) = (229562.665, 233408.649, 237458.410), stdev = 2836.435
[info]   CI (99.9%): [222486.549, 244330.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1110.450 ±(99.9%) 52.012 MB/sec [Average]
[info]   (min, avg, max) = (1092.089, 1110.450, 1129.644), stdev = 13.507
[info]   CI (99.9%): [1058.438, 1162.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7488.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7488.002, 7488.002, 7488.002), stdev = 0.001
[info]   CI (99.9%): [7488.002, 7488.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1220.566 ±(99.9%) 1167.241 MB/sec [Average]
[info]   (min, avg, max) = (678.313, 1220.566, 1356.155), stdev = 303.129
[info]   CI (99.9%): [53.325, 2387.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   8233.480 ±(99.9%) 7908.819 B/op [Average]
[info]   (min, avg, max) = (4564.699, 8233.480, 9298.591), stdev = 2053.895
[info]   CI (99.9%): [324.661, 16142.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   4.487 ±(99.9%) 38.632 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.487, 22.434), stdev = 10.033
[info]   CI (99.9%): [≈ 0, 43.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.000, 8.000), stdev = 1.732
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 90.12% complete, ETA 00:11:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 237321.594 ops/s
[info] # Warmup Iteration   2: 468257.651 ops/s
[info] # Warmup Iteration   3: 467466.732 ops/s
[info] # Warmup Iteration   4: 462751.812 ops/s
[info] # Warmup Iteration   5: 469548.784 ops/s
[info] Iteration   1: 454225.672 ops/s
[info]                  ·gc.alloc.rate:                   399.486 MB/sec
[info]                  ·gc.alloc.rate.norm:              1384.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.900 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2345.090 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.308 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 469974.803 ops/s
[info]                  ·gc.alloc.rate:      413.215 MB/sec
[info]                  ·gc.alloc.rate.norm: 1384.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 464601.881 ops/s
[info]                  ·gc.alloc.rate:            408.499 MB/sec
[info]                  ·gc.alloc.rate.norm:       1384.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.365 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2294.926 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 464107.697 ops/s
[info]                  ·gc.alloc.rate:                   408.045 MB/sec
[info]                  ·gc.alloc.rate.norm:              1384.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.645 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2295.036 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.259 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 466558.397 ops/s
[info]                  ·gc.alloc.rate:      410.198 MB/sec
[info]                  ·gc.alloc.rate.norm: 1384.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala":
[info]   463893.690 ±(99.9%) 22625.482 ops/s [Average]
[info]   (min, avg, max) = (454225.672, 463893.690, 469974.803), stdev = 5875.766
[info]   CI (99.9%): [441268.208, 486519.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   407.888 ±(99.9%) 19.700 MB/sec [Average]
[info]   (min, avg, max) = (399.486, 407.888, 413.215), stdev = 5.116
[info]   CI (99.9%): [388.188, 427.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1384.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1384.001, 1384.001, 1384.001), stdev = 0.001
[info]   CI (99.9%): [1384.001, 1384.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   406.182 ±(99.9%) 1427.788 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 406.182, 677.365), stdev = 370.792
[info]   CI (99.9%): [≈ 0, 1833.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1387.010 ±(99.9%) 4876.173 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1387.010, 2345.090), stdev = 1266.327
[info]   CI (99.9%): [≈ 0, 6263.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.913 ±(99.9%) 4.817 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.913, 2.308), stdev = 1.251
[info]   CI (99.9%): [≈ 0, 5.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 5.000), stdev = 2.739
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 90.35% complete, ETA 00:10:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 522192.053 ops/s
[info] # Warmup Iteration   2: 552641.252 ops/s
[info] # Warmup Iteration   3: 532331.840 ops/s
[info] # Warmup Iteration   4: 560641.780 ops/s
[info] # Warmup Iteration   5: 557817.312 ops/s
[info] Iteration   1: 559355.011 ops/s
[info]                  ·gc.alloc.rate:      301.323 MB/sec
[info]                  ·gc.alloc.rate.norm: 848.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 557188.113 ops/s
[info]                  ·gc.alloc.rate:            300.170 MB/sec
[info]                  ·gc.alloc.rate.norm:       848.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.044 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1915.520 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 561265.955 ops/s
[info]                  ·gc.alloc.rate:      302.426 MB/sec
[info]                  ·gc.alloc.rate.norm: 848.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 557506.585 ops/s
[info]                  ·gc.alloc.rate:      300.347 MB/sec
[info]                  ·gc.alloc.rate.norm: 848.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 558486.117 ops/s
[info]                  ·gc.alloc.rate:                   300.882 MB/sec
[info]                  ·gc.alloc.rate.norm:              848.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.373 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1909.099 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.877 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala":
[info]   558760.356 ±(99.9%) 6312.807 ops/s [Average]
[info]   (min, avg, max) = (557188.113, 558760.356, 561265.955), stdev = 1639.416
[info]   CI (99.9%): [552447.549, 565073.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   301.030 ±(99.9%) 3.477 MB/sec [Average]
[info]   (min, avg, max) = (300.170, 301.030, 302.426), stdev = 0.903
[info]   CI (99.9%): [297.553, 304.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   848.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (848.001, 848.001, 848.001), stdev = 0.001
[info]   CI (99.9%): [848.001, 848.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   271.083 ±(99.9%) 1429.345 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 271.083, 678.044), stdev = 371.196
[info]   CI (99.9%): [≈ 0, 1700.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   764.924 ±(99.9%) 4033.232 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 764.924, 1915.520), stdev = 1047.418
[info]   CI (99.9%): [≈ 0, 4798.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.375 ±(99.9%) 3.233 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.375, 1.877), stdev = 0.840
[info]   CI (99.9%): [≈ 0, 3.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 4.000), stdev = 1.949
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 90.59% complete, ETA 00:10:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 587158.053 ops/s
[info] # Warmup Iteration   2: 620948.628 ops/s
[info] # Warmup Iteration   3: 611784.285 ops/s
[info] # Warmup Iteration   4: 627103.179 ops/s
[info] # Warmup Iteration   5: 587113.323 ops/s
[info] Iteration   1: 627059.560 ops/s
[info]                  ·gc.alloc.rate:      6.374 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 627196.981 ops/s
[info]                  ·gc.alloc.rate:      6.375 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 627498.624 ops/s
[info]                  ·gc.alloc.rate:      6.378 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 626961.583 ops/s
[info]                  ·gc.alloc.rate:      6.373 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 627614.233 ops/s
[info]                  ·gc.alloc.rate:      6.381 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   627266.196 ±(99.9%) 1081.323 ops/s [Average]
[info]   (min, avg, max) = (626961.583, 627266.196, 627614.233), stdev = 280.816
[info]   CI (99.9%): [626184.873, 628347.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   6.376 ±(99.9%) 0.013 MB/sec [Average]
[info]   (min, avg, max) = (6.373, 6.376, 6.381), stdev = 0.003
[info]   CI (99.9%): [6.364, 6.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.001, 16.001, 16.001), stdev = 0.001
[info]   CI (99.9%): [16.001, 16.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 90.82% complete, ETA 00:10:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19747.569 ops/s
[info] # Warmup Iteration   2: 29893.552 ops/s
[info] # Warmup Iteration   3: 29996.044 ops/s
[info] # Warmup Iteration   4: 29692.559 ops/s
[info] # Warmup Iteration   5: 30109.426 ops/s
[info] Iteration   1: 30054.666 ops/s
[info]                  ·gc.alloc.rate:            1502.825 MB/sec
[info]                  ·gc.alloc.rate.norm:       78704.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.795 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 70951.550 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 30073.954 ops/s
[info]                  ·gc.alloc.rate:            1503.663 MB/sec
[info]                  ·gc.alloc.rate.norm:       78704.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.649 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 70904.374 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 30067.473 ops/s
[info]                  ·gc.alloc.rate:                                  1503.470 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78704.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.079 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.152 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2036.182 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       106590.524 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                209.206 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   4: 30338.380 ops/s
[info]                  ·gc.alloc.rate:                                  1516.994 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78704.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.128 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 6.666 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.716 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       70699.835 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 30469.315 ops/s
[info]                  ·gc.alloc.rate:                                  1523.942 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78704.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.124 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.118 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       70398.244 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson":
[info]   30200.758 ±(99.9%) 736.293 ops/s [Average]
[info]   (min, avg, max) = (30054.666, 30200.758, 30469.315), stdev = 191.213
[info]   CI (99.9%): [29464.464, 30937.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1510.179 ±(99.9%) 37.403 MB/sec [Average]
[info]   (min, avg, max) = (1502.825, 1510.179, 1523.942), stdev = 9.713
[info]   CI (99.9%): [1472.776, 1547.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   78704.014 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (78704.013, 78704.014, 78704.014), stdev = 0.001
[info]   CI (99.9%): [78704.012, 78704.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.042 ±(99.9%) 0.228 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.128), stdev = 0.059
[info]   CI (99.9%): [≈ 0, 0.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.188 ±(99.9%) 11.828 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.188, 6.666), stdev = 3.072
[info]   CI (99.9%): [≈ 0, 14.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1494.292 ±(99.9%) 1166.566 MB/sec [Average]
[info]   (min, avg, max) = (1354.649, 1494.292, 2036.182), stdev = 302.954
[info]   CI (99.9%): [327.725, 2660.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   77908.906 ±(99.9%) 61745.055 B/op [Average]
[info]   (min, avg, max) = (70398.244, 77908.906, 106590.524), stdev = 16034.995
[info]   CI (99.9%): [16163.850, 139653.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   41.841 ±(99.9%) 360.266 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 41.841, 209.206), stdev = 93.560
[info]   CI (99.9%): [≈ 0, 402.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 11.000), stdev = 3.633
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 91.06% complete, ETA 00:10:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3933834.175 ops/s
[info] # Warmup Iteration   2: 4835539.331 ops/s
[info] # Warmup Iteration   3: 4892424.401 ops/s
[info] # Warmup Iteration   4: 4852164.109 ops/s
[info] # Warmup Iteration   5: 4866884.949 ops/s
[info] Iteration   1: 4871105.132 ops/s
[info]                  ·gc.alloc.rate:                                  3589.408 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1160.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3406.500 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1100.889 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 4810243.990 ops/s
[info]                  ·gc.alloc.rate:            3544.999 MB/sec
[info]                  ·gc.alloc.rate.norm:       1160.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      3406.928 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1114.820 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   3: 4830194.118 ops/s
[info]                  ·gc.alloc.rate:            3559.522 MB/sec
[info]                  ·gc.alloc.rate.norm:       1160.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      4088.025 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1332.232 B/op
[info]                  ·gc.count:                 6.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 4820897.273 ops/s
[info]                  ·gc.alloc.rate:                                  3552.848 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1160.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3406.901 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1112.349 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   5: 4816396.999 ops/s
[info]                  ·gc.alloc.rate:            3550.179 MB/sec
[info]                  ·gc.alloc.rate.norm:       1160.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      3407.424 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1113.356 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce":
[info]   4829767.502 ±(99.9%) 93285.782 ops/s [Average]
[info]   (min, avg, max) = (4810243.990, 4829767.502, 4871105.132), stdev = 24226.021
[info]   CI (99.9%): [4736481.720, 4923053.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   3559.391 ±(99.9%) 67.683 MB/sec [Average]
[info]   (min, avg, max) = (3544.999, 3559.391, 3589.408), stdev = 17.577
[info]   CI (99.9%): [3491.708, 3627.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   1160.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1160.000, 1160.000, 1160.000), stdev = 0.001
[info]   CI (99.9%): [1160.000, 1160.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.007 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   3543.156 ±(99.9%) 1172.873 MB/sec [Average]
[info]   (min, avg, max) = (3406.500, 3543.156, 4088.025), stdev = 304.591
[info]   CI (99.9%): [2370.283, 4716.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   1154.729 ±(99.9%) 382.682 B/op [Average]
[info]   (min, avg, max) = (1100.889, 1154.729, 1332.232), stdev = 99.381
[info]   CI (99.9%): [772.047, 1537.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 9.200, 15.000), stdev = 3.834
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 91.29% complete, ETA 00:09:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 794121.129 ops/s
[info] # Warmup Iteration   2: 7577676.500 ops/s
[info] # Warmup Iteration   3: 7654619.206 ops/s
[info] # Warmup Iteration   4: 7818519.838 ops/s
[info] # Warmup Iteration   5: 7488518.349 ops/s
[info] Iteration   1: 7798773.009 ops/s
[info]                  ·gc.alloc.rate:            832.416 MB/sec
[info]                  ·gc.alloc.rate.norm:       168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1349.473 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 272.353 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 7778870.909 ops/s
[info]                  ·gc.alloc.rate:            830.220 MB/sec
[info]                  ·gc.alloc.rate.norm:       168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.676 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 136.525 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 7775012.325 ops/s
[info]                  ·gc.alloc.rate:                   829.881 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.068 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        136.458 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.135 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 7736709.114 ops/s
[info]                  ·gc.alloc.rate:            825.754 MB/sec
[info]                  ·gc.alloc.rate.norm:       168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.702 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 137.268 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 7732816.799 ops/s
[info]                  ·gc.alloc.rate:                   825.343 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.770 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        274.545 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.136 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava":
[info]   7764436.431 ±(99.9%) 110060.563 ops/s [Average]
[info]   (min, avg, max) = (7732816.799, 7764436.431, 7798773.009), stdev = 28582.379
[info]   CI (99.9%): [7654375.868, 7874496.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   828.723 ±(99.9%) 11.784 MB/sec [Average]
[info]   (min, avg, max) = (825.343, 828.723, 832.416), stdev = 3.060
[info]   CI (99.9%): [816.939, 840.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   168.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (168.000, 168.000, 168.000), stdev = 0.001
[info]   CI (99.9%): [168.000, 168.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   944.338 ±(99.9%) 1422.872 MB/sec [Average]
[info]   (min, avg, max) = (674.068, 944.338, 1349.473), stdev = 369.515
[info]   CI (99.9%): [≈ 0, 2367.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   191.430 ±(99.9%) 288.327 B/op [Average]
[info]   (min, avg, max) = (136.458, 191.430, 274.545), stdev = 74.878
[info]   CI (99.9%): [≈ 0, 479.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.054 ±(99.9%) 0.285 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.136), stdev = 0.074
[info]   CI (99.9%): [≈ 0, 0.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 8.000, 12.000), stdev = 3.240
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 91.53% complete, ETA 00:09:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2367197.059 ops/s
[info] # Warmup Iteration   2: 3680603.007 ops/s
[info] # Warmup Iteration   3: 3753132.531 ops/s
[info] # Warmup Iteration   4: 3738412.721 ops/s
[info] # Warmup Iteration   5: 3772472.495 ops/s
[info] Iteration   1: 3749415.603 ops/s
[info]                  ·gc.alloc.rate:                                  2115.183 MB/sec
[info]                  ·gc.alloc.rate.norm:                             888.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.133 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.056 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2039.504 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       856.228 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1.957 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 3763888.667 ops/s
[info]                  ·gc.alloc.rate:                                  2124.142 MB/sec
[info]                  ·gc.alloc.rate.norm:                             888.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.031 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.933 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       854.887 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 3736551.138 ops/s
[info]                  ·gc.alloc.rate:                                  2108.665 MB/sec
[info]                  ·gc.alloc.rate.norm:                             888.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.879 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       861.139 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   4: 3769038.670 ops/s
[info]                  ·gc.alloc.rate:                                  2126.858 MB/sec
[info]                  ·gc.alloc.rate.norm:                             888.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.715 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       853.704 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 3760740.275 ops/s
[info]                  ·gc.alloc.rate:            2121.486 MB/sec
[info]                  ·gc.alloc.rate.norm:       888.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.412 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1140.788 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala":
[info]   3755926.870 ±(99.9%) 50069.253 ops/s [Average]
[info]   (min, avg, max) = (3736551.138, 3755926.870, 3769038.670), stdev = 13002.826
[info]   CI (99.9%): [3705857.617, 3805996.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2119.267 ±(99.9%) 28.256 MB/sec [Average]
[info]   (min, avg, max) = (2108.665, 2119.267, 2126.858), stdev = 7.338
[info]   CI (99.9%): [2091.010, 2147.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   888.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (888.000, 888.000, 888.000), stdev = 0.001
[info]   CI (99.9%): [888.000, 888.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.033 ±(99.9%) 0.222 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.133), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.014 ±(99.9%) 0.093 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.056), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   2179.888 ±(99.9%) 1174.315 MB/sec [Average]
[info]   (min, avg, max) = (2039.504, 2179.888, 2725.412), stdev = 304.966
[info]   CI (99.9%): [1005.574, 3354.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   913.349 ±(99.9%) 489.701 B/op [Average]
[info]   (min, avg, max) = (853.704, 913.349, 1140.788), stdev = 127.174
[info]   CI (99.9%): [423.648, 1403.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.391 ±(99.9%) 3.371 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.391, 1.957), stdev = 0.875
[info]   CI (99.9%): [≈ 0, 3.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 10.000), stdev = 2.387
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 91.76% complete, ETA 00:09:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6973335.133 ops/s
[info] # Warmup Iteration   2: 7621248.799 ops/s
[info] # Warmup Iteration   3: 7756064.754 ops/s
[info] # Warmup Iteration   4: 7801337.366 ops/s
[info] # Warmup Iteration   5: 7725679.139 ops/s
[info] Iteration   1: 7810747.084 ops/s
[info]                  ·gc.alloc.rate:            833.720 MB/sec
[info]                  ·gc.alloc.rate.norm:       168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.102 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 136.642 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 7805959.473 ops/s
[info]                  ·gc.alloc.rate:            833.290 MB/sec
[info]                  ·gc.alloc.rate.norm:       168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.505 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 136.592 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 7818216.246 ops/s
[info]                  ·gc.alloc.rate:            834.586 MB/sec
[info]                  ·gc.alloc.rate.norm:       168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.495 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 136.378 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 7776826.185 ops/s
[info]                  ·gc.alloc.rate:            830.116 MB/sec
[info]                  ·gc.alloc.rate.norm:       168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.432 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 137.100 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 7682139.774 ops/s
[info]                  ·gc.alloc.rate:                   819.942 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.421 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        277.716 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.136 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala":
[info]   7778777.753 ±(99.9%) 216622.135 ops/s [Average]
[info]   (min, avg, max) = (7682139.774, 7778777.753, 7818216.246), stdev = 56256.081
[info]   CI (99.9%): [7562155.618, 7995399.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   830.331 ±(99.9%) 23.290 MB/sec [Average]
[info]   (min, avg, max) = (819.942, 830.331, 834.586), stdev = 6.048
[info]   CI (99.9%): [807.040, 853.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   168.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (168.000, 168.000, 168.000), stdev = 0.001
[info]   CI (99.9%): [168.000, 168.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   813.191 ±(99.9%) 1167.192 MB/sec [Average]
[info]   (min, avg, max) = (677.432, 813.191, 1355.421), stdev = 303.116
[info]   CI (99.9%): [≈ 0, 1980.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   164.886 ±(99.9%) 242.878 B/op [Average]
[info]   (min, avg, max) = (136.378, 164.886, 277.716), stdev = 63.075
[info]   CI (99.9%): [≈ 0, 407.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.027 ±(99.9%) 0.235 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.136), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 8.000), stdev = 2.168
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 92.00% complete, ETA 00:09:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3355204.992 ops/s
[info] # Warmup Iteration   2: 4696677.077 ops/s
[info] # Warmup Iteration   3: 4694755.722 ops/s
[info] # Warmup Iteration   4: 4633223.324 ops/s
[info] # Warmup Iteration   5: 4588293.352 ops/s
[info] Iteration   1: 4633052.451 ops/s
[info]                  ·gc.alloc.rate:                                  2495.927 MB/sec
[info]                  ·gc.alloc.rate.norm:                             848.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.012 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.428 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       925.974 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 4540426.573 ops/s
[info]                  ·gc.alloc.rate:            2446.741 MB/sec
[info]                  ·gc.alloc.rate.norm:       848.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.660 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 708.646 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 4611449.902 ops/s
[info]                  ·gc.alloc.rate:            2484.377 MB/sec
[info]                  ·gc.alloc.rate.norm:       848.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.366 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 930.258 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   4: 4590128.612 ops/s
[info]                  ·gc.alloc.rate:                                  2472.741 MB/sec
[info]                  ·gc.alloc.rate.norm:                             848.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.294 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       934.610 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   5: 4642947.951 ops/s
[info]                  ·gc.alloc.rate:            2501.227 MB/sec
[info]                  ·gc.alloc.rate.norm:       848.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.038 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 692.998 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson":
[info]   4603601.098 ±(99.9%) 157001.586 ops/s [Average]
[info]   (min, avg, max) = (4540426.573, 4603601.098, 4642947.951), stdev = 40772.813
[info]   CI (99.9%): [4446599.512, 4760602.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2480.203 ±(99.9%) 83.526 MB/sec [Average]
[info]   (min, avg, max) = (2446.741, 2480.203, 2501.227), stdev = 21.691
[info]   CI (99.9%): [2396.676, 2563.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   848.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (848.000, 848.000, 848.000), stdev = 0.001
[info]   CI (99.9%): [848.000, 848.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.020 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.012), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2452.957 ±(99.9%) 1436.315 MB/sec [Average]
[info]   (min, avg, max) = (2044.038, 2452.957, 2725.428), stdev = 373.006
[info]   CI (99.9%): [1016.642, 3889.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   838.497 ±(99.9%) 484.560 B/op [Average]
[info]   (min, avg, max) = (692.998, 838.497, 934.610), stdev = 125.839
[info]   CI (99.9%): [353.937, 1323.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.200, 12.000), stdev = 3.962
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 92.24% complete, ETA 00:08:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2622428.271 ops/s
[info] # Warmup Iteration   2: 3117442.300 ops/s
[info] # Warmup Iteration   3: 3302227.222 ops/s
[info] # Warmup Iteration   4: 3353738.947 ops/s
[info] # Warmup Iteration   5: 3265609.312 ops/s
[info] Iteration   1: 3365768.327 ops/s
[info]                  ·gc.alloc.rate:            803.944 MB/sec
[info]                  ·gc.alloc.rate.norm:       376.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.316 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 316.777 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 3362745.120 ops/s
[info]                  ·gc.alloc.rate:            803.279 MB/sec
[info]                  ·gc.alloc.rate.norm:       376.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.365 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 317.062 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 3344535.064 ops/s
[info]                  ·gc.alloc.rate:            798.955 MB/sec
[info]                  ·gc.alloc.rate.norm:       376.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.782 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 637.580 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 3367230.268 ops/s
[info]                  ·gc.alloc.rate:            804.272 MB/sec
[info]                  ·gc.alloc.rate.norm:       376.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.302 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 316.641 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 3370537.607 ops/s
[info]                  ·gc.alloc.rate:            805.148 MB/sec
[info]                  ·gc.alloc.rate.norm:       376.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.409 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 316.346 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce":
[info]   3362163.277 ±(99.9%) 39452.315 ops/s [Average]
[info]   (min, avg, max) = (3344535.064, 3362163.277, 3370537.607), stdev = 10245.641
[info]   CI (99.9%): [3322710.962, 3401615.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   803.120 ±(99.9%) 9.331 MB/sec [Average]
[info]   (min, avg, max) = (798.955, 803.120, 805.148), stdev = 2.423
[info]   CI (99.9%): [793.789, 812.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   376.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (376.000, 376.000, 376.000), stdev = 0.001
[info]   CI (99.9%): [376.000, 376.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   812.835 ±(99.9%) 1166.583 MB/sec [Average]
[info]   (min, avg, max) = (677.302, 812.835, 1354.782), stdev = 302.958
[info]   CI (99.9%): [≈ 0, 1979.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   380.881 ±(99.9%) 552.565 B/op [Average]
[info]   (min, avg, max) = (316.346, 380.881, 637.580), stdev = 143.499
[info]   CI (99.9%): [≈ 0, 933.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 9.000), stdev = 2.387
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 92.47% complete, ETA 00:08:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 597145.709 ops/s
[info] # Warmup Iteration   2: 7183549.424 ops/s
[info] # Warmup Iteration   3: 7249182.490 ops/s
[info] # Warmup Iteration   4: 7319793.082 ops/s
[info] # Warmup Iteration   5: 7320386.837 ops/s
[info] Iteration   1: 7328108.450 ops/s
[info]                  ·gc.alloc.rate:            707.644 MB/sec
[info]                  ·gc.alloc.rate.norm:       152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.717 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 144.927 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 7267685.838 ops/s
[info]                  ·gc.alloc.rate:            701.953 MB/sec
[info]                  ·gc.alloc.rate.norm:       152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.856 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 146.132 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 7228364.066 ops/s
[info]                  ·gc.alloc.rate:                   698.030 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.082 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        146.785 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.145 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 7319403.780 ops/s
[info]                  ·gc.alloc.rate:            706.851 MB/sec
[info]                  ·gc.alloc.rate.norm:       152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.739 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 145.095 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 7084639.636 ops/s
[info]                  ·gc.alloc.rate:            684.271 MB/sec
[info]                  ·gc.alloc.rate.norm:       152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.871 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 149.912 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava":
[info]   7245640.354 ±(99.9%) 379965.762 ops/s [Average]
[info]   (min, avg, max) = (7084639.636, 7245640.354, 7328108.450), stdev = 98675.902
[info]   CI (99.9%): [6865674.592, 7625606.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   699.750 ±(99.9%) 36.538 MB/sec [Average]
[info]   (min, avg, max) = (684.271, 699.750, 707.644), stdev = 9.489
[info]   CI (99.9%): [663.211, 736.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   152.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (152.000, 152.000, 152.000), stdev = 0.001
[info]   CI (99.9%): [152.000, 152.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   674.653 ±(99.9%) 1.256 MB/sec [Average]
[info]   (min, avg, max) = (674.082, 674.653, 674.871), stdev = 0.326
[info]   CI (99.9%): [673.396, 675.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   146.570 ±(99.9%) 7.769 B/op [Average]
[info]   (min, avg, max) = (144.927, 146.570, 149.912), stdev = 2.018
[info]   CI (99.9%): [138.801, 154.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.029 ±(99.9%) 0.250 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.145), stdev = 0.065
[info]   CI (99.9%): [≈ 0, 0.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 92.71% complete, ETA 00:08:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1367803.890 ops/s
[info] # Warmup Iteration   2: 1970291.688 ops/s
[info] # Warmup Iteration   3: 1912624.392 ops/s
[info] # Warmup Iteration   4: 1951021.932 ops/s
[info] # Warmup Iteration   5: 1964346.606 ops/s
[info] Iteration   1: 1964732.081 ops/s
[info]                  ·gc.alloc.rate:            609.087 MB/sec
[info]                  ·gc.alloc.rate.norm:       488.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.664 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 542.142 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 1854988.224 ops/s
[info]                  ·gc.alloc.rate:      575.352 MB/sec
[info]                  ·gc.alloc.rate.norm: 488.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1964664.328 ops/s
[info]                  ·gc.alloc.rate:            609.160 MB/sec
[info]                  ·gc.alloc.rate.norm:       488.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.779 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 542.170 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 1919170.934 ops/s
[info]                  ·gc.alloc.rate:            595.014 MB/sec
[info]                  ·gc.alloc.rate.norm:       488.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.724 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 555.015 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 1955704.415 ops/s
[info]                  ·gc.alloc.rate:            606.450 MB/sec
[info]                  ·gc.alloc.rate.norm:       488.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.844 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 544.645 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala":
[info]   1931851.996 ±(99.9%) 180565.392 ops/s [Average]
[info]   (min, avg, max) = (1854988.224, 1931851.996, 1964732.081), stdev = 46892.259
[info]   CI (99.9%): [1751286.604, 2112417.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   599.013 ±(99.9%) 55.656 MB/sec [Average]
[info]   (min, avg, max) = (575.352, 599.013, 609.160), stdev = 14.454
[info]   CI (99.9%): [543.357, 654.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   488.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (488.000, 488.000, 488.000), stdev = 0.001
[info]   CI (99.9%): [488.000, 488.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   541.402 ±(99.9%) 1165.409 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 541.402, 676.844), stdev = 302.653
[info]   CI (99.9%): [≈ 0, 1706.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   436.794 ±(99.9%) 940.455 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 436.794, 555.015), stdev = 244.233
[info]   CI (99.9%): [≈ 0, 1377.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.800, 6.000), stdev = 2.280
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 92.94% complete, ETA 00:07:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8890224.763 ops/s
[info] # Warmup Iteration   2: 9851837.957 ops/s
[info] # Warmup Iteration   3: 9923505.688 ops/s
[info] # Warmup Iteration   4: 9962097.049 ops/s
[info] # Warmup Iteration   5: 9997225.270 ops/s
[info] Iteration   1: 9958224.346 ops/s
[info]                  ·gc.alloc.rate:            961.632 MB/sec
[info]                  ·gc.alloc.rate.norm:       152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.438 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 214.247 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 9990954.526 ops/s
[info]                  ·gc.alloc.rate:                   964.998 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.525 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        106.719 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.105 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 9954685.457 ops/s
[info]                  ·gc.alloc.rate:            961.475 MB/sec
[info]                  ·gc.alloc.rate.norm:       152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.697 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 214.323 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 9988304.108 ops/s
[info]                  ·gc.alloc.rate:            964.559 MB/sec
[info]                  ·gc.alloc.rate.norm:       152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.396 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 106.748 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 9899932.094 ops/s
[info]                  ·gc.alloc.rate:                   955.959 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.366 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        215.507 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.106 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala":
[info]   9958420.106 ±(99.9%) 141303.097 ops/s [Average]
[info]   (min, avg, max) = (9899932.094, 9958420.106, 9990954.526), stdev = 36695.966
[info]   CI (99.9%): [9817117.009, 10099723.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   961.725 ±(99.9%) 13.892 MB/sec [Average]
[info]   (min, avg, max) = (955.959, 961.725, 964.998), stdev = 3.608
[info]   CI (99.9%): [947.833, 975.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   152.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (152.000, 152.000, 152.000), stdev = 0.001
[info]   CI (99.9%): [152.000, 152.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1084.284 ±(99.9%) 1430.043 MB/sec [Average]
[info]   (min, avg, max) = (677.396, 1084.284, 1355.697), stdev = 371.378
[info]   CI (99.9%): [≈ 0, 2514.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   171.509 ±(99.9%) 227.702 B/op [Average]
[info]   (min, avg, max) = (106.719, 171.509, 215.507), stdev = 59.134
[info]   CI (99.9%): [≈ 0, 399.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.042 ±(99.9%) 0.222 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.106), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 1.817
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 93.18% complete, ETA 00:07:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7664375.314 ops/s
[info] # Warmup Iteration   2: 8038852.316 ops/s
[info] # Warmup Iteration   3: 7786355.485 ops/s
[info] # Warmup Iteration   4: 8062187.771 ops/s
[info] # Warmup Iteration   5: 7738752.163 ops/s
[info] Iteration   1: 8059210.192 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 7881215.007 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 8058771.324 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 8060988.882 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 8057400.290 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   8023517.139 ±(99.9%) 306355.860 ops/s [Average]
[info]   (min, avg, max) = (7881215.007, 8023517.139, 8060988.882), stdev = 79559.644
[info]   CI (99.9%): [7717161.279, 8329872.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 93.41% complete, ETA 00:07:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2308851.204 ops/s
[info] # Warmup Iteration   2: 3099275.883 ops/s
[info] # Warmup Iteration   3: 3022227.209 ops/s
[info] # Warmup Iteration   4: 3042845.634 ops/s
[info] # Warmup Iteration   5: 3031492.370 ops/s
[info] Iteration   1: 3030014.912 ops/s
[info]                  ·gc.alloc.rate:            970.182 MB/sec
[info]                  ·gc.alloc.rate.norm:       504.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.422 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 703.090 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 3045747.079 ops/s
[info]                  ·gc.alloc.rate:            975.309 MB/sec
[info]                  ·gc.alloc.rate.norm:       504.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.768 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 349.726 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 3024489.478 ops/s
[info]                  ·gc.alloc.rate:            968.390 MB/sec
[info]                  ·gc.alloc.rate.norm:       504.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.382 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 704.370 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 3043812.328 ops/s
[info]                  ·gc.alloc.rate:            974.787 MB/sec
[info]                  ·gc.alloc.rate.norm:       504.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.820 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 349.940 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 3011494.680 ops/s
[info]                  ·gc.alloc.rate:                   964.278 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.079 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        707.738 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.348 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson":
[info]   3031111.696 ±(99.9%) 54639.284 ops/s [Average]
[info]   (min, avg, max) = (3011494.680, 3031111.696, 3045747.079), stdev = 14189.648
[info]   CI (99.9%): [2976472.412, 3085750.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   970.589 ±(99.9%) 17.723 MB/sec [Average]
[info]   (min, avg, max) = (964.278, 970.589, 975.309), stdev = 4.603
[info]   CI (99.9%): [952.866, 988.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   504.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (504.000, 504.000, 504.000), stdev = 0.001
[info]   CI (99.9%): [504.000, 504.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1082.894 ±(99.9%) 1427.501 MB/sec [Average]
[info]   (min, avg, max) = (676.768, 1082.894, 1354.079), stdev = 370.717
[info]   CI (99.9%): [≈ 0, 2510.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   562.973 ±(99.9%) 749.244 B/op [Average]
[info]   (min, avg, max) = (349.726, 562.973, 707.738), stdev = 194.576
[info]   CI (99.9%): [≈ 0, 1312.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   0.070 ±(99.9%) 0.599 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.070, 0.348), stdev = 0.156
[info]   CI (99.9%): [≈ 0, 0.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.800, 9.000), stdev = 2.168
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 93.65% complete, ETA 00:07:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 553789.255 ops/s
[info] # Warmup Iteration   2: 764739.033 ops/s
[info] # Warmup Iteration   3: 781432.367 ops/s
[info] # Warmup Iteration   4: 790070.689 ops/s
[info] # Warmup Iteration   5: 790901.830 ops/s
[info] Iteration   1: 778673.657 ops/s
[info]                  ·gc.alloc.rate:            1365.304 MB/sec
[info]                  ·gc.alloc.rate.norm:       2760.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.007 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2741.206 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 776310.611 ops/s
[info]                  ·gc.alloc.rate:            1361.504 MB/sec
[info]                  ·gc.alloc.rate.norm:       2760.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.374 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2749.602 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 790043.449 ops/s
[info]                  ·gc.alloc.rate:            1385.267 MB/sec
[info]                  ·gc.alloc.rate.norm:       2760.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.063 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2701.814 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 790290.318 ops/s
[info]                  ·gc.alloc.rate:                                  1385.640 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2760.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.090 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.179 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1359.314 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2707.562 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                6.633 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 789219.961 ops/s
[info]                  ·gc.alloc.rate:                                  1383.968 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2760.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.108 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.215 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.834 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2717.853 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce":
[info]   784907.599 ±(99.9%) 26308.475 ops/s [Average]
[info]   (min, avg, max) = (776310.611, 784907.599, 790290.318), stdev = 6832.227
[info]   CI (99.9%): [758599.124, 811216.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   1376.337 ±(99.9%) 45.816 MB/sec [Average]
[info]   (min, avg, max) = (1361.504, 1376.337, 1385.640), stdev = 11.898
[info]   CI (99.9%): [1330.521, 1422.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2760.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2760.001, 2760.001, 2760.001), stdev = 0.001
[info]   CI (99.9%): [2760.000, 2760.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.040 ±(99.9%) 0.210 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.040, 0.108), stdev = 0.055
[info]   CI (99.9%): [≈ 0, 0.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.079 ±(99.9%) 0.419 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.079, 0.215), stdev = 0.109
[info]   CI (99.9%): [≈ 0, 0.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1358.118 ±(99.9%) 11.454 MB/sec [Average]
[info]   (min, avg, max) = (1356.007, 1358.118, 1362.834), stdev = 2.975
[info]   CI (99.9%): [1346.664, 1369.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2723.608 ±(99.9%) 80.563 B/op [Average]
[info]   (min, avg, max) = (2701.814, 2723.608, 2749.602), stdev = 20.922
[info]   CI (99.9%): [2643.044, 2804.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.327 ±(99.9%) 11.422 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.327, 6.633), stdev = 2.966
[info]   CI (99.9%): [≈ 0, 12.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 7.000), stdev = 1.789
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 93.88% complete, ETA 00:06:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.906 ops/s
[info] # Warmup Iteration   2: 2161852.473 ops/s
[info] # Warmup Iteration   3: 2183657.697 ops/s
[info] # Warmup Iteration   4: 2181113.554 ops/s
[info] # Warmup Iteration   5: 2195196.765 ops/s
[info] Iteration   1: 2168435.414 ops/s
[info]                  ·gc.alloc.rate:            606.153 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.756 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 489.799 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 2198763.590 ops/s
[info]                  ·gc.alloc.rate:            614.650 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.739 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 483.015 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 2200392.476 ops/s
[info]                  ·gc.alloc.rate:            615.112 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.751 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 482.661 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 2205557.267 ops/s
[info]                  ·gc.alloc.rate:            616.541 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.723 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 481.522 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 2198414.104 ops/s
[info]                  ·gc.alloc.rate:            614.816 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.048 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 483.106 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava":
[info]   2194312.570 ±(99.9%) 56778.062 ops/s [Average]
[info]   (min, avg, max) = (2168435.414, 2194312.570, 2205557.267), stdev = 14745.083
[info]   CI (99.9%): [2137534.507, 2251090.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   613.454 ±(99.9%) 15.978 MB/sec [Average]
[info]   (min, avg, max) = (606.153, 613.454, 616.541), stdev = 4.150
[info]   CI (99.9%): [597.476, 629.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   440.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (440.000, 440.000, 440.000), stdev = 0.001
[info]   CI (99.9%): [440.000, 440.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   674.803 ±(99.9%) 0.529 MB/sec [Average]
[info]   (min, avg, max) = (674.723, 674.803, 675.048), stdev = 0.137
[info]   CI (99.9%): [674.274, 675.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   484.020 ±(99.9%) 12.673 B/op [Average]
[info]   (min, avg, max) = (481.522, 484.020, 489.799), stdev = 3.291
[info]   CI (99.9%): [471.348, 496.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 94.12% complete, ETA 00:06:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 520401.453 ops/s
[info] # Warmup Iteration   2: 1005124.204 ops/s
[info] # Warmup Iteration   3: 1047643.111 ops/s
[info] # Warmup Iteration   4: 1052350.092 ops/s
[info] # Warmup Iteration   5: 1053800.162 ops/s
[info] Iteration   1: 1055871.147 ops/s
[info]                  ·gc.alloc.rate:            729.791 MB/sec
[info]                  ·gc.alloc.rate.norm:       1088.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.343 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1009.809 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 1049670.722 ops/s
[info]                  ·gc.alloc.rate:            725.480 MB/sec
[info]                  ·gc.alloc.rate.norm:       1088.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.677 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2031.605 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 1057079.584 ops/s
[info]                  ·gc.alloc.rate:            730.671 MB/sec
[info]                  ·gc.alloc.rate.norm:       1088.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.403 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1008.682 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 1074971.797 ops/s
[info]                  ·gc.alloc.rate:            743.036 MB/sec
[info]                  ·gc.alloc.rate.norm:       1088.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.411 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 991.908 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 1077237.016 ops/s
[info]                  ·gc.alloc.rate:            744.730 MB/sec
[info]                  ·gc.alloc.rate.norm:       1088.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.523 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 989.815 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala":
[info]   1062966.053 ±(99.9%) 47534.492 ops/s [Average]
[info]   (min, avg, max) = (1049670.722, 1062966.053, 1077237.016), stdev = 12344.557
[info]   CI (99.9%): [1015431.562, 1110500.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   734.742 ±(99.9%) 33.092 MB/sec [Average]
[info]   (min, avg, max) = (725.480, 734.742, 744.730), stdev = 8.594
[info]   CI (99.9%): [701.650, 767.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1088.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1088.000, 1088.000, 1088.000), stdev = 0.001
[info]   CI (99.9%): [1088.000, 1088.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   812.871 ±(99.9%) 1166.278 MB/sec [Average]
[info]   (min, avg, max) = (677.343, 812.871, 1354.677), stdev = 302.879
[info]   CI (99.9%): [≈ 0, 1979.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1206.364 ±(99.9%) 1776.750 B/op [Average]
[info]   (min, avg, max) = (989.815, 1206.364, 2031.605), stdev = 461.416
[info]   CI (99.9%): [≈ 0, 2983.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 8.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 94.35% complete, ETA 00:06:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2229355.313 ops/s
[info] # Warmup Iteration   2: 2071982.724 ops/s
[info] # Warmup Iteration   3: 2460411.803 ops/s
[info] # Warmup Iteration   4: 2447064.024 ops/s
[info] # Warmup Iteration   5: 2221105.763 ops/s
[info] Iteration   1: 2452667.348 ops/s
[info]                  ·gc.alloc.rate:            685.572 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.030 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 435.160 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 2451751.065 ops/s
[info]                  ·gc.alloc.rate:            685.493 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.206 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 435.322 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 2452108.999 ops/s
[info]                  ·gc.alloc.rate:            685.366 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.983 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 435.260 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 2458456.321 ops/s
[info]                  ·gc.alloc.rate:            687.209 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.046 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 434.133 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 2455332.216 ops/s
[info]                  ·gc.alloc.rate:            686.414 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.094 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 434.667 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala":
[info]   2454063.190 ±(99.9%) 10895.211 ops/s [Average]
[info]   (min, avg, max) = (2451751.065, 2454063.190, 2458456.321), stdev = 2829.452
[info]   CI (99.9%): [2443167.979, 2464958.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   686.011 ±(99.9%) 3.028 MB/sec [Average]
[info]   (min, avg, max) = (685.366, 686.011, 687.209), stdev = 0.786
[info]   CI (99.9%): [682.983, 689.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   440.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (440.000, 440.000, 440.000), stdev = 0.001
[info]   CI (99.9%): [440.000, 440.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   678.072 ±(99.9%) 0.326 MB/sec [Average]
[info]   (min, avg, max) = (677.983, 678.072, 678.206), stdev = 0.085
[info]   CI (99.9%): [677.745, 678.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   434.909 ±(99.9%) 1.942 B/op [Average]
[info]   (min, avg, max) = (434.133, 434.909, 435.322), stdev = 0.504
[info]   CI (99.9%): [432.967, 436.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 94.59% complete, ETA 00:06:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 660844.753 ops/s
[info] # Warmup Iteration   2: 1125566.388 ops/s
[info] # Warmup Iteration   3: 1134995.948 ops/s
[info] # Warmup Iteration   4: 1153382.119 ops/s
[info] # Warmup Iteration   5: 1126654.702 ops/s
[info] Iteration   1: 1153081.756 ops/s
[info]                  ·gc.alloc.rate:            820.420 MB/sec
[info]                  ·gc.alloc.rate.norm:       1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.289 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 924.604 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 1130284.972 ops/s
[info]                  ·gc.alloc.rate:            804.303 MB/sec
[info]                  ·gc.alloc.rate.norm:       1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.428 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 943.326 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 1115849.733 ops/s
[info]                  ·gc.alloc.rate:            794.137 MB/sec
[info]                  ·gc.alloc.rate.norm:       1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.025 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1911.041 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   4: 1129263.821 ops/s
[info]                  ·gc.alloc.rate:            803.686 MB/sec
[info]                  ·gc.alloc.rate.norm:       1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.481 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 944.124 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 1128043.971 ops/s
[info]                  ·gc.alloc.rate:            802.738 MB/sec
[info]                  ·gc.alloc.rate.norm:       1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.441 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 945.182 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson":
[info]   1131304.850 ±(99.9%) 51981.324 ops/s [Average]
[info]   (min, avg, max) = (1115849.733, 1131304.850, 1153081.756), stdev = 13499.385
[info]   CI (99.9%): [1079323.526, 1183286.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   805.057 ±(99.9%) 36.687 MB/sec [Average]
[info]   (min, avg, max) = (794.137, 805.057, 820.420), stdev = 9.528
[info]   CI (99.9%): [768.369, 841.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   1120.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1120.000, 1120.000, 1120.000), stdev = 0.001
[info]   CI (99.9%): [1120.000, 1120.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   812.933 ±(99.9%) 1166.894 MB/sec [Average]
[info]   (min, avg, max) = (677.289, 812.933, 1355.025), stdev = 303.039
[info]   CI (99.9%): [≈ 0, 1979.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   1133.655 ±(99.9%) 1673.702 B/op [Average]
[info]   (min, avg, max) = (924.604, 1133.655, 1911.041), stdev = 434.655
[info]   CI (99.9%): [≈ 0, 2807.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 13.000), stdev = 4.025
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 94.82% complete, ETA 00:05:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1014109.612 ops/s
[info] # Warmup Iteration   2: 1718335.380 ops/s
[info] # Warmup Iteration   3: 1733234.044 ops/s
[info] # Warmup Iteration   4: 1737133.935 ops/s
[info] # Warmup Iteration   5: 1735618.142 ops/s
[info] Iteration   1: 1730289.803 ops/s
[info]                  ·gc.alloc.rate:            1450.927 MB/sec
[info]                  ·gc.alloc.rate.norm:       1320.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2033.973 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1850.435 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 1737099.468 ops/s
[info]                  ·gc.alloc.rate:            1456.731 MB/sec
[info]                  ·gc.alloc.rate.norm:       1320.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.090 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1228.805 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 1696910.779 ops/s
[info]                  ·gc.alloc.rate:                   1423.004 MB/sec
[info]                  ·gc.alloc.rate.norm:              1320.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1356.065 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1257.907 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.089 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 1746993.478 ops/s
[info]                  ·gc.alloc.rate:                                  1465.104 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1320.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.121 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.109 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.780 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1227.811 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 1750295.436 ops/s
[info]                  ·gc.alloc.rate:                                  1467.784 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1320.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.728 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1225.522 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce":
[info]   1732317.793 ±(99.9%) 82119.104 ops/s [Average]
[info]   (min, avg, max) = (1696910.779, 1732317.793, 1750295.436), stdev = 21326.071
[info]   CI (99.9%): [1650198.688, 1814436.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1452.710 ±(99.9%) 68.953 MB/sec [Average]
[info]   (min, avg, max) = (1423.004, 1452.710, 1467.784), stdev = 17.907
[info]   CI (99.9%): [1383.757, 1521.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1320.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1320.000, 1320.000, 1320.000), stdev = 0.001
[info]   CI (99.9%): [1320.000, 1320.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.207 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.121), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.022 ±(99.9%) 0.186 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.109), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1494.327 ±(99.9%) 1161.699 MB/sec [Average]
[info]   (min, avg, max) = (1356.065, 1494.327, 2033.973), stdev = 301.690
[info]   CI (99.9%): [332.628, 2656.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   1358.096 ±(99.9%) 1061.028 B/op [Average]
[info]   (min, avg, max) = (1225.522, 1358.096, 1850.435), stdev = 275.546
[info]   CI (99.9%): [297.068, 2419.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   0.618 ±(99.9%) 5.320 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.618, 3.089), stdev = 1.382
[info]   CI (99.9%): [≈ 0, 5.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 11.000), stdev = 3.435
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 95.06% complete, ETA 00:05:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.932 ops/s
[info] # Warmup Iteration   2: 2509847.854 ops/s
[info] # Warmup Iteration   3: 2570371.937 ops/s
[info] # Warmup Iteration   4: 2562491.527 ops/s
[info] # Warmup Iteration   5: 2541253.672 ops/s
[info] Iteration   1: 2575807.019 ops/s
[info]                  ·gc.alloc.rate:            667.672 MB/sec
[info]                  ·gc.alloc.rate.norm:       408.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.729 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 412.313 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 2568508.229 ops/s
[info]                  ·gc.alloc.rate:            665.880 MB/sec
[info]                  ·gc.alloc.rate.norm:       408.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.831 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 413.485 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 2572577.029 ops/s
[info]                  ·gc.alloc.rate:            666.956 MB/sec
[info]                  ·gc.alloc.rate.norm:       408.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.843 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 412.825 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 2556632.557 ops/s
[info]                  ·gc.alloc.rate:            662.673 MB/sec
[info]                  ·gc.alloc.rate.norm:       408.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.689 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 415.398 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 2573220.586 ops/s
[info]                  ·gc.alloc.rate:            667.008 MB/sec
[info]                  ·gc.alloc.rate.norm:       408.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.716 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 412.715 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava":
[info]   2569349.084 ±(99.9%) 29169.115 ops/s [Average]
[info]   (min, avg, max) = (2556632.557, 2569349.084, 2575807.019), stdev = 7575.126
[info]   CI (99.9%): [2540179.969, 2598518.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   666.038 ±(99.9%) 7.653 MB/sec [Average]
[info]   (min, avg, max) = (662.673, 666.038, 667.672), stdev = 1.987
[info]   CI (99.9%): [658.385, 673.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   408.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (408.000, 408.000, 408.000), stdev = 0.001
[info]   CI (99.9%): [408.000, 408.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   674.762 ±(99.9%) 0.272 MB/sec [Average]
[info]   (min, avg, max) = (674.689, 674.762, 674.843), stdev = 0.071
[info]   CI (99.9%): [674.490, 675.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   413.347 ±(99.9%) 4.703 B/op [Average]
[info]   (min, avg, max) = (412.313, 413.347, 415.398), stdev = 1.221
[info]   CI (99.9%): [408.644, 418.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 95.29% complete, ETA 00:05:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1242870.909 ops/s
[info] # Warmup Iteration   2: 2369779.027 ops/s
[info] # Warmup Iteration   3: 2456829.626 ops/s
[info] # Warmup Iteration   4: 2375718.633 ops/s
[info] # Warmup Iteration   5: 2455656.682 ops/s
[info] Iteration   1: 2442369.962 ops/s
[info]                  ·gc.alloc.rate:            1154.380 MB/sec
[info]                  ·gc.alloc.rate.norm:       744.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.743 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 873.135 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 2453529.301 ops/s
[info]                  ·gc.alloc.rate:            1159.881 MB/sec
[info]                  ·gc.alloc.rate.norm:       744.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.969 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 869.139 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 2481659.913 ops/s
[info]                  ·gc.alloc.rate:            1173.193 MB/sec
[info]                  ·gc.alloc.rate.norm:       744.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.489 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 429.641 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 2460706.747 ops/s
[info]                  ·gc.alloc.rate:            1163.111 MB/sec
[info]                  ·gc.alloc.rate.norm:       744.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.740 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 866.579 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 2453802.493 ops/s
[info]                  ·gc.alloc.rate:                                  1160.348 MB/sec
[info]                  ·gc.alloc.rate.norm:                             744.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.097 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.063 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1359.340 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       871.591 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                2.564 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala":
[info]   2458413.683 ±(99.9%) 56071.728 ops/s [Average]
[info]   (min, avg, max) = (2442369.962, 2458413.683, 2481659.913), stdev = 14561.650
[info]   CI (99.9%): [2402341.955, 2514485.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1162.183 ±(99.9%) 26.653 MB/sec [Average]
[info]   (min, avg, max) = (1154.380, 1162.183, 1173.193), stdev = 6.922
[info]   CI (99.9%): [1135.530, 1188.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   744.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (744.000, 744.000, 744.000), stdev = 0.001
[info]   CI (99.9%): [744.000, 744.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.168 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.097), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.013 ±(99.9%) 0.108 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.063), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1220.256 ±(99.9%) 1168.371 MB/sec [Average]
[info]   (min, avg, max) = (677.489, 1220.256, 1359.340), stdev = 303.422
[info]   CI (99.9%): [51.885, 2388.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   782.017 ±(99.9%) 758.575 B/op [Average]
[info]   (min, avg, max) = (429.641, 782.017, 873.135), stdev = 197.000
[info]   CI (99.9%): [23.442, 1540.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.800 ±(99.9%) 6.885 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.800, 3.998), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.513 ±(99.9%) 4.415 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.513, 2.564), stdev = 1.146
[info]   CI (99.9%): [≈ 0, 4.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.600, 10.000), stdev = 2.074
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 95.53% complete, ETA 00:05:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2064458.409 ops/s
[info] # Warmup Iteration   2: 2861706.226 ops/s
[info] # Warmup Iteration   3: 2916025.481 ops/s
[info] # Warmup Iteration   4: 2932876.445 ops/s
[info] # Warmup Iteration   5: 2935345.290 ops/s
[info] Iteration   1: 2937046.473 ops/s
[info]                  ·gc.alloc.rate:                   761.348 MB/sec
[info]                  ·gc.alloc.rate.norm:              408.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.430 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        363.029 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.357 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2921625.617 ops/s
[info]                  ·gc.alloc.rate:            757.379 MB/sec
[info]                  ·gc.alloc.rate.norm:       408.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.123 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 365.305 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 2915421.675 ops/s
[info]                  ·gc.alloc.rate:            755.945 MB/sec
[info]                  ·gc.alloc.rate.norm:       408.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.609 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 365.721 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 2927952.137 ops/s
[info]                  ·gc.alloc.rate:            758.866 MB/sec
[info]                  ·gc.alloc.rate.norm:       408.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.314 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 364.154 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 2924941.148 ops/s
[info]                  ·gc.alloc.rate:            758.311 MB/sec
[info]                  ·gc.alloc.rate.norm:       408.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.516 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 364.529 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala":
[info]   2925397.410 ±(99.9%) 30815.809 ops/s [Average]
[info]   (min, avg, max) = (2915421.675, 2925397.410, 2937046.473), stdev = 8002.768
[info]   CI (99.9%): [2894581.601, 2956213.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   758.370 ±(99.9%) 7.696 MB/sec [Average]
[info]   (min, avg, max) = (755.945, 758.370, 761.348), stdev = 1.999
[info]   CI (99.9%): [750.673, 766.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   408.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (408.000, 408.000, 408.000), stdev = 0.001
[info]   CI (99.9%): [408.000, 408.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   677.598 ±(99.9%) 1.204 MB/sec [Average]
[info]   (min, avg, max) = (677.314, 677.598, 678.123), stdev = 0.313
[info]   CI (99.9%): [676.394, 678.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   364.548 ±(99.9%) 4.043 B/op [Average]
[info]   (min, avg, max) = (363.029, 364.548, 365.721), stdev = 1.050
[info]   CI (99.9%): [360.505, 368.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.071 ±(99.9%) 0.615 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.357), stdev = 0.160
[info]   CI (99.9%): [≈ 0, 0.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 95.76% complete, ETA 00:04:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2150399.693 ops/s
[info] # Warmup Iteration   2: 2994430.786 ops/s
[info] # Warmup Iteration   3: 3008349.258 ops/s
[info] # Warmup Iteration   4: 3007355.497 ops/s
[info] # Warmup Iteration   5: 2943925.611 ops/s
[info] Iteration   1: 2998339.891 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3007176.461 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3007208.737 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3006500.190 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3007432.955 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   3005331.647 ±(99.9%) 15110.091 ops/s [Average]
[info]   (min, avg, max) = (2998339.891, 3005331.647, 3007432.955), stdev = 3924.043
[info]   CI (99.9%): [2990221.556, 3020441.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 96.00% complete, ETA 00:04:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1558271.933 ops/s
[info] # Warmup Iteration   2: 2403581.301 ops/s
[info] # Warmup Iteration   3: 2312681.291 ops/s
[info] # Warmup Iteration   4: 2378588.379 ops/s
[info] # Warmup Iteration   5: 2380825.381 ops/s
[info] Iteration   1: 2383459.233 ops/s
[info]                  ·gc.alloc.rate:            1150.940 MB/sec
[info]                  ·gc.alloc.rate.norm:       760.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.912 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 894.689 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 2379973.883 ops/s
[info]                  ·gc.alloc.rate:            1149.364 MB/sec
[info]                  ·gc.alloc.rate.norm:       760.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.042 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 896.002 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 2377682.139 ops/s
[info]                  ·gc.alloc.rate:            1147.935 MB/sec
[info]                  ·gc.alloc.rate.norm:       760.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.664 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 896.867 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 2383286.602 ops/s
[info]                  ·gc.alloc.rate:            1151.335 MB/sec
[info]                  ·gc.alloc.rate.norm:       760.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.697 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 447.350 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 2383068.054 ops/s
[info]                  ·gc.alloc.rate:                   1151.054 MB/sec
[info]                  ·gc.alloc.rate.norm:              760.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.205 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        894.795 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.640 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson":
[info]   2381493.982 ±(99.9%) 9891.406 ops/s [Average]
[info]   (min, avg, max) = (2377682.139, 2381493.982, 2383459.233), stdev = 2568.767
[info]   CI (99.9%): [2371602.576, 2391385.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1150.125 ±(99.9%) 5.569 MB/sec [Average]
[info]   (min, avg, max) = (1147.935, 1150.125, 1151.335), stdev = 1.446
[info]   CI (99.9%): [1144.556, 1155.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   760.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (760.000, 760.000, 760.000), stdev = 0.001
[info]   CI (99.9%): [760.000, 760.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1219.504 ±(99.9%) 1166.280 MB/sec [Average]
[info]   (min, avg, max) = (677.697, 1219.504, 1355.205), stdev = 302.879
[info]   CI (99.9%): [53.224, 2385.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   805.941 ±(99.9%) 771.901 B/op [Average]
[info]   (min, avg, max) = (447.350, 805.941, 896.867), stdev = 200.460
[info]   CI (99.9%): [34.040, 1577.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.800 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.800, 3.998), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   0.528 ±(99.9%) 4.545 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.528, 2.640), stdev = 1.180
[info]   CI (99.9%): [≈ 0, 5.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.000, 8.000), stdev = 1.732
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce
[info] # Run progress: 96.24% complete, ETA 00:04:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5157.362 ops/s
[info] # Warmup Iteration   2: 8752.619 ops/s
[info] # Warmup Iteration   3: 9985.023 ops/s
[info] # Warmup Iteration   4: 9936.610 ops/s
[info] # Warmup Iteration   5: 11000.378 ops/s
[info] Iteration   1: 11021.281 ops/s
[info]                  ·gc.alloc.rate:            1596.262 MB/sec
[info]                  ·gc.alloc.rate.norm:       227976.040 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2033.971 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 290489.033 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 11053.906 ops/s
[info]                  ·gc.alloc.rate:            1601.178 MB/sec
[info]                  ·gc.alloc.rate.norm:       227995.885 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.101 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 193098.836 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 11019.415 ops/s
[info]                  ·gc.alloc.rate:                   1596.213 MB/sec
[info]                  ·gc.alloc.rate.norm:              228016.037 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.947 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        193694.496 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 475.674 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 11079.352 ops/s
[info]                  ·gc.alloc.rate:                                  1605.088 MB/sec
[info]                  ·gc.alloc.rate.norm:                             228016.040 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.191 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 27.145 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.147 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       290387.994 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 11125.589 ops/s
[info]                  ·gc.alloc.rate:                                  1611.725 MB/sec
[info]                  ·gc.alloc.rate.norm:                             228016.040 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.241 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.743 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       192791.741 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce":
[info]   11059.908 ±(99.9%) 170.691 ops/s [Average]
[info]   (min, avg, max) = (11019.415, 11059.908, 11125.589), stdev = 44.328
[info]   CI (99.9%): [10889.218, 11230.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1602.093 ±(99.9%) 25.188 MB/sec [Average]
[info]   (min, avg, max) = (1596.213, 1602.093, 1611.725), stdev = 6.541
[info]   CI (99.9%): [1576.905, 1627.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   228004.008 ±(99.9%) 68.947 B/op [Average]
[info]   (min, avg, max) = (227976.040, 228004.008, 228016.040), stdev = 17.905
[info]   CI (99.9%): [227935.061, 228072.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.040 ±(99.9%) 0.326 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.040, 0.191), stdev = 0.085
[info]   CI (99.9%): [≈ 0, 0.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   5.677 ±(99.9%) 46.257 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.677, 27.145), stdev = 12.013
[info]   CI (99.9%): [≈ 0, 51.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1630.582 ±(99.9%) 1435.960 MB/sec [Average]
[info]   (min, avg, max) = (1355.947, 1630.582, 2044.147), stdev = 372.914
[info]   CI (99.9%): [194.622, 3066.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   232092.420 ±(99.9%) 205098.593 B/op [Average]
[info]   (min, avg, max) = (192791.741, 232092.420, 290489.033), stdev = 53263.453
[info]   CI (99.9%): [26993.827, 437191.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   95.135 ±(99.9%) 819.140 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 95.135, 475.674), stdev = 212.728
[info]   CI (99.9%): [≈ 0, 914.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.000, 12.000), stdev = 3.391
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala
[info] # Run progress: 96.47% complete, ETA 00:03:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4209.657 ops/s
[info] # Warmup Iteration   2: 13636.797 ops/s
[info] # Warmup Iteration   3: 14003.416 ops/s
[info] # Warmup Iteration   4: 13947.727 ops/s
[info] # Warmup Iteration   5: 14196.153 ops/s
[info] Iteration   1: 14295.315 ops/s
[info]                  ·gc.alloc.rate:      202.102 MB/sec
[info]                  ·gc.alloc.rate.norm: 22254.420 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 14302.211 ops/s
[info]                  ·gc.alloc.rate:      202.223 MB/sec
[info]                  ·gc.alloc.rate.norm: 22256.029 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 13722.890 ops/s
[info]                  ·gc.alloc.rate:            194.103 MB/sec
[info]                  ·gc.alloc.rate.norm:       22256.040 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.914 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 77615.709 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 14210.804 ops/s
[info]                  ·gc.alloc.rate:      200.847 MB/sec
[info]                  ·gc.alloc.rate.norm: 22248.178 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 14254.662 ops/s
[info]                  ·gc.alloc.rate:      201.417 MB/sec
[info]                  ·gc.alloc.rate.norm: 22240.029 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala":
[info]   14157.176 ±(99.9%) 945.373 ops/s [Average]
[info]   (min, avg, max) = (13722.890, 14157.176, 14302.211), stdev = 245.510
[info]   CI (99.9%): [13211.804, 15102.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   200.138 ±(99.9%) 13.166 MB/sec [Average]
[info]   (min, avg, max) = (194.103, 200.138, 202.223), stdev = 3.419
[info]   CI (99.9%): [186.972, 213.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   22250.939 ±(99.9%) 26.587 B/op [Average]
[info]   (min, avg, max) = (22240.029, 22250.939, 22256.040), stdev = 6.905
[info]   CI (99.9%): [22224.352, 22277.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   135.383 ±(99.9%) 1165.687 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 135.383, 676.914), stdev = 302.725
[info]   CI (99.9%): [≈ 0, 1301.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   15523.142 ±(99.9%) 133658.932 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15523.142, 77615.709), stdev = 34710.800
[info]   CI (99.9%): [≈ 0, 149182.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 5.000), stdev = 2.236
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala
[info] # Run progress: 96.71% complete, ETA 00:03:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18341.172 ops/s
[info] # Warmup Iteration   2: 23140.399 ops/s
[info] # Warmup Iteration   3: 36411.415 ops/s
[info] # Warmup Iteration   4: 37743.703 ops/s
[info] # Warmup Iteration   5: 37799.635 ops/s
[info] Iteration   1: 38128.884 ops/s
[info]                  ·gc.alloc.rate:      353.085 MB/sec
[info]                  ·gc.alloc.rate.norm: 14576.011 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 37902.905 ops/s
[info]                  ·gc.alloc.rate:            351.035 MB/sec
[info]                  ·gc.alloc.rate.norm:       14576.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.119 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28157.488 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 38011.622 ops/s
[info]                  ·gc.alloc.rate:      351.985 MB/sec
[info]                  ·gc.alloc.rate.norm: 14576.011 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 37799.191 ops/s
[info]                  ·gc.alloc.rate:            349.997 MB/sec
[info]                  ·gc.alloc.rate.norm:       14576.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.974 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28234.946 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 38301.618 ops/s
[info]                  ·gc.alloc.rate:      354.733 MB/sec
[info]                  ·gc.alloc.rate.norm: 14576.011 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala":
[info]   38028.844 ±(99.9%) 753.859 ops/s [Average]
[info]   (min, avg, max) = (37799.191, 38028.844, 38301.618), stdev = 195.775
[info]   CI (99.9%): [37274.985, 38782.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   352.167 ±(99.9%) 7.061 MB/sec [Average]
[info]   (min, avg, max) = (349.997, 352.167, 354.733), stdev = 1.834
[info]   CI (99.9%): [345.106, 359.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   14576.011 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (14576.011, 14576.011, 14576.012), stdev = 0.001
[info]   CI (99.9%): [14576.009, 14576.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   271.218 ±(99.9%) 1430.057 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 271.218, 678.119), stdev = 371.381
[info]   CI (99.9%): [≈ 0, 1701.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   11278.487 ±(99.9%) 59468.299 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11278.487, 28234.946), stdev = 15443.728
[info]   CI (99.9%): [≈ 0, 70746.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 4.000), stdev = 1.949
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson
[info] # Run progress: 96.94% complete, ETA 00:03:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 761.673 ops/s
[info] # Warmup Iteration   2: 2574.136 ops/s
[info] # Warmup Iteration   3: 2378.532 ops/s
[info] # Warmup Iteration   4: 2360.143 ops/s
[info] # Warmup Iteration   5: 2756.284 ops/s
[info] Iteration   1: 2862.634 ops/s
[info]                  ·gc.alloc.rate:            924.778 MB/sec
[info]                  ·gc.alloc.rate.norm:       508248.142 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.835 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 371980.872 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 2843.274 ops/s
[info]                  ·gc.alloc.rate:            918.416 MB/sec
[info]                  ·gc.alloc.rate.norm:       508248.143 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.905 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 374596.771 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 2823.372 ops/s
[info]                  ·gc.alloc.rate:            912.041 MB/sec
[info]                  ·gc.alloc.rate.norm:       508248.156 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.933 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 754499.445 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   4: 2848.355 ops/s
[info]                  ·gc.alloc.rate:            920.132 MB/sec
[info]                  ·gc.alloc.rate.norm:       508248.143 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.979 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 373939.353 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 2823.296 ops/s
[info]                  ·gc.alloc.rate:            912.013 MB/sec
[info]                  ·gc.alloc.rate.norm:       508248.144 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.893 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 754499.445 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson":
[info]   2840.186 ±(99.9%) 65.238 ops/s [Average]
[info]   (min, avg, max) = (2823.296, 2840.186, 2862.634), stdev = 16.942
[info]   CI (99.9%): [2774.948, 2905.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   917.476 ±(99.9%) 21.148 MB/sec [Average]
[info]   (min, avg, max) = (912.013, 917.476, 924.778), stdev = 5.492
[info]   CI (99.9%): [896.328, 938.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   508248.146 ±(99.9%) 0.022 B/op [Average]
[info]   (min, avg, max) = (508248.142, 508248.146, 508248.156), stdev = 0.006
[info]   CI (99.9%): [508248.124, 508248.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   947.709 ±(99.9%) 1427.864 MB/sec [Average]
[info]   (min, avg, max) = (676.835, 947.709, 1353.933), stdev = 370.812
[info]   CI (99.9%): [≈ 0, 2375.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   525903.177 ±(99.9%) 803556.633 B/op [Average]
[info]   (min, avg, max) = (371980.872, 525903.177, 754499.445), stdev = 208681.106
[info]   CI (99.9%): [≈ 0, 1329459.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 9.000, 12.000), stdev = 3.000
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala
[info] # Run progress: 97.18% complete, ETA 00:03:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_5cbb92e4/target/1bdf7fe1/jackson-module-afterburner-2.9.5.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 20504.615 ops/s
[info] # Warmup Iteration   2: 55298.908 ops/s
[info] # Warmup Iteration   3: 56165.706 ops/s
[info] # Warmup Iteration   4: 56590.775 ops/s
[info] # Warmup Iteration   5: 53853.879 ops/s
[info] Iteration   1: 56509.550 ops/s
[info]                  ·gc.alloc.rate:            721.635 MB/sec
[info]                  ·gc.alloc.rate.norm:       20100.065 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.082 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18831.251 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 56582.672 ops/s
[info]                  ·gc.alloc.rate:            722.554 MB/sec
[info]                  ·gc.alloc.rate.norm:       20099.943 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.074 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18806.959 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 56328.555 ops/s
[info]                  ·gc.alloc.rate:                   719.328 MB/sec
[info]                  ·gc.alloc.rate.norm:              20100.084 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.097 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        18892.087 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 18.613 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 55949.150 ops/s
[info]                  ·gc.alloc.rate:            714.444 MB/sec
[info]                  ·gc.alloc.rate.norm:       20099.959 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.713 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19038.443 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 56723.412 ops/s
[info]                  ·gc.alloc.rate:            724.368 MB/sec
[info]                  ·gc.alloc.rate.norm:       20099.995 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.085 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18760.217 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala":
[info]   56418.668 ±(99.9%) 1149.714 ops/s [Average]
[info]   (min, avg, max) = (55949.150, 56418.668, 56723.412), stdev = 298.577
[info]   CI (99.9%): [55268.954, 57568.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   720.466 ±(99.9%) 14.727 MB/sec [Average]
[info]   (min, avg, max) = (714.444, 720.466, 724.368), stdev = 3.825
[info]   CI (99.9%): [705.739, 735.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   20100.009 ±(99.9%) 0.242 B/op [Average]
[info]   (min, avg, max) = (20099.943, 20100.009, 20100.084), stdev = 0.063
[info]   CI (99.9%): [20099.768, 20100.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   676.210 ±(99.9%) 1.083 MB/sec [Average]
[info]   (min, avg, max) = (676.074, 676.210, 676.713), stdev = 0.281
[info]   CI (99.9%): [675.128, 677.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   18865.792 ±(99.9%) 414.282 B/op [Average]
[info]   (min, avg, max) = (18760.217, 18865.792, 19038.443), stdev = 107.588
[info]   CI (99.9%): [18451.510, 19280.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   3.723 ±(99.9%) 32.053 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.723, 18.613), stdev = 8.324
[info]   CI (99.9%): [≈ 0, 35.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala
[info] # Run progress: 97.41% complete, ETA 00:02:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 65553.251 ops/s
[info] # Warmup Iteration   2: 76330.745 ops/s
[info] # Warmup Iteration   3: 79056.833 ops/s
[info] # Warmup Iteration   4: 79972.326 ops/s
[info] # Warmup Iteration   5: 80491.160 ops/s
[info] Iteration   1: 79875.348 ops/s
[info]                  ·gc.alloc.rate:            523.636 MB/sec
[info]                  ·gc.alloc.rate.norm:       10320.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.312 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13348.711 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 79674.700 ops/s
[info]                  ·gc.alloc.rate:            522.420 MB/sec
[info]                  ·gc.alloc.rate.norm:       10320.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.452 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13382.549 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 80260.967 ops/s
[info]                  ·gc.alloc.rate:            526.475 MB/sec
[info]                  ·gc.alloc.rate.norm:       10320.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.727 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13284.854 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 80619.542 ops/s
[info]                  ·gc.alloc.rate:      528.560 MB/sec
[info]                  ·gc.alloc.rate.norm: 10320.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 80459.773 ops/s
[info]                  ·gc.alloc.rate:            527.506 MB/sec
[info]                  ·gc.alloc.rate.norm:       10320.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.366 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13251.837 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala":
[info]   80178.066 ±(99.9%) 1523.498 ops/s [Average]
[info]   (min, avg, max) = (79674.700, 80178.066, 80619.542), stdev = 395.647
[info]   CI (99.9%): [78654.568, 81701.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   525.719 ±(99.9%) 10.015 MB/sec [Average]
[info]   (min, avg, max) = (522.420, 525.719, 528.560), stdev = 2.601
[info]   CI (99.9%): [515.704, 535.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   10320.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10320.005, 10320.005, 10320.006), stdev = 0.001
[info]   CI (99.9%): [10320.004, 10320.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   541.971 ±(99.9%) 1166.635 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 541.971, 677.727), stdev = 302.971
[info]   CI (99.9%): [≈ 0, 1708.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   10653.590 ±(99.9%) 22933.511 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10653.590, 13382.549), stdev = 5955.760
[info]   CI (99.9%): [≈ 0, 33587.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 97.65% complete, ETA 00:02:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 72432.441 ops/s
[info] # Warmup Iteration   2: 90444.016 ops/s
[info] # Warmup Iteration   3: 90666.975 ops/s
[info] # Warmup Iteration   4: 90550.098 ops/s
[info] # Warmup Iteration   5: 90620.071 ops/s
[info] Iteration   1: 90615.664 ops/s
[info]                  ·gc.alloc.rate:      12.896 MB/sec
[info]                  ·gc.alloc.rate.norm: 224.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 90580.610 ops/s
[info]                  ·gc.alloc.rate:      12.890 MB/sec
[info]                  ·gc.alloc.rate.norm: 224.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 90587.356 ops/s
[info]                  ·gc.alloc.rate:      12.890 MB/sec
[info]                  ·gc.alloc.rate.norm: 224.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 90479.407 ops/s
[info]                  ·gc.alloc.rate:      12.876 MB/sec
[info]                  ·gc.alloc.rate.norm: 224.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 90577.957 ops/s
[info]                  ·gc.alloc.rate:      12.891 MB/sec
[info]                  ·gc.alloc.rate.norm: 224.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   90568.199 ±(99.9%) 199.651 ops/s [Average]
[info]   (min, avg, max) = (90479.407, 90568.199, 90615.664), stdev = 51.849
[info]   CI (99.9%): [90368.548, 90767.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   12.889 ±(99.9%) 0.028 MB/sec [Average]
[info]   (min, avg, max) = (12.876, 12.889, 12.896), stdev = 0.007
[info]   CI (99.9%): [12.860, 12.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   224.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (224.005, 224.005, 224.005), stdev = 0.001
[info]   CI (99.9%): [224.004, 224.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 97.88% complete, ETA 00:02:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 284536.544 ops/s
[info] # Warmup Iteration   2: 337618.396 ops/s
[info] # Warmup Iteration   3: 345108.446 ops/s
[info] # Warmup Iteration   4: 342862.272 ops/s
[info] # Warmup Iteration   5: 345371.723 ops/s
[info] Iteration   1: 346602.359 ops/s
[info]                  ·gc.alloc.rate:            1856.688 MB/sec
[info]                  ·gc.alloc.rate.norm:       8432.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.140 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6158.806 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 345838.897 ops/s
[info]                  ·gc.alloc.rate:                                  1853.248 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8432.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.072 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.327 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.591 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9288.931 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                15.158 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 346849.808 ops/s
[info]                  ·gc.alloc.rate:                                  1858.114 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8432.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.014 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.061 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.316 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9276.973 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 347462.913 ops/s
[info]                  ·gc.alloc.rate:            1861.366 MB/sec
[info]                  ·gc.alloc.rate.norm:       8432.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.252 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9260.475 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 348113.658 ops/s
[info]                  ·gc.alloc.rate:            1864.807 MB/sec
[info]                  ·gc.alloc.rate.norm:       8432.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.769 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6161.964 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce":
[info]   346973.527 ±(99.9%) 3323.540 ops/s [Average]
[info]   (min, avg, max) = (345838.897, 346973.527, 348113.658), stdev = 863.113
[info]   CI (99.9%): [343649.987, 350297.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1858.845 ±(99.9%) 17.049 MB/sec [Average]
[info]   (min, avg, max) = (1853.248, 1858.845, 1864.807), stdev = 4.428
[info]   CI (99.9%): [1841.796, 1875.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   8432.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8432.001, 8432.001, 8432.001), stdev = 0.001
[info]   CI (99.9%): [8432.001, 8432.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.120 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.072), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.078 ±(99.9%) 0.546 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.078, 0.327), stdev = 0.142
[info]   CI (99.9%): [≈ 0, 0.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1769.814 ±(99.9%) 1442.503 MB/sec [Average]
[info]   (min, avg, max) = (1356.140, 1769.814, 2044.316), stdev = 374.613
[info]   CI (99.9%): [327.310, 3212.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   8029.430 ±(99.9%) 6570.072 B/op [Average]
[info]   (min, avg, max) = (6158.806, 8029.430, 9288.931), stdev = 1706.227
[info]   CI (99.9%): [1459.358, 14599.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.332), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   3.032 ±(99.9%) 26.103 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.032, 15.158), stdev = 6.779
[info]   CI (99.9%): [≈ 0, 29.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.200, 7.000), stdev = 2.490
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 98.12% complete, ETA 00:02:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 194946.834 ops/s
[info] # Warmup Iteration   2: 398840.435 ops/s
[info] # Warmup Iteration   3: 412224.296 ops/s
[info] # Warmup Iteration   4: 408793.085 ops/s
[info] # Warmup Iteration   5: 396902.349 ops/s
[info] Iteration   1: 410527.741 ops/s
[info]                  ·gc.alloc.rate:            500.739 MB/sec
[info]                  ·gc.alloc.rate.norm:       1920.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.692 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2594.663 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 403879.538 ops/s
[info]                  ·gc.alloc.rate:      492.641 MB/sec
[info]                  ·gc.alloc.rate.norm: 1920.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 410889.150 ops/s
[info]                  ·gc.alloc.rate:                   501.163 MB/sec
[info]                  ·gc.alloc.rate.norm:              1920.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.644 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2592.283 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.551 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 410984.636 ops/s
[info]                  ·gc.alloc.rate:            501.319 MB/sec
[info]                  ·gc.alloc.rate.norm:       1920.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.385 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2594.317 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 413240.279 ops/s
[info]                  ·gc.alloc.rate:      504.055 MB/sec
[info]                  ·gc.alloc.rate.norm: 1920.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala":
[info]   409904.269 ±(99.9%) 13607.579 ops/s [Average]
[info]   (min, avg, max) = (403879.538, 409904.269, 413240.279), stdev = 3533.845
[info]   CI (99.9%): [396296.690, 423511.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   499.983 ±(99.9%) 16.588 MB/sec [Average]
[info]   (min, avg, max) = (492.641, 499.983, 504.055), stdev = 4.308
[info]   CI (99.9%): [483.396, 516.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1920.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1920.001, 1920.001, 1920.001), stdev = 0.001
[info]   CI (99.9%): [1920.001, 1920.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   406.144 ±(99.9%) 1427.654 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 406.144, 677.385), stdev = 370.757
[info]   CI (99.9%): [≈ 0, 1833.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1556.253 ±(99.9%) 5470.449 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1556.253, 2594.663), stdev = 1420.658
[info]   CI (99.9%): [≈ 0, 7026.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.510 ±(99.9%) 4.394 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.510, 2.551), stdev = 1.141
[info]   CI (99.9%): [≈ 0, 4.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 5.000), stdev = 2.588
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 98.35% complete, ETA 00:01:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1025327.579 ops/s
[info] # Warmup Iteration   2: 1077012.609 ops/s
[info] # Warmup Iteration   3: 1068350.216 ops/s
[info] # Warmup Iteration   4: 1080729.492 ops/s
[info] # Warmup Iteration   5: 1105067.409 ops/s
[info] Iteration   1: 1099754.273 ops/s
[info]                  ·gc.alloc.rate:            575.720 MB/sec
[info]                  ·gc.alloc.rate.norm:       824.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.042 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 970.449 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 1102520.384 ops/s
[info]                  ·gc.alloc.rate:      577.265 MB/sec
[info]                  ·gc.alloc.rate.norm: 824.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1103261.389 ops/s
[info]                  ·gc.alloc.rate:            577.477 MB/sec
[info]                  ·gc.alloc.rate.norm:       824.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.980 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 967.407 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 1103401.811 ops/s
[info]                  ·gc.alloc.rate:            577.731 MB/sec
[info]                  ·gc.alloc.rate.norm:       824.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.189 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 967.281 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 1106512.469 ops/s
[info]                  ·gc.alloc.rate:            579.323 MB/sec
[info]                  ·gc.alloc.rate.norm:       824.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.149 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 964.566 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala":
[info]   1103090.065 ±(99.9%) 9291.834 ops/s [Average]
[info]   (min, avg, max) = (1099754.273, 1103090.065, 1106512.469), stdev = 2413.060
[info]   CI (99.9%): [1093798.231, 1112381.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   577.503 ±(99.9%) 4.946 MB/sec [Average]
[info]   (min, avg, max) = (575.720, 577.503, 579.323), stdev = 1.284
[info]   CI (99.9%): [572.557, 582.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   824.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (824.000, 824.000, 824.000), stdev = 0.001
[info]   CI (99.9%): [824.000, 824.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   542.472 ±(99.9%) 1167.712 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 542.472, 678.189), stdev = 303.251
[info]   CI (99.9%): [≈ 0, 1710.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   773.941 ±(99.9%) 1665.985 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 773.941, 970.449), stdev = 432.651
[info]   CI (99.9%): [≈ 0, 2439.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 98.59% complete, ETA 00:01:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 60470.313 ops/s
[info] # Warmup Iteration   2: 95790.375 ops/s
[info] # Warmup Iteration   3: 97458.283 ops/s
[info] # Warmup Iteration   4: 96918.423 ops/s
[info] # Warmup Iteration   5: 99016.830 ops/s
[info] Iteration   1: 99018.248 ops/s
[info]                  ·gc.alloc.rate:            3441.348 MB/sec
[info]                  ·gc.alloc.rate.norm:       54704.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      3406.920 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 54156.733 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 98649.693 ops/s
[info]                  ·gc.alloc.rate:                                  3427.928 MB/sec
[info]                  ·gc.alloc.rate.norm:                             54704.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3406.430 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       54360.924 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 99219.707 ops/s
[info]                  ·gc.alloc.rate:                                  3448.845 MB/sec
[info]                  ·gc.alloc.rate.norm:                             54704.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.047 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3407.461 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       54047.586 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 98934.609 ops/s
[info]                  ·gc.alloc.rate:                                  3438.125 MB/sec
[info]                  ·gc.alloc.rate.norm:                             54704.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.042 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3406.688 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       54203.802 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 98765.897 ops/s
[info]                  ·gc.alloc.rate:                                  3432.845 MB/sec
[info]                  ·gc.alloc.rate.norm:                             54704.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3407.206 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       54295.438 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson":
[info]   98917.631 ±(99.9%) 853.409 ops/s [Average]
[info]   (min, avg, max) = (98649.693, 98917.631, 99219.707), stdev = 221.628
[info]   CI (99.9%): [98064.222, 99771.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3437.818 ±(99.9%) 30.847 MB/sec [Average]
[info]   (min, avg, max) = (3427.928, 3437.818, 3448.845), stdev = 8.011
[info]   CI (99.9%): [3406.971, 3468.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   54704.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (54704.004, 54704.004, 54704.004), stdev = 0.001
[info]   CI (99.9%): [54704.004, 54704.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.005 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.026 ±(99.9%) 0.073 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.047), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   3406.941 ±(99.9%) 1.572 MB/sec [Average]
[info]   (min, avg, max) = (3406.430, 3406.941, 3407.461), stdev = 0.408
[info]   CI (99.9%): [3405.369, 3408.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   54212.897 ±(99.9%) 468.807 B/op [Average]
[info]   (min, avg, max) = (54047.586, 54212.897, 54360.924), stdev = 121.748
[info]   CI (99.9%): [53744.090, 54681.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 8.000), stdev = 0.894
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 98.82% complete, ETA 00:01:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 258057.060 ops/s
[info] # Warmup Iteration   2: 319437.546 ops/s
[info] # Warmup Iteration   3: 320100.664 ops/s
[info] # Warmup Iteration   4: 324839.641 ops/s
[info] # Warmup Iteration   5: 310669.320 ops/s
[info] Iteration   1: 317392.286 ops/s
[info]                  ·gc.alloc.rate:            498.480 MB/sec
[info]                  ·gc.alloc.rate.norm:       2472.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.094 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3362.716 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 323747.990 ops/s
[info]                  ·gc.alloc.rate:            508.489 MB/sec
[info]                  ·gc.alloc.rate.norm:       2472.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.106 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3296.584 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 327340.099 ops/s
[info]                  ·gc.alloc.rate:      514.185 MB/sec
[info]                  ·gc.alloc.rate.norm: 2472.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 325755.638 ops/s
[info]                  ·gc.alloc.rate:            511.701 MB/sec
[info]                  ·gc.alloc.rate.norm:       2472.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.192 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3276.307 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 323846.908 ops/s
[info]                  ·gc.alloc.rate:            508.675 MB/sec
[info]                  ·gc.alloc.rate.norm:       2472.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.158 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3295.637 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce":
[info]   323616.584 ±(99.9%) 14567.998 ops/s [Average]
[info]   (min, avg, max) = (317392.286, 323616.584, 327340.099), stdev = 3783.263
[info]   CI (99.9%): [309048.586, 338184.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   508.306 ±(99.9%) 23.007 MB/sec [Average]
[info]   (min, avg, max) = (498.480, 508.306, 514.185), stdev = 5.975
[info]   CI (99.9%): [485.299, 531.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2472.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2472.001, 2472.001, 2472.001), stdev = 0.001
[info]   CI (99.9%): [2472.001, 2472.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   542.510 ±(99.9%) 1167.793 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 542.510, 678.192), stdev = 303.272
[info]   CI (99.9%): [≈ 0, 1710.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2646.249 ±(99.9%) 5697.643 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2646.249, 3362.716), stdev = 1479.660
[info]   CI (99.9%): [≈ 0, 8343.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.400, 5.000), stdev = 2.074
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 99.06% complete, ETA 00:01:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 373898.004 ops/s
[info] # Warmup Iteration   2: 635943.258 ops/s
[info] # Warmup Iteration   3: 617696.347 ops/s
[info] # Warmup Iteration   4: 639829.506 ops/s
[info] # Warmup Iteration   5: 626289.340 ops/s
[info] Iteration   1: 643015.603 ops/s
[info]                  ·gc.alloc.rate:            490.275 MB/sec
[info]                  ·gc.alloc.rate.norm:       1200.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.468 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1658.177 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 639966.217 ops/s
[info]                  ·gc.alloc.rate:      487.867 MB/sec
[info]                  ·gc.alloc.rate.norm: 1200.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 641802.726 ops/s
[info]                  ·gc.alloc.rate:            489.300 MB/sec
[info]                  ·gc.alloc.rate.norm:       1200.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.702 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1659.602 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 642229.275 ops/s
[info]                  ·gc.alloc.rate:                   489.577 MB/sec
[info]                  ·gc.alloc.rate.norm:              1200.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.654 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1658.545 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.632 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 645372.299 ops/s
[info]                  ·gc.alloc.rate:      492.066 MB/sec
[info]                  ·gc.alloc.rate.norm: 1200.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala":
[info]   642477.224 ±(99.9%) 7578.262 ops/s [Average]
[info]   (min, avg, max) = (639966.217, 642477.224, 645372.299), stdev = 1968.051
[info]   CI (99.9%): [634898.962, 650055.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   489.817 ±(99.9%) 5.901 MB/sec [Average]
[info]   (min, avg, max) = (487.867, 489.817, 492.066), stdev = 1.533
[info]   CI (99.9%): [483.915, 495.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1200.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1200.001, 1200.001, 1200.001), stdev = 0.001
[info]   CI (99.9%): [1200.001, 1200.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   406.165 ±(99.9%) 1427.727 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 406.165, 677.468), stdev = 370.776
[info]   CI (99.9%): [≈ 0, 1833.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   995.265 ±(99.9%) 3498.497 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 995.265, 1659.602), stdev = 908.548
[info]   CI (99.9%): [≈ 0, 4493.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.326 ±(99.9%) 2.811 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.326, 1.632), stdev = 0.730
[info]   CI (99.9%): [≈ 0, 3.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 5.000), stdev = 2.588
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 99.29% complete, ETA 00:00:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1671432.618 ops/s
[info] # Warmup Iteration   2: 1912150.288 ops/s
[info] # Warmup Iteration   3: 1977660.526 ops/s
[info] # Warmup Iteration   4: 1968175.515 ops/s
[info] # Warmup Iteration   5: 1994911.233 ops/s
[info] Iteration   1: 1928550.609 ops/s
[info]                  ·gc.alloc.rate:            891.944 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.017 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 553.394 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 1988367.969 ops/s
[info]                  ·gc.alloc.rate:            919.640 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.084 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1073.496 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 1996677.406 ops/s
[info]                  ·gc.alloc.rate:            923.516 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.397 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 533.987 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 1997251.579 ops/s
[info]                  ·gc.alloc.rate:                   923.724 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.366 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        533.842 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.525 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1976170.381 ops/s
[info]                  ·gc.alloc.rate:            913.989 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.115 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1080.158 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala":
[info]   1977403.589 ±(99.9%) 110160.974 ops/s [Average]
[info]   (min, avg, max) = (1928550.609, 1977403.589, 1997251.579), stdev = 28608.455
[info]   CI (99.9%): [1867242.615, 2087564.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   914.562 ±(99.9%) 51.005 MB/sec [Average]
[info]   (min, avg, max) = (891.944, 914.562, 923.724), stdev = 13.246
[info]   CI (99.9%): [863.558, 965.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (728.000, 728.000, 728.000), stdev = 0.001
[info]   CI (99.9%): [728.000, 728.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   948.996 ±(99.9%) 1431.028 MB/sec [Average]
[info]   (min, avg, max) = (677.366, 948.996, 1356.115), stdev = 371.633
[info]   CI (99.9%): [≈ 0, 2380.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   754.975 ±(99.9%) 1131.804 B/op [Average]
[info]   (min, avg, max) = (533.842, 754.975, 1080.158), stdev = 293.926
[info]   CI (99.9%): [≈ 0, 1886.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.105 ±(99.9%) 0.904 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.105, 0.525), stdev = 0.235
[info]   CI (99.9%): [≈ 0, 1.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 99.53% complete, ETA 00:00:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1905516.077 ops/s
[info] # Warmup Iteration   2: 2113286.372 ops/s
[info] # Warmup Iteration   3: 2098680.602 ops/s
[info] # Warmup Iteration   4: 2096722.572 ops/s
[info] # Warmup Iteration   5: 2099047.365 ops/s
[info] Iteration   1: 2098484.209 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2096721.289 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2098847.072 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2098704.317 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2098041.356 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2098159.649 ±(99.9%) 3311.008 ops/s [Average]
[info]   (min, avg, max) = (2096721.289, 2098159.649, 2098847.072), stdev = 859.858
[info]   CI (99.9%): [2094848.641, 2101470.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 99.76% complete, ETA 00:00:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 254507.778 ops/s
[info] # Warmup Iteration   2: 331977.367 ops/s
[info] # Warmup Iteration   3: 340687.458 ops/s
[info] # Warmup Iteration   4: 340096.334 ops/s
[info] # Warmup Iteration   5: 340241.403 ops/s
[info] Iteration   1: 339767.917 ops/s
[info]                  ·gc.alloc.rate:            502.476 MB/sec
[info]                  ·gc.alloc.rate.norm:       2328.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.346 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3138.183 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 338803.955 ops/s
[info]                  ·gc.alloc.rate:            501.032 MB/sec
[info]                  ·gc.alloc.rate.norm:       2328.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.301 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3147.018 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 341827.456 ops/s
[info]                  ·gc.alloc.rate:      505.514 MB/sec
[info]                  ·gc.alloc.rate.norm: 2328.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 340739.861 ops/s
[info]                  ·gc.alloc.rate:            504.031 MB/sec
[info]                  ·gc.alloc.rate.norm:       2328.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.490 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3129.168 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 341456.851 ops/s
[info]                  ·gc.alloc.rate:            505.128 MB/sec
[info]                  ·gc.alloc.rate.norm:       2328.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.494 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3122.388 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson":
[info]   340519.208 ±(99.9%) 4773.054 ops/s [Average]
[info]   (min, avg, max) = (338803.955, 340519.208, 341827.456), stdev = 1239.547
[info]   CI (99.9%): [335746.154, 345292.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   503.636 ±(99.9%) 7.213 MB/sec [Average]
[info]   (min, avg, max) = (501.032, 503.636, 505.514), stdev = 1.873
[info]   CI (99.9%): [496.423, 510.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2328.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2328.001, 2328.001, 2328.001), stdev = 0.001
[info]   CI (99.9%): [2328.001, 2328.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   541.926 ±(99.9%) 1166.537 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 541.926, 677.494), stdev = 302.946
[info]   CI (99.9%): [≈ 0, 1708.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   2507.352 ±(99.9%) 5397.382 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2507.352, 3147.018), stdev = 1401.683
[info]   CI (99.9%): [≈ 0, 7904.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.400, 5.000), stdev = 1.949
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # Run complete. Total time: 01:53:13
[info] REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
[info] why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
[info] experiments, perform baseline and negative tests that provide experimental control, make sure
[info] the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
[info] Do not assume the numbers tell you what you want them to tell.
[info] Benchmark                                                                                                     (size)   Mode  Cnt         Score         Error   Units
[info] AdtBenchmark.readCirce                                                                                           N/A  thrpt    5    696455.254 ±   44864.277   ops/s
[info] AdtBenchmark.readCirce:·gc.alloc.rate                                                                            N/A  thrpt    5      1851.601 ±     119.895  MB/sec
[info] AdtBenchmark.readCirce:·gc.alloc.rate.norm                                                                       N/A  thrpt    5      4184.001 ±       0.001    B/op
[info] AdtBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                                N/A  thrpt    5         0.027 ±       0.186  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                           N/A  thrpt    5         0.060 ±       0.417    B/op
[info] AdtBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                                      N/A  thrpt    5      1904.910 ±    1166.464  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                                 N/A  thrpt    5      4308.591 ±    2724.994    B/op
[info] AdtBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                               N/A  thrpt    5         0.666 ±       5.737  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                          N/A  thrpt    5         1.499 ±      12.911    B/op
[info] AdtBenchmark.readCirce:·gc.count                                                                                 N/A  thrpt    5        14.000                counts
[info] AdtBenchmark.readCirce:·gc.time                                                                                  N/A  thrpt    5        32.000                    ms
[info] AdtBenchmark.readJacksonScala                                                                                    N/A  thrpt    5   1375931.385 ±   77560.338   ops/s
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate                                                                     N/A  thrpt    5      1104.874 ±      62.521  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                                N/A  thrpt    5      1264.000 ±       0.001    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                               N/A  thrpt    5      1218.559 ±    1165.091  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                          N/A  thrpt    5      1392.529 ±    1312.617    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                                        N/A  thrpt    5         1.332 ±       7.253  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                                   N/A  thrpt    5         1.510 ±       8.177    B/op
[info] AdtBenchmark.readJacksonScala:·gc.count                                                                          N/A  thrpt    5         9.000                counts
[info] AdtBenchmark.readJacksonScala:·gc.time                                                                           N/A  thrpt    5        44.000                    ms
[info] AdtBenchmark.readJsoniterScala                                                                                   N/A  thrpt    5   3647381.713 ±  229982.755   ops/s
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate                                                                    N/A  thrpt    5       241.014 ±      15.238  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                               N/A  thrpt    5       104.000 ±       0.001    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                              N/A  thrpt    5       271.514 ±    1431.614  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                         N/A  thrpt    5       117.649 ±     620.425    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.count                                                                         N/A  thrpt    5         2.000                counts
[info] AdtBenchmark.readJsoniterScala:·gc.time                                                                          N/A  thrpt    5         6.000                    ms
[info] AdtBenchmark.readPlayJson                                                                                        N/A  thrpt    5    154697.207 ±    5852.291   ops/s
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate                                                                         N/A  thrpt    5      1310.810 ±      49.706  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate.norm                                                                    N/A  thrpt    5     13336.003 ±       0.001    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                             N/A  thrpt    5         0.023 ±       0.200  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                        N/A  thrpt    5         0.237 ±       2.041    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                                   N/A  thrpt    5      1220.634 ±    1170.997  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                              N/A  thrpt    5     12438.401 ±   12160.985    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                            N/A  thrpt    5         1.199 ±       7.565  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                                       N/A  thrpt    5        12.294 ±      77.874    B/op
[info] AdtBenchmark.readPlayJson:·gc.count                                                                              N/A  thrpt    5         9.000                counts
[info] AdtBenchmark.readPlayJson:·gc.time                                                                               N/A  thrpt    5        39.000                    ms
[info] AdtBenchmark.writeCirce                                                                                          N/A  thrpt    5    519206.100 ±   25109.903   ops/s
[info] AdtBenchmark.writeCirce:·gc.alloc.rate                                                                           N/A  thrpt    5      1575.403 ±      76.112  MB/sec
[info] AdtBenchmark.writeCirce:·gc.alloc.rate.norm                                                                      N/A  thrpt    5      4776.001 ±       0.001    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                               N/A  thrpt    5         0.032 ±       0.272  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                          N/A  thrpt    5         0.094 ±       0.814    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                                     N/A  thrpt    5      1630.524 ±    1436.775  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                                N/A  thrpt    5      4939.254 ±    4259.851    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                              N/A  thrpt    5         0.799 ±       5.560  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                                         N/A  thrpt    5         2.445 ±      16.991    B/op
[info] AdtBenchmark.writeCirce:·gc.count                                                                                N/A  thrpt    5        12.000                counts
[info] AdtBenchmark.writeCirce:·gc.time                                                                                 N/A  thrpt    5        33.000                    ms
[info] AdtBenchmark.writeJacksonScala                                                                                   N/A  thrpt    5   1689249.878 ±   93015.336   ops/s
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate                                                                    N/A  thrpt    5       704.023 ±      38.765  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                               N/A  thrpt    5       656.000 ±       0.001    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                              N/A  thrpt    5       676.712 ±       0.113  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                         N/A  thrpt    5       630.657 ±      35.302    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.count                                                                         N/A  thrpt    5         5.000                counts
[info] AdtBenchmark.writeJacksonScala:·gc.time                                                                          N/A  thrpt    5        24.000                    ms
[info] AdtBenchmark.writeJsoniterScala                                                                                  N/A  thrpt    5  14000493.772 ± 1696957.536   ops/s
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate                                                                   N/A  thrpt    5       711.675 ±      86.407  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                              N/A  thrpt    5        80.000 ±       0.001    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                             N/A  thrpt    5       677.629 ±       1.181  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                        N/A  thrpt    5        76.234 ±       9.353    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                                      N/A  thrpt    5         0.266 ±       1.405  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                                 N/A  thrpt    5         0.030 ±       0.158    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.count                                                                        N/A  thrpt    5         5.000                counts
[info] AdtBenchmark.writeJsoniterScala:·gc.time                                                                         N/A  thrpt    5        17.000                    ms
[info] AdtBenchmark.writeJsoniterScalaPrealloc                                                                          N/A  thrpt    5  14236886.610 ±  188461.692   ops/s
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                           N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                                      N/A  thrpt    5        ≈ 10⁻⁵                  B/op
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                                N/A  thrpt    5           ≈ 0                counts
[info] AdtBenchmark.writePlayJson                                                                                       N/A  thrpt    5    301567.916 ±    7968.802   ops/s
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate                                                                        N/A  thrpt    5      1022.334 ±      27.181  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate.norm                                                                   N/A  thrpt    5      5336.001 ±       0.001    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                                  N/A  thrpt    5       947.809 ±    1427.994  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                             N/A  thrpt    5      4956.594 ±    7585.812    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                           N/A  thrpt    5         0.400 ±       1.405  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                                      N/A  thrpt    5         2.094 ±       7.362    B/op
[info] AdtBenchmark.writePlayJson:·gc.count                                                                             N/A  thrpt    5         7.000                counts
[info] AdtBenchmark.writePlayJson:·gc.time                                                                              N/A  thrpt    5        34.000                    ms
[info] AnyRefsBenchmark.readCirce                                                                                       N/A  thrpt    5   1445175.721 ±   30424.440   ops/s
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate                                                                        N/A  thrpt    5      2247.839 ±      46.724  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm                                                                   N/A  thrpt    5      2448.000 ±       0.001    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                            N/A  thrpt    5         0.027 ±       0.203  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                       N/A  thrpt    5         0.030 ±       0.222    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                                  N/A  thrpt    5      2179.983 ±    1175.218  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                             N/A  thrpt    5      2373.411 ±    1250.004    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                           N/A  thrpt    5         0.666 ±       5.735  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                      N/A  thrpt    5         0.728 ±       6.264    B/op
[info] AnyRefsBenchmark.readCirce:·gc.count                                                                             N/A  thrpt    5        16.000                counts
[info] AnyRefsBenchmark.readCirce:·gc.time                                                                              N/A  thrpt    5        22.000                    ms
[info] AnyRefsBenchmark.readDslJsonJava                                                                                 N/A  thrpt    5   9350618.432 ±  485824.746   ops/s
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate                                                                  N/A  thrpt    5      1140.738 ±      59.069  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                             N/A  thrpt    5       192.000 ±       0.001    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                            N/A  thrpt    5      1079.526 ±    1422.415  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                       N/A  thrpt    5       181.415 ±     235.710    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space                                                     N/A  thrpt    5         0.133 ±       1.147  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                                N/A  thrpt    5         0.022 ±       0.193    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.count                                                                       N/A  thrpt    5         8.000                counts
[info] AnyRefsBenchmark.readDslJsonJava:·gc.time                                                                        N/A  thrpt    5        43.000                    ms
[info] AnyRefsBenchmark.readJacksonScala                                                                                N/A  thrpt    5   2135880.459 ±   92502.736   ops/s
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate                                                                 N/A  thrpt    5      1498.468 ±      63.062  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                            N/A  thrpt    5      1104.000 ±       0.001    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                     N/A  thrpt    5         0.044 ±       0.251  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                N/A  thrpt    5         0.032 ±       0.184    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                           N/A  thrpt    5      1493.277 ±    1148.762  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                      N/A  thrpt    5      1101.521 ±     885.088    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                                    N/A  thrpt    5         0.932 ±       6.690  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                               N/A  thrpt    5         0.687 ±       4.919    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.count                                                                      N/A  thrpt    5        11.000                counts
[info] AnyRefsBenchmark.readJacksonScala:·gc.time                                                                       N/A  thrpt    5        37.000                    ms
[info] AnyRefsBenchmark.readJsoniterScala                                                                               N/A  thrpt    5   9724872.419 ± 1041894.928   ops/s
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate                                                                N/A  thrpt    5      1235.825 ±     132.774  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                           N/A  thrpt    5       200.000 ±       0.001    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    N/A  thrpt    5         0.029 ±       0.249  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               N/A  thrpt    5         0.005 ±       0.042    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                          N/A  thrpt    5      1357.616 ±      11.231  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                     N/A  thrpt    5       219.863 ±      26.300    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                                   N/A  thrpt    5         0.666 ±       5.735  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                              N/A  thrpt    5         0.107 ±       0.925    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.count                                                                     N/A  thrpt    5        10.000                counts
[info] AnyRefsBenchmark.readJsoniterScala:·gc.time                                                                      N/A  thrpt    5        29.000                    ms
[info] AnyRefsBenchmark.readPlayJson                                                                                    N/A  thrpt    5    613347.426 ±   20633.227   ops/s
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate                                                                     N/A  thrpt    5      1577.603 ±      53.453  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                                N/A  thrpt    5      4048.001 ±       0.001    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                         N/A  thrpt    5         0.029 ±       0.246  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                    N/A  thrpt    5         0.073 ±       0.626    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                               N/A  thrpt    5      1629.991 ±    1432.505  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                          N/A  thrpt    5      4184.493 ±    3720.085    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                        N/A  thrpt    5         0.932 ±       6.688  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                                   N/A  thrpt    5         2.394 ±      17.157    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.count                                                                          N/A  thrpt    5        12.000                counts
[info] AnyRefsBenchmark.readPlayJson:·gc.time                                                                           N/A  thrpt    5        38.000                    ms
[info] AnyRefsBenchmark.writeCirce                                                                                      N/A  thrpt    5   1643088.689 ±   59612.523   ops/s
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate                                                                       N/A  thrpt    5      1428.097 ±      51.341  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm                                                                  N/A  thrpt    5      1368.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                           N/A  thrpt    5         0.021 ±       0.182  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                      N/A  thrpt    5         0.020 ±       0.173    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                                 N/A  thrpt    5      1494.429 ±    1175.923  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                            N/A  thrpt    5      1431.075 ±    1110.613    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                          N/A  thrpt    5         0.666 ±       5.735  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                                     N/A  thrpt    5         0.635 ±       5.471    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.count                                                                            N/A  thrpt    5        11.000                counts
[info] AnyRefsBenchmark.writeCirce:·gc.time                                                                             N/A  thrpt    5        39.000                    ms
[info] AnyRefsBenchmark.writeDslJsonJava                                                                                N/A  thrpt    5  17190534.084 ±  388984.909   ops/s
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                                 N/A  thrpt    5       524.265 ±      11.935  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                            N/A  thrpt    5        48.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                                           N/A  thrpt    5       404.859 ±    1423.136  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                      N/A  thrpt    5        37.215 ±     130.816    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.count                                                                      N/A  thrpt    5         3.000                counts
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.time                                                                       N/A  thrpt    5        16.000                    ms
[info] AnyRefsBenchmark.writeJacksonScala                                                                               N/A  thrpt    5   4608830.221 ±   97445.212   ops/s
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate                                                                N/A  thrpt    5      1265.130 ±      26.362  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                           N/A  thrpt    5       432.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    N/A  thrpt    5         0.031 ±       0.267  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               N/A  thrpt    5         0.010 ±       0.090    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                          N/A  thrpt    5      1220.051 ±    1169.703  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                     N/A  thrpt    5       416.684 ±     400.344    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                                   N/A  thrpt    5         0.933 ±       6.691  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                              N/A  thrpt    5         0.320 ±       2.297    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.count                                                                     N/A  thrpt    5         9.000                counts
[info] AnyRefsBenchmark.writeJacksonScala:·gc.time                                                                      N/A  thrpt    5        39.000                    ms
[info] AnyRefsBenchmark.writeJsoniterScala                                                                              N/A  thrpt    5  21774354.793 ±  237329.814   ops/s
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                               N/A  thrpt    5       664.033 ±       7.364  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                          N/A  thrpt    5        48.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                         N/A  thrpt    5       677.538 ±       1.212  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                    N/A  thrpt    5        48.976 ±       0.470    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                                  N/A  thrpt    5         0.133 ±       1.147  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                             N/A  thrpt    5         0.010 ±       0.083    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.count                                                                    N/A  thrpt    5         5.000                counts
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.time                                                                     N/A  thrpt    5        18.000                    ms
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc                                                                      N/A  thrpt    5  19248240.544 ±  733803.274   ops/s
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                       N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                                  N/A  thrpt    5        ≈ 10⁻⁵                  B/op
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                            N/A  thrpt    5           ≈ 0                counts
[info] AnyRefsBenchmark.writePlayJson                                                                                   N/A  thrpt    5   1238745.090 ±   15079.542   ops/s
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate                                                                    N/A  thrpt    5      1832.135 ±      22.936  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                               N/A  thrpt    5      2328.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                        N/A  thrpt    5         0.041 ±       0.315  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                   N/A  thrpt    5         0.051 ±       0.399    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                              N/A  thrpt    5      1767.853 ±    1432.382  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                         N/A  thrpt    5      2246.221 ±    1817.655    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                       N/A  thrpt    5         0.933 ±       8.030  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                                  N/A  thrpt    5         1.183 ±      10.190    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.count                                                                         N/A  thrpt    5        13.000                counts
[info] AnyRefsBenchmark.writePlayJson:·gc.time                                                                          N/A  thrpt    5        31.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readCirce                                                                         128  thrpt    5    347246.698 ±   11229.002   ops/s
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                          128  thrpt    5      1911.587 ±      61.245  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                                     128  thrpt    5      8664.001 ±       0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.017 ±       0.147  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         0.079 ±       0.661    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      1906.137 ±    1169.599  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5      8641.492 ±    5348.672    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.666 ±       5.736  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5         3.065 ±      26.391    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.count                                                               128  thrpt    5        14.000                counts
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.time                                                                128  thrpt    5        31.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala                                                                  128  thrpt    5    429668.309 ±     951.334   ops/s
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                                   128  thrpt    5       585.285 ±       1.395  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                              128  thrpt    5      2144.001 ±       0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                             128  thrpt    5       677.288 ±       1.291  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5      2481.025 ±       3.414    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                      128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                 128  thrpt    5         0.488 ±       4.205    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.count                                                        128  thrpt    5         5.000                counts
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.time                                                         128  thrpt    5        24.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala                                                                 128  thrpt    5   1024051.898 ±   11319.080   ops/s
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                                  128  thrpt    5       681.857 ±       7.717  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                             128  thrpt    5      1048.000 ±       0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                            128  thrpt    5       678.079 ±       0.223  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5      1042.201 ±      11.582    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.count                                                       128  thrpt    5         5.000                counts
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.time                                                        128  thrpt    5        19.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readPlayJson                                                                      128  thrpt    5    100122.915 ±    5607.991   ops/s
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                       128  thrpt    5      3466.351 ±     194.279  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                                  128  thrpt    5     54496.004 ±       0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                           128  thrpt    5         0.001 ±       0.004  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      128  thrpt    5         0.018 ±       0.061    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                 128  thrpt    5      3406.780 ±       0.515  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5     53568.678 ±    3047.327    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.count                                                            128  thrpt    5        25.000                counts
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.time                                                             128  thrpt    5        31.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeCirce                                                                        128  thrpt    5    385112.897 ±    9675.256   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                         128  thrpt    5       602.892 ±      15.456  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                                    128  thrpt    5      2464.001 ±       0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       542.485 ±    1167.740  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5      2212.311 ±    4762.393    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.count                                                              128  thrpt    5         4.000                counts
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.time                                                               128  thrpt    5        15.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala                                                                 128  thrpt    5    616751.159 ±    6841.265   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                                  128  thrpt    5       454.533 ±       5.109  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                             128  thrpt    5      1160.001 ±       0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                            128  thrpt    5       406.165 ±    1427.727  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5      1038.466 ±    3650.355    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                     128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                128  thrpt    5         0.341 ±       2.935    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.count                                                       128  thrpt    5         3.000                counts
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.time                                                        128  thrpt    5        14.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala                                                                128  thrpt    5   2770576.798 ±  113138.090   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                                 128  thrpt    5      1281.645 ±      52.742  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                            128  thrpt    5       728.000 ±       0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                     128  thrpt    5         0.034 ±       0.291  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                128  thrpt    5         0.020 ±       0.168    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                           128  thrpt    5      1221.379 ±    1170.731  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5       694.414 ±     673.337    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                    128  thrpt    5         0.933 ±       6.690  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                               128  thrpt    5         0.531 ±       3.815    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.count                                                      128  thrpt    5         9.000                counts
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                       128  thrpt    5        29.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                        128  thrpt    5   2985919.632 ±   81647.416   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                         128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                    128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                              128  thrpt    5           ≈ 0                counts
[info] ArrayBufferOfBooleansBenchmark.writePlayJson                                                                     128  thrpt    5    406894.006 ±   27608.472   ops/s
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                      128  thrpt    5       585.245 ±      39.807  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                                 128  thrpt    5      2264.001 ±       0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                128  thrpt    5       541.873 ±    1166.423  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5      2106.569 ±    4536.897    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.count                                                           128  thrpt    5         4.000                counts
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.time                                                            128  thrpt    5        18.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readCirce                                                                            128  thrpt    5     20013.037 ±    1619.241   ops/s
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate                                                             128  thrpt    5      1226.162 ±      99.613  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm                                                        128  thrpt    5     96432.027 ±       0.050    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 128  thrpt    5         0.007 ±       0.057  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            128  thrpt    5         0.511 ±       4.403    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                       128  thrpt    5      1221.204 ±    1169.430  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5     95706.823 ±   87311.389    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                128  thrpt    5         0.666 ±       5.736  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                           128  thrpt    5        51.779 ±     445.833    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.count                                                                  128  thrpt    5         9.000                counts
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.time                                                                   128  thrpt    5        32.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala                                                                     128  thrpt    5     31971.335 ±    1444.504   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate                                                      128  thrpt    5       801.518 ±      36.237  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                 128  thrpt    5     39456.013 ±       0.002    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5       812.784 ±    1166.513  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5     39967.136 ±   56520.214    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5         6.513 ±      56.076    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count                                                           128  thrpt    5         6.000                counts
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time                                                            128  thrpt    5        28.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala                                                                    128  thrpt    5     45040.321 ±     404.750   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate                                                     128  thrpt    5       605.028 ±       5.355  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                128  thrpt    5     21144.009 ±       0.001    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5       542.444 ±    1167.652  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5     18970.309 ±   40835.309    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count                                                          128  thrpt    5         4.000                counts
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time                                                           128  thrpt    5        13.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readPlayJson                                                                         128  thrpt    5     25048.723 ±     917.535   ops/s
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate                                                          128  thrpt    5      1327.329 ±      48.376  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                     128  thrpt    5     83400.017 ±       0.003    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.028 ±       0.159  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         1.736 ±       9.928    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      1357.222 ±      13.765  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5     85283.348 ±    2661.039    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.799 ±       6.882  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5        49.996 ±     430.478    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count                                                               128  thrpt    5        10.000                counts
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time                                                                128  thrpt    5        37.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeCirce                                                                           128  thrpt    5     28198.019 ±     475.779   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate                                                            128  thrpt    5      1601.794 ±      26.453  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm                                                       128  thrpt    5     89408.015 ±       0.003    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                128  thrpt    5         0.034 ±       0.190  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           128  thrpt    5         1.896 ±      10.602    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                      128  thrpt    5      1631.432 ±    1434.317  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5     91118.311 ±   81314.946    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         0.666 ±       5.735  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5        37.124 ±     319.651    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count                                                                 128  thrpt    5        12.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time                                                                  128  thrpt    5        32.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala                                                                    128  thrpt    5     28114.420 ±     801.708   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate                                                     128  thrpt    5      1540.067 ±      44.815  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                128  thrpt    5     86208.015 ±       0.002    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                         128  thrpt    5         0.010 ±       0.059  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    128  thrpt    5         0.579 ±       3.263    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5      1494.830 ±    1182.361  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5     83642.617 ±   65125.095    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         1.066 ±       7.825  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5        59.581 ±     436.997    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count                                                          128  thrpt    5        11.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time                                                           128  thrpt    5        34.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala                                                                   128  thrpt    5     30714.578 ±    1181.446   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                    128  thrpt    5      1584.996 ±      61.296  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                               128  thrpt    5     81224.013 ±       0.002    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                        128  thrpt    5         0.036 ±       0.267  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   128  thrpt    5         1.860 ±      13.780    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                              128  thrpt    5      1495.169 ±    1172.512  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5     76679.147 ±   61693.814    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                       128  thrpt    5         0.932 ±       6.687  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                  128  thrpt    5        48.004 ±     345.297    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count                                                         128  thrpt    5        11.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time                                                          128  thrpt    5        26.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc                                                           128  thrpt    5     30837.396 ±     369.836   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                            128  thrpt    5      1531.519 ±      18.338  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                       128  thrpt    5     78168.013 ±       0.001    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'                128  thrpt    5         0.032 ±       0.186  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           128  thrpt    5         1.648 ±       9.474    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                      128  thrpt    5      1630.672 ±    1433.507  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                                 128  thrpt    5     83263.525 ±   73954.872    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space                               128  thrpt    5         0.799 ±       6.882  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm                          128  thrpt    5        40.749 ±     350.862    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                 128  thrpt    5        12.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                  128  thrpt    5        29.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writePlayJson                                                                        128  thrpt    5      8169.077 ±     134.399   ops/s
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate                                                         128  thrpt    5      1062.823 ±      17.562  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                    128  thrpt    5    204776.051 ±       0.007    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       948.294 ±    1428.827  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5    182903.116 ±  277991.954    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count                                                              128  thrpt    5         7.000                counts
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time                                                               128  thrpt    5        30.000                    ms
[info] ArrayOfBigIntsBenchmark.readCirce                                                                                128  thrpt    5     19660.136 ±     298.528   ops/s
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate                                                                 128  thrpt    5      1527.319 ±      23.231  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                            128  thrpt    5    122268.727 ±      40.518    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                     128  thrpt    5         0.030 ±       0.159  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                128  thrpt    5         2.385 ±      12.708    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                           128  thrpt    5      1495.107 ±    1167.279  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                      128  thrpt    5    119739.504 ±   94910.681    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                    128  thrpt    5         0.666 ±       5.735  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                               128  thrpt    5        53.556 ±     461.135    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.count                                                                      128  thrpt    5        11.000                counts
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.time                                                                       128  thrpt    5        28.000                    ms
[info] ArrayOfBigIntsBenchmark.readJacksonScala                                                                         128  thrpt    5     39181.114 ±    1196.100   ops/s
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate                                                          128  thrpt    5       966.377 ±      29.505  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                     128  thrpt    5     38824.011 ±       0.001    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       948.280 ±    1428.553  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5     38091.463 ±   57296.058    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count                                                               128  thrpt    5         7.000                counts
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time                                                                128  thrpt    5        31.000                    ms
[info] ArrayOfBigIntsBenchmark.readJsoniterScala                                                                        128  thrpt    5     55232.761 ±     252.321   ops/s
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                                         128  thrpt    5       713.608 ±       3.502  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                    128  thrpt    5     20336.008 ±       0.001    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       678.062 ±       0.495  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5     19323.049 ±      88.909    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count                                                              128  thrpt    5         5.000                counts
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time                                                               128  thrpt    5        16.000                    ms
[info] ArrayOfBigIntsBenchmark.readPlayJson                                                                             128  thrpt    5     29671.757 ±    1596.711   ops/s
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate                                                              128  thrpt    5      1981.719 ±     107.271  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                         128  thrpt    5    105120.014 ±       0.002    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  128  thrpt    5         0.015 ±       0.101  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             128  thrpt    5         0.769 ±       5.315    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                        128  thrpt    5      2041.394 ±      24.414  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5    108299.307 ±    4778.253    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                 128  thrpt    5         0.932 ±       8.029  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                            128  thrpt    5        50.583 ±     435.531    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.count                                                                   128  thrpt    5        15.000                counts
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.time                                                                    128  thrpt    5        38.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJacksonScala                                                                        128  thrpt    5     33401.607 ±    2212.201   ops/s
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                                         128  thrpt    5      1826.646 ±     121.485  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                    128  thrpt    5     86072.012 ±       0.002    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                             128  thrpt    5         0.021 ±       0.127  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        128  thrpt    5         0.979 ±       5.960    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5      1904.706 ±    1165.801  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5     89851.247 ±   57116.408    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.799 ±       6.882  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5        37.441 ±     322.381    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count                                                              128  thrpt    5        14.000                counts
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time                                                               128  thrpt    5        38.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala                                                                       128  thrpt    5     44090.137 ±     399.508   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                        128  thrpt    5      1837.646 ±      16.559  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                   128  thrpt    5     65600.009 ±       0.001    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                            128  thrpt    5         0.018 ±       0.119  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       128  thrpt    5         0.651 ±       4.258    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5      1769.359 ±    1443.256  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5     63164.846 ±   51572.187    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         0.799 ±       6.883  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5        28.598 ±     246.239    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count                                                             128  thrpt    5        13.000                counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time                                                              128  thrpt    5        22.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc                                                               128  thrpt    5     45049.779 ±     667.684   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                128  thrpt    5      1652.621 ±      24.904  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                           128  thrpt    5     57736.009 ±       0.001    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'                    128  thrpt    5         0.024 ±       0.171  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               128  thrpt    5         0.831 ±       5.974    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                          128  thrpt    5      1631.545 ±    1430.370  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                                     128  thrpt    5     57003.634 ±   50053.442    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space                                   128  thrpt    5         0.933 ±       6.689  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm                              128  thrpt    5        32.664 ±     234.205    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                     128  thrpt    5        12.000                counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                      128  thrpt    5        26.000                    ms
[info] ArrayOfBooleansBenchmark.readCirce                                                                               128  thrpt    5    367374.847 ±   14299.123   ops/s
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                                128  thrpt    5      1858.245 ±      73.360  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                                           128  thrpt    5      7960.001 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    128  thrpt    5         0.016 ±       0.096  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               128  thrpt    5         0.069 ±       0.411    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                          128  thrpt    5      1906.255 ±    1169.276  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5      8164.868 ±    4985.138    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                   128  thrpt    5         0.666 ±       5.736  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                              128  thrpt    5         2.870 ±      24.708    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.count                                                                     128  thrpt    5        14.000                counts
[info] ArrayOfBooleansBenchmark.readCirce:·gc.time                                                                      128  thrpt    5        28.000                    ms
[info] ArrayOfBooleansBenchmark.readDslJsonJava                                                                         128  thrpt    5   1485403.255 ±  103098.261   ops/s
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate                                                          128  thrpt    5       468.105 ±      32.642  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                     128  thrpt    5       496.000 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       539.806 ±    1161.972  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5       576.222 ±    1240.546    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count                                                               128  thrpt    5         4.000                counts
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time                                                                128  thrpt    5        21.000                    ms
[info] ArrayOfBooleansBenchmark.readJacksonScala                                                                        128  thrpt    5    586673.369 ±    7888.608   ops/s
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                                         128  thrpt    5       498.063 ±       6.738  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                    128  thrpt    5      1336.001 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       541.896 ±    1166.473  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5      1455.361 ±    3132.820    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5         0.357 ±       3.075    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.count                                                              128  thrpt    5         4.000                counts
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.time                                                               128  thrpt    5        18.000                    ms
[info] ArrayOfBooleansBenchmark.readJsoniterScala                                                                       128  thrpt    5   1726945.444 ±  150421.415   ops/s
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                                        128  thrpt    5       333.543 ±      29.085  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                   128  thrpt    5       304.000 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       271.228 ±    1430.108  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5       251.802 ±    1328.252    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count                                                             128  thrpt    5         2.000                counts
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time                                                              128  thrpt    5         7.000                    ms
[info] ArrayOfBooleansBenchmark.readPlayJson                                                                            128  thrpt    5     91232.415 ±     758.087   ops/s
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                             128  thrpt    5      3314.184 ±      28.574  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                                        128  thrpt    5     57176.004 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 128  thrpt    5         0.001 ±       0.004  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            128  thrpt    5         0.026 ±       0.067    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                       128  thrpt    5      3270.768 ±    1172.222  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5     56434.455 ±   20552.983    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.count                                                                  128  thrpt    5        24.000                counts
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.time                                                                   128  thrpt    5        34.000                    ms
[info] ArrayOfBooleansBenchmark.writeCirce                                                                              128  thrpt    5    322192.316 ±    5931.612   ops/s
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                               128  thrpt    5       501.158 ±       9.349  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                                          128  thrpt    5      2448.001 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                         128  thrpt    5       542.532 ±    1167.842  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5      2654.609 ±    5714.364    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.count                                                                    128  thrpt    5         4.000                counts
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.time                                                                     128  thrpt    5        15.000                    ms
[info] ArrayOfBooleansBenchmark.writeDslJsonJava                                                                        128  thrpt    5   1166728.882 ±  103112.271   ops/s
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate                                                         128  thrpt    5       539.749 ±      47.624  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                    128  thrpt    5       728.000 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       539.863 ±    1162.096  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5       734.905 ±    1582.395    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count                                                              128  thrpt    5         4.000                counts
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time                                                               128  thrpt    5        21.000                    ms
[info] ArrayOfBooleansBenchmark.writeJacksonScala                                                                       128  thrpt    5    988240.862 ±   45573.518   ops/s
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                                        128  thrpt    5       698.173 ±      32.197  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                   128  thrpt    5      1112.000 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       677.270 ±       1.341  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5      1078.834 ±      51.049    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5         0.211 ±       1.814    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count                                                             128  thrpt    5         5.000                counts
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time                                                              128  thrpt    5        21.000                    ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScala                                                                      128  thrpt    5   2489859.412 ±   40370.538   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                                       128  thrpt    5      1151.975 ±      18.610  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                  128  thrpt    5       728.000 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5      1083.575 ±    1426.413  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5       685.237 ±     907.070    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         0.933 ±       6.689  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5         0.590 ±       4.234    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count                                                            128  thrpt    5         8.000                counts
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                             128  thrpt    5        32.000                    ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                              128  thrpt    5   1987726.091 ±   15631.700   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                               128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                          128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                    128  thrpt    5           ≈ 0                counts
[info] ArrayOfBooleansBenchmark.writePlayJson                                                                           128  thrpt    5    417222.550 ±    8083.071   ops/s
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                            128  thrpt    5       487.695 ±       9.373  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                                       128  thrpt    5      1840.001 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       541.872 ±    1166.420  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5      2047.108 ±    4406.740    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.count                                                                 128  thrpt    5         4.000                counts
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.time                                                                  128  thrpt    5        17.000                    ms
[info] ArrayOfBytesBenchmark.readCirce                                                                                  128  thrpt    5    141442.715 ±    2360.037   ops/s
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate                                                                   128  thrpt    5      1700.287 ±      27.782  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm                                                              128  thrpt    5     18920.003 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                       128  thrpt    5         0.004 ±       0.025  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                  128  thrpt    5         0.041 ±       0.281    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                             128  thrpt    5      1632.861 ±    1435.507  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                        128  thrpt    5     18176.556 ±   16126.596    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                      128  thrpt    5         0.666 ±       5.737  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                 128  thrpt    5         7.459 ±      64.228    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.count                                                                        128  thrpt    5        12.000                counts
[info] ArrayOfBytesBenchmark.readCirce:·gc.time                                                                         128  thrpt    5        25.000                    ms
[info] ArrayOfBytesBenchmark.readJacksonScala                                                                           128  thrpt    5    369419.887 ±    4286.297   ops/s
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate                                                            128  thrpt    5       313.578 ±       3.612  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                       128  thrpt    5      1336.001 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       270.988 ±    1428.841  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5      1158.302 ±    6107.393    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.count                                                                 128  thrpt    5         2.000                counts
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.time                                                                  128  thrpt    5         9.000                    ms
[info] ArrayOfBytesBenchmark.readJsoniterScala                                                                          128  thrpt    5    815800.434 ±   27293.791   ops/s
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate                                                           128  thrpt    5       157.582 ±       5.204  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                      128  thrpt    5       304.001 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       135.786 ±    1169.156  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5       265.875 ±    2289.268    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.count                                                                128  thrpt    5         1.000                counts
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.time                                                                 128  thrpt    5         3.000                    ms
[info] ArrayOfBytesBenchmark.readPlayJson                                                                               128  thrpt    5     76840.476 ±     278.901   ops/s
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate                                                                128  thrpt    5      3272.048 ±      10.769  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                           128  thrpt    5     67016.005 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    128  thrpt    5         0.005 ±       0.007  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               128  thrpt    5         0.106 ±       0.147    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                          128  thrpt    5      3271.194 ±    1174.787  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5     67000.956 ±   24170.199    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.count                                                                     128  thrpt    5        24.000                counts
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.time                                                                      128  thrpt    5        30.000                    ms
[info] ArrayOfBytesBenchmark.writeCirce                                                                                 128  thrpt    5    259547.179 ±   14350.758   ops/s
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate                                                                  128  thrpt    5      1149.171 ±      63.021  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm                                                             128  thrpt    5      6968.002 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                            128  thrpt    5      1085.056 ±    1430.161  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                       128  thrpt    5      6571.116 ±    8570.129    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                     128  thrpt    5         0.666 ±       5.737  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                                128  thrpt    5         4.052 ±      34.891    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.count                                                                       128  thrpt    5         8.000                counts
[info] ArrayOfBytesBenchmark.writeCirce:·gc.time                                                                        128  thrpt    5        31.000                    ms
[info] ArrayOfBytesBenchmark.writeJacksonScala                                                                          128  thrpt    5   1837678.760 ±   58731.359   ops/s
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate                                                           128  thrpt    5       943.404 ±      29.855  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                      128  thrpt    5       808.000 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       948.443 ±    1429.514  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5       812.810 ±    1231.059    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.count                                                                128  thrpt    5         7.000                counts
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.time                                                                 128  thrpt    5        31.000                    ms
[info] ArrayOfBytesBenchmark.writeJsoniterScala                                                                         128  thrpt    5   2129594.220 ±   61673.862   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                          128  thrpt    5       573.685 ±      16.485  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                     128  thrpt    5       424.000 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       542.067 ±    1166.841  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5       401.178 ±     863.685    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5         0.098 ±       0.845    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count                                                               128  thrpt    5         4.000                counts
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time                                                                128  thrpt    5        14.000                    ms
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc                                                                 128  thrpt    5   2435278.826 ±   75554.044   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                  128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                             128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                       128  thrpt    5           ≈ 0                counts
[info] ArrayOfBytesBenchmark.writePlayJson                                                                              128  thrpt    5     39869.961 ±     731.713   ops/s
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate                                                               128  thrpt    5      1687.184 ±      31.436  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm                                                          128  thrpt    5     66608.010 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   128  thrpt    5         0.040 ±       0.307  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              128  thrpt    5         1.554 ±      12.062    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                         128  thrpt    5      1631.302 ±    1429.923  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5     64445.110 ±   57422.189    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                  128  thrpt    5         0.799 ±       6.881  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                             128  thrpt    5        31.718 ±     273.103    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.count                                                                    128  thrpt    5        12.000                counts
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.time                                                                     128  thrpt    5        39.000                    ms
[info] ArrayOfCharsBenchmark.readCirce                                                                                  128  thrpt    5    214497.127 ±    4681.105   ops/s
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate                                                                   128  thrpt    5      2207.624 ±      47.630  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm                                                              128  thrpt    5     16200.002 ±       0.001    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                       128  thrpt    5         0.024 ±       0.188  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                  128  thrpt    5         0.177 ±       1.384    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                             128  thrpt    5      2316.002 ±    1433.084  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                        128  thrpt    5     16994.955 ±   10496.983    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                      128  thrpt    5         0.666 ±       5.735  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                 128  thrpt    5         4.898 ±      42.176    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.count                                                                        128  thrpt    5        17.000                counts
[info] ArrayOfCharsBenchmark.readCirce:·gc.time                                                                         128  thrpt    5        29.000                    ms
[info] ArrayOfCharsBenchmark.readJacksonScala                                                                           128  thrpt    5    298762.112 ±    8656.098   ops/s
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate                                                            128  thrpt    5      1445.578 ±      41.862  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                       128  thrpt    5      7616.001 ±       0.001    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                128  thrpt    5         0.024 ±       0.131  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           128  thrpt    5         0.125 ±       0.691    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                      128  thrpt    5      1494.117 ±    1157.939  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5      7875.245 ±    6198.776    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         0.932 ±       8.029  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5         4.886 ±      42.072    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.count                                                                 128  thrpt    5        11.000                counts
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.time                                                                  128  thrpt    5        35.000                    ms
[info] ArrayOfCharsBenchmark.readJsoniterScala                                                                          128  thrpt    5   1247105.778 ±  110124.683   ops/s
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                                           128  thrpt    5       431.051 ±      38.211  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                      128  thrpt    5       544.000 ±       0.001    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       406.878 ±    1430.232  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5       516.148 ±    1815.243    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.count                                                                128  thrpt    5         3.000                counts
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.time                                                                 128  thrpt    5        10.000                    ms
[info] ArrayOfCharsBenchmark.readPlayJson                                                                               128  thrpt    5     74184.610 ±    1656.308   ops/s
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate                                                                128  thrpt    5      3117.730 ±      70.105  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                           128  thrpt    5     66144.006 ±       0.001    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    128  thrpt    5         0.005 ±       0.014  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               128  thrpt    5         0.104 ±       0.302    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                          128  thrpt    5      2998.321 ±    1437.185  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5     63632.974 ±   31350.823    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.count                                                                     128  thrpt    5        22.000                counts
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.time                                                                      128  thrpt    5        32.000                    ms
[info] ArrayOfCharsBenchmark.writeCirce                                                                                 128  thrpt    5    215728.939 ±    4171.182   ops/s
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate                                                                  128  thrpt    5      1831.288 ±      35.233  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                                             128  thrpt    5     13360.002 ±       0.001    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      128  thrpt    5         0.024 ±       0.190  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 128  thrpt    5         0.175 ±       1.388    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                            128  thrpt    5      1905.389 ±    1174.071  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                       128  thrpt    5     13898.022 ±    8501.149    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                     128  thrpt    5         0.666 ±       5.737  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                                128  thrpt    5         4.875 ±      41.974    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.count                                                                       128  thrpt    5        14.000                counts
[info] ArrayOfCharsBenchmark.writeCirce:·gc.time                                                                        128  thrpt    5        43.000                    ms
[info] ArrayOfCharsBenchmark.writeJacksonScala                                                                          128  thrpt    5   1140379.607 ±   29489.496   ops/s
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                                           128  thrpt    5       666.580 ±      17.410  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                      128  thrpt    5       920.000 ±       0.001    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       677.432 ±       0.478  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5       935.012 ±      24.390    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.count                                                                128  thrpt    5         5.000                counts
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.time                                                                 128  thrpt    5        22.000                    ms
[info] ArrayOfCharsBenchmark.writeJsoniterScala                                                                         128  thrpt    5   3072025.474 ±  117517.679   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                          128  thrpt    5      1046.222 ±      39.966  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                     128  thrpt    5       536.000 ±       0.001    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      1084.310 ±    1429.934  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5       555.098 ±     727.125    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5         0.068 ±       0.589    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count                                                               128  thrpt    5         8.000                counts
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time                                                                128  thrpt    5        29.000                    ms
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc                                                                 128  thrpt    5   3265654.395 ±   14330.560   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                  128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                             128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                       128  thrpt    5           ≈ 0                counts
[info] ArrayOfCharsBenchmark.writePlayJson                                                                              128  thrpt    5    269067.841 ±    8343.460   ops/s
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate                                                               128  thrpt    5      2199.069 ±      67.863  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                          128  thrpt    5     12864.002 ±       0.001    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   128  thrpt    5         0.024 ±       0.135  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              128  thrpt    5         0.138 ±       0.789    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                         128  thrpt    5      2179.534 ±    1174.958  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5     12746.737 ±    6733.940    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                  128  thrpt    5         0.933 ±       8.031  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                             128  thrpt    5         5.478 ±      47.170    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.count                                                                    128  thrpt    5        16.000                counts
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.time                                                                     128  thrpt    5        25.000                    ms
[info] ArrayOfDoublesBenchmark.readCirce                                                                                128  thrpt    5     25976.261 ±     571.921   ops/s
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate                                                                 128  thrpt    5      1521.510 ±      33.819  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm                                                            128  thrpt    5     92192.016 ±       0.002    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                     128  thrpt    5         0.029 ±       0.168  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                128  thrpt    5         1.763 ±      10.116    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                           128  thrpt    5      1495.029 ±    1166.878  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                      128  thrpt    5     90609.296 ±   71324.358    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                    128  thrpt    5         0.666 ±       5.734  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                               128  thrpt    5        40.451 ±     348.297    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.count                                                                      128  thrpt    5        11.000                counts
[info] ArrayOfDoublesBenchmark.readCirce:·gc.time                                                                       128  thrpt    5        28.000                    ms
[info] ArrayOfDoublesBenchmark.readDslJsonJava                                                                          128  thrpt    5     94708.027 ±    1328.585   ops/s
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate                                                           128  thrpt    5       853.077 ±      11.640  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                      128  thrpt    5     14176.004 ±       0.001    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       809.837 ±    1162.914  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5     13463.385 ±   19437.349    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count                                                                128  thrpt    5         6.000                counts
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time                                                                 128  thrpt    5        31.000                    ms
[info] ArrayOfDoublesBenchmark.readJacksonScala                                                                         128  thrpt    5     59419.139 ±    2411.524   ops/s
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate                                                          128  thrpt    5       981.908 ±      39.979  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                     128  thrpt    5     26008.007 ±       0.001    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       948.409 ±    1428.339  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5     25166.634 ±   38460.927    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.count                                                               128  thrpt    5         7.000                counts
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.time                                                                128  thrpt    5        32.000                    ms
[info] ArrayOfDoublesBenchmark.readJsoniterScala                                                                        128  thrpt    5    126256.733 ±     386.245   ops/s
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate                                                         128  thrpt    5       813.790 ±       2.716  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                    128  thrpt    5     10144.003 ±       0.001    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       813.752 ±    1167.574  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5     10145.963 ±   14601.027    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count                                                              128  thrpt    5         6.000                counts
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time                                                               128  thrpt    5        21.000                    ms
[info] ArrayOfDoublesBenchmark.readPlayJson                                                                             128  thrpt    5     33017.627 ±    1487.912   ops/s
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate                                                              128  thrpt    5      1724.816 ±      78.389  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                         128  thrpt    5     82216.013 ±       0.002    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  128  thrpt    5         0.027 ±       0.143  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             128  thrpt    5         1.306 ±       6.795    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                        128  thrpt    5      1768.028 ±    1438.344  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5     84209.157 ±   67032.206    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                 128  thrpt    5         0.799 ±       6.882  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                            128  thrpt    5        38.088 ±     327.953    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.count                                                                   128  thrpt    5        13.000                counts
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.time                                                                    128  thrpt    5        34.000                    ms
[info] ArrayOfDoublesBenchmark.writeCirce                                                                               128  thrpt    5     38687.524 ±    1848.455   ops/s
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate                                                                128  thrpt    5       433.404 ±      20.811  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm                                                           128  thrpt    5     17632.011 ±       0.002    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                          128  thrpt    5       406.838 ±    1430.093  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5     16643.748 ±   58515.091    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.count                                                                     128  thrpt    5         3.000                counts
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.time                                                                      128  thrpt    5        12.000                    ms
[info] ArrayOfDoublesBenchmark.writeJacksonScala                                                                        128  thrpt    5     40780.183 ±     915.552   ops/s
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate                                                         128  thrpt    5       368.332 ±       8.274  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                    128  thrpt    5     14216.010 ±       0.002    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       406.486 ±    1428.854  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5     15739.145 ±   55326.139    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count                                                              128  thrpt    5         3.000                counts
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time                                                               128  thrpt    5        13.000                    ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScala                                                                       128  thrpt    5     44639.352 ±    1918.643   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                        128  thrpt    5       392.271 ±      16.919  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                   128  thrpt    5     13832.009 ±       0.001    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       406.666 ±    1429.489  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5     14411.400 ±   50665.423    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count                                                             128  thrpt    5         3.000                counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time                                                              128  thrpt    5        10.000                    ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc                                                               128  thrpt    5     44521.090 ±    2277.063   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                128  thrpt    5       340.335 ±      17.473  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                           128  thrpt    5     12032.009 ±       0.001    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                          128  thrpt    5       271.099 ±    1429.429  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                                     128  thrpt    5      9660.399 ±   50944.082    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                     128  thrpt    5         2.000                counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                      128  thrpt    5         7.000                    ms
[info] ArrayOfDurationsBenchmark.readCirce                                                                              128  thrpt    5     20159.657 ±     540.057   ops/s
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate                                                               128  thrpt    5       730.021 ±      19.779  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm                                                          128  thrpt    5     56992.022 ±       0.008    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                         128  thrpt    5       678.238 ±       1.417  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5     52951.403 ±    1420.334    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                  128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                             128  thrpt    5        10.362 ±      89.219    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.count                                                                    128  thrpt    5         5.000                counts
[info] ArrayOfDurationsBenchmark.readCirce:·gc.time                                                                     128  thrpt    5        18.000                    ms
[info] ArrayOfDurationsBenchmark.readJacksonScala                                                                       128  thrpt    5     18553.320 ±     174.441   ops/s
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate                                                        128  thrpt    5       526.649 ±       4.966  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                   128  thrpt    5     44679.670 ±       3.043    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       541.909 ±    1166.500  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5     46023.876 ±   99069.902    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.count                                                             128  thrpt    5         4.000                counts
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.time                                                              128  thrpt    5        18.000                    ms
[info] ArrayOfDurationsBenchmark.readJsoniterScala                                                                      128  thrpt    5     78081.004 ±    3587.513   ops/s
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate                                                       128  thrpt    5       203.249 ±       9.403  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                  128  thrpt    5      4096.005 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5       271.702 ±    1432.606  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5      5520.886 ±   29114.581    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count                                                            128  thrpt    5         2.000                counts
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time                                                             128  thrpt    5         7.000                    ms
[info] ArrayOfDurationsBenchmark.readPlayJson                                                                           128  thrpt    5     15155.124 ±     177.338   ops/s
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate                                                            128  thrpt    5       983.031 ±      11.684  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                       128  thrpt    5    102064.029 ±       0.011    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       948.639 ±    1428.793  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5     98562.740 ±  149313.952    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.count                                                                 128  thrpt    5         7.000                counts
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.time                                                                  128  thrpt    5        33.000                    ms
[info] ArrayOfDurationsBenchmark.writeCirce                                                                             128  thrpt    5     57404.342 ±     693.112   ops/s
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate                                                              128  thrpt    5       869.719 ±      10.627  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm                                                         128  thrpt    5     23848.007 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                        128  thrpt    5       949.233 ±    1429.841  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5     26053.674 ±   39561.088    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.count                                                                   128  thrpt    5         7.000                counts
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.time                                                                    128  thrpt    5        28.000                    ms
[info] ArrayOfDurationsBenchmark.writeJacksonScala                                                                      128  thrpt    5     88353.195 ±    1988.518   ops/s
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate                                                       128  thrpt    5      1047.699 ±      23.899  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                  128  thrpt    5     18664.005 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5       948.228 ±    1427.806  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5     16918.890 ±   25809.206    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5         2.396 ±      20.634    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count                                                            128  thrpt    5         7.000                counts
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time                                                             128  thrpt    5        32.000                    ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScala                                                                     128  thrpt    5    208456.622 ±    2598.955   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                      128  thrpt    5       330.584 ±       3.962  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                 128  thrpt    5      2496.002 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5       271.133 ±    1429.608  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5      2050.876 ±   10813.690    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5         1.007 ±       8.671    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count                                                           128  thrpt    5         2.000                counts
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time                                                            128  thrpt    5         6.000                    ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc                                                             128  thrpt    5    240950.362 ±    4202.222   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                              128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                         128  thrpt    5         0.002 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                   128  thrpt    5           ≈ 0                counts
[info] ArrayOfDurationsBenchmark.writePlayJson                                                                          128  thrpt    5     78314.622 ±    1593.770   ops/s
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate                                                           128  thrpt    5      1068.298 ±      21.823  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                      128  thrpt    5     21472.005 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                     128  thrpt    5      1083.781 ±    1428.650  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5     21781.115 ±   28685.126    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.count                                                                128  thrpt    5         8.000                counts
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.time                                                                 128  thrpt    5        36.000                    ms
[info] ArrayOfEnumsBenchmark.readCirce                                                                                  128  thrpt    5     27737.721 ±     280.188   ops/s
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate                                                                   128  thrpt    5       576.983 ±       5.895  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                                              128  thrpt    5     32736.015 ±       0.002    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                             128  thrpt    5       542.558 ±    1167.898  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                        128  thrpt    5     30804.000 ±   66308.630    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.count                                                                        128  thrpt    5         4.000                counts
[info] ArrayOfEnumsBenchmark.readCirce:·gc.time                                                                         128  thrpt    5        15.000                    ms
[info] ArrayOfEnumsBenchmark.readJacksonScala                                                                           128  thrpt    5     28335.659 ±     690.471   ops/s
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                                            128  thrpt    5       372.477 ±       8.929  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                       128  thrpt    5     20688.015 ±       0.002    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       406.374 ±    1428.461  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5     22647.727 ±   79612.589    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5         7.397 ±      63.687    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.count                                                                 128  thrpt    5         3.000                counts
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.time                                                                  128  thrpt    5        13.000                    ms
[info] ArrayOfEnumsBenchmark.readJsoniterScala                                                                          128  thrpt    5    118853.620 ±    3982.462   ops/s
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                                           128  thrpt    5       463.944 ±      15.618  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                      128  thrpt    5      6144.003 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       406.825 ±    1430.046  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5      5418.759 ±   19048.174    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count                                                                128  thrpt    5         3.000                counts
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time                                                                 128  thrpt    5        10.000                    ms
[info] ArrayOfEnumsBenchmark.readPlayJson                                                                               128  thrpt    5     21595.573 ±     403.738   ops/s
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate                                                                128  thrpt    5      1192.350 ±      22.336  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                           128  thrpt    5     86904.021 ±       0.008    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                          128  thrpt    5      1219.279 ±    1167.921  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5     88936.733 ±   86017.068    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                   128  thrpt    5         1.199 ±       7.565  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                              128  thrpt    5        87.846 ±     555.349    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.count                                                                     128  thrpt    5         9.000                counts
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.time                                                                      128  thrpt    5        43.000                    ms
[info] ArrayOfEnumsBenchmark.writeCirce                                                                                 128  thrpt    5    180652.950 ±    2278.481   ops/s
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate                                                                  128  thrpt    5       630.782 ±       7.901  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                                             128  thrpt    5      5496.002 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                            128  thrpt    5       678.049 ±       0.153  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                       128  thrpt    5      5907.888 ±      74.760    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.count                                                                       128  thrpt    5         5.000                counts
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.time                                                                        128  thrpt    5        19.000                    ms
[info] ArrayOfEnumsBenchmark.writeJacksonScala                                                                          128  thrpt    5    283699.356 ±    4587.744   ops/s
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                                           128  thrpt    5       286.944 ±       4.569  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                      128  thrpt    5      1592.001 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       270.953 ±    1428.657  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5      1504.786 ±    7934.321    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count                                                                128  thrpt    5         2.000                counts
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time                                                                 128  thrpt    5        10.000                    ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScala                                                                         128  thrpt    5    499334.451 ±    5693.396   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                          128  thrpt    5       383.268 ±       4.528  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                     128  thrpt    5      1208.001 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       406.576 ±    1429.171  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5      1281.768 ±    4505.662    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.266 ±       1.405  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5         0.838 ±       4.419    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count                                                               128  thrpt    5         3.000                counts
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time                                                                128  thrpt    5        11.000                    ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc                                                                 128  thrpt    5    498792.398 ±     763.036   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                  128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                             128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                       128  thrpt    5           ≈ 0                counts
[info] ArrayOfEnumsBenchmark.writePlayJson                                                                              128  thrpt    5    289523.601 ±    4170.503   ops/s
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate                                                               128  thrpt    5       797.649 ±      11.383  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                          128  thrpt    5      4336.001 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                         128  thrpt    5       812.557 ±    1166.152  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5      4420.748 ±    6410.216    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                  128  thrpt    5         0.400 ±       1.405  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                             128  thrpt    5         2.176 ±       7.651    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.count                                                                    128  thrpt    5         6.000                counts
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.time                                                                     128  thrpt    5        29.000                    ms
[info] ArrayOfFloatsBenchmark.readCirce                                                                                 128  thrpt    5     36564.707 ±     785.940   ops/s
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate                                                                  128  thrpt    5      1630.766 ±      35.054  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm                                                             128  thrpt    5     70200.011 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      128  thrpt    5         0.028 ±       0.211  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 128  thrpt    5         1.231 ±       9.176    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                            128  thrpt    5      1631.967 ±    1431.256  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                       128  thrpt    5     70246.437 ±   61463.964    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                     128  thrpt    5         0.666 ±       5.735  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                128  thrpt    5        28.604 ±     246.285    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.count                                                                       128  thrpt    5        12.000                counts
[info] ArrayOfFloatsBenchmark.readCirce:·gc.time                                                                        128  thrpt    5        31.000                    ms
[info] ArrayOfFloatsBenchmark.readDslJsonJava                                                                           128  thrpt    5    303890.042 ±   23405.442   ops/s
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate                                                            128  thrpt    5       315.121 ±      24.268  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                       128  thrpt    5      1632.001 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       404.876 ±    1423.197  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5      2114.890 ±    7437.700    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count                                                                 128  thrpt    5         3.000                counts
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time                                                                  128  thrpt    5        17.000                    ms
[info] ArrayOfFloatsBenchmark.readJacksonScala                                                                          128  thrpt    5    100421.742 ±     813.917   ops/s
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate                                                           128  thrpt    5      1109.628 ±       8.716  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                      128  thrpt    5     17392.004 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5      1083.639 ±    1428.219  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5     16993.180 ±   22489.942    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         1.066 ±       6.437  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5        16.684 ±     100.706    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.count                                                                128  thrpt    5         8.000                counts
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.time                                                                 128  thrpt    5        36.000                    ms
[info] ArrayOfFloatsBenchmark.readJsoniterScala                                                                         128  thrpt    5    422715.591 ±    8587.250   ops/s
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate                                                          128  thrpt    5       275.023 ±       5.619  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                     128  thrpt    5      1024.001 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       271.224 ±    1430.088  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5      1014.892 ±    5351.293    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count                                                               128  thrpt    5         2.000                counts
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time                                                                128  thrpt    5         7.000                    ms
[info] ArrayOfFloatsBenchmark.readPlayJson                                                                              128  thrpt    5     37314.200 ±    1171.518   ops/s
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate                                                               128  thrpt    5      1991.954 ±      62.510  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                          128  thrpt    5     84016.011 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   128  thrpt    5         0.028 ±       0.212  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              128  thrpt    5         1.195 ±       8.933    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                         128  thrpt    5      1906.480 ±    1187.142  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5     80330.099 ±   48090.361    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                  128  thrpt    5         0.799 ±       6.883  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                             128  thrpt    5        34.212 ±     294.578    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.count                                                                    128  thrpt    5        14.000                counts
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.time                                                                     128  thrpt    5        29.000                    ms
[info] ArrayOfFloatsBenchmark.writeCirce                                                                                128  thrpt    5     87864.879 ±   10876.698   ops/s
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate                                                                 128  thrpt    5       424.304 ±      52.314  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm                                                            128  thrpt    5      7600.005 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                           128  thrpt    5       406.881 ±    1430.244  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                      128  thrpt    5      7238.971 ±   25448.162    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.count                                                                      128  thrpt    5         3.000                counts
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.time                                                                       128  thrpt    5        12.000                    ms
[info] ArrayOfFloatsBenchmark.writeDslJsonJava                                                                          128  thrpt    5    111146.026 ±    9091.409   ops/s
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                           128  thrpt    5       340.113 ±      27.634  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                      128  thrpt    5      4816.004 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       269.938 ±    1423.307  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5      3804.417 ±   20059.745    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count                                                                128  thrpt    5         2.000                counts
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time                                                                 128  thrpt    5        11.000                    ms
[info] ArrayOfFloatsBenchmark.writeJacksonScala                                                                         128  thrpt    5     98734.226 ±    1838.639   ops/s
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate                                                          128  thrpt    5       326.209 ±       5.985  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                     128  thrpt    5      5200.004 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       270.991 ±    1428.858  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5      4339.844 ±   22882.858    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count                                                               128  thrpt    5         2.000                counts
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time                                                                128  thrpt    5         9.000                    ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScala                                                                        128  thrpt    5    116913.756 ±    2379.698   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                         128  thrpt    5       357.751 ±       7.241  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                    128  thrpt    5      4816.004 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       406.489 ±    1428.866  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5      5489.574 ±   19296.898    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count                                                              128  thrpt    5         3.000                counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time                                                               128  thrpt    5        10.000                    ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc                                                                128  thrpt    5    116062.715 ±    1254.391   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                 128  thrpt    5       263.692 ±       2.973  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                            128  thrpt    5      3576.004 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                           128  thrpt    5       271.071 ±    1429.279  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5      3687.241 ±   19441.755    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                      128  thrpt    5         2.000                counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                       128  thrpt    5         8.000                    ms
[info] ArrayOfInstantsBenchmark.readCirce                                                                               128  thrpt    5      8866.969 ±     141.764   ops/s
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate                                                                128  thrpt    5      1469.770 ±      23.608  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm                                                           128  thrpt    5    260904.055 ±       0.067    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    128  thrpt    5         0.027 ±       0.231  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               128  thrpt    5         4.738 ±      40.793    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                          128  thrpt    5      1494.973 ±    1182.038  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5    265275.681 ±  206701.033    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                   128  thrpt    5         0.666 ±       5.734  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                              128  thrpt    5       118.296 ±    1018.564    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.count                                                                     128  thrpt    5        11.000                counts
[info] ArrayOfInstantsBenchmark.readCirce:·gc.time                                                                      128  thrpt    5        29.000                    ms
[info] ArrayOfInstantsBenchmark.readJacksonScala                                                                        128  thrpt    5      8759.952 ±     228.332   ops/s
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate                                                         128  thrpt    5      1366.509 ±      35.812  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                    128  thrpt    5    245543.998 ±      61.611    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                             128  thrpt    5         0.010 ±       0.074  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        128  thrpt    5         1.699 ±      13.261    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5      1493.339 ±    1160.055  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5    268546.308 ±  214681.878    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.799 ±       6.881  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5       144.002 ±    1239.902    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.count                                                              128  thrpt    5        11.000                counts
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.time                                                               128  thrpt    5        38.000                    ms
[info] ArrayOfInstantsBenchmark.readJsoniterScala                                                                       128  thrpt    5    185374.866 ±    1181.235   ops/s
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate                                                        128  thrpt    5       482.486 ±       3.346  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                   128  thrpt    5      4096.002 ±       0.001    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       543.077 ±    1169.014  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5      4613.166 ±    9930.211    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count                                                             128  thrpt    5         4.000                counts
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time                                                              128  thrpt    5        13.000                    ms
[info] ArrayOfInstantsBenchmark.readPlayJson                                                                            128  thrpt    5      4655.100 ±     173.373   ops/s
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate                                                             128  thrpt    5      1236.577 ±      46.269  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                        128  thrpt    5    418024.089 ±       0.010    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 128  thrpt    5         0.023 ±       0.202  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            128  thrpt    5         8.042 ±      69.246    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                       128  thrpt    5      1220.971 ±    1169.832  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5    413260.619 ±  402006.879    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                128  thrpt    5         0.799 ±       6.882  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                           128  thrpt    5       270.252 ±    2326.947    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.count                                                                  128  thrpt    5         9.000                counts
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.time                                                                   128  thrpt    5        37.000                    ms
[info] ArrayOfInstantsBenchmark.writeCirce                                                                              128  thrpt    5     25472.378 ±     276.524   ops/s
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate                                                               128  thrpt    5      1320.244 ±      14.429  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm                                                          128  thrpt    5     81568.017 ±       0.003    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   128  thrpt    5         0.025 ±       0.216  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              128  thrpt    5         1.547 ±      13.322    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                         128  thrpt    5      1357.636 ±      11.180  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5     83878.398 ±     577.564    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                  128  thrpt    5         0.666 ±       5.735  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                             128  thrpt    5        41.148 ±     354.297    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.count                                                                    128  thrpt    5        10.000                counts
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.time                                                                     128  thrpt    5        39.000                    ms
[info] ArrayOfInstantsBenchmark.writeJacksonScala                                                                       128  thrpt    5     29691.780 ±     480.430   ops/s
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate                                                        128  thrpt    5      1451.485 ±      23.889  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                   128  thrpt    5     76944.014 ±       0.002    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                            128  thrpt    5         0.028 ±       0.161  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       128  thrpt    5         1.510 ±       8.570    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5      1494.272 ±    1157.767  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5     79190.086 ±   60684.721    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         0.799 ±       6.882  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5        42.508 ±     366.010    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count                                                             128  thrpt    5        11.000                counts
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time                                                              128  thrpt    5        35.000                    ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScala                                                                      128  thrpt    5    374367.078 ±   11434.990   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                       128  thrpt    5       827.672 ±      25.476  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                  128  thrpt    5      3480.001 ±       0.001    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5       948.326 ±    1428.699  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5      3983.827 ±    5956.497    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count                                                            128  thrpt    5         7.000                counts
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time                                                             128  thrpt    5        25.000                    ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc                                                              128  thrpt    5    415498.343 ±    2572.375   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                               128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                          128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                    128  thrpt    5           ≈ 0                counts
[info] ArrayOfInstantsBenchmark.writePlayJson                                                                           128  thrpt    5     27241.878 ±     691.645   ops/s
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate                                                            128  thrpt    5      1433.479 ±      36.655  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                       128  thrpt    5     82824.015 ±       0.003    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                128  thrpt    5         0.026 ±       0.215  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           128  thrpt    5         1.489 ±      12.386    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                      128  thrpt    5      1493.445 ±    1176.768  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5     86269.519 ±   67363.576    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         0.799 ±       6.882  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5        46.056 ±     396.555    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.count                                                                 128  thrpt    5        11.000                counts
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.time                                                                  128  thrpt    5        37.000                    ms
[info] ArrayOfIntsBenchmark.readCirce                                                                                   128  thrpt    5     94363.654 ±    9232.815   ops/s
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate                                                                    128  thrpt    5      1537.208 ±     149.403  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                               128  thrpt    5     25640.004 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                        128  thrpt    5         0.028 ±       0.153  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                   128  thrpt    5         0.454 ±       2.526    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                              128  thrpt    5      1495.788 ±    1180.164  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                         128  thrpt    5     24934.093 ±   18982.924    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                       128  thrpt    5         0.666 ±       5.734  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                  128  thrpt    5        10.992 ±      94.645    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.count                                                                         128  thrpt    5        11.000                counts
[info] ArrayOfIntsBenchmark.readCirce:·gc.time                                                                          128  thrpt    5        25.000                    ms
[info] ArrayOfIntsBenchmark.readDslJsonJava                                                                             128  thrpt    5    457989.342 ±    3391.415   ops/s
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate                                                              128  thrpt    5       475.015 ±       3.560  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                         128  thrpt    5      1632.001 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                        128  thrpt    5       539.417 ±    1161.140  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5      1854.751 ±    3992.530    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.count                                                                   128  thrpt    5         4.000                counts
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.time                                                                    128  thrpt    5        20.000                    ms
[info] ArrayOfIntsBenchmark.readJacksonScala                                                                            128  thrpt    5    267811.848 ±   18588.592   ops/s
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                                             128  thrpt    5       383.861 ±      26.513  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                        128  thrpt    5      2256.002 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                       128  thrpt    5       406.472 ±    1428.806  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5      2413.038 ±    8484.199    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.count                                                                  128  thrpt    5         3.000                counts
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.time                                                                   128  thrpt    5        13.000                    ms
[info] ArrayOfIntsBenchmark.readJsoniterScala                                                                           128  thrpt    5    621846.238 ±   21386.781   ops/s
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                                            128  thrpt    5       404.573 ±      13.765  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                       128  thrpt    5      1024.001 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       406.863 ±    1430.181  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5      1035.064 ±    3638.586    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.count                                                                 128  thrpt    5         3.000                counts
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.time                                                                  128  thrpt    5        10.000                    ms
[info] ArrayOfIntsBenchmark.readPlayJson                                                                                128  thrpt    5     70200.250 ±     799.890   ops/s
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                                                 128  thrpt    5      3074.019 ±      34.747  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                            128  thrpt    5     68920.006 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                     128  thrpt    5         0.006 ±       0.016  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                128  thrpt    5         0.139 ±       0.354    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                           128  thrpt    5      2998.384 ±    1436.002  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                      128  thrpt    5     67227.465 ±   32314.362    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.count                                                                      128  thrpt    5        22.000                counts
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.time                                                                       128  thrpt    5        29.000                    ms
[info] ArrayOfIntsBenchmark.writeCirce                                                                                  128  thrpt    5    204776.635 ±    1610.815   ops/s
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                                   128  thrpt    5      1216.852 ±       9.764  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                                              128  thrpt    5      9352.002 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                       128  thrpt    5         0.011 ±       0.096  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                  128  thrpt    5         0.086 ±       0.737    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                             128  thrpt    5      1221.327 ±    1169.137  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                        128  thrpt    5      9389.368 ±    9023.349    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                      128  thrpt    5         0.666 ±       5.736  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                                 128  thrpt    5         5.112 ±      44.015    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.count                                                                        128  thrpt    5         9.000                counts
[info] ArrayOfIntsBenchmark.writeCirce:·gc.time                                                                         128  thrpt    5        32.000                    ms
[info] ArrayOfIntsBenchmark.writeDslJsonJava                                                                            128  thrpt    5    954604.541 ±   28824.024   ops/s
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                             128  thrpt    5       519.137 ±      15.670  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                        128  thrpt    5       856.000 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                                       128  thrpt    5       539.766 ±    1161.886  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5       886.975 ±    1909.293    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count                                                                  128  thrpt    5         4.000                counts
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time                                                                   128  thrpt    5        21.000                    ms
[info] ArrayOfIntsBenchmark.writeJacksonScala                                                                           128  thrpt    5    816478.275 ±    5819.727   ops/s
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                                            128  thrpt    5       643.189 ±       4.751  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                       128  thrpt    5      1240.001 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       677.358 ±       0.214  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5      1305.879 ±       9.342    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.count                                                                 128  thrpt    5         5.000                counts
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.time                                                                  128  thrpt    5        24.000                    ms
[info] ArrayOfIntsBenchmark.writeJsoniterScala                                                                          128  thrpt    5   1030978.572 ±   20085.114   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                           128  thrpt    5       560.672 ±      10.905  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                      128  thrpt    5       856.000 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       542.173 ±    1167.068  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5       828.945 ±    1784.452    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5         0.203 ±       1.745    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count                                                                128  thrpt    5         4.000                counts
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time                                                                 128  thrpt    5        13.000                    ms
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc                                                                  128  thrpt    5   1092689.309 ±   12013.289   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                   128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                              128  thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                        128  thrpt    5           ≈ 0                counts
[info] ArrayOfIntsBenchmark.writePlayJson                                                                               128  thrpt    5     30106.637 ±     963.962   ops/s
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                                                128  thrpt    5      1572.248 ±      50.488  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                           128  thrpt    5     82200.014 ±       0.002    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    128  thrpt    5         0.044 ±       0.234  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               128  thrpt    5         2.330 ±      12.288    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                          128  thrpt    5      1630.544 ±    1433.537  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5     85213.573 ±   74095.354    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                   128  thrpt    5         0.799 ±       6.882  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                              128  thrpt    5        42.351 ±     364.655    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.count                                                                     128  thrpt    5        12.000                counts
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.time                                                                      128  thrpt    5        35.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readCirce                                                                              128  thrpt    5    115826.934 ±    5060.212   ops/s
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate                                                               128  thrpt    5      1426.458 ±      62.703  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                                          128  thrpt    5     19384.004 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   128  thrpt    5         0.033 ±       0.280  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              128  thrpt    5         0.450 ±       3.837    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                         128  thrpt    5      1358.708 ±      14.291  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5     18465.509 ±     923.255    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                  128  thrpt    5         0.799 ±       5.560  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                             128  thrpt    5        10.948 ±      76.479    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.count                                                                    128  thrpt    5        10.000                counts
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.time                                                                     128  thrpt    5        30.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala                                                                       128  thrpt    5    166919.972 ±    2599.453   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                                        128  thrpt    5       890.812 ±      13.695  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                   128  thrpt    5      8400.002 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       812.746 ±    1165.716  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5      7670.005 ±   11109.508    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5         1.262 ±      10.868    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count                                                             128  thrpt    5         6.000                counts
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time                                                              128  thrpt    5        32.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala                                                                      128  thrpt    5    260992.807 ±   11560.374   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                                       128  thrpt    5       679.270 ±      30.386  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                  128  thrpt    5      4096.002 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5       813.770 ±    1167.626  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5      4904.093 ±    6976.468    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count                                                            128  thrpt    5         6.000                counts
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time                                                             128  thrpt    5        21.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readPlayJson                                                                           128  thrpt    5     63969.834 ±     692.419   ops/s
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate                                                            128  thrpt    5      2700.426 ±      28.985  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                       128  thrpt    5     66448.006 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                128  thrpt    5         0.009 ±       0.064  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           128  thrpt    5         0.230 ±       1.581    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                      128  thrpt    5      2589.140 ±    1173.548  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5     63722.712 ±   29317.367    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count                                                                 128  thrpt    5        19.000                counts
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time                                                                  128  thrpt    5        27.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeCirce                                                                             128  thrpt    5    181518.630 ±    4861.217   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate                                                              128  thrpt    5       631.106 ±      16.684  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                                         128  thrpt    5      5472.002 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                        128  thrpt    5       678.118 ±       0.307  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5      5879.846 ±     158.433    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count                                                                   128  thrpt    5         5.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time                                                                    128  thrpt    5        19.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala                                                                      128  thrpt    5    542575.280 ±   15347.665   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                                       128  thrpt    5       548.774 ±      15.607  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                  128  thrpt    5      1592.001 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5       541.779 ±    1166.221  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5      1571.032 ±    3382.194    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5         0.388 ±       3.341    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count                                                            128  thrpt    5         4.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time                                                             128  thrpt    5        19.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala                                                                     128  thrpt    5    467823.064 ±    5159.837   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                      128  thrpt    5       359.017 ±       3.992  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                 128  thrpt    5      1208.001 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5       406.673 ±    1429.515  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5      1370.257 ±    4816.660    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5         0.449 ±       3.868    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count                                                           128  thrpt    5         3.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time                                                            128  thrpt    5        10.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc                                                             128  thrpt    5    494424.296 ±    1000.096   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                              128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                         128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                   128  thrpt    5           ≈ 0                counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson                                                                          128  thrpt    5    297168.765 ±    7668.127   ops/s
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate                                                           128  thrpt    5       815.560 ±      21.252  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                      128  thrpt    5      4320.001 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       812.557 ±    1166.983  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5      4306.670 ±    6229.093    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         0.266 ±       1.405  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5         1.407 ±       7.417    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count                                                                128  thrpt    5         6.000                counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time                                                                 128  thrpt    5        29.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readCirce                                                                         128  thrpt    5      8721.210 ±     381.219   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate                                                          128  thrpt    5      1115.410 ±      48.208  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                                     128  thrpt    5    201280.055 ±       0.070    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      1220.637 ±    1168.052  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5    220161.778 ±  209382.735    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.666 ±       5.737  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5       121.307 ±    1044.488    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count                                                               128  thrpt    5         9.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time                                                                128  thrpt    5        34.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala                                                                  128  thrpt    5      9277.320 ±     181.628   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                                   128  thrpt    5      1099.804 ±      21.576  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                              128  thrpt    5    186576.045 ±       0.006    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                             128  thrpt    5      1083.730 ±    1428.612  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5    184044.103 ±  244728.446    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                      128  thrpt    5         0.932 ±       8.028  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                 128  thrpt    5       159.462 ±    1373.015    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count                                                        128  thrpt    5         8.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time                                                         128  thrpt    5        37.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala                                                                 128  thrpt    5    192968.298 ±   11158.969   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                                  128  thrpt    5      1255.718 ±      72.448  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                             128  thrpt    5     10240.002 ±       0.001    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                      128  thrpt    5         0.017 ±       0.149  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 128  thrpt    5         0.140 ±       1.202    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                            128  thrpt    5      1223.062 ±    1171.303  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5      9985.890 ±    9705.270    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                     128  thrpt    5         0.533 ±       4.590  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                128  thrpt    5         4.322 ±      37.210    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count                                                       128  thrpt    5         9.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time                                                        128  thrpt    5        27.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson                                                                      128  thrpt    5      6979.675 ±     115.770   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                                       128  thrpt    5      1299.738 ±      21.763  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                  128  thrpt    5    293113.321 ±      10.859    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                           128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      128  thrpt    5         1.809 ±       9.830    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                 128  thrpt    5      1356.974 ±      13.661  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5    306023.096 ±    2349.689    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         0.799 ±       6.881  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5       179.730 ±    1547.531    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count                                                            128  thrpt    5        10.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time                                                             128  thrpt    5        38.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeCirce                                                                        128  thrpt    5     22722.365 ±     933.341   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate                                                         128  thrpt    5       953.996 ±      39.255  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                                    128  thrpt    5     66080.048 ±       0.254    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       949.278 ±    1429.935  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5     65763.581 ±   99166.169    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count                                                              128  thrpt    5         7.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time                                                               128  thrpt    5        30.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala                                                                 128  thrpt    5     25072.364 ±    1290.974   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                                  128  thrpt    5       964.592 ±      49.388  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                             128  thrpt    5     60552.017 ±       0.002    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                            128  thrpt    5       947.906 ±    1428.630  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5     59489.951 ±   89399.267    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                     128  thrpt    5         0.266 ±       1.405  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                128  thrpt    5        16.829 ±      88.755    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count                                                       128  thrpt    5         7.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time                                                        128  thrpt    5        36.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala                                                                128  thrpt    5    901379.580 ±   10014.564   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                 128  thrpt    5      1626.544 ±      17.617  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                            128  thrpt    5      2840.000 ±       0.001    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                     128  thrpt    5         0.019 ±       0.130  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                128  thrpt    5         0.034 ±       0.228    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                           128  thrpt    5      1631.826 ±    1429.703  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5      2848.946 ±    2489.739    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                    128  thrpt    5         0.799 ±       6.882  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                               128  thrpt    5         1.392 ±      11.982    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count                                                      128  thrpt    5        12.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time                                                       128  thrpt    5        26.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc                                                        128  thrpt    5    613378.582 ±   24053.108   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                         128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                    128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                              128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson                                                                     128  thrpt    5     23668.721 ±     271.521   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                                      128  thrpt    5       998.773 ±      11.715  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                                 128  thrpt    5     66416.018 ±       0.002    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                128  thrpt    5      1083.864 ±    1428.654  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5     72133.032 ±   95717.636    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count                                                           128  thrpt    5         8.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time                                                            128  thrpt    5        35.000                    ms
[info] ArrayOfLocalDatesBenchmark.readCirce                                                                             128  thrpt    5     24574.203 ±     564.655   ops/s
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate                                                              128  thrpt    5      1334.158 ±      30.235  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm                                                         128  thrpt    5     85440.017 ±       0.002    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  128  thrpt    5         0.025 ±       0.153  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             128  thrpt    5         1.618 ±       9.915    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                        128  thrpt    5      1358.433 ±      11.623  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5     86997.916 ±    2719.928    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                 128  thrpt    5         0.799 ±       5.562  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                            128  thrpt    5        51.225 ±     356.819    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.count                                                                   128  thrpt    5        10.000                counts
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.time                                                                    128  thrpt    5        30.000                    ms
[info] ArrayOfLocalDatesBenchmark.readJacksonScala                                                                      128  thrpt    5     26519.951 ±     635.947   ops/s
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate                                                       128  thrpt    5      1211.328 ±      28.781  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                  128  thrpt    5     71888.016 ±       0.002    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                           128  thrpt    5         0.003 ±       0.026  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      128  thrpt    5         0.178 ±       1.532    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5      1084.567 ±    1424.254  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5     64466.071 ±   85751.742    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         0.933 ±       8.032  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5        55.691 ±     479.514    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count                                                            128  thrpt    5         8.000                counts
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time                                                             128  thrpt    5        34.000                    ms
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala                                                                     128  thrpt    5    341401.536 ±    7093.051   ops/s
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate                                                      128  thrpt    5       888.426 ±      18.319  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                 128  thrpt    5      4096.001 ±       0.001    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5       814.494 ±    1169.169  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5      3757.356 ±    5431.922    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count                                                           128  thrpt    5         6.000                counts
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time                                                            128  thrpt    5        19.000                    ms
[info] ArrayOfLocalDatesBenchmark.readPlayJson                                                                          128  thrpt    5     15458.294 ±     462.795   ops/s
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate                                                           128  thrpt    5      1591.417 ±      47.311  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                      128  thrpt    5    162040.029 ±       0.011    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                               128  thrpt    5         0.028 ±       0.182  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          128  thrpt    5         2.832 ±      18.420    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                     128  thrpt    5      1631.267 ±    1430.544  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5    166285.130 ±  149799.806    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         0.799 ±       6.882  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5        82.311 ±     708.724    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count                                                                128  thrpt    5        12.000                counts
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time                                                                 128  thrpt    5        38.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeCirce                                                                            128  thrpt    5     53424.842 ±    1013.870   ops/s
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate                                                             128  thrpt    5      1295.997 ±      24.183  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm                                                        128  thrpt    5     38176.008 ±       0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 128  thrpt    5         0.026 ±       0.222  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            128  thrpt    5         0.765 ±       6.584    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                       128  thrpt    5      1357.673 ±      11.451  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5     39993.762 ±    1003.222    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                128  thrpt    5         0.666 ±       5.737  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                           128  thrpt    5        19.726 ±     169.847    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.count                                                                  128  thrpt    5        10.000                counts
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.time                                                                   128  thrpt    5        36.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala                                                                     128  thrpt    5     97991.836 ±    1073.770   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate                                                      128  thrpt    5      1021.626 ±      11.136  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                 128  thrpt    5     16408.004 ±       0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5       948.484 ±    1429.004  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5     15245.588 ±   23122.530    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count                                                           128  thrpt    5         7.000                counts
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time                                                            128  thrpt    5        32.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala                                                                    128  thrpt    5   1461370.257 ±   57119.225   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                     128  thrpt    5      1567.452 ±      60.382  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                128  thrpt    5      1688.000 ±       0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                         128  thrpt    5         0.014 ±       0.082  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    128  thrpt    5         0.015 ±       0.089    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5      1495.585 ±    1157.579  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5      1611.955 ±    1284.830    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         0.933 ±       6.690  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5         1.012 ±       7.267    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count                                                          128  thrpt    5        11.000                counts
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time                                                           128  thrpt    5        27.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc                                                            128  thrpt    5    831482.144 ±    5959.114   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                             128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                        128  thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                  128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson                                                                         128  thrpt    5     58331.423 ±    1792.512   ops/s
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate                                                          128  thrpt    5      1432.683 ±      44.660  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm                                                     128  thrpt    5     38656.007 ±       0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.030 ±       0.261  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         0.811 ±       6.986    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      1493.570 ±    1159.185  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5     40343.501 ±   32580.224    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.799 ±       6.884  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5        21.544 ±     185.502    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count                                                               128  thrpt    5        11.000                counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time                                                                128  thrpt    5        39.000                    ms
[info] ArrayOfLocalTimesBenchmark.readCirce                                                                             128  thrpt    5     14276.939 ±     172.909   ops/s
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate                                                              128  thrpt    5      1209.273 ±      14.778  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm                                                         128  thrpt    5    133312.031 ±       0.020    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  128  thrpt    5         0.005 ±       0.040  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             128  thrpt    5         0.512 ±       4.411    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                        128  thrpt    5      1221.311 ±    1168.192  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5    134663.623 ±  129097.564    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                 128  thrpt    5         0.799 ±       5.560  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                            128  thrpt    5        87.914 ±     611.395    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.count                                                                   128  thrpt    5         9.000                counts
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.time                                                                    128  thrpt    5        32.000                    ms
[info] ArrayOfLocalTimesBenchmark.readJacksonScala                                                                      128  thrpt    5     13468.494 ±     160.381   ops/s
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate                                                       128  thrpt    5      1088.370 ±      12.978  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                  128  thrpt    5    127183.821 ±       5.289    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5      1083.843 ±    1428.524  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5    126721.449 ±  167749.024    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         0.799 ±       6.882  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5        93.679 ±     806.601    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count                                                            128  thrpt    5         8.000                counts
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time                                                             128  thrpt    5        37.000                    ms
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala                                                                     128  thrpt    5    400553.806 ±   10225.310   ops/s
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                                      128  thrpt    5      1042.401 ±      26.678  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                 128  thrpt    5      4096.001 ±       0.001    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5      1086.011 ±    1431.302  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5      4270.404 ±    5661.388    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count                                                           128  thrpt    5         8.000                counts
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time                                                            128  thrpt    5        26.000                    ms
[info] ArrayOfLocalTimesBenchmark.readPlayJson                                                                          128  thrpt    5     10010.024 ±     552.678   ops/s
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate                                                           128  thrpt    5      1382.326 ±      75.913  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                      128  thrpt    5    217336.096 ±       0.466    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                               128  thrpt    5         0.024 ±       0.173  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          128  thrpt    5         3.802 ±      26.979    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                     128  thrpt    5      1357.909 ±      16.755  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5    213525.798 ±    9769.286    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         0.800 ±       6.884  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5       125.440 ±    1080.078    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count                                                                128  thrpt    5        10.000                counts
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time                                                                 128  thrpt    5        33.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeCirce                                                                            128  thrpt    5     37065.127 ±    2278.838   ops/s
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate                                                             128  thrpt    5      1152.383 ±      70.851  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                                        128  thrpt    5     48928.011 ±       0.001    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                       128  thrpt    5      1085.093 ±    1430.450  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5     46156.537 ±   61733.086    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                128  thrpt    5         0.666 ±       5.736  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                           128  thrpt    5        28.786 ±     247.860    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.count                                                                  128  thrpt    5         8.000                counts
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.time                                                                   128  thrpt    5        38.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala                                                                     128  thrpt    5     44524.309 ±     950.496   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                                      128  thrpt    5      1181.096 ±      25.279  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                 128  thrpt    5     41752.009 ±       0.001    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                          128  thrpt    5         0.019 ±       0.167  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     128  thrpt    5         0.683 ±       5.881    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5      1084.639 ±    1424.448  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5     38395.800 ±   51007.743    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.799 ±       6.882  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5        28.292 ±     243.604    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count                                                           128  thrpt    5         8.000                counts
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time                                                            128  thrpt    5        34.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala                                                                    128  thrpt    5   1686963.276 ±  143395.080   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                     128  thrpt    5      1534.786 ±     130.431  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                128  thrpt    5      1432.000 ±       0.001    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                         128  thrpt    5         0.014 ±       0.085  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    128  thrpt    5         0.013 ±       0.080    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5      1495.219 ±    1156.437  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5      1393.092 ±    1006.142    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         0.933 ±       6.689  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5         0.852 ±       6.116    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count                                                          128  thrpt    5        11.000                counts
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time                                                           128  thrpt    5        25.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc                                                            128  thrpt    5   1826287.061 ±     596.805   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                             128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                        128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                  128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson                                                                         128  thrpt    5     34447.326 ±    2046.991   ops/s
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate                                                          128  thrpt    5      1042.191 ±      61.460  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                                     128  thrpt    5     47616.012 ±       0.002    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      1083.936 ±    1429.089  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5     49637.261 ±   66636.709    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count                                                               128  thrpt    5         8.000                counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time                                                                128  thrpt    5        35.000                    ms
[info] ArrayOfLongsBenchmark.readCirce                                                                                  128  thrpt    5     75551.554 ±     477.745   ops/s
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate                                                                   128  thrpt    5      1296.040 ±       8.234  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm                                                              128  thrpt    5     27000.005 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                       128  thrpt    5         0.021 ±       0.182  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                  128  thrpt    5         0.441 ±       3.797    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                             128  thrpt    5      1221.893 ±    1170.657  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                        128  thrpt    5     25461.285 ±   24464.483    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                      128  thrpt    5         0.666 ±       5.735  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                 128  thrpt    5        13.908 ±     119.755    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.count                                                                        128  thrpt    5         9.000                counts
[info] ArrayOfLongsBenchmark.readCirce:·gc.time                                                                         128  thrpt    5        32.000                    ms
[info] ArrayOfLongsBenchmark.readDslJsonJava                                                                            128  thrpt    5    338668.640 ±     699.299   ops/s
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate                                                             128  thrpt    5       678.291 ±       1.596  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                        128  thrpt    5      3152.001 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                       128  thrpt    5       674.819 ±       0.445  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5      3135.870 ±       6.630    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.count                                                                  128  thrpt    5         5.000                counts
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.time                                                                   128  thrpt    5        26.000                    ms
[info] ArrayOfLongsBenchmark.readJacksonScala                                                                           128  thrpt    5    238242.731 ±   13054.545   ops/s
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate                                                            128  thrpt    5       527.958 ±      29.082  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                       128  thrpt    5      3488.002 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       541.798 ±    1166.261  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5      3567.642 ±    7682.487    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5         0.871 ±       7.500    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.count                                                                 128  thrpt    5         4.000                counts
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.time                                                                  128  thrpt    5        18.000                    ms
[info] ArrayOfLongsBenchmark.readJsoniterScala                                                                          128  thrpt    5    463151.306 ±    6734.407   ops/s
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate                                                           128  thrpt    5       583.864 ±       8.741  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                      128  thrpt    5      1984.001 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       542.464 ±    1167.695  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5      1845.970 ±    3973.643    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.count                                                                128  thrpt    5         4.000                counts
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.time                                                                 128  thrpt    5        14.000                    ms
[info] ArrayOfLongsBenchmark.readPlayJson                                                                               128  thrpt    5     66593.669 ±    2447.689   ops/s
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate                                                                128  thrpt    5      2971.578 ±     109.105  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                           128  thrpt    5     70232.006 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    128  thrpt    5         0.003 ±       0.011  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               128  thrpt    5         0.060 ±       0.255    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                          128  thrpt    5      2998.243 ±    1436.430  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5     70875.012 ±   34375.421    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.count                                                                     128  thrpt    5        22.000                counts
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.time                                                                      128  thrpt    5        31.000                    ms
[info] ArrayOfLongsBenchmark.writeCirce                                                                                 128  thrpt    5    221249.632 ±    9114.788   ops/s
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate                                                                  128  thrpt    5      1560.859 ±      64.683  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm                                                             128  thrpt    5     11104.002 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      128  thrpt    5         0.031 ±       0.182  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 128  thrpt    5         0.220 ±       1.295    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                            128  thrpt    5      1631.367 ±    1433.261  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                       128  thrpt    5     11623.605 ±   10589.215    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                     128  thrpt    5         0.666 ±       5.736  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                                128  thrpt    5         4.695 ±      40.422    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.count                                                                       128  thrpt    5        12.000                counts
[info] ArrayOfLongsBenchmark.writeCirce:·gc.time                                                                        128  thrpt    5        31.000                    ms
[info] ArrayOfLongsBenchmark.writeDslJsonJava                                                                           128  thrpt    5    684597.713 ±    5744.426   ops/s
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                            128  thrpt    5       535.883 ±       4.650  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                       128  thrpt    5      1232.001 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       539.807 ±    1161.975  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5      1242.222 ±    2673.979    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count                                                                 128  thrpt    5         4.000                counts
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time                                                                  128  thrpt    5        21.000                    ms
[info] ArrayOfLongsBenchmark.writeJacksonScala                                                                          128  thrpt    5    458091.448 ±    9980.017   ops/s
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate                                                           128  thrpt    5       470.300 ±      10.171  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                      128  thrpt    5      1616.001 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       406.433 ±    1428.671  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5      1401.792 ±    4927.538    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.count                                                                128  thrpt    5         3.000                counts
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.time                                                                 128  thrpt    5        14.000                    ms
[info] ArrayOfLongsBenchmark.writeJsoniterScala                                                                         128  thrpt    5    641543.510 ±   22261.592   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                          128  thrpt    5       502.185 ±      17.161  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                     128  thrpt    5      1232.001 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       541.963 ±    1166.617  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5      1333.685 ±    2871.114    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count                                                               128  thrpt    5         4.000                counts
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time                                                                128  thrpt    5        14.000                    ms
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc                                                                 128  thrpt    5    674868.281 ±     873.020   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                  128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                             128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                       128  thrpt    5           ≈ 0                counts
[info] ArrayOfLongsBenchmark.writePlayJson                                                                              128  thrpt    5     27907.843 ±     756.405   ops/s
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate                                                               128  thrpt    5      1430.675 ±      38.256  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                          128  thrpt    5     80688.015 ±       0.004    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   128  thrpt    5         0.039 ±       0.333  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              128  thrpt    5         2.194 ±      18.744    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                         128  thrpt    5      1493.514 ±    1160.697  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5     84318.161 ±   67988.142    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                  128  thrpt    5         0.799 ±       6.882  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                             128  thrpt    5        45.039 ±     387.797    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.count                                                                    128  thrpt    5        11.000                counts
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.time                                                                     128  thrpt    5        44.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readCirce                                                                        128  thrpt    5      6487.334 ±      54.402   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate                                                         128  thrpt    5       998.657 ±       8.373  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                                    128  thrpt    5    242296.064 ±       0.008    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                   128  thrpt    5      1084.799 ±    1430.032  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5    263299.857 ±  348230.447    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5        32.424 ±     279.176    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count                                                              128  thrpt    5         8.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time                                                               128  thrpt    5        30.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala                                                                 128  thrpt    5      6597.893 ±     319.951   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                                  128  thrpt    5       963.905 ±      46.402  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                             128  thrpt    5    229936.064 ±       0.009    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                            128  thrpt    5       948.122 ±    1428.901  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5    226372.237 ±  343523.223    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                     128  thrpt    5         0.266 ±       1.405  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                128  thrpt    5        63.682 ±     335.804    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count                                                       128  thrpt    5         7.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time                                                        128  thrpt    5        32.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala                                                                128  thrpt    5    150434.951 ±    1864.526   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                                 128  thrpt    5      1457.406 ±      17.826  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                            128  thrpt    5     15248.003 ±       0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                     128  thrpt    5         0.007 ±       0.039  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                128  thrpt    5         0.074 ±       0.408    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                           128  thrpt    5      1495.895 ±    1168.630  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5     15656.813 ±   12408.643    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                    128  thrpt    5         0.533 ±       4.588  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                               128  thrpt    5         5.599 ±      48.205    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count                                                      128  thrpt    5        11.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time                                                       128  thrpt    5        26.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson                                                                     128  thrpt    5      6394.637 ±     154.896   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                                      128  thrpt    5      1163.148 ±      28.159  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                 128  thrpt    5    286296.065 ±       0.008    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                          128  thrpt    5         0.014 ±       0.125  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     128  thrpt    5         3.598 ±      30.982    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                128  thrpt    5      1219.993 ±    1167.993  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5    300353.378 ±  288349.134    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.799 ±       6.881  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5       198.500 ±    1709.144    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count                                                           128  thrpt    5         9.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time                                                            128  thrpt    5        39.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce                                                                       128  thrpt    5     18221.527 ±     504.742   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate                                                        128  thrpt    5       826.743 ±      22.635  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                                   128  thrpt    5     71414.275 ±      40.088    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       813.665 ±    1167.931  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5     70351.217 ±  102134.967    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count                                                             128  thrpt    5         6.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time                                                              128  thrpt    5        24.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala                                                                128  thrpt    5     20098.478 ±    1632.836   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                                 128  thrpt    5       851.792 ±      69.219  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                            128  thrpt    5     66696.023 ±       0.007    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                           128  thrpt    5       948.450 ±    1428.637  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5     74621.150 ±  116731.246    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count                                                      128  thrpt    5         7.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time                                                       128  thrpt    5        31.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala                                                               128  thrpt    5    617217.328 ±   29802.680   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                128  thrpt    5      1399.144 ±      67.517  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                           128  thrpt    5      3568.001 ±       0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                    128  thrpt    5         0.036 ±       0.301  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               128  thrpt    5         0.093 ±       0.776    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                          128  thrpt    5      1358.137 ±      16.569  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                     128  thrpt    5      3463.971 ±     209.284    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                   128  thrpt    5         0.932 ±       6.688  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                              128  thrpt    5         2.355 ±      16.899    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count                                                     128  thrpt    5        10.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time                                                      128  thrpt    5        25.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc                                                       128  thrpt    5    468064.162 ±    1888.286   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                        128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                   128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                             128  thrpt    5           ≈ 0                counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson                                                                    128  thrpt    5     19210.957 ±     338.763   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                                     128  thrpt    5       910.826 ±      16.139  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                                128  thrpt    5     74611.474 ±      27.102    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                               128  thrpt    5       948.537 ±    1428.901  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5     77705.092 ±  117101.447    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count                                                          128  thrpt    5         7.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time                                                           128  thrpt    5        32.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readCirce                                                                            128  thrpt    5     11052.616 ±     281.448   ops/s
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate                                                             128  thrpt    5      1110.273 ±      28.196  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm                                                        128  thrpt    5    158112.041 ±       0.014    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                       128  thrpt    5      1084.869 ±    1429.942  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5    154485.385 ±  203519.127    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.count                                                                  128  thrpt    5         8.000                counts
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.time                                                                   128  thrpt    5        29.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala                                                                     128  thrpt    5     11404.466 ±     150.471   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate                                                      128  thrpt    5      1044.133 ±      14.098  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                 128  thrpt    5    144082.889 ±      44.341    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5      1083.802 ±    1429.477  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5    149695.943 ±  198951.178    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5        18.321 ±     157.745    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count                                                           128  thrpt    5         8.000                counts
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time                                                            128  thrpt    5        37.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala                                                                    128  thrpt    5    253298.511 ±    2943.435   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                                     128  thrpt    5      1465.187 ±      16.629  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                128  thrpt    5      9104.002 ±       0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                         128  thrpt    5         0.027 ±       0.168  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    128  thrpt    5         0.167 ±       1.038    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5      1495.215 ±    1161.037  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5      9294.595 ±    7334.188    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         0.666 ±       5.735  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5         4.138 ±      35.627    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count                                                          128  thrpt    5        11.000                counts
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time                                                           128  thrpt    5        27.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readPlayJson                                                                         128  thrpt    5     10414.017 ±     522.246   ops/s
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate                                                          128  thrpt    5      1290.170 ±      64.842  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                     128  thrpt    5    194952.090 ±       0.417    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.002 ±       0.019  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         0.330 ±       2.840    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      1220.583 ±    1169.132  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5    184683.043 ±  179740.655    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         1.066 ±       5.000  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5       160.285 ±     746.076    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count                                                               128  thrpt    5         9.000                counts
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time                                                                128  thrpt    5        40.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeCirce                                                                           128  thrpt    5     28096.562 ±     348.267   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate                                                            128  thrpt    5       969.498 ±      12.130  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                                       128  thrpt    5     54312.015 ±       0.002    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       949.142 ±    1430.452  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5     53215.148 ±   80742.139    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5         7.447 ±      64.119    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count                                                                 128  thrpt    5         7.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time                                                                  128  thrpt    5        28.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala                                                                    128  thrpt    5     78536.877 ±     646.478   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                                     128  thrpt    5      1250.368 ±      10.778  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                128  thrpt    5     25056.005 ±       0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                         128  thrpt    5         0.025 ±       0.216  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    128  thrpt    5         0.505 ±       4.349    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5      1220.884 ±    1169.495  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5     24473.055 ±   23537.212    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         0.933 ±       6.689  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5        18.716 ±     134.284    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count                                                          128  thrpt    5         9.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time                                                           128  thrpt    5        38.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala                                                                   128  thrpt    5    976191.946 ±   45749.156   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                    128  thrpt    5      1339.735 ±      62.037  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                               128  thrpt    5      2160.000 ±       0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                        128  thrpt    5         0.036 ±       0.192  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   128  thrpt    5         0.057 ±       0.306    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                              128  thrpt    5      1357.533 ±      12.909  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5      2188.920 ±      90.946    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                       128  thrpt    5         0.932 ±       6.688  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                  128  thrpt    5         1.494 ±      10.701    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count                                                         128  thrpt    5        10.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time                                                          128  thrpt    5        29.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc                                                           128  thrpt    5   1093808.897 ±   42734.684   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                            128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                       128  thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                 128  thrpt    5           ≈ 0                counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson                                                                        128  thrpt    5     65108.985 ±    1099.419   ops/s
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate                                                         128  thrpt    5      1404.242 ±      23.638  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                                    128  thrpt    5     33944.006 ±       0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                             128  thrpt    5         0.013 ±       0.068  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        128  thrpt    5         0.307 ±       1.646    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                   128  thrpt    5      1357.961 ±      17.226  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5     32825.403 ±     195.755    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.933 ±       6.691  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5        22.612 ±     162.209    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count                                                              128  thrpt    5        10.000                counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time                                                               128  thrpt    5        35.000                    ms
[info] ArrayOfPeriodsBenchmark.readCirce                                                                                128  thrpt    5     19737.261 ±     476.767   ops/s
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate                                                                 128  thrpt    5       713.813 ±      17.527  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm                                                            128  thrpt    5     56920.022 ±       0.009    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                           128  thrpt    5       678.232 ±       0.923  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                      128  thrpt    5     54084.666 ±    1403.404    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.count                                                                      128  thrpt    5         5.000                counts
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.time                                                                       128  thrpt    5        18.000                    ms
[info] ArrayOfPeriodsBenchmark.readJacksonScala                                                                         128  thrpt    5     14942.336 ±    1012.309   ops/s
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate                                                          128  thrpt    5       418.547 ±      28.358  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                     128  thrpt    5     44088.392 ±       3.115    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       406.426 ±    1428.645  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5     43237.356 ±  152019.264    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count                                                               128  thrpt    5         3.000                counts
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time                                                                128  thrpt    5        13.000                    ms
[info] ArrayOfPeriodsBenchmark.readJsoniterScala                                                                        128  thrpt    5    101304.014 ±    1511.399   ops/s
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate                                                         128  thrpt    5       254.376 ±       3.779  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                    128  thrpt    5      3952.004 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       271.653 ±    1432.350  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5      4236.629 ±   22338.520    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count                                                              128  thrpt    5         2.000                counts
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time                                                               128  thrpt    5         6.000                    ms
[info] ArrayOfPeriodsBenchmark.readPlayJson                                                                             128  thrpt    5     13849.295 ±     202.355   ops/s
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate                                                              128  thrpt    5       874.771 ±      13.111  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                         128  thrpt    5     99392.442 ±       3.531    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                        128  thrpt    5       813.041 ±    1166.351  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5     92363.386 ±  132212.996    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.count                                                                   128  thrpt    5         6.000                counts
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.time                                                                    128  thrpt    5        27.000                    ms
[info] ArrayOfPeriodsBenchmark.writeCirce                                                                               128  thrpt    5     44581.297 ±     874.049   ops/s
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate                                                                128  thrpt    5       795.198 ±      15.412  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm                                                           128  thrpt    5     28072.009 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                          128  thrpt    5       813.751 ±    1167.639  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5     28748.279 ±   41624.579    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.count                                                                     128  thrpt    5         6.000                counts
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.time                                                                      128  thrpt    5        23.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJacksonScala                                                                        128  thrpt    5     78084.189 ±     904.913   ops/s
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate                                                         128  thrpt    5      1262.145 ±      14.732  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                    128  thrpt    5     25440.005 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                             128  thrpt    5         0.024 ±       0.203  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        128  thrpt    5         0.474 ±       4.080    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5      1221.007 ±    1170.241  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5     24618.119 ±   23680.369    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.799 ±       6.882  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5        16.068 ±     138.353    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count                                                              128  thrpt    5         9.000                counts
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time                                                               128  thrpt    5        35.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala                                                                       128  thrpt    5    249056.007 ±    1239.979   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                        128  thrpt    5       477.259 ±       2.505  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                   128  thrpt    5      3016.002 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       542.258 ±    1167.252  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5      3426.473 ±    7375.764    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         0.266 ±       1.405  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5         1.685 ±       8.883    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count                                                             128  thrpt    5         4.000                counts
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time                                                              128  thrpt    5        14.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc                                                               128  thrpt    5    313681.015 ±    1375.796   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                           128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                     128  thrpt    5           ≈ 0                counts
[info] ArrayOfPeriodsBenchmark.writePlayJson                                                                            128  thrpt    5     66799.336 ±    1861.871   ops/s
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate                                                             128  thrpt    5      1198.858 ±      33.275  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                        128  thrpt    5     28248.006 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 128  thrpt    5         0.014 ±       0.123  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            128  thrpt    5         0.333 ±       2.864    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                       128  thrpt    5      1220.119 ±    1168.078  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5     28747.375 ±   27500.906    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                128  thrpt    5         0.799 ±       6.882  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                           128  thrpt    5        18.687 ±     160.901    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.count                                                                  128  thrpt    5         9.000                counts
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.time                                                                   128  thrpt    5        35.000                    ms
[info] ArrayOfShortsBenchmark.readCirce                                                                                 128  thrpt    5    121590.422 ±    2071.657   ops/s
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate                                                                  128  thrpt    5      1761.469 ±      29.167  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm                                                             128  thrpt    5     22800.003 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      128  thrpt    5         0.012 ±       0.059  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 128  thrpt    5         0.151 ±       0.768    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                            128  thrpt    5      1769.121 ±    1433.707  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                       128  thrpt    5     22897.693 ±   18528.448    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                     128  thrpt    5         0.666 ±       5.736  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                128  thrpt    5         8.617 ±      74.194    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.count                                                                       128  thrpt    5        13.000                counts
[info] ArrayOfShortsBenchmark.readCirce:·gc.time                                                                        128  thrpt    5        25.000                    ms
[info] ArrayOfShortsBenchmark.readDslJsonJava                                                                           128  thrpt    5    628869.375 ±   53214.886   ops/s
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate                                                            128  thrpt    5       348.460 ±      29.291  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                       128  thrpt    5       872.001 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       269.908 ±    1423.147  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5       670.600 ±    3535.883    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.count                                                                 128  thrpt    5         2.000                counts
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.time                                                                  128  thrpt    5        10.000                    ms
[info] ArrayOfShortsBenchmark.readJacksonScala                                                                          128  thrpt    5    339444.293 ±    5987.365   ops/s
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate                                                           128  thrpt    5       353.670 ±       6.259  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                      128  thrpt    5      1640.001 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       406.416 ±    1428.609  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5      1890.000 ±    6643.681    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.count                                                                128  thrpt    5         3.000                counts
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.time                                                                 128  thrpt    5        14.000                    ms
[info] ArrayOfShortsBenchmark.readJsoniterScala                                                                         128  thrpt    5    760976.033 ±   24109.111   ops/s
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate                                                          128  thrpt    5       263.010 ±       8.338  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                     128  thrpt    5       544.001 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       271.246 ±    1430.201  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5       565.103 ±    2979.748    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.count                                                               128  thrpt    5         2.000                counts
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.time                                                                128  thrpt    5         6.000                    ms
[info] ArrayOfShortsBenchmark.readPlayJson                                                                              128  thrpt    5     69406.909 ±    1135.834   ops/s
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate                                                               128  thrpt    5      2976.648 ±      49.311  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                          128  thrpt    5     67504.006 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   128  thrpt    5         0.005 ±       0.010  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              128  thrpt    5         0.104 ±       0.223    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                         128  thrpt    5      2998.058 ±    1436.330  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5     68010.612 ±   33397.857    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.count                                                                    128  thrpt    5        22.000                counts
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.time                                                                     128  thrpt    5        28.000                    ms
[info] ArrayOfShortsBenchmark.writeCirce                                                                                128  thrpt    5    286918.300 ±    3253.861   ops/s
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate                                                                 128  thrpt    5      1499.198 ±      17.261  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm                                                            128  thrpt    5      8224.001 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                     128  thrpt    5         0.029 ±       0.253  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                128  thrpt    5         0.161 ±       1.383    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                           128  thrpt    5      1495.122 ±    1181.713  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                      128  thrpt    5      8200.002 ±    6432.375    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                    128  thrpt    5         0.666 ±       5.734  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                               128  thrpt    5         3.670 ±      31.602    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.count                                                                      128  thrpt    5        11.000                counts
[info] ArrayOfShortsBenchmark.writeCirce:·gc.time                                                                       128  thrpt    5        31.000                    ms
[info] ArrayOfShortsBenchmark.writeDslJsonJava                                                                          128  thrpt    5   1507311.045 ±   65242.188   ops/s
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                           128  thrpt    5       513.339 ±      22.364  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                      128  thrpt    5       536.000 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       404.756 ±    1422.774  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5       421.351 ±    1481.110    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5         0.139 ±       1.195    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count                                                                128  thrpt    5         3.000                counts
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time                                                                 128  thrpt    5        15.000                    ms
[info] ArrayOfShortsBenchmark.writeJacksonScala                                                                         128  thrpt    5   1463975.853 ±   72759.716   ops/s
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate                                                          128  thrpt    5       855.773 ±      42.316  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                     128  thrpt    5       920.000 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       948.507 ±    1429.501  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5      1022.598 ±    1576.829    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.count                                                               128  thrpt    5         7.000                counts
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.time                                                                128  thrpt    5        32.000                    ms
[info] ArrayOfShortsBenchmark.writeJsoniterScala                                                                        128  thrpt    5   1598529.266 ±   14709.278   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                         128  thrpt    5       544.430 ±       4.863  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                    128  thrpt    5       536.000 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       542.398 ±    1167.552  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5       534.500 ±    1150.553    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5         0.132 ±       1.132    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count                                                              128  thrpt    5         4.000                counts
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time                                                               128  thrpt    5        13.000                    ms
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc                                                                128  thrpt    5   1805171.584 ±   23865.331   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                 128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                            128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                      128  thrpt    5           ≈ 0                counts
[info] ArrayOfShortsBenchmark.writePlayJson                                                                             128  thrpt    5     34662.071 ±     736.541   ops/s
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate                                                              128  thrpt    5      1607.032 ±      34.674  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                         128  thrpt    5     72976.012 ±       0.002    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  128  thrpt    5         0.027 ±       0.209  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             128  thrpt    5         1.216 ±       9.507    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                        128  thrpt    5      1630.483 ±    1425.671  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5     74091.768 ±   65878.351    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                 128  thrpt    5         0.799 ±       6.882  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                            128  thrpt    5        36.321 ±     312.731    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.count                                                                   128  thrpt    5        12.000                counts
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.time                                                                    128  thrpt    5        34.000                    ms
[info] ArrayOfUUIDsBenchmark.readCirce                                                                                  128  thrpt    5     46180.410 ±     948.600   ops/s
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate                                                                   128  thrpt    5       922.040 ±      19.290  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm                                                              128  thrpt    5     31424.009 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                             128  thrpt    5       949.314 ±    1429.804  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                        128  thrpt    5     32391.869 ±   49262.749    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.count                                                                        128  thrpt    5         7.000                counts
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.time                                                                         128  thrpt    5        24.000                    ms
[info] ArrayOfUUIDsBenchmark.readJacksonScala                                                                           128  thrpt    5     84646.595 ±     705.058   ops/s
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate                                                            128  thrpt    5       892.300 ±       7.450  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                       128  thrpt    5     16592.005 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       812.785 ±    1166.888  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5     15122.825 ±   21878.458    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count                                                                 128  thrpt    5         6.000                counts
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time                                                                  128  thrpt    5        29.000                    ms
[info] ArrayOfUUIDsBenchmark.readJsoniterScala                                                                          128  thrpt    5    263433.909 ±    2354.526   ops/s
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate                                                           128  thrpt    5       856.892 ±       7.792  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                      128  thrpt    5      5120.002 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       813.646 ±    1167.456  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5      4865.050 ±    7042.020    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count                                                                128  thrpt    5         6.000                counts
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time                                                                 128  thrpt    5        20.000                    ms
[info] ArrayOfUUIDsBenchmark.readPlayJson                                                                               128  thrpt    5     23466.277 ±     296.810   ops/s
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate                                                                128  thrpt    5      1102.597 ±      14.161  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                           128  thrpt    5     73960.018 ±       0.003    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                          128  thrpt    5      1083.751 ±    1428.500  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5     72727.192 ±   96199.958    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                   128  thrpt    5         0.799 ±       6.882  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                              128  thrpt    5        53.658 ±     462.016    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.count                                                                     128  thrpt    5         8.000                counts
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.time                                                                      128  thrpt    5        38.000                    ms
[info] ArrayOfUUIDsBenchmark.writeCirce                                                                                 128  thrpt    5     59428.829 ±     295.658   ops/s
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate                                                                  128  thrpt    5       881.751 ±       4.133  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm                                                             128  thrpt    5     23352.007 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                            128  thrpt    5       813.730 ±    1168.073  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                       128  thrpt    5     21557.917 ±   31076.970    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.count                                                                       128  thrpt    5         6.000                counts
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.time                                                                        128  thrpt    5        24.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJacksonScala                                                                          128  thrpt    5     96831.819 ±     963.879   ops/s
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate                                                           128  thrpt    5      1326.338 ±      13.266  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                      128  thrpt    5     21560.008 ±       0.035    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                               128  thrpt    5         0.015 ±       0.133  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          128  thrpt    5         0.250 ±       2.152    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5      1356.754 ±      15.076  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5     22054.436 ±     134.109    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         1.066 ±       6.437  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5        17.342 ±     104.763    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count                                                                128  thrpt    5        10.000                counts
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time                                                                 128  thrpt    5        39.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala                                                                         128  thrpt    5    290620.454 ±    8998.520   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                          128  thrpt    5       926.213 ±      29.054  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                     128  thrpt    5      5016.001 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       948.685 ±    1427.687  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5      5146.069 ±    7847.980    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.266 ±       1.405  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5         1.451 ±       7.651    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count                                                               128  thrpt    5         7.000                counts
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time                                                                128  thrpt    5        25.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc                                                                 128  thrpt    5    321525.019 ±   18707.470   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                  128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                             128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                       128  thrpt    5           ≈ 0                counts
[info] ArrayOfUUIDsBenchmark.writePlayJson                                                                              128  thrpt    5     80101.238 ±     774.459   ops/s
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate                                                               128  thrpt    5      1187.245 ±      11.528  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                          128  thrpt    5     23328.000 ±       0.106    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   128  thrpt    5         0.018 ±       0.152  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              128  thrpt    5         0.346 ±       2.976    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                         128  thrpt    5      1220.199 ±    1168.612  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5     23978.634 ±   23001.363    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                  128  thrpt    5         0.799 ±       6.883  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                             128  thrpt    5        15.650 ±     134.753    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.count                                                                    128  thrpt    5         9.000                counts
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.time                                                                     128  thrpt    5        35.000                    ms
[info] ArrayOfYearMonthsBenchmark.readCirce                                                                             128  thrpt    5     23571.622 ±     139.005   ops/s
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate                                                              128  thrpt    5      1227.783 ±       7.375  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate.norm                                                         128  thrpt    5     81984.018 ±       0.003    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  128  thrpt    5         0.008 ±       0.071  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             128  thrpt    5         0.551 ±       4.741    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                        128  thrpt    5      1221.156 ±    1169.059  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5     81551.971 ±   78196.487    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                 128  thrpt    5         0.666 ±       5.735  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                            128  thrpt    5        44.395 ±     382.258    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.count                                                                   128  thrpt    5         9.000                counts
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.time                                                                    128  thrpt    5        35.000                    ms
[info] ArrayOfYearMonthsBenchmark.readJacksonScala                                                                      128  thrpt    5     26406.536 ±     544.516   ops/s
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate                                                       128  thrpt    5      1034.193 ±      21.248  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                  128  thrpt    5     61648.016 ±       0.002    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5      1083.353 ±    1427.214  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5     64656.894 ±   86031.152    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         0.400 ±       1.405  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5        23.897 ±      84.004    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.count                                                            128  thrpt    5         8.000                counts
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.time                                                             128  thrpt    5        37.000                    ms
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala                                                                     128  thrpt    5    483603.492 ±   25926.762   ops/s
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate                                                      128  thrpt    5      1258.540 ±      67.788  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                 128  thrpt    5      4096.001 ±       0.001    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                          128  thrpt    5         0.032 ±       0.274  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     128  thrpt    5         0.105 ±       0.906    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5      1221.913 ±    1170.727  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5      3983.025 ±    3889.119    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.666 ±       5.735  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5         2.198 ±      18.921    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.count                                                           128  thrpt    5         9.000                counts
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.time                                                            128  thrpt    5        30.000                    ms
[info] ArrayOfYearMonthsBenchmark.readPlayJson                                                                          128  thrpt    5     20349.911 ±    1352.523   ops/s
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate                                                           128  thrpt    5      1547.642 ±     103.359  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                      128  thrpt    5    119696.021 ±       0.010    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                               128  thrpt    5         0.010 ±       0.087  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          128  thrpt    5         0.773 ±       6.658    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                     128  thrpt    5      1494.642 ±    1183.291  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5    115500.692 ±   88098.987    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         1.066 ±       7.822  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5        82.036 ±     601.624    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.count                                                                128  thrpt    5        11.000                counts
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.time                                                                 128  thrpt    5        34.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeCirce                                                                            128  thrpt    5     68994.315 ±    3216.092   ops/s
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate                                                             128  thrpt    5      1460.611 ±      68.330  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate.norm                                                        128  thrpt    5     33312.006 ±       0.001    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 128  thrpt    5         0.032 ±       0.275  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            128  thrpt    5         0.727 ±       6.193    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                       128  thrpt    5      1359.164 ±      14.329  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5     31001.517 ±    1294.632    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                128  thrpt    5         0.666 ±       5.736  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                           128  thrpt    5        15.150 ±     130.446    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.count                                                                  128  thrpt    5        10.000                counts
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.time                                                                   128  thrpt    5        29.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala                                                                     128  thrpt    5    120261.213 ±    5745.725   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate                                                      128  thrpt    5      1146.129 ±      54.554  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                 128  thrpt    5     15000.003 ±       0.001    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                          128  thrpt    5         0.018 ±       0.158  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     128  thrpt    5         0.245 ±       2.109    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5      1220.140 ±    1168.140  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5     15991.027 ±   15572.684    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.799 ±       6.883  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5        10.658 ±      91.770    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.count                                                           128  thrpt    5         9.000                counts
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.time                                                            128  thrpt    5        39.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala                                                                    128  thrpt    5   1745271.418 ±   38838.307   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                     128  thrpt    5      1446.024 ±      31.849  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                128  thrpt    5      1304.000 ±       0.001    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                         128  thrpt    5         0.017 ±       0.095  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    128  thrpt    5         0.015 ±       0.086    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5      1494.377 ±    1166.133  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5      1348.399 ±    1074.750    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         0.799 ±       6.882  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5         0.725 ±       6.244    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.count                                                          128  thrpt    5        11.000                counts
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.time                                                           128  thrpt    5        28.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc                                                            128  thrpt    5   1972423.738 ±    2467.502   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                             128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                        128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                  128  thrpt    5           ≈ 0                counts
[info] ArrayOfYearMonthsBenchmark.writePlayJson                                                                         128  thrpt    5    121852.164 ±    4546.843   ops/s
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate                                                          128  thrpt    5      1373.837 ±      51.602  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                     128  thrpt    5     17744.003 ±       0.001    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.011 ±       0.059  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         0.144 ±       0.761    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      1357.461 ±      19.307  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5     17534.097 ±     819.336    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         1.066 ±       7.821  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5        13.724 ±     100.731    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.count                                                               128  thrpt    5        10.000                counts
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.time                                                                128  thrpt    5        35.000                    ms
[info] ArrayOfYearsBenchmark.readJacksonScala                                                                           128  thrpt    5     33040.709 ±     335.112   ops/s
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate                                                            128  thrpt    5      1186.707 ±      11.536  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                       128  thrpt    5     56528.013 ±       0.002    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                128  thrpt    5         0.018 ±       0.155  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           128  thrpt    5         0.855 ±       7.358    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                      128  thrpt    5      1084.472 ±    1425.231  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5     51691.226 ±   68296.459    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         1.066 ±       6.438  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5        50.824 ±     307.081    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.count                                                                 128  thrpt    5         8.000                counts
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.time                                                                  128  thrpt    5        34.000                    ms
[info] ArrayOfYearsBenchmark.readJsoniterScala                                                                          128  thrpt    5    679866.508 ±    5767.256   ops/s
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate                                                           128  thrpt    5      1327.002 ±      11.388  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                      128  thrpt    5      3072.001 ±       0.001    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                               128  thrpt    5         0.028 ±       0.162  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          128  thrpt    5         0.064 ±       0.376    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5      1358.190 ±      11.344  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5      3144.219 ±      47.138    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         0.666 ±       5.736  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5         1.547 ±      13.321    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.count                                                                128  thrpt    5        10.000                counts
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.time                                                                 128  thrpt    5        28.000                    ms
[info] ArrayOfYearsBenchmark.readPlayJson                                                                               128  thrpt    5     24803.578 ±    1131.425   ops/s
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate                                                                128  thrpt    5      1805.368 ±      82.802  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                           128  thrpt    5    114560.017 ±       0.003    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    128  thrpt    5         0.009 ±       0.076  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               128  thrpt    5         0.582 ±       4.788    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                          128  thrpt    5      1767.879 ±    1431.728  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5    112238.358 ±   91955.578    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                   128  thrpt    5         0.933 ±       8.032  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                              128  thrpt    5        58.994 ±     507.956    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.count                                                                     128  thrpt    5        13.000                counts
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.time                                                                      128  thrpt    5        38.000                    ms
[info] ArrayOfYearsBenchmark.writeJacksonScala                                                                          128  thrpt    5    352863.903 ±   18333.359   ops/s
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate                                                           128  thrpt    5       980.969 ±      51.149  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                      128  thrpt    5      4376.001 ±       0.001    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       948.175 ±    1429.029  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5      4240.702 ±    6526.274    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5         0.590 ±       5.079    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.count                                                                128  thrpt    5         7.000                counts
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.time                                                                 128  thrpt    5        37.000                    ms
[info] ArrayOfYearsBenchmark.writeJsoniterScala                                                                         128  thrpt    5   2234176.211 ±  102174.642   ops/s
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                          128  thrpt    5      1305.883 ±      59.607  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                     128  thrpt    5       920.000 ±       0.001    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.036 ±       0.202  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         0.026 ±       0.144    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      1357.339 ±      13.413  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5       956.381 ±      52.805    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.933 ±       6.689  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5         0.661 ±       4.754    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.count                                                               128  thrpt    5        10.000                counts
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.time                                                                128  thrpt    5        29.000                    ms
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc                                                                 128  thrpt    5   2266009.778 ±   40913.303   ops/s
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                  128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                             128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                       128  thrpt    5           ≈ 0                counts
[info] ArrayOfYearsBenchmark.writePlayJson                                                                              128  thrpt    5    220648.067 ±    8408.298   ops/s
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate                                                               128  thrpt    5      1426.685 ±      55.089  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                          128  thrpt    5     10176.002 ±       0.001    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   128  thrpt    5         0.019 ±       0.104  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              128  thrpt    5         0.134 ±       0.742    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                         128  thrpt    5      1493.692 ±    1154.753  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5     10646.853 ±    8001.193    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                  128  thrpt    5         1.066 ±       6.688  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                             128  thrpt    5         7.666 ±      48.349    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.count                                                                    128  thrpt    5        11.000                counts
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.time                                                                     128  thrpt    5        37.000                    ms
[info] ArrayOfZoneIdsBenchmark.readCirce                                                                                128  thrpt    5     74876.619 ±    1109.579   ops/s
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate                                                                 128  thrpt    5      1407.370 ±      21.343  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm                                                            128  thrpt    5     29576.006 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                     128  thrpt    5         0.035 ±       0.270  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                128  thrpt    5         0.743 ±       5.691    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                           128  thrpt    5      1492.329 ±    1149.540  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                      128  thrpt    5     31356.990 ±   24012.117    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                    128  thrpt    5         0.797 ±       6.862  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                               128  thrpt    5        16.719 ±     143.952    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.count                                                                      128  thrpt    5        11.000                counts
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.time                                                                       128  thrpt    5        33.000                    ms
[info] ArrayOfZoneIdsBenchmark.readJacksonScala                                                                         128  thrpt    5     78873.416 ±    1079.540   ops/s
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate                                                          128  thrpt    5       909.229 ±      12.836  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                     128  thrpt    5     18144.005 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       811.940 ±    1163.846  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5     16219.345 ±   23547.361    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5         2.674 ±      23.027    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count                                                               128  thrpt    5         6.000                counts
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time                                                                128  thrpt    5        29.000                    ms
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala                                                                        128  thrpt    5    100654.279 ±    2896.555   ops/s
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate                                                         128  thrpt    5      1060.105 ±      29.811  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                    128  thrpt    5     16576.004 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5      1083.957 ±    1429.196  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5     16981.247 ±   22737.390    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count                                                              128  thrpt    5         8.000                counts
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time                                                               128  thrpt    5        29.000                    ms
[info] ArrayOfZoneIdsBenchmark.readPlayJson                                                                             128  thrpt    5     42391.348 ±     263.453   ops/s
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate                                                              128  thrpt    5      2033.969 ±      13.159  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                         128  thrpt    5     75528.010 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  128  thrpt    5         0.025 ±       0.125  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             128  thrpt    5         0.945 ±       4.655    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                        128  thrpt    5      2042.119 ±      15.697  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5     75830.932 ±     963.305    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                 128  thrpt    5         0.932 ±       8.029  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                            128  thrpt    5        34.561 ±     297.579    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count                                                                   128  thrpt    5        15.000                counts
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time                                                                    128  thrpt    5        31.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeCirce                                                                               128  thrpt    5    130036.930 ±    4548.920   ops/s
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate                                                                128  thrpt    5       577.013 ±      20.474  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm                                                           128  thrpt    5      6984.003 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                          128  thrpt    5       541.811 ±    1166.288  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5      6549.458 ±   14100.998    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                   128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                              128  thrpt    5         1.587 ±      13.667    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.count                                                                     128  thrpt    5         4.000                counts
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.time                                                                      128  thrpt    5        17.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala                                                                        128  thrpt    5    175874.137 ±    2789.396   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate                                                         128  thrpt    5       261.018 ±       4.208  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                    128  thrpt    5      2336.002 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       270.534 ±    1426.447  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5      2431.566 ±   12820.960    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5         1.199 ±      10.326    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count                                                              128  thrpt    5         2.000                counts
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time                                                               128  thrpt    5        10.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala                                                                       128  thrpt    5    742298.858 ±   27522.708   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                        128  thrpt    5       920.586 ±      34.354  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                   128  thrpt    5      1952.001 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       948.348 ±    1428.344  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5      2011.576 ±    3037.377    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count                                                             128  thrpt    5         7.000                counts
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time                                                              128  thrpt    5        26.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc                                                               128  thrpt    5    730762.310 ±  124149.134   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                           128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                     128  thrpt    5           ≈ 0                counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson                                                                            128  thrpt    5    206961.175 ±    2263.505   ops/s
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate                                                             128  thrpt    5       678.432 ±       7.422  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                        128  thrpt    5      5160.002 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                       128  thrpt    5       676.543 ±       0.937  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5      5145.662 ±      53.081    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                           128  thrpt    5         1.016 ±       8.744    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count                                                                  128  thrpt    5         5.000                counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time                                                                   128  thrpt    5        24.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readCirce                                                                            128  thrpt    5    128145.419 ±    2438.279   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate                                                             128  thrpt    5      1578.280 ±      30.764  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm                                                        128  thrpt    5     19384.003 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 128  thrpt    5         0.030 ±       0.183  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            128  thrpt    5         0.364 ±       2.244    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                       128  thrpt    5      1631.330 ±    1433.599  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5     20042.314 ±   17756.172    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                128  thrpt    5         0.799 ±       5.562  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                           128  thrpt    5         9.830 ±      68.364    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count                                                                  128  thrpt    5        12.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time                                                                   128  thrpt    5        32.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala                                                                     128  thrpt    5    157336.882 ±    2980.650   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate                                                      128  thrpt    5       839.685 ±      16.004  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                 128  thrpt    5      8400.003 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5       812.789 ±    1165.323  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5      8142.132 ±   11871.751    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5         1.344 ±      11.568    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count                                                           128  thrpt    5         6.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time                                                            128  thrpt    5        27.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala                                                                    128  thrpt    5    425692.989 ±   67078.245   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate                                                     128  thrpt    5       826.438 ±     130.191  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                128  thrpt    5      3056.001 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5       813.606 ±    1167.557  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5      3008.377 ±    4257.911    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count                                                          128  thrpt    5         6.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time                                                           128  thrpt    5        20.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson                                                                         128  thrpt    5     62388.741 ±    1240.455   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate                                                          128  thrpt    5      2633.901 ±      52.432  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                     128  thrpt    5     66448.007 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.016 ±       0.129  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         0.395 ±       3.250    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      2725.657 ±       1.344  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5     68764.294 ±    1365.820    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count                                                               128  thrpt    5        20.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time                                                                128  thrpt    5        33.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeCirce                                                                           128  thrpt    5    183849.939 ±    1355.196   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate                                                            128  thrpt    5       632.674 ±       5.016  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm                                                       128  thrpt    5      5416.002 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       678.125 ±       0.590  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5      5805.100 ±      42.517    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count                                                                 128  thrpt    5         5.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time                                                                  128  thrpt    5        19.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala                                                                    128  thrpt    5    305141.235 ±    3281.332   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate                                                     128  thrpt    5       300.885 ±       3.250  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                128  thrpt    5      1552.001 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5       270.937 ±    1428.575  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5      1400.731 ±    7385.667    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count                                                          128  thrpt    5         2.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time                                                           128  thrpt    5         9.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala                                                                   128  thrpt    5   1528483.825 ±   57748.914   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                    128  thrpt    5      1134.309 ±      42.718  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                               128  thrpt    5      1168.000 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                              128  thrpt    5      1084.310 ±    1430.255  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5      1119.501 ±    1508.515    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                       128  thrpt    5         0.932 ±       6.688  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                  128  thrpt    5         0.965 ±       6.919    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count                                                         128  thrpt    5         8.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time                                                          128  thrpt    5        28.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc                                                           128  thrpt    5   1613167.488 ±    1454.133   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                            128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                       128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                 128  thrpt    5           ≈ 0                counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson                                                                        128  thrpt    5    293249.007 ±    4005.157   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate                                                         128  thrpt    5       797.364 ±      10.896  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                    128  thrpt    5      4280.001 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       812.297 ±    1166.309  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5      4362.077 ±    6297.019    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.266 ±       1.405  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5         1.434 ±       7.562    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count                                                              128  thrpt    5         6.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time                                                               128  thrpt    5        29.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readCirce                                                                         128  thrpt    5      4523.368 ±     146.797   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate                                                          128  thrpt    5       890.441 ±      29.024  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                                     128  thrpt    5    309840.094 ±       0.014    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       810.347 ±    1162.984  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5    282034.097 ±  405689.645    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count                                                               128  thrpt    5         6.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time                                                                128  thrpt    5        29.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala                                                                  128  thrpt    5      4191.171 ±      52.652   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                                   128  thrpt    5       778.623 ±       9.811  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                              128  thrpt    5    292424.100 ±       0.016    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                             128  thrpt    5       674.489 ±       1.204  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5    253317.051 ±    3072.694    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                      128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                 128  thrpt    5        50.111 ±     431.472    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count                                                        128  thrpt    5         5.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time                                                         128  thrpt    5        29.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala                                                                 128  thrpt    5     41837.747 ±     525.668   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                                  128  thrpt    5       685.847 ±       8.898  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                             128  thrpt    5     25800.010 ±       0.001    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                            128  thrpt    5       675.846 ±       1.662  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5     25424.012 ±     285.817    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                     128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                128  thrpt    5         5.009 ±      43.129    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count                                                       128  thrpt    5         5.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time                                                        128  thrpt    5        22.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson                                                                      128  thrpt    5      3973.072 ±     138.158   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                                       128  thrpt    5      1012.215 ±      35.356  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                  128  thrpt    5    400992.104 ±       0.015    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                 128  thrpt    5      1079.439 ±    1422.984  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5    428206.849 ±  570816.506    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count                                                            128  thrpt    5         8.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time                                                             128  thrpt    5        47.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeCirce                                                                        128  thrpt    5     14337.189 ±     420.651   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate                                                         128  thrpt    5       798.307 ±      23.359  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                                    128  thrpt    5     87638.057 ±      52.654    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       810.462 ±    1163.173  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5     89149.437 ±  131052.934    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count                                                              128  thrpt    5         6.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time                                                               128  thrpt    5        29.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala                                                                 128  thrpt    5     16275.464 ±     298.036   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                                  128  thrpt    5       843.125 ±      15.312  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                             128  thrpt    5     81536.027 ±       0.010    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                            128  thrpt    5       944.578 ±    1422.746  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5     91391.181 ±  138197.659    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count                                                       128  thrpt    5         7.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time                                                        128  thrpt    5        38.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala                                                                128  thrpt    5    283768.627 ±   16322.834   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                 128  thrpt    5      1001.034 ±      57.416  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                            128  thrpt    5      5552.001 ±       0.001    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                           128  thrpt    5       945.883 ±    1424.678  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5      5259.615 ±    8082.007    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                    128  thrpt    5         0.266 ±       1.405  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                               128  thrpt    5         1.470 ±       7.753    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count                                                      128  thrpt    5         7.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time                                                       128  thrpt    5        31.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc                                                        128  thrpt    5    307552.046 ±   30280.808   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                         128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                    128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                              128  thrpt    5           ≈ 0                counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson                                                                     128  thrpt    5     15100.991 ±     247.486   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                                      128  thrpt    5       858.043 ±      14.049  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                                 128  thrpt    5     89432.323 ±      31.071    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                128  thrpt    5       944.609 ±    1422.986  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5     98564.680 ±  149845.995    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count                                                           128  thrpt    5         7.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time                                                            128  thrpt    5        38.000                    ms
[info] BitSetBenchmark.readJsoniterScala                                                                                128  thrpt    5    884686.865 ±    5007.376   ops/s
[info] BitSetBenchmark.readJsoniterScala:·gc.alloc.rate                                                                 128  thrpt    5        35.976 ±       0.229  MB/sec
[info] BitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                            128  thrpt    5        64.000 ±       0.001    B/op
[info] BitSetBenchmark.readJsoniterScala:·gc.count                                                                      128  thrpt    5           ≈ 0                counts
[info] BitSetBenchmark.readPlayJson                                                                                     128  thrpt    5     68982.194 ±     882.432   ops/s
[info] BitSetBenchmark.readPlayJson:·gc.alloc.rate                                                                      128  thrpt    5      3112.555 ±      39.580  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.alloc.rate.norm                                                                 128  thrpt    5     71024.006 ±       0.001    B/op
[info] BitSetBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                          128  thrpt    5         0.006 ±       0.017  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                     128  thrpt    5         0.127 ±       0.399    B/op
[info] BitSetBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                                128  thrpt    5      3134.184 ±    1437.531  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                           128  thrpt    5     71538.956 ±   33607.657    B/op
[info] BitSetBenchmark.readPlayJson:·gc.count                                                                           128  thrpt    5        23.000                counts
[info] BitSetBenchmark.readPlayJson:·gc.time                                                                            128  thrpt    5        38.000                    ms
[info] BitSetBenchmark.writeJacksonScala                                                                                128  thrpt    5    977892.249 ±   25031.106   ops/s
[info] BitSetBenchmark.writeJacksonScala:·gc.alloc.rate                                                                 128  thrpt    5       561.598 ±      14.363  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                            128  thrpt    5       904.000 ±       0.001    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                           128  thrpt    5       541.862 ±    1166.398  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                      128  thrpt    5       874.189 ±    1881.851    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.count                                                                      128  thrpt    5         4.000                counts
[info] BitSetBenchmark.writeJacksonScala:·gc.time                                                                       128  thrpt    5        19.000                    ms
[info] BitSetBenchmark.writeJsoniterScala                                                                               128  thrpt    5    692792.381 ±    5338.358   ops/s
[info] BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate                                                                128  thrpt    5       186.644 ±       1.505  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                           128  thrpt    5       424.001 ±       0.001    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                          128  thrpt    5       135.604 ±    1167.589  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5       309.131 ±    2661.710    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.count                                                                     128  thrpt    5         1.000                counts
[info] BitSetBenchmark.writeJsoniterScala:·gc.time                                                                      128  thrpt    5         4.000                    ms
[info] BitSetBenchmark.writeJsoniterScalaPrealloc                                                                       128  thrpt    5   1518008.864 ±    2018.009   ops/s
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                        128  thrpt    5        15.431 ±       0.019  MB/sec
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                                   128  thrpt    5        16.000 ±       0.001    B/op
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                             128  thrpt    5           ≈ 0                counts
[info] BitSetBenchmark.writePlayJson                                                                                    128  thrpt    5     39626.872 ±     707.251   ops/s
[info] BitSetBenchmark.writePlayJson:·gc.alloc.rate                                                                     128  thrpt    5      1663.146 ±      29.862  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.alloc.rate.norm                                                                128  thrpt    5     66064.010 ±       0.001    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                         128  thrpt    5         0.006 ±       0.048  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                    128  thrpt    5         0.236 ±       1.921    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                               128  thrpt    5      1631.899 ±    1448.685  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                          128  thrpt    5     64801.755 ±   57054.774    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                        128  thrpt    5         0.932 ±       8.028  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                                   128  thrpt    5        37.184 ±     320.170    B/op
[info] BitSetBenchmark.writePlayJson:·gc.count                                                                          128  thrpt    5        12.000                counts
[info] BitSetBenchmark.writePlayJson:·gc.time                                                                           128  thrpt    5        31.000                    ms
[info] ExtractFieldsBenchmark.readCirce                                                                                 N/A  thrpt    5    637621.121 ±   23659.378   ops/s
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate                                                                  N/A  thrpt    5      2035.233 ±      75.693  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm                                                             N/A  thrpt    5      5024.001 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      N/A  thrpt    5         0.028 ±       0.232  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 N/A  thrpt    5         0.068 ±       0.573    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                            N/A  thrpt    5      2042.127 ±      17.901  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                       N/A  thrpt    5      5041.364 ±     177.233    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                     N/A  thrpt    5         0.666 ±       5.734  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                N/A  thrpt    5         1.653 ±      14.231    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.count                                                                       N/A  thrpt    5        15.000                counts
[info] ExtractFieldsBenchmark.readCirce:·gc.time                                                                        N/A  thrpt    5        34.000                    ms
[info] ExtractFieldsBenchmark.readDslJsonJava                                                                           N/A  thrpt    5   5215885.694 ±  276290.594   ops/s
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate                                                            N/A  thrpt    5       318.135 ±      16.807  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                       N/A  thrpt    5        96.000 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                      N/A  thrpt    5       404.865 ±    1423.159  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                 N/A  thrpt    5       122.693 ±     431.344    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.count                                                                 N/A  thrpt    5         3.000                counts
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.time                                                                  N/A  thrpt    5        16.000                    ms
[info] ExtractFieldsBenchmark.readJacksonScala                                                                          N/A  thrpt    5    778449.526 ±   27194.071   ops/s
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate                                                           N/A  thrpt    5       965.330 ±      33.874  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                      N/A  thrpt    5      1952.001 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                     N/A  thrpt    5      1083.490 ±    1428.806  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                N/A  thrpt    5      2192.781 ±    2911.588    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                              N/A  thrpt    5         0.133 ±       1.147  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                         N/A  thrpt    5         0.271 ±       2.334    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.count                                                                N/A  thrpt    5         8.000                counts
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.time                                                                 N/A  thrpt    5        40.000                    ms
[info] ExtractFieldsBenchmark.readJsoniterScala                                                                         N/A  thrpt    5   7121568.865 ±  179858.277   ops/s
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate                                                          N/A  thrpt    5       325.754 ±       8.173  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                     N/A  thrpt    5        72.000 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                    N/A  thrpt    5       271.235 ±    1430.145  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               N/A  thrpt    5        60.249 ±     317.684    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.count                                                               N/A  thrpt    5         2.000                counts
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.time                                                                N/A  thrpt    5         6.000                    ms
[info] ExtractFieldsBenchmark.readPlayJson                                                                              N/A  thrpt    5    274856.409 ±    4056.761   ops/s
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate                                                               N/A  thrpt    5      1424.940 ±      21.055  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                          N/A  thrpt    5      8160.002 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   N/A  thrpt    5         0.027 ±       0.234  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              N/A  thrpt    5         0.155 ±       1.333    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                         N/A  thrpt    5      1492.827 ±    1186.813  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                    N/A  thrpt    5      8545.086 ±    6684.631    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                  N/A  thrpt    5         1.066 ±       7.822  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                             N/A  thrpt    5         6.107 ±      44.810    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.count                                                                    N/A  thrpt    5        11.000                counts
[info] ExtractFieldsBenchmark.readPlayJson:·gc.time                                                                     N/A  thrpt    5        40.000                    ms
[info] GeoJSONBenchmark.readCirce                                                                                       N/A  thrpt    5      3643.811 ±      90.874   ops/s
[info] GeoJSONBenchmark.readCirce:·gc.alloc.rate                                                                        N/A  thrpt    5      1720.927 ±      43.676  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.alloc.rate.norm                                                                   N/A  thrpt    5    743312.114 ±       0.017    B/op
[info] GeoJSONBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                            N/A  thrpt    5         0.135 ±       0.421  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                       N/A  thrpt    5        58.421 ±     183.176    B/op
[info] GeoJSONBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                                  N/A  thrpt    5      1768.680 ±    1432.555  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                             N/A  thrpt    5    763913.172 ±  617971.953    B/op
[info] GeoJSONBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                           N/A  thrpt    5         0.799 ±       5.561  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                      N/A  thrpt    5       343.437 ±    2386.973    B/op
[info] GeoJSONBenchmark.readCirce:·gc.count                                                                             N/A  thrpt    5        13.000                counts
[info] GeoJSONBenchmark.readCirce:·gc.time                                                                              N/A  thrpt    5        29.000                    ms
[info] GeoJSONBenchmark.readJacksonScala                                                                                N/A  thrpt    5      4780.198 ±     177.634   ops/s
[info] GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate                                                                 N/A  thrpt    5      1975.393 ±      72.725  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                            N/A  thrpt    5    650392.088 ±       0.015    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                     N/A  thrpt    5         0.012 ±       0.026  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                N/A  thrpt    5         3.847 ±       8.663    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                           N/A  thrpt    5      2041.169 ±      24.428  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                      N/A  thrpt    5    672096.911 ±   25643.096    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                                    N/A  thrpt    5         0.932 ±       6.687  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                               N/A  thrpt    5       307.035 ±    2205.328    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.count                                                                      N/A  thrpt    5        15.000                counts
[info] GeoJSONBenchmark.readJacksonScala:·gc.time                                                                       N/A  thrpt    5        32.000                    ms
[info] GeoJSONBenchmark.readJsoniterScala                                                                               N/A  thrpt    5     42308.907 ±     455.404   ops/s
[info] GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate                                                                N/A  thrpt    5       703.922 ±       7.793  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                           N/A  thrpt    5     26184.010 ±       0.001    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                          N/A  thrpt    5       814.607 ±    1169.032  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                     N/A  thrpt    5     30312.564 ±   43702.285    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.count                                                                     N/A  thrpt    5         6.000                counts
[info] GeoJSONBenchmark.readJsoniterScala:·gc.time                                                                      N/A  thrpt    5        20.000                    ms
[info] GeoJSONBenchmark.writeCirce                                                                                      N/A  thrpt    5      4161.171 ±      23.792   ops/s
[info] GeoJSONBenchmark.writeCirce:·gc.alloc.rate                                                                       N/A  thrpt    5       765.745 ±       4.143  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.alloc.rate.norm                                                                  N/A  thrpt    5    289616.101 ±       0.017    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                                 N/A  thrpt    5       678.056 ±       0.147  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                            N/A  thrpt    5    256451.124 ±    1431.694    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.count                                                                            N/A  thrpt    5         5.000                counts
[info] GeoJSONBenchmark.writeCirce:·gc.time                                                                             N/A  thrpt    5        20.000                    ms
[info] GeoJSONBenchmark.writeJacksonScala                                                                               N/A  thrpt    5      4338.361 ±      23.867   ops/s
[info] GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate                                                                N/A  thrpt    5       435.134 ±       2.422  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                           N/A  thrpt    5    157861.364 ±       2.163    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                          N/A  thrpt    5       541.130 ±    1164.823  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                     N/A  thrpt    5    196225.601 ±  422392.591    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                                   N/A  thrpt    5         0.133 ±       1.147  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                              N/A  thrpt    5        48.221 ±     415.201    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.count                                                                     N/A  thrpt    5         4.000                counts
[info] GeoJSONBenchmark.writeJacksonScala:·gc.time                                                                      N/A  thrpt    5        21.000                    ms
[info] GeoJSONBenchmark.writeJsoniterScala                                                                              N/A  thrpt    5      6493.539 ±      66.447   ops/s
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate                                                               N/A  thrpt    5       173.522 ±       1.820  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                          N/A  thrpt    5     42056.064 ±       0.008    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                         N/A  thrpt    5       135.588 ±    1167.451  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                    N/A  thrpt    5     33022.440 ±  284333.166    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.count                                                                    N/A  thrpt    5         1.000                counts
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.time                                                                     N/A  thrpt    5         4.000                    ms
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc                                                                      N/A  thrpt    5      6598.821 ±     326.948   ops/s
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                       N/A  thrpt    5       128.091 ±       6.360  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                                  N/A  thrpt    5     30552.062 ±       0.003    B/op
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                                 N/A  thrpt    5       136.396 ±    1174.414  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                                            N/A  thrpt    5     33299.483 ±  286718.590    B/op
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                            N/A  thrpt    5         1.000                counts
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                             N/A  thrpt    5         3.000                    ms
[info] GoogleMapsAPIBenchmark.readCirce                                                                                 N/A  thrpt    5      7352.472 ±     308.614   ops/s
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate                                                                  N/A  thrpt    5      1674.938 ±      70.590  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm                                                             N/A  thrpt    5    358550.062 ±      40.012    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      N/A  thrpt    5         0.031 ±       0.173  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 N/A  thrpt    5         6.593 ±      36.863    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                            N/A  thrpt    5      1631.917 ±    1430.876  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                       N/A  thrpt    5    349900.497 ±  318630.799    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                     N/A  thrpt    5         0.666 ±       5.734  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                N/A  thrpt    5       142.605 ±    1227.874    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.count                                                                       N/A  thrpt    5        12.000                counts
[info] GoogleMapsAPIBenchmark.readCirce:·gc.time                                                                        N/A  thrpt    5        45.000                    ms
[info] GoogleMapsAPIBenchmark.readDslJsonJava                                                                           N/A  thrpt    5     11156.241 ±    1026.980   ops/s
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate                                                            N/A  thrpt    5       257.177 ±      23.629  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                       N/A  thrpt    5     36280.038 ±       0.009    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                      N/A  thrpt    5       269.917 ±    1423.192  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                 N/A  thrpt    5     38804.768 ±  204711.406    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.count                                                                 N/A  thrpt    5         2.000                counts
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.time                                                                  N/A  thrpt    5        11.000                    ms
[info] GoogleMapsAPIBenchmark.readJacksonScala                                                                          N/A  thrpt    5     13101.681 ±     303.955   ops/s
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate                                                           N/A  thrpt    5       332.928 ±       7.659  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                      N/A  thrpt    5     39992.033 ±       0.014    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                     N/A  thrpt    5       270.711 ±    1427.383  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                N/A  thrpt    5     32614.904 ±  171970.677    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.count                                                                N/A  thrpt    5         2.000                counts
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.time                                                                 N/A  thrpt    5        10.000                    ms
[info] GoogleMapsAPIBenchmark.readJsoniterScala                                                                         N/A  thrpt    5     22463.922 ±     326.410   ops/s
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                                          N/A  thrpt    5       420.952 ±       6.138  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                     N/A  thrpt    5     29496.019 ±       0.003    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                    N/A  thrpt    5       406.825 ±    1430.048  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               N/A  thrpt    5     28560.827 ±  100396.571    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count                                                               N/A  thrpt    5         3.000                counts
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time                                                                N/A  thrpt    5        10.000                    ms
[info] GoogleMapsAPIBenchmark.readPlayJson                                                                              N/A  thrpt    5      2165.861 ±      21.597   ops/s
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate                                                               N/A  thrpt    5      1375.811 ±      13.543  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                                          N/A  thrpt    5    999800.194 ±       0.032    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   N/A  thrpt    5         0.029 ±       0.250  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              N/A  thrpt    5        21.166 ±     182.242    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                         N/A  thrpt    5      1355.827 ±      15.651  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                    N/A  thrpt    5    985288.176 ±   20147.989    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                  N/A  thrpt    5         0.932 ±       8.027  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                             N/A  thrpt    5       676.813 ±    5827.560    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.count                                                                    N/A  thrpt    5        10.000                counts
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.time                                                                     N/A  thrpt    5        46.000                    ms
[info] GoogleMapsAPIBenchmark.writeCirce                                                                                N/A  thrpt    5      7287.297 ±     251.659   ops/s
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate                                                                 N/A  thrpt    5      1437.947 ±      50.644  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm                                                            N/A  thrpt    5    310564.183 ±      80.038    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                     N/A  thrpt    5         0.016 ±       0.079  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                N/A  thrpt    5         3.528 ±      17.009    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                           N/A  thrpt    5      1358.889 ±      15.406  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                      N/A  thrpt    5    293509.597 ±   11123.115    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                    N/A  thrpt    5         0.799 ±       6.882  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                               N/A  thrpt    5       174.472 ±    1502.256    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.count                                                                      N/A  thrpt    5        10.000                counts
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.time                                                                       N/A  thrpt    5        29.000                    ms
[info] GoogleMapsAPIBenchmark.writeDslJsonJava                                                                          N/A  thrpt    5     54883.351 ±     671.996   ops/s
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate                                                           N/A  thrpt    5       512.979 ±       6.273  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                      N/A  thrpt    5     14712.008 ±       0.001    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                                     N/A  thrpt    5       404.700 ±    1422.579  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                N/A  thrpt    5     11628.453 ±   40875.703    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space                                              N/A  thrpt    5         0.133 ±       1.147  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                         N/A  thrpt    5         3.826 ±      32.939    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count                                                                N/A  thrpt    5         3.000                counts
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time                                                                 N/A  thrpt    5        17.000                    ms
[info] GoogleMapsAPIBenchmark.writeJacksonScala                                                                         N/A  thrpt    5     36587.178 ±    2138.644   ops/s
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                                          N/A  thrpt    5       544.661 ±      31.903  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                     N/A  thrpt    5     23431.869 ±       0.191    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                    N/A  thrpt    5       541.352 ±    1165.301  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                               N/A  thrpt    5     23361.300 ±   50311.738    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count                                                               N/A  thrpt    5         4.000                counts
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time                                                                N/A  thrpt    5        20.000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScala                                                                        N/A  thrpt    5     74343.772 ±    1434.389   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                                         N/A  thrpt    5       558.876 ±      10.941  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                    N/A  thrpt    5     11832.006 ±       0.001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                   N/A  thrpt    5       541.922 ±    1166.527  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                              N/A  thrpt    5     11491.697 ±   24737.516    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count                                                              N/A  thrpt    5         4.000                counts
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time                                                               N/A  thrpt    5        14.000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc                                                                N/A  thrpt    5     94273.338 ±      85.848   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                 N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                            N/A  thrpt    5         0.004 ±       0.001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                      N/A  thrpt    5           ≈ 0                counts
[info] GoogleMapsAPIBenchmark.writePlayJson                                                                             N/A  thrpt    5      5134.182 ±      55.198   ops/s
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate                                                              N/A  thrpt    5      1486.260 ±      16.444  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm                                                         N/A  thrpt    5    455616.060 ±       3.403    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  N/A  thrpt    5         0.044 ±       0.291  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             N/A  thrpt    5        13.373 ±      89.128    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                        N/A  thrpt    5      1493.273 ±    1164.216  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                   N/A  thrpt    5    457951.559 ±  362439.906    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                 N/A  thrpt    5         0.932 ±       8.029  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                            N/A  thrpt    5       287.113 ±    2472.126    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.count                                                                   N/A  thrpt    5        11.000                counts
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.time                                                                    N/A  thrpt    5        38.000                    ms
[info] IntBenchmark.readCirce                                                                                           N/A  thrpt    5   4893997.879 ±   89587.115   ops/s
[info] IntBenchmark.readCirce:·gc.alloc.rate                                                                            N/A  thrpt    5      3034.697 ±      57.085  MB/sec
[info] IntBenchmark.readCirce:·gc.alloc.rate.norm                                                                       N/A  thrpt    5       976.000 ±       0.001    B/op
[info] IntBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                                N/A  thrpt    5         0.001 ±       0.003  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                           N/A  thrpt    5        ≈ 10⁻⁴                  B/op
[info] IntBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                                      N/A  thrpt    5      3134.493 ±    1437.994  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                                 N/A  thrpt    5      1008.011 ±     458.848    B/op
[info] IntBenchmark.readCirce:·gc.count                                                                                 N/A  thrpt    5        23.000                counts
[info] IntBenchmark.readCirce:·gc.time                                                                                  N/A  thrpt    5        34.000                    ms
[info] IntBenchmark.readDslJsonJava                                                                                     N/A  thrpt    5  37864550.578 ± 1967491.613   ops/s
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate                                                                      N/A  thrpt    5       384.903 ±      19.886  MB/sec
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                                 N/A  thrpt    5        16.000 ±       0.001    B/op
[info] IntBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                                N/A  thrpt    5       404.864 ±    1423.153  MB/sec
[info] IntBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                           N/A  thrpt    5        16.951 ±      59.595    B/op
[info] IntBenchmark.readDslJsonJava:·gc.count                                                                           N/A  thrpt    5         3.000                counts
[info] IntBenchmark.readDslJsonJava:·gc.time                                                                            N/A  thrpt    5        16.000                    ms
[info] IntBenchmark.readJacksonScala                                                                                    N/A  thrpt    5   7466262.543 ±  195433.343   ops/s
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate                                                                     N/A  thrpt    5      2808.250 ±      74.690  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                                N/A  thrpt    5       592.000 ±       0.001    B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                         N/A  thrpt    5         0.008 ±       0.065  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                    N/A  thrpt    5         0.002 ±       0.014    B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                               N/A  thrpt    5      2861.945 ±    1172.877  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                          N/A  thrpt    5       603.277 ±     244.377    B/op
[info] IntBenchmark.readJacksonScala:·gc.count                                                                          N/A  thrpt    5        21.000                counts
[info] IntBenchmark.readJacksonScala:·gc.time                                                                           N/A  thrpt    5        27.000                    ms
[info] IntBenchmark.readJsoniterScala                                                                                   N/A  thrpt    5  35670020.446 ±  252269.594   ops/s
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate                                                                    N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                               N/A  thrpt    5        ≈ 10⁻⁵                  B/op
[info] IntBenchmark.readJsoniterScala:·gc.count                                                                         N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.readNaiveScala                                                                                      N/A  thrpt    5  28215351.316 ± 1636576.307   ops/s
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate                                                                       N/A  thrpt    5      1003.882 ±      58.551  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate.norm                                                                  N/A  thrpt    5        56.000 ±       0.001    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.G1_Old_Gen                                                                 N/A  thrpt    5       949.352 ±    1430.557  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.G1_Old_Gen.norm                                                            N/A  thrpt    5        53.019 ±      80.590    B/op
[info] IntBenchmark.readNaiveScala:·gc.count                                                                            N/A  thrpt    5         7.000                counts
[info] IntBenchmark.readNaiveScala:·gc.time                                                                             N/A  thrpt    5        23.000                    ms
[info] IntBenchmark.readPlayJson                                                                                        N/A  thrpt    5   6213096.768 ±  196039.345   ops/s
[info] IntBenchmark.readPlayJson:·gc.alloc.rate                                                                         N/A  thrpt    5      2999.740 ±      94.812  MB/sec
[info] IntBenchmark.readPlayJson:·gc.alloc.rate.norm                                                                    N/A  thrpt    5       760.000 ±       0.001    B/op
[info] IntBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                             N/A  thrpt    5         0.001 ±       0.003  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                        N/A  thrpt    5        ≈ 10⁻⁴                  B/op
[info] IntBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                                   N/A  thrpt    5      2997.917 ±    1436.989  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                              N/A  thrpt    5       759.939 ±     379.192    B/op
[info] IntBenchmark.readPlayJson:·gc.count                                                                              N/A  thrpt    5        22.000                counts
[info] IntBenchmark.readPlayJson:·gc.time                                                                               N/A  thrpt    5        32.000                    ms
[info] IntBenchmark.writeCirce                                                                                          N/A  thrpt    5  20244352.531 ±  576665.705   ops/s
[info] IntBenchmark.writeCirce:·gc.alloc.rate                                                                           N/A  thrpt    5      2263.485 ±      64.297  MB/sec
[info] IntBenchmark.writeCirce:·gc.alloc.rate.norm                                                                      N/A  thrpt    5       176.000 ±       0.001    B/op
[info] IntBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                               N/A  thrpt    5         0.031 ±       0.233  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                          N/A  thrpt    5         0.002 ±       0.018    B/op
[info] IntBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                                     N/A  thrpt    5      2179.664 ±    1175.258  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                                N/A  thrpt    5       169.551 ±      93.958    B/op
[info] IntBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                              N/A  thrpt    5         0.666 ±       5.734  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                                         N/A  thrpt    5         0.051 ±       0.443    B/op
[info] IntBenchmark.writeCirce:·gc.count                                                                                N/A  thrpt    5        16.000                counts
[info] IntBenchmark.writeCirce:·gc.time                                                                                 N/A  thrpt    5        23.000                    ms
[info] IntBenchmark.writeDslJsonJava                                                                                    N/A  thrpt    5  54843296.680 ± 1788244.878   ops/s
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate                                                                     N/A  thrpt    5      1672.605 ±      54.203  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                                N/A  thrpt    5        48.000 ±       0.001    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'                                         N/A  thrpt    5         0.089 ±       0.666  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                    N/A  thrpt    5         0.003 ±       0.019    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                                               N/A  thrpt    5      1763.160 ±    1432.272  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                          N/A  thrpt    5        50.592 ±      40.942    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space                                                        N/A  thrpt    5         1.466 ±      11.244  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                                   N/A  thrpt    5         0.042 ±       0.325    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.count                                                                          N/A  thrpt    5        13.000                counts
[info] IntBenchmark.writeDslJsonJava:·gc.time                                                                           N/A  thrpt    5        45.000                    ms
[info] IntBenchmark.writeJacksonScala                                                                                   N/A  thrpt    5   8461739.116 ±  244567.567   ops/s
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate                                                                    N/A  thrpt    5      2064.398 ±      60.047  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                               N/A  thrpt    5       384.000 ±       0.001    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                        N/A  thrpt    5         0.021 ±       0.106  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                   N/A  thrpt    5         0.004 ±       0.020    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                              N/A  thrpt    5      2042.350 ±      16.211  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                         N/A  thrpt    5       379.914 ±      10.358    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                                       N/A  thrpt    5         0.932 ±       8.029  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                                  N/A  thrpt    5         0.174 ±       1.501    B/op
[info] IntBenchmark.writeJacksonScala:·gc.count                                                                         N/A  thrpt    5        15.000                counts
[info] IntBenchmark.writeJacksonScala:·gc.time                                                                          N/A  thrpt    5        25.000                    ms
[info] IntBenchmark.writeJsoniterScala                                                                                  N/A  thrpt    5  44878400.217 ±  756683.528   ops/s
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate                                                                   N/A  thrpt    5       912.400 ±      15.484  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                              N/A  thrpt    5        32.000 ±       0.001    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                             N/A  thrpt    5       948.873 ±    1428.874  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                        N/A  thrpt    5        33.318 ±      50.649    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                                      N/A  thrpt    5         0.266 ±       1.405  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                                 N/A  thrpt    5         0.009 ±       0.049    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.count                                                                        N/A  thrpt    5         7.000                counts
[info] IntBenchmark.writeJsoniterScala:·gc.time                                                                         N/A  thrpt    5        24.000                    ms
[info] IntBenchmark.writeJsoniterScalaPrealloc                                                                          N/A  thrpt    5  50952784.717 ±  102634.153   ops/s
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                           N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                                      N/A  thrpt    5        ≈ 10⁻⁵                  B/op
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                                N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.writeNaiveScala                                                                                     N/A  thrpt    5  40545435.772 ± 1214802.508   ops/s
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate                                                                      N/A  thrpt    5      2060.620 ±      61.796  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm                                                                 N/A  thrpt    5        80.000 ±       0.001    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                          N/A  thrpt    5         0.018 ±       0.134  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                     N/A  thrpt    5         0.001 ±       0.005    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.G1_Old_Gen                                                                N/A  thrpt    5      2043.383 ±       5.500  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.G1_Old_Gen.norm                                                           N/A  thrpt    5        79.335 ±       2.403    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.G1_Survivor_Space                                                         N/A  thrpt    5         0.666 ±       5.735  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.G1_Survivor_Space.norm                                                    N/A  thrpt    5         0.026 ±       0.223    B/op
[info] IntBenchmark.writeNaiveScala:·gc.count                                                                           N/A  thrpt    5        15.000                counts
[info] IntBenchmark.writeNaiveScala:·gc.time                                                                            N/A  thrpt    5        21.000                    ms
[info] IntBenchmark.writePlayJson                                                                                       N/A  thrpt    5   2194707.052 ±   71213.993   ops/s
[info] IntBenchmark.writePlayJson:·gc.alloc.rate                                                                        N/A  thrpt    5      1762.502 ±      57.357  MB/sec
[info] IntBenchmark.writePlayJson:·gc.alloc.rate.norm                                                                   N/A  thrpt    5      1264.000 ±       0.001    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                            N/A  thrpt    5         0.042 ±       0.243  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                       N/A  thrpt    5         0.030 ±       0.174    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                                  N/A  thrpt    5      1767.643 ±    1422.781  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                             N/A  thrpt    5      1268.739 ±    1041.847    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                           N/A  thrpt    5         0.799 ±       6.882  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                                      N/A  thrpt    5         0.575 ±       4.953    B/op
[info] IntBenchmark.writePlayJson:·gc.count                                                                             N/A  thrpt    5        13.000                counts
[info] IntBenchmark.writePlayJson:·gc.time                                                                              N/A  thrpt    5        41.000                    ms
[info] IntMapOfBooleansBenchmark.readJsoniterScala                                                                      128  thrpt    5    141471.467 ±    5351.728   ops/s
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                                       128  thrpt    5      2595.377 ±      99.045  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                  128  thrpt    5     28872.003 ±       0.001    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                           128  thrpt    5         0.003 ±       0.013  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      128  thrpt    5         0.035 ±       0.148    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5      2589.648 ±    1174.343  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5     28822.889 ±   13528.696    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.count                                                            128  thrpt    5        19.000                counts
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.time                                                             128  thrpt    5        35.000                    ms
[info] IntMapOfBooleansBenchmark.readPlayJson                                                                           128  thrpt    5     20635.620 ±     775.637   ops/s
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                            128  thrpt    5      1631.505 ±      61.642  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                                       128  thrpt    5    124440.021 ±       0.012    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                128  thrpt    5         0.015 ±       0.084  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           128  thrpt    5         1.174 ±       6.384    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                      128  thrpt    5      1630.755 ±    1429.453  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5    124420.227 ±  109775.366    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         1.066 ±       9.176  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5        82.064 ±     706.598    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.count                                                                 128  thrpt    5        12.000                counts
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.time                                                                  128  thrpt    5        34.000                    ms
[info] IntMapOfBooleansBenchmark.writeJacksonScala                                                                      128  thrpt    5    131741.034 ±   10361.780   ops/s
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                                       128  thrpt    5      1463.836 ±     115.057  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                  128  thrpt    5     17488.003 ±       0.001    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                           128  thrpt    5         0.012 ±       0.099  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      128  thrpt    5         0.139 ±       1.168    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5      1493.677 ±    1155.946  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5     17888.650 ±   15011.959    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         1.066 ±       7.823  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5        12.638 ±      92.275    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.count                                                            128  thrpt    5        11.000                counts
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.time                                                             128  thrpt    5        35.000                    ms
[info] IntMapOfBooleansBenchmark.writeJsoniterScala                                                                     128  thrpt    5    493523.324 ±    2669.358   ops/s
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                                      128  thrpt    5      1020.995 ±       6.066  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                 128  thrpt    5      3256.001 ±       0.001    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5       948.687 ±    1428.944  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5      3025.947 ±    4564.514    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.133 ±       1.147  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5         0.426 ±       3.664    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.count                                                           128  thrpt    5         7.000                counts
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                            128  thrpt    5        24.000                    ms
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                             128  thrpt    5    545689.064 ±    7820.652   ops/s
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                              128  thrpt    5       532.480 ±       7.631  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                         128  thrpt    5      1536.001 ±       0.001    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                        128  thrpt    5       542.007 ±    1166.710  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                                   128  thrpt    5      1565.509 ±    3369.926    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space                                 128  thrpt    5         0.133 ±       1.147  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm                            128  thrpt    5         0.386 ±       3.321    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                   128  thrpt    5         4.000                counts
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                    128  thrpt    5        14.000                    ms
[info] IntMapOfBooleansBenchmark.writePlayJson                                                                          128  thrpt    5     44234.261 ±     520.167   ops/s
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                           128  thrpt    5       755.706 ±       9.040  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                                      128  thrpt    5     26888.010 ±       0.002    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       812.403 ±    1166.065  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5     28928.253 ±   41930.115    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         0.266 ±       1.405  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5         9.510 ±      50.143    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.count                                                                128  thrpt    5         6.000                counts
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.time                                                                 128  thrpt    5        28.000                    ms
[info] ListOfBooleansBenchmark.readCirce                                                                                128  thrpt    5    371801.269 ±    8070.451   ops/s
[info] ListOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                                 128  thrpt    5      2522.989 ±      55.346  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                                            128  thrpt    5     10680.001 ±       0.001    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                     128  thrpt    5         0.009 ±       0.077  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                128  thrpt    5         0.040 ±       0.329    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                           128  thrpt    5      2589.513 ±    1173.427  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                      128  thrpt    5     10962.786 ±    5004.512    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.count                                                                      128  thrpt    5        19.000                counts
[info] ListOfBooleansBenchmark.readCirce:·gc.time                                                                       128  thrpt    5        34.000                    ms
[info] ListOfBooleansBenchmark.readJacksonScala                                                                         128  thrpt    5    420520.490 ±    7291.210   ops/s
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                                          128  thrpt    5      1113.594 ±      19.264  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                     128  thrpt    5      4168.001 ±       0.001    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      1083.105 ±    1427.392  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5      4052.299 ±    5322.427    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         1.066 ±       7.822  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5         4.015 ±      29.501    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.count                                                               128  thrpt    5         8.000                counts
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.time                                                                128  thrpt    5        38.000                    ms
[info] ListOfBooleansBenchmark.readJsoniterScala                                                                        128  thrpt    5    430769.882 ±   12909.023   ops/s
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                                         128  thrpt    5       849.439 ±      25.493  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                    128  thrpt    5      3104.001 ±       0.001    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       813.622 ±    1167.478  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5      2973.234 ±    4266.470    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.count                                                              128  thrpt    5         6.000                counts
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.time                                                               128  thrpt    5        20.000                    ms
[info] ListOfBooleansBenchmark.readPlayJson                                                                             128  thrpt    5     97533.672 ±    1739.234   ops/s
[info] ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                              128  thrpt    5      3531.080 ±      63.101  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                                         128  thrpt    5     56984.004 ±       0.001    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  128  thrpt    5         0.001 ±       0.004  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             128  thrpt    5         0.018 ±       0.065    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                        128  thrpt    5      3543.273 ±    1172.616  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5     57177.116 ±   18657.988    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.count                                                                   128  thrpt    5        26.000                counts
[info] ListOfBooleansBenchmark.readPlayJson:·gc.time                                                                    128  thrpt    5        33.000                    ms
[info] ListOfBooleansBenchmark.writeCirce                                                                               128  thrpt    5    310143.543 ±    3562.243   ops/s
[info] ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                                128  thrpt    5       472.940 ±       5.756  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                                           128  thrpt    5      2400.001 ±       0.001    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                          128  thrpt    5       406.824 ±    1430.044  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5      2068.961 ±    7272.694    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.count                                                                     128  thrpt    5         3.000                counts
[info] ListOfBooleansBenchmark.writeCirce:·gc.time                                                                      128  thrpt    5        11.000                    ms
[info] ListOfBooleansBenchmark.writeJacksonScala                                                                        128  thrpt    5    615419.261 ±   73529.719   ops/s
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                                         128  thrpt    5       450.454 ±      53.898  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                    128  thrpt    5      1152.001 ±       0.001    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       406.056 ±    1427.346  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5      1055.885 ±    3714.619    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5         0.334 ±       2.875    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.count                                                              128  thrpt    5         3.000                counts
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.time                                                               128  thrpt    5        14.000                    ms
[info] ListOfBooleansBenchmark.writeJsoniterScala                                                                       128  thrpt    5   2415143.506 ±  158490.458   ops/s
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                                        128  thrpt    5      1117.117 ±      73.779  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                   128  thrpt    5       728.000 ±       0.001    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5      1084.214 ±    1429.091  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5       704.947 ±     910.101    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         1.066 ±       6.437  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5         0.691 ±       4.173    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.count                                                             128  thrpt    5         8.000                counts
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                              128  thrpt    5        28.000                    ms
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                               128  thrpt    5   2440864.757 ±    3540.508   ops/s
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                           128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                     128  thrpt    5           ≈ 0                counts
[info] ListOfBooleansBenchmark.writePlayJson                                                                            128  thrpt    5    401923.519 ±    3495.544   ops/s
[info] ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                             128  thrpt    5       578.097 ±       5.040  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                                        128  thrpt    5      2264.001 ±       0.001    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                       128  thrpt    5       541.788 ±    1166.241  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5      2123.878 ±    4571.813    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                           128  thrpt    5         0.522 ±       4.497    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.count                                                                  128  thrpt    5         4.000                counts
[info] ListOfBooleansBenchmark.writePlayJson:·gc.time                                                                   128  thrpt    5        17.000                    ms
[info] MapOfIntsToBooleansBenchmark.readCirce                                                                           128  thrpt    5     39054.023 ±    1694.936   ops/s
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate                                                            128  thrpt    5      1315.979 ±      57.086  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                                       128  thrpt    5     53040.011 ±       0.001    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                128  thrpt    5         0.023 ±       0.199  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           128  thrpt    5         0.922 ±       7.936    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                      128  thrpt    5      1221.800 ±    1170.535  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5     49147.061 ±   45872.553    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         0.666 ±       5.735  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5        27.347 ±     235.462    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.count                                                                 128  thrpt    5         9.000                counts
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.time                                                                  128  thrpt    5        28.000                    ms
[info] MapOfIntsToBooleansBenchmark.readJacksonScala                                                                    128  thrpt    5     52065.835 ±    1451.028   ops/s
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                                     128  thrpt    5       937.825 ±      26.236  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                128  thrpt    5     28352.008 ±       0.001    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5       947.629 ±    1428.444  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5     28638.628 ±   43036.008    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         0.133 ±       1.147  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5         4.016 ±      34.583    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count                                                          128  thrpt    5         7.000                counts
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time                                                           128  thrpt    5        32.000                    ms
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala                                                                   128  thrpt    5     74777.264 ±    1052.756   ops/s
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                                    128  thrpt    5      1146.614 ±      16.219  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                               128  thrpt    5     24136.006 ±       0.001    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                              128  thrpt    5      1084.867 ±    1430.095  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5     22814.221 ±   29829.718    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                       128  thrpt    5         0.666 ±       5.735  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                  128  thrpt    5        14.068 ±     121.129    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count                                                         128  thrpt    5         8.000                counts
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time                                                          128  thrpt    5        27.000                    ms
[info] MapOfIntsToBooleansBenchmark.readPlayJson                                                                        128  thrpt    5     21096.556 ±     608.628   ops/s
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                         128  thrpt    5      1521.701 ±      44.166  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                                    128  thrpt    5    113536.021 ±       0.011    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                             128  thrpt    5         0.009 ±       0.069  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        128  thrpt    5         0.647 ±       5.077    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                   128  thrpt    5      1629.898 ±    1432.386  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5    121678.025 ±  108389.961    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         1.066 ±       7.821  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5        79.608 ±     583.261    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.count                                                              128  thrpt    5        12.000                counts
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.time                                                               128  thrpt    5        40.000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala                                                                   128  thrpt    5    145093.395 ±     950.955   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                                    128  thrpt    5      1336.204 ±       8.588  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                               128  thrpt    5     14496.003 ±       0.001    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                        128  thrpt    5         0.013 ±       0.110  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   128  thrpt    5         0.139 ±       1.196    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                              128  thrpt    5      1356.177 ±      15.348  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5     14712.718 ±     193.778    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                       128  thrpt    5         1.066 ±       7.821  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                  128  thrpt    5        11.589 ±      85.089    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count                                                         128  thrpt    5        10.000                counts
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time                                                          128  thrpt    5        41.000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala                                                                  128  thrpt    5    556058.253 ±    4009.989   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                                   128  thrpt    5       613.303 ±       4.293  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                              128  thrpt    5      1736.001 ±       0.001    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                             128  thrpt    5       541.907 ±    1166.496  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5      1533.602 ±    3301.219    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count                                                        128  thrpt    5         4.000                counts
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time                                                         128  thrpt    5        14.000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc                                                          128  thrpt    5    500050.547 ±    9164.236   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                           128  thrpt    5         5.083 ±       0.092  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                      128  thrpt    5        16.001 ±       0.001    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                128  thrpt    5           ≈ 0                counts
[info] MapOfIntsToBooleansBenchmark.writePlayJson                                                                       128  thrpt    5     60119.517 ±    1270.908   ops/s
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                        128  thrpt    5      1078.598 ±      22.989  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                                   128  thrpt    5     28240.007 ±       0.001    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                  128  thrpt    5      1083.102 ±    1428.498  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5     28378.226 ±   37646.500    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         1.199 ±       7.565  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5        31.549 ±     199.608    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.count                                                             128  thrpt    5         8.000                counts
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.time                                                              128  thrpt    5        39.000                    ms
[info] MissingReqFieldBenchmark.readCirce                                                                               N/A  thrpt    5   2125498.150 ±   36794.550   ops/s
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate                                                                N/A  thrpt    5      2970.904 ±      51.999  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm                                                           N/A  thrpt    5      2200.000 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    N/A  thrpt    5         0.001 ±       0.004  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               N/A  thrpt    5         0.001 ±       0.003    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                          N/A  thrpt    5      2998.151 ±    1437.525  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                     N/A  thrpt    5      2220.124 ±    1061.584    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.count                                                                     N/A  thrpt    5        22.000                counts
[info] MissingReqFieldBenchmark.readCirce:·gc.time                                                                      N/A  thrpt    5        27.000                    ms
[info] MissingReqFieldBenchmark.readDslJsonJava                                                                         N/A  thrpt    5    896396.799 ±   21411.307   ops/s
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate                                                          N/A  thrpt    5       569.510 ±      13.627  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                     N/A  thrpt    5      1000.000 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                    N/A  thrpt    5       539.793 ±    1161.946  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                               N/A  thrpt    5       949.406 ±    2043.798    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.count                                                               N/A  thrpt    5         4.000                counts
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.time                                                                N/A  thrpt    5        20.000                    ms
[info] MissingReqFieldBenchmark.readJacksonScala                                                                        N/A  thrpt    5    304886.072 ±    7474.761   ops/s
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate                                                         N/A  thrpt    5       576.497 ±      14.222  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                    N/A  thrpt    5      2976.001 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                   N/A  thrpt    5       541.543 ±    1165.713  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                              N/A  thrpt    5      2798.639 ±    6024.850    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                            N/A  thrpt    5         0.266 ±       1.405  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                       N/A  thrpt    5         1.379 ±       7.270    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.count                                                              N/A  thrpt    5         4.000                counts
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.time                                                               N/A  thrpt    5        19.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterScala                                                                       N/A  thrpt    5    738543.750 ±   16284.645   ops/s
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate                                                        N/A  thrpt    5       555.572 ±      12.288  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                   N/A  thrpt    5      1184.001 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                  N/A  thrpt    5       542.477 ±    1167.722  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                             N/A  thrpt    5      1157.626 ±    2492.029    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.count                                                             N/A  thrpt    5         4.000                counts
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.time                                                              N/A  thrpt    5        13.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStackless                                                                   N/A  thrpt    5   4233633.651 ±  386486.565   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate                                                    N/A  thrpt    5      1355.696 ±     123.745  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm                                               N/A  thrpt    5       504.000 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.CodeHeap_'non-profiled_nmethods'                        N/A  thrpt    5         0.026 ±       0.153  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   N/A  thrpt    5         0.010 ±       0.058    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Old_Gen                                              N/A  thrpt    5      1358.190 ±    1841.627  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Old_Gen.norm                                         N/A  thrpt    5       503.655 ±     663.499    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Survivor_Space                                       N/A  thrpt    5         0.666 ±       5.735  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Survivor_Space.norm                                  N/A  thrpt    5         0.243 ±       2.093    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.count                                                         N/A  thrpt    5        10.000                counts
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.time                                                          N/A  thrpt    5        26.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump                                                             N/A  thrpt    5   7958150.505 ±  541231.470   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate                                              N/A  thrpt    5       647.136 ±      44.029  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm                                         N/A  thrpt    5       128.000 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.G1_Old_Gen                                        N/A  thrpt    5       678.018 ±       0.073  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.G1_Old_Gen.norm                                   N/A  thrpt    5       134.142 ±       9.083    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count                                                   N/A  thrpt    5         5.000                counts
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time                                                    N/A  thrpt    5        15.000                    ms
[info] MissingReqFieldBenchmark.readPlayJson                                                                            N/A  thrpt    5    184736.047 ±   10289.826   ops/s
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate                                                             N/A  thrpt    5      1255.415 ±      70.251  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm                                                        N/A  thrpt    5     10696.002 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                       N/A  thrpt    5      1219.711 ±    1158.350  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                  N/A  thrpt    5     10409.195 ±   10090.458    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                N/A  thrpt    5         1.199 ±       7.565  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                           N/A  thrpt    5        10.184 ±      64.285    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.count                                                                  N/A  thrpt    5         9.000                counts
[info] MissingReqFieldBenchmark.readPlayJson:·gc.time                                                                   N/A  thrpt    5        42.000                    ms
[info] MutableBitSetBenchmark.readJsoniterScala                                                                         128  thrpt    5    892156.572 ±   10160.809   ops/s
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate                                                          128  thrpt    5        49.881 ±       0.586  MB/sec
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                     128  thrpt    5        88.000 ±       0.001    B/op
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.count                                                               128  thrpt    5           ≈ 0                counts
[info] MutableBitSetBenchmark.readPlayJson                                                                              128  thrpt    5     60215.413 ±    1485.366   ops/s
[info] MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate                                                               128  thrpt    5      2798.254 ±      69.803  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate.norm                                                          128  thrpt    5     73136.007 ±       0.001    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   128  thrpt    5         0.008 ±       0.046  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              128  thrpt    5         0.213 ±       1.215    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                         128  thrpt    5      2862.199 ±    1174.630  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5     74814.418 ±   30991.132    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.count                                                                    128  thrpt    5        21.000                counts
[info] MutableBitSetBenchmark.readPlayJson:·gc.time                                                                     128  thrpt    5        34.000                    ms
[info] MutableBitSetBenchmark.writeJacksonScala                                                                         128  thrpt    5   1038440.266 ±    7159.185   ops/s
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate                                                          128  thrpt    5       580.529 ±       4.003  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                     128  thrpt    5       880.000 ±       0.001    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       676.941 ±       1.358  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5      1026.149 ±       6.054    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.266 ±       1.405  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5         0.404 ±       2.131    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.count                                                               128  thrpt    5         5.000                counts
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.time                                                                128  thrpt    5        25.000                    ms
[info] MutableBitSetBenchmark.writeJsoniterScala                                                                        128  thrpt    5    719162.437 ±    9345.047   ops/s
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate                                                         128  thrpt    5       201.064 ±       2.611  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                    128  thrpt    5       440.001 ±       0.001    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       135.642 ±    1167.920  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5       298.534 ±    2570.472    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.count                                                              128  thrpt    5         1.000                counts
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.time                                                               128  thrpt    5         4.000                    ms
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc                                                                128  thrpt    5    906191.389 ±   58691.665   ops/s
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                 128  thrpt    5         9.211 ±       0.597  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                            128  thrpt    5        16.000 ±       0.001    B/op
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                      128  thrpt    5           ≈ 0                counts
[info] MutableBitSetBenchmark.writePlayJson                                                                             128  thrpt    5     39060.049 ±     777.836   ops/s
[info] MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate                                                              128  thrpt    5      1639.492 ±      32.923  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate.norm                                                         128  thrpt    5     66064.011 ±       0.002    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  128  thrpt    5         0.012 ±       0.062  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             128  thrpt    5         0.475 ±       2.488    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                        128  thrpt    5      1630.962 ±    1430.564  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5     65736.529 ±   58001.592    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                 128  thrpt    5         1.066 ±       7.821  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                            128  thrpt    5        43.139 ±     316.482    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.count                                                                   128  thrpt    5        12.000                counts
[info] MutableBitSetBenchmark.writePlayJson:·gc.time                                                                    128  thrpt    5        33.000                    ms
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala                                                              128  thrpt    5    247284.299 ±    3068.426   ops/s
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                               128  thrpt    5       967.875 ±      11.953  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                          128  thrpt    5      6160.002 ±       0.001    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                         128  thrpt    5      1085.035 ±    1430.349  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                    128  thrpt    5      6911.529 ±    9174.991    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.count                                                    128  thrpt    5         8.000                counts
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.time                                                     128  thrpt    5        27.000                    ms
[info] MutableLongMapOfBooleansBenchmark.readPlayJson                                                                   128  thrpt    5     23979.003 ±     291.242   ops/s
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                    128  thrpt    5      1328.705 ±      16.677  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                               128  thrpt    5     87200.017 ±       0.002    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                        128  thrpt    5         0.036 ±       0.310  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   128  thrpt    5         2.354 ±      20.268    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                              128  thrpt    5      1356.817 ±      15.868  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5     89045.378 ±    1085.919    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                       128  thrpt    5         1.199 ±       7.566  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                  128  thrpt    5        78.937 ±     498.476    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.count                                                         128  thrpt    5        10.000                counts
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.time                                                          128  thrpt    5        40.000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala                                                              128  thrpt    5    101325.004 ±    5923.210   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                               128  thrpt    5      1421.938 ±      82.953  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5     22088.004 ±       0.001    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                   128  thrpt    5         0.022 ±       0.138  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm              128  thrpt    5         0.330 ±       2.111    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                         128  thrpt    5      1357.479 ±      18.773  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                    128  thrpt    5     21089.887 ±    1027.068    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                  128  thrpt    5         1.066 ±       7.821  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                             128  thrpt    5        16.513 ±     120.819    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.count                                                    128  thrpt    5        10.000                counts
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.time                                                     128  thrpt    5        35.000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala                                                             128  thrpt    5    343694.630 ±   16347.845   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                              128  thrpt    5      1636.949 ±      77.995  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5      7496.001 ±       0.001    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                  128  thrpt    5         0.018 ±       0.116  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             128  thrpt    5         0.081 ±       0.525    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                        128  thrpt    5      1631.429 ±    1429.698  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                   128  thrpt    5      7476.069 ±    6660.395    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                 128  thrpt    5         0.800 ±       6.884  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                            128  thrpt    5         3.681 ±      31.692    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.count                                                   128  thrpt    5        12.000                counts
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                    128  thrpt    5        27.000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                     128  thrpt    5    403922.548 ±    5672.390   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                      128  thrpt    5      1383.863 ±      19.340  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                 128  thrpt    5      5392.001 ±       0.001    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'          128  thrpt    5         0.027 ±       0.219  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm     128  thrpt    5         0.105 ±       0.853    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                128  thrpt    5      1493.272 ±    1157.595  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                           128  thrpt    5      5819.975 ±    4560.364    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space                         128  thrpt    5         0.799 ±       6.882  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm                    128  thrpt    5         3.123 ±      26.890    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                           128  thrpt    5        11.000                counts
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time                                            128  thrpt    5        31.000                    ms
[info] MutableLongMapOfBooleansBenchmark.writePlayJson                                                                  128  thrpt    5     51341.911 ±    1128.419   ops/s
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                   128  thrpt    5      1157.592 ±      25.497  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                              128  thrpt    5     35488.008 ±       0.001    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                             128  thrpt    5      1219.435 ±    1168.243  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5     37412.617 ±   36178.353    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                      128  thrpt    5         1.066 ±       6.438  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                 128  thrpt    5        32.636 ±     197.042    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.count                                                        128  thrpt    5         9.000                counts
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.time                                                         128  thrpt    5        43.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readCirce                                                                    128  thrpt    5     57817.579 ±    2456.097   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate                                                     128  thrpt    5      1300.398 ±      55.433  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                                128  thrpt    5     35400.007 ±       0.001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                         128  thrpt    5         0.033 ±       0.286  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    128  thrpt    5         0.916 ±       7.884    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen                                               128  thrpt    5      1221.902 ±    1170.653  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5     33237.240 ±   31534.138    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         0.666 ±       5.735  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5        18.280 ±     157.399    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.count                                                          128  thrpt    5         9.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.time                                                           128  thrpt    5        29.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala                                                             128  thrpt    5     99150.467 ±     414.664   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                              128  thrpt    5       673.248 ±       2.913  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5     10688.004 ±       0.001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                        128  thrpt    5       676.974 ±       1.365  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                   128  thrpt    5     10747.178 ±      62.319    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count                                                   128  thrpt    5         5.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time                                                    128  thrpt    5        24.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala                                                            128  thrpt    5    180812.377 ±    1961.176   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       744.411 ±       8.184  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5      6480.002 ±       0.001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                       128  thrpt    5       678.111 ±       0.237  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                  128  thrpt    5      5902.908 ±      64.269    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count                                                  128  thrpt    5         5.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time                                                   128  thrpt    5        17.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson                                                                 128  thrpt    5     23165.660 ±     551.451   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                  128  thrpt    5      1300.406 ±      30.906  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     88352.019 ±       0.008    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                      128  thrpt    5         0.032 ±       0.273  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 128  thrpt    5         2.135 ±      18.384    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                            128  thrpt    5      1220.128 ±    1159.626  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5     82985.735 ±   79912.938    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                     128  thrpt    5         0.933 ±       8.029  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                128  thrpt    5        63.531 ±     547.019    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.count                                                       128  thrpt    5         9.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.time                                                        128  thrpt    5        39.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala                                                            128  thrpt    5    162261.536 ±    8935.002   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                             128  thrpt    5      1044.055 ±      57.382  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5     10128.003 ±       0.001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                       128  thrpt    5       947.537 ±    1427.017  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                  128  thrpt    5      9193.815 ±   13863.833    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                128  thrpt    5         0.133 ±       1.147  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                           128  thrpt    5         1.277 ±      10.994    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count                                                  128  thrpt    5         7.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time                                                   128  thrpt    5        34.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala                                                           128  thrpt    5    533884.771 ±    5367.831   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       594.238 ±       6.003  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5      1752.001 ±       0.001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                      128  thrpt    5       542.031 ±    1166.763  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                 128  thrpt    5      1596.648 ±    3436.941    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                               128  thrpt    5         0.133 ±       1.147  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                          128  thrpt    5         0.392 ±       3.379    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count                                                 128  thrpt    5         4.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time                                                  128  thrpt    5        14.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc                                                   128  thrpt    5    570994.494 ±    3338.505   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                    128  thrpt    5        11.609 ±       0.071  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                               128  thrpt    5        32.001 ±       0.001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                         128  thrpt    5           ≈ 0                counts
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson                                                                128  thrpt    5     64494.602 ±     786.703   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                 128  thrpt    5      1040.119 ±      13.436  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     25384.007 ±       0.001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                           128  thrpt    5      1083.008 ±    1427.756  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5     26453.737 ±   35125.253    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                    128  thrpt    5         0.266 ±       1.405  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                               128  thrpt    5         6.505 ±      34.301    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.count                                                      128  thrpt    5         8.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.time                                                       128  thrpt    5        40.000                    ms
[info] MutableSetOfIntsBenchmark.readCirce                                                                              128  thrpt    5     76496.653 ±    2503.172   ops/s
[info] MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate                                                               128  thrpt    5      1336.761 ±      44.013  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                          128  thrpt    5     27504.005 ±       0.001    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   128  thrpt    5         0.018 ±       0.148  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              128  thrpt    5         0.361 ±       3.017    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                         128  thrpt    5      1358.174 ±      11.173  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5     27946.008 ±     827.053    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                  128  thrpt    5         0.666 ±       5.735  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                             128  thrpt    5        13.749 ±     118.384    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.count                                                                    128  thrpt    5        10.000                counts
[info] MutableSetOfIntsBenchmark.readCirce:·gc.time                                                                     128  thrpt    5        33.000                    ms
[info] MutableSetOfIntsBenchmark.readJacksonScala                                                                       128  thrpt    5    147733.525 ±    1884.884   ops/s
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                                        128  thrpt    5       631.538 ±       8.235  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                   128  thrpt    5      6728.003 ±       0.001    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       541.551 ±    1165.729  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5      5777.051 ±   12435.658    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.count                                                             128  thrpt    5         4.000                counts
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.time                                                              128  thrpt    5        19.000                    ms
[info] MutableSetOfIntsBenchmark.readJsoniterScala                                                                      128  thrpt    5    211038.475 ±    5407.323   ops/s
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                                       128  thrpt    5       751.855 ±      19.327  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                  128  thrpt    5      5608.002 ±       0.001    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5       678.011 ±       0.069  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5      5057.389 ±     130.375    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.count                                                            128  thrpt    5         5.000                counts
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.time                                                             128  thrpt    5        17.000                    ms
[info] MutableSetOfIntsBenchmark.readPlayJson                                                                           128  thrpt    5     41748.158 ±    2024.932   ops/s
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                                            128  thrpt    5      1731.119 ±      84.571  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                       128  thrpt    5     65264.010 ±       0.001    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                128  thrpt    5         0.015 ±       0.076  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           128  thrpt    5         0.573 ±       2.871    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                      128  thrpt    5      1768.466 ±    1432.769  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5     66761.974 ±   55817.102    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         0.799 ±       6.882  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5        30.029 ±     258.556    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.count                                                                 128  thrpt    5        13.000                counts
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.time                                                                  128  thrpt    5        38.000                    ms
[info] MutableSetOfIntsBenchmark.writeCirce                                                                             128  thrpt    5    262467.816 ±    4506.040   ops/s
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                              128  thrpt    5      1235.280 ±      21.164  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                                         128  thrpt    5      7408.002 ±       0.001    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                        128  thrpt    5      1221.026 ±    1168.851  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5      7328.196 ±    7081.790    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                 128  thrpt    5         0.799 ±       5.561  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                            128  thrpt    5         4.801 ±      33.381    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.count                                                                   128  thrpt    5         9.000                counts
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.time                                                                    128  thrpt    5        32.000                    ms
[info] MutableSetOfIntsBenchmark.writeJacksonScala                                                                      128  thrpt    5    502256.236 ±   21593.952   ops/s
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                                       128  thrpt    5       403.399 ±      17.149  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                  128  thrpt    5      1264.001 ±       0.001    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5       406.220 ±    1427.920  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5      1274.438 ±    4480.475    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.count                                                            128  thrpt    5         3.000                counts
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.time                                                             128  thrpt    5        13.000                    ms
[info] MutableSetOfIntsBenchmark.writeJsoniterScala                                                                     128  thrpt    5    565850.441 ±   10796.531   ops/s
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                      128  thrpt    5       304.859 ±       5.854  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                 128  thrpt    5       848.001 ±       0.001    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5       271.112 ±    1429.497  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5       756.837 ±    3990.586    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.133 ±       1.147  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5         0.373 ±       3.208    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.count                                                           128  thrpt    5         2.000                counts
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.time                                                            128  thrpt    5         6.000                    ms
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc                                                             128  thrpt    5    622325.584 ±    8728.791   ops/s
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                              128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                         128  thrpt    5         0.001 ±       0.001    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                   128  thrpt    5           ≈ 0                counts
[info] MutableSetOfIntsBenchmark.writePlayJson                                                                          128  thrpt    5     30569.897 ±     875.832   ops/s
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                                           128  thrpt    5      1523.135 ±      43.688  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                      128  thrpt    5     78416.014 ±       0.002    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                               128  thrpt    5         0.038 ±       0.219  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          128  thrpt    5         1.973 ±      11.239    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                     128  thrpt    5      1494.363 ±    1166.348  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5     76999.217 ±   61922.718    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         0.799 ±       6.882  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5        41.517 ±     357.472    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.count                                                                128  thrpt    5        11.000                counts
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.time                                                                 128  thrpt    5        32.000                    ms
[info] PrimitivesBenchmark.readCirce                                                                                    N/A  thrpt    5    618172.194 ±   16282.091   ops/s
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate                                                                     N/A  thrpt    5      1897.614 ±      50.018  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm                                                                N/A  thrpt    5      4832.001 ±       0.001    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                         N/A  thrpt    5         0.035 ±       0.200  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                    N/A  thrpt    5         0.089 ±       0.509    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                               N/A  thrpt    5      1905.115 ±    1174.926  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                          N/A  thrpt    5      4850.749 ±    2981.968    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                        N/A  thrpt    5         0.666 ±       5.735  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                   N/A  thrpt    5         1.698 ±      14.623    B/op
[info] PrimitivesBenchmark.readCirce:·gc.count                                                                          N/A  thrpt    5        14.000                counts
[info] PrimitivesBenchmark.readCirce:·gc.time                                                                           N/A  thrpt    5        28.000                    ms
[info] PrimitivesBenchmark.readJacksonScala                                                                             N/A  thrpt    5   1345592.369 ±   68376.592   ops/s
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate                                                              N/A  thrpt    5      1019.018 ±      51.387  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                         N/A  thrpt    5      1192.000 ±       0.001    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                        N/A  thrpt    5       947.829 ±    1428.611  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                   N/A  thrpt    5      1109.472 ±    1680.320    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                                 N/A  thrpt    5         0.266 ±       1.405  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                            N/A  thrpt    5         0.312 ±       1.643    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.count                                                                   N/A  thrpt    5         7.000                counts
[info] PrimitivesBenchmark.readJacksonScala:·gc.time                                                                    N/A  thrpt    5        34.000                    ms
[info] PrimitivesBenchmark.readJsoniterScala                                                                            N/A  thrpt    5   6954498.538 ±  257648.319   ops/s
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate                                                             N/A  thrpt    5       212.085 ±       7.924  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                        N/A  thrpt    5        48.000 ±       0.001    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                       N/A  thrpt    5       271.354 ±    1430.772  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                  N/A  thrpt    5        61.858 ±     326.182    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.count                                                                  N/A  thrpt    5         2.000                counts
[info] PrimitivesBenchmark.readJsoniterScala:·gc.time                                                                   N/A  thrpt    5         6.000                    ms
[info] PrimitivesBenchmark.readPlayJson                                                                                 N/A  thrpt    5    210042.691 ±    3171.280   ops/s
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate                                                                  N/A  thrpt    5      1451.959 ±      22.018  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                             N/A  thrpt    5     10880.002 ±       0.001    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      N/A  thrpt    5         0.024 ±       0.172  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 N/A  thrpt    5         0.179 ±       1.285    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                            N/A  thrpt    5      1492.978 ±    1160.264  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                       N/A  thrpt    5     11188.953 ±    8740.601    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                     N/A  thrpt    5         1.066 ±       7.824  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                                N/A  thrpt    5         8.003 ±      58.712    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.count                                                                       N/A  thrpt    5        11.000                counts
[info] PrimitivesBenchmark.readPlayJson:·gc.time                                                                        N/A  thrpt    5        41.000                    ms
[info] PrimitivesBenchmark.writeCirce                                                                                   N/A  thrpt    5    827955.394 ±   63063.516   ops/s
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate                                                                    N/A  thrpt    5      1271.030 ±      96.174  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm                                                               N/A  thrpt    5      2416.001 ±       0.001    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                              N/A  thrpt    5      1221.258 ±    1169.315  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                         N/A  thrpt    5      2323.060 ±    2244.813    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                       N/A  thrpt    5         0.800 ±       5.563  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                                  N/A  thrpt    5         1.562 ±      10.954    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.count                                                                         N/A  thrpt    5         9.000                counts
[info] PrimitivesBenchmark.writeCirce:·gc.time                                                                          N/A  thrpt    5        34.000                    ms
[info] PrimitivesBenchmark.writeJacksonScala                                                                            N/A  thrpt    5   2108366.111 ±   90612.223   ops/s
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate                                                             N/A  thrpt    5       868.033 ±      37.320  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                        N/A  thrpt    5       648.000 ±       0.001    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                       N/A  thrpt    5       812.162 ±    1166.469  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                  N/A  thrpt    5       606.426 ±     872.575    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.count                                                                  N/A  thrpt    5         6.000                counts
[info] PrimitivesBenchmark.writeJacksonScala:·gc.time                                                                   N/A  thrpt    5        29.000                    ms
[info] PrimitivesBenchmark.writeJsoniterScala                                                                           N/A  thrpt    5   5686978.268 ±  215950.534   ops/s
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                            N/A  thrpt    5       635.904 ±      24.320  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                       N/A  thrpt    5       176.000 ±       0.001    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                      N/A  thrpt    5       677.387 ±       0.240  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                 N/A  thrpt    5       187.496 ±       7.029    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.count                                                                 N/A  thrpt    5         5.000                counts
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.time                                                                  N/A  thrpt    5        17.000                    ms
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc                                                                   N/A  thrpt    5   5670277.791 ±  432465.934   ops/s
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                    N/A  thrpt    5       345.893 ±      26.253  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                               N/A  thrpt    5        96.000 ±       0.001    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                              N/A  thrpt    5       270.996 ±    1428.884  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                                         N/A  thrpt    5        74.799 ±     394.396    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                         N/A  thrpt    5         2.000                counts
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                          N/A  thrpt    5         6.000                    ms
[info] PrimitivesBenchmark.writePlayJson                                                                                N/A  thrpt    5    307488.454 ±   16494.950   ops/s
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate                                                                 N/A  thrpt    5      1565.994 ±      83.858  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm                                                            N/A  thrpt    5      8016.001 ±       0.001    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                     N/A  thrpt    5         0.033 ±       0.228  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                N/A  thrpt    5         0.168 ±       1.142    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                           N/A  thrpt    5      1629.928 ±    1432.249  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                      N/A  thrpt    5      8358.805 ±    7663.714    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                    N/A  thrpt    5         1.066 ±       7.822  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                               N/A  thrpt    5         5.489 ±      40.383    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.count                                                                      N/A  thrpt    5        12.000                counts
[info] PrimitivesBenchmark.writePlayJson:·gc.time                                                                       N/A  thrpt    5        44.000                    ms
[info] SetOfIntsBenchmark.readCirce                                                                                     128  thrpt    5     54312.267 ±    4075.630   ops/s
[info] SetOfIntsBenchmark.readCirce:·gc.alloc.rate                                                                      128  thrpt    5      1552.616 ±     116.391  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                                 128  thrpt    5     44992.008 ±       0.002    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                          128  thrpt    5         0.030 ±       0.159  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                     128  thrpt    5         0.874 ±       4.610    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                                128  thrpt    5      1495.922 ±    1182.147  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                           128  thrpt    5     43349.811 ±   34027.158    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                         128  thrpt    5         0.666 ±       5.735  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                    128  thrpt    5        19.249 ±     165.738    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.count                                                                           128  thrpt    5        11.000                counts
[info] SetOfIntsBenchmark.readCirce:·gc.time                                                                            128  thrpt    5        27.000                    ms
[info] SetOfIntsBenchmark.readJacksonScala                                                                              128  thrpt    5     79067.478 ±    2296.026   ops/s
[info] SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                                               128  thrpt    5      1217.697 ±      35.670  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                          128  thrpt    5     24240.005 ±       0.001    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                         128  thrpt    5      1219.476 ±    1158.320  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5     24293.685 ±   23292.904    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                                  128  thrpt    5         0.933 ±       6.690  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                             128  thrpt    5        18.516 ±     132.825    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.count                                                                    128  thrpt    5         9.000                counts
[info] SetOfIntsBenchmark.readJacksonScala:·gc.time                                                                     128  thrpt    5        40.000                    ms
[info] SetOfIntsBenchmark.readJsoniterScala                                                                             128  thrpt    5    108754.452 ±    1260.272   ops/s
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                                              128  thrpt    5      1598.495 ±      18.401  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                         128  thrpt    5     23136.004 ±       0.001    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  128  thrpt    5         0.013 ±       0.078  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             128  thrpt    5         0.183 ±       1.127    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                        128  thrpt    5      1631.925 ±    1431.431  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5     23625.649 ±   20848.238    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                                 128  thrpt    5         0.666 ±       5.735  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                            128  thrpt    5         9.687 ±      83.407    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.count                                                                   128  thrpt    5        12.000                counts
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.time                                                                    128  thrpt    5        26.000                    ms
[info] SetOfIntsBenchmark.readPlayJson                                                                                  128  thrpt    5     41786.304 ±     631.396   ops/s
[info] SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                                                   128  thrpt    5      2197.232 ±      33.557  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                              128  thrpt    5     82760.010 ±       0.002    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                       128  thrpt    5         0.027 ±       0.174  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                  128  thrpt    5         1.022 ±       6.542    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                             128  thrpt    5      2179.520 ±    1173.236  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                        128  thrpt    5     82126.411 ±   45522.097    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                      128  thrpt    5         0.799 ±       6.882  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                                 128  thrpt    5        30.074 ±     258.945    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.count                                                                        128  thrpt    5        16.000                counts
[info] SetOfIntsBenchmark.readPlayJson:·gc.time                                                                         128  thrpt    5        34.000                    ms
[info] SetOfIntsBenchmark.writeCirce                                                                                    128  thrpt    5    233408.649 ±   10922.100   ops/s
[info] SetOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                                     128  thrpt    5      1110.450 ±      52.012  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                                                128  thrpt    5      7488.002 ±       0.001    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                               128  thrpt    5      1220.566 ±    1167.241  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                          128  thrpt    5      8233.480 ±    7908.819    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                        128  thrpt    5         0.666 ±       5.735  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                                   128  thrpt    5         4.487 ±      38.632    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.count                                                                          128  thrpt    5         9.000                counts
[info] SetOfIntsBenchmark.writeCirce:·gc.time                                                                           128  thrpt    5        35.000                    ms
[info] SetOfIntsBenchmark.writeJacksonScala                                                                             128  thrpt    5    463893.690 ±   22625.482   ops/s
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                                              128  thrpt    5       407.888 ±      19.700  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                         128  thrpt    5      1384.001 ±       0.001    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                        128  thrpt    5       406.182 ±    1427.788  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5      1387.010 ±    4876.173    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                                 128  thrpt    5         0.266 ±       1.405  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                            128  thrpt    5         0.913 ±       4.817    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.count                                                                   128  thrpt    5         3.000                counts
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.time                                                                    128  thrpt    5        15.000                    ms
[info] SetOfIntsBenchmark.writeJsoniterScala                                                                            128  thrpt    5    558760.356 ±    6312.807   ops/s
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                             128  thrpt    5       301.030 ±       3.477  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                        128  thrpt    5       848.001 ±       0.001    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                       128  thrpt    5       271.083 ±    1429.345  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5       764.924 ±    4033.232    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                                128  thrpt    5         0.133 ±       1.147  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                           128  thrpt    5         0.375 ±       3.233    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.count                                                                  128  thrpt    5         2.000                counts
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.time                                                                   128  thrpt    5         7.000                    ms
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc                                                                    128  thrpt    5    627266.196 ±    1081.323   ops/s
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                     128  thrpt    5         6.376 ±       0.013  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                                128  thrpt    5        16.001 ±       0.001    B/op
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                          128  thrpt    5           ≈ 0                counts
[info] SetOfIntsBenchmark.writePlayJson                                                                                 128  thrpt    5     30200.758 ±     736.293   ops/s
[info] SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                                                  128  thrpt    5      1510.179 ±      37.403  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                             128  thrpt    5     78704.014 ±       0.002    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      128  thrpt    5         0.042 ±       0.228  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 128  thrpt    5         2.188 ±      11.828    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                            128  thrpt    5      1494.292 ±    1166.566  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                       128  thrpt    5     77908.906 ±   61745.055    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                     128  thrpt    5         0.799 ±       6.882  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                                128  thrpt    5        41.841 ±     360.266    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.count                                                                       128  thrpt    5        11.000                counts
[info] SetOfIntsBenchmark.writePlayJson:·gc.time                                                                        128  thrpt    5        34.000                    ms
[info] StringOfAsciiCharsBenchmark.readCirce                                                                            128  thrpt    5   4829767.502 ±   93285.782   ops/s
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                                             128  thrpt    5      3559.391 ±      67.683  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                                        128  thrpt    5      1160.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 128  thrpt    5         0.001 ±       0.007  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            128  thrpt    5        ≈ 10⁻³                  B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                       128  thrpt    5      3543.156 ±    1172.873  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5      1154.729 ±     382.682    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.count                                                                  128  thrpt    5        26.000                counts
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.time                                                                   128  thrpt    5        46.000                    ms
[info] StringOfAsciiCharsBenchmark.readDslJsonJava                                                                      128  thrpt    5   7764436.431 ±  110060.563   ops/s
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                                                       128  thrpt    5       828.723 ±      11.784  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                  128  thrpt    5       168.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                 128  thrpt    5       944.338 ±    1422.872  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5       191.430 ±     288.327    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         0.266 ±       1.405  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5         0.054 ±       0.285    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count                                                            128  thrpt    5         7.000                counts
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time                                                             128  thrpt    5        40.000                    ms
[info] StringOfAsciiCharsBenchmark.readJacksonScala                                                                     128  thrpt    5   3755926.870 ±   50069.253   ops/s
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                                                      128  thrpt    5      2119.267 ±      28.256  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                 128  thrpt    5       888.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                          128  thrpt    5         0.033 ±       0.222  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     128  thrpt    5         0.014 ±       0.093    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5      2179.888 ±    1174.315  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5       913.349 ±     489.701    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.932 ±       8.029  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5         0.391 ±       3.371    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count                                                           128  thrpt    5        16.000                counts
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time                                                            128  thrpt    5        31.000                    ms
[info] StringOfAsciiCharsBenchmark.readJsoniterScala                                                                    128  thrpt    5   7778777.753 ±  216622.135   ops/s
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                                     128  thrpt    5       830.331 ±      23.290  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                128  thrpt    5       168.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5       813.191 ±    1167.192  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5       164.886 ±     242.878    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         0.133 ±       1.147  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5         0.027 ±       0.235    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count                                                          128  thrpt    5         6.000                counts
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time                                                           128  thrpt    5        21.000                    ms
[info] StringOfAsciiCharsBenchmark.readPlayJson                                                                         128  thrpt    5   4603601.098 ±  157001.586   ops/s
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                                          128  thrpt    5      2480.203 ±      83.526  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                     128  thrpt    5       848.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.002 ±       0.020  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         0.001 ±       0.007    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      2452.957 ±    1436.315  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5       838.497 ±     484.560    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.count                                                               128  thrpt    5        18.000                counts
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.time                                                                128  thrpt    5        36.000                    ms
[info] StringOfAsciiCharsBenchmark.writeCirce                                                                           128  thrpt    5   3362163.277 ±   39452.315   ops/s
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                                            128  thrpt    5       803.120 ±       9.331  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                                       128  thrpt    5       376.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       812.835 ±    1166.583  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5       380.881 ±     552.565    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.count                                                                 128  thrpt    5         6.000                counts
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.time                                                                  128  thrpt    5        24.000                    ms
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava                                                                     128  thrpt    5   7245640.354 ±  379965.762   ops/s
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                      128  thrpt    5       699.750 ±      36.538  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                 128  thrpt    5       152.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                                128  thrpt    5       674.653 ±       1.256  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5       146.570 ±       7.769    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.133 ±       1.147  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5         0.029 ±       0.250    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                                           128  thrpt    5         5.000                counts
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                                            128  thrpt    5        27.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJacksonScala                                                                    128  thrpt    5   1931851.996 ±  180565.392   ops/s
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                                     128  thrpt    5       599.013 ±      55.656  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                128  thrpt    5       488.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5       541.402 ±    1165.409  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5       436.794 ±     940.455    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count                                                          128  thrpt    5         4.000                counts
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time                                                           128  thrpt    5        19.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala                                                                   128  thrpt    5   9958420.106 ±  141303.097   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                    128  thrpt    5       961.725 ±      13.892  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                               128  thrpt    5       152.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                              128  thrpt    5      1084.284 ±    1430.043  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5       171.509 ±     227.702    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                       128  thrpt    5         0.266 ±       1.405  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                  128  thrpt    5         0.042 ±       0.222    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                                         128  thrpt    5         8.000                counts
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                                          128  thrpt    5        27.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                                           128  thrpt    5   8023517.139 ±  306355.860   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                            128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                       128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                 128  thrpt    5           ≈ 0                counts
[info] StringOfAsciiCharsBenchmark.writePlayJson                                                                        128  thrpt    5   3031111.696 ±   54639.284   ops/s
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                                         128  thrpt    5       970.589 ±      17.723  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                    128  thrpt    5       504.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                   128  thrpt    5      1082.894 ±    1427.501  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5       562.973 ±     749.244    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.133 ±       1.147  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5         0.070 ±       0.599    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.count                                                              128  thrpt    5         8.000                counts
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.time                                                               128  thrpt    5        34.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readCirce                                                                         128  thrpt    5    784907.599 ±   26308.475   ops/s
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                                          128  thrpt    5      1376.337 ±      45.816  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                                     128  thrpt    5      2760.001 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.040 ±       0.210  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         0.079 ±       0.419    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      1358.118 ±      11.454  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5      2723.608 ±      80.563    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.666 ±       5.734  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5         1.327 ±      11.422    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.count                                                               128  thrpt    5        10.000                counts
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.time                                                                128  thrpt    5        29.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava                                                                   128  thrpt    5   2194312.570 ±   56778.062   ops/s
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                                                    128  thrpt    5       613.454 ±      15.978  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                               128  thrpt    5       440.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                              128  thrpt    5       674.803 ±       0.529  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5       484.020 ±      12.673    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count                                                         128  thrpt    5         5.000                counts
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time                                                          128  thrpt    5        26.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala                                                                  128  thrpt    5   1062966.053 ±   47534.492   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                                                   128  thrpt    5       734.742 ±      33.092  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                              128  thrpt    5      1088.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                             128  thrpt    5       812.871 ±    1166.278  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5      1206.364 ±    1776.750    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count                                                        128  thrpt    5         6.000                counts
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time                                                         128  thrpt    5        26.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala                                                                 128  thrpt    5   2454063.190 ±   10895.211   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                                  128  thrpt    5       686.011 ±       3.028  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                             128  thrpt    5       440.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                            128  thrpt    5       678.072 ±       0.326  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5       434.909 ±       1.942    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count                                                       128  thrpt    5         5.000                counts
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time                                                        128  thrpt    5        15.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readPlayJson                                                                      128  thrpt    5   1131304.850 ±   51981.324   ops/s
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                                       128  thrpt    5       805.057 ±      36.687  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                  128  thrpt    5      1120.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                 128  thrpt    5       812.933 ±    1166.894  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5      1133.655 ±    1673.702    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count                                                            128  thrpt    5         6.000                counts
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time                                                             128  thrpt    5        29.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeCirce                                                                        128  thrpt    5   1732317.793 ±   82119.104   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                                         128  thrpt    5      1452.710 ±      68.953  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                                    128  thrpt    5      1320.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                             128  thrpt    5         0.025 ±       0.207  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        128  thrpt    5         0.022 ±       0.186    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                   128  thrpt    5      1494.327 ±    1161.699  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5      1358.096 ±    1061.028    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.666 ±       5.735  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5         0.618 ±       5.320    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count                                                              128  thrpt    5        11.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time                                                               128  thrpt    5        32.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava                                                                  128  thrpt    5   2569349.084 ±   29169.115   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                   128  thrpt    5       666.038 ±       7.653  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                              128  thrpt    5       408.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                             128  thrpt    5       674.762 ±       0.272  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5       413.347 ±       4.703    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                                        128  thrpt    5         5.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                                         128  thrpt    5        26.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala                                                                 128  thrpt    5   2458413.683 ±   56071.728   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                                  128  thrpt    5      1162.183 ±      26.653  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                             128  thrpt    5       744.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                      128  thrpt    5         0.019 ±       0.168  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 128  thrpt    5         0.013 ±       0.108    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                            128  thrpt    5      1220.256 ±    1168.371  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5       782.017 ±     758.575    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                     128  thrpt    5         0.800 ±       6.885  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                128  thrpt    5         0.513 ±       4.415    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count                                                       128  thrpt    5         9.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time                                                        128  thrpt    5        38.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala                                                                128  thrpt    5   2925397.410 ±   30815.809   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                 128  thrpt    5       758.370 ±       7.696  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                            128  thrpt    5       408.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                           128  thrpt    5       677.598 ±       1.204  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5       364.548 ±       4.043    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                    128  thrpt    5         0.133 ±       1.147  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                               128  thrpt    5         0.071 ±       0.615    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                                      128  thrpt    5         5.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                                       128  thrpt    5        16.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                                        128  thrpt    5   3005331.647 ±   15110.091   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                         128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                    128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                              128  thrpt    5           ≈ 0                counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson                                                                     128  thrpt    5   2381493.982 ±    9891.406   ops/s
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                                      128  thrpt    5      1150.125 ±       5.569  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                 128  thrpt    5       760.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                128  thrpt    5      1219.504 ±    1166.280  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5       805.941 ±     771.901    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.800 ±       6.884  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5         0.528 ±       4.545    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count                                                           128  thrpt    5         9.000                counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time                                                            128  thrpt    5        35.000                    ms
[info] TwitterAPIBenchmark.readCirce                                                                                    N/A  thrpt    5     11059.908 ±     170.691   ops/s
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate                                                                     N/A  thrpt    5      1602.093 ±      25.188  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm                                                                N/A  thrpt    5    228004.008 ±      68.947    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                         N/A  thrpt    5         0.040 ±       0.326  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                    N/A  thrpt    5         5.677 ±      46.257    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                               N/A  thrpt    5      1630.582 ±    1435.960  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                          N/A  thrpt    5    232092.420 ±  205098.593    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                        N/A  thrpt    5         0.666 ±       5.734  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                   N/A  thrpt    5        95.135 ±     819.140    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.count                                                                          N/A  thrpt    5        12.000                counts
[info] TwitterAPIBenchmark.readCirce:·gc.time                                                                           N/A  thrpt    5        35.000                    ms
[info] TwitterAPIBenchmark.readJacksonScala                                                                             N/A  thrpt    5     14157.176 ±     945.373   ops/s
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate                                                              N/A  thrpt    5       200.138 ±      13.166  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                         N/A  thrpt    5     22250.939 ±      26.587    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                        N/A  thrpt    5       135.383 ±    1165.687  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                   N/A  thrpt    5     15523.142 ±  133658.932    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.count                                                                   N/A  thrpt    5         1.000                counts
[info] TwitterAPIBenchmark.readJacksonScala:·gc.time                                                                    N/A  thrpt    5         5.000                    ms
[info] TwitterAPIBenchmark.readJsoniterScala                                                                            N/A  thrpt    5     38028.844 ±     753.859   ops/s
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                                             N/A  thrpt    5       352.167 ±       7.061  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                        N/A  thrpt    5     14576.011 ±       0.002    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                       N/A  thrpt    5       271.218 ±    1430.057  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                  N/A  thrpt    5     11278.487 ±   59468.299    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.count                                                                  N/A  thrpt    5         2.000                counts
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.time                                                                   N/A  thrpt    5         7.000                    ms
[info] TwitterAPIBenchmark.readPlayJson                                                                                 N/A  thrpt    5      2840.186 ±      65.238   ops/s
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate                                                                  N/A  thrpt    5       917.476 ±      21.148  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                                             N/A  thrpt    5    508248.146 ±       0.022    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                            N/A  thrpt    5       947.709 ±    1427.864  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                       N/A  thrpt    5    525903.177 ±  803556.633    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.count                                                                       N/A  thrpt    5         7.000                counts
[info] TwitterAPIBenchmark.readPlayJson:·gc.time                                                                        N/A  thrpt    5        45.000                    ms
[info] TwitterAPIBenchmark.writeJacksonScala                                                                            N/A  thrpt    5     56418.668 ±    1149.714   ops/s
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                                             N/A  thrpt    5       720.466 ±      14.727  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                        N/A  thrpt    5     20100.009 ±       0.242    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                       N/A  thrpt    5       676.210 ±       1.083  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                  N/A  thrpt    5     18865.792 ±     414.282    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                                N/A  thrpt    5         0.133 ±       1.147  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                           N/A  thrpt    5         3.723 ±      32.053    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.count                                                                  N/A  thrpt    5         5.000                counts
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.time                                                                   N/A  thrpt    5        27.000                    ms
[info] TwitterAPIBenchmark.writeJsoniterScala                                                                           N/A  thrpt    5     80178.066 ±    1523.498   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                                            N/A  thrpt    5       525.719 ±      10.015  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                       N/A  thrpt    5     10320.005 ±       0.001    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                      N/A  thrpt    5       541.971 ±    1166.635  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                 N/A  thrpt    5     10653.590 ±   22933.511    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.count                                                                 N/A  thrpt    5         4.000                counts
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.time                                                                  N/A  thrpt    5        14.000                    ms
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc                                                                   N/A  thrpt    5     90568.199 ±     199.651   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                    N/A  thrpt    5        12.889 ±       0.028  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                               N/A  thrpt    5       224.005 ±       0.001    B/op
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                         N/A  thrpt    5           ≈ 0                counts
[info] VectorOfBooleansBenchmark.readCirce                                                                              128  thrpt    5    346973.527 ±    3323.540   ops/s
[info] VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                               128  thrpt    5      1858.845 ±      17.049  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                                          128  thrpt    5      8432.001 ±       0.001    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   128  thrpt    5         0.017 ±       0.120  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              128  thrpt    5         0.078 ±       0.546    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                         128  thrpt    5      1769.814 ±    1442.503  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5      8029.430 ±    6570.072    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                  128  thrpt    5         0.666 ±       5.737  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                             128  thrpt    5         3.032 ±      26.103    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.count                                                                    128  thrpt    5        13.000                counts
[info] VectorOfBooleansBenchmark.readCirce:·gc.time                                                                     128  thrpt    5        26.000                    ms
[info] VectorOfBooleansBenchmark.readJacksonScala                                                                       128  thrpt    5    409904.269 ±   13607.579   ops/s
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                                        128  thrpt    5       499.983 ±      16.588  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                   128  thrpt    5      1920.001 ±       0.001    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       406.144 ±    1427.654  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5      1556.253 ±    5470.449    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         0.133 ±       1.147  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5         0.510 ±       4.394    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.count                                                             128  thrpt    5         3.000                counts
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.time                                                              128  thrpt    5        14.000                    ms
[info] VectorOfBooleansBenchmark.readJsoniterScala                                                                      128  thrpt    5   1103090.065 ±    9291.834   ops/s
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                                       128  thrpt    5       577.503 ±       4.946  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                  128  thrpt    5       824.000 ±       0.001    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5       542.472 ±    1167.712  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5       773.941 ±    1665.985    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.count                                                            128  thrpt    5         4.000                counts
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.time                                                             128  thrpt    5        13.000                    ms
[info] VectorOfBooleansBenchmark.readPlayJson                                                                           128  thrpt    5     98917.631 ±     853.409   ops/s
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                            128  thrpt    5      3437.818 ±      30.847  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                                       128  thrpt    5     54704.004 ±       0.001    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                128  thrpt    5         0.002 ±       0.005  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           128  thrpt    5         0.026 ±       0.073    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                      128  thrpt    5      3406.941 ±       1.572  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5     54212.897 ±     468.807    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.count                                                                 128  thrpt    5        25.000                counts
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.time                                                                  128  thrpt    5        33.000                    ms
[info] VectorOfBooleansBenchmark.writeCirce                                                                             128  thrpt    5    323616.584 ±   14567.998   ops/s
[info] VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                              128  thrpt    5       508.306 ±      23.007  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                                         128  thrpt    5      2472.001 ±       0.001    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                        128  thrpt    5       542.510 ±    1167.793  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5      2646.249 ±    5697.643    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.count                                                                   128  thrpt    5         4.000                counts
[info] VectorOfBooleansBenchmark.writeCirce:·gc.time                                                                    128  thrpt    5        17.000                    ms
[info] VectorOfBooleansBenchmark.writeJacksonScala                                                                      128  thrpt    5    642477.224 ±    7578.262   ops/s
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                                       128  thrpt    5       489.817 ±       5.901  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                  128  thrpt    5      1200.001 ±       0.001    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5       406.165 ±    1427.727  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5       995.265 ±    3498.497    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         0.133 ±       1.147  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5         0.326 ±       2.811    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.count                                                            128  thrpt    5         3.000                counts
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.time                                                             128  thrpt    5        14.000                    ms
[info] VectorOfBooleansBenchmark.writeJsoniterScala                                                                     128  thrpt    5   1977403.589 ±  110160.974   ops/s
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                                      128  thrpt    5       914.562 ±      51.005  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                 128  thrpt    5       728.000 ±       0.001    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5       948.996 ±    1431.028  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5       754.975 ±    1131.804    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.133 ±       1.147  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5         0.105 ±       0.904    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.count                                                           128  thrpt    5         7.000                counts
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                            128  thrpt    5        25.000                    ms
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                             128  thrpt    5   2098159.649 ±    3311.008   ops/s
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                              128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                         128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                   128  thrpt    5           ≈ 0                counts
[info] VectorOfBooleansBenchmark.writePlayJson                                                                          128  thrpt    5    340519.208 ±    4773.054   ops/s
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                           128  thrpt    5       503.636 ±       7.213  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                                      128  thrpt    5      2328.001 ±       0.001    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       541.926 ±    1166.537  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5      2507.352 ±    5397.382    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.count                                                                128  thrpt    5         4.000                counts
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.time                                                                 128  thrpt    5        17.000                    ms
[info] Benchmark result is saved to jdk10.json
[success] Total time: 6956 s, completed May 14, 2018 1:30:37 AM
