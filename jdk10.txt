[info] Loading settings from idea.sbt ...
[info] Loading global plugins from /home/andriy/.sbt/1.0/plugins
[info] Loading settings from plugins.sbt ...
[info] Loading project definition from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/project
[info] Loading settings from release.sbt,build.sbt,version.sbt ...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[info] Setting Scala version to 2.12.6 on 2 projects.
[info] Excluded 2 projects, run ++ 2.12.6 -v for more details.
[info] Reapplying settings...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[success] Total time: 0 s, completed Jun 1, 2018 2:48:39 AM
[info] Updating core...
[info] Done updating.
[info] Updating macros...
[info] Done updating.
[info] Updating benchmark...
[info] Done updating.
[info] Compiling 5 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/classes ...
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:989:79: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private[this] def toDouble(pos: Int): Double = java.lang.Double.parseDouble(new String(buf, 0, mark, pos - mark))
[warn]                                                                               ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1075:75: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private[this] def toFloat(pos: Int): Float = java.lang.Float.parseFloat(new String(buf, 0, mark, pos - mark))
[warn]                                                                           ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:443:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:451:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos + 1)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:967:14: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]       zoneId.getBytes(0, len, buf, pos)
[warn]              ^
[warn] 5 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/core_2.12-0.27.2-SNAPSHOT.jar ...
[info] Compiling 1 Scala source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/classes ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/macros_2.12-0.27.2-SNAPSHOT.jar ...
[info] Compiling 59 Scala sources and 1 Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done packaging.
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:17:48: Generated JSON codec for type 'Int':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Int] {
[info]       def nullValue: Int = 0;
[info]       def decodeValue(in: JsonReader, default: Int): Int = in.readInt();
[info]       def encodeValue(x: Int, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val intCodec: JsonValueCodec[Int] = make[Int](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:18:57: Generated JSON codec for type 'String':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[String] {
[info]       def nullValue: String = null;
[info]       def decodeValue(in: JsonReader, default: String): String = in.readString(default);
[info]       def encodeValue(x: String, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val stringCodec: JsonValueCodec[String] = make[String](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:19:56: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.A): com.github.plokhotnyuk.jsoniter_scala.macros.A = if (in.isNextToken('{'))
[info]         {
[info]           var _a: Int = 0;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _a = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.A(a = _a)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.B): com.github.plokhotnyuk.jsoniter_scala.macros.B = if (in.isNextToken('{'))
[info]         {
[info]           var _b: String = null;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _b = in.readString(_b)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.B(b = _b)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.C): com.github.plokhotnyuk.jsoniter_scala.macros.C = if (in.isNextToken('{'))
[info]         {
[info]           var _l: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var _r: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var p0 = 3;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = d0(in, _l)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 114 => if (in.isCharBufEqualsTo(l, "r"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _r = d0(in, _r)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.C(l = _l, r = _r)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 65 => if (in.isCharBufEqualsTo(l, "A"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 66 => if (in.isCharBufEqualsTo(l, "B"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d2(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 67 => if (in.isCharBufEqualsTo(l, "C"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d3(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.A, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("A")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("a");
[info]           out.writeVal(x.a)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.B, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("B")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.C, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("C")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           e0(x.l, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("r");
[info]           e0(x.r, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.A)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.B)) => e2(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.C)) => e3(x, out)
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "a"
[info]       };
[info]       private[this] def f1(i: Int): String = (i: @switch) match {
[info]         case 0 => "b"
[info]       };
[info]       private[this] def f2(i: Int): String = (i: @switch) match {
[info]         case 0 => "l"
[info]         case 1 => "r"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val adtCodec: JsonValueCodec[AdtBase] = make[AdtBase](CodecMakerConfig()) // don't define implicit for recursive structures
[info]                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:20:60: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON): com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d2(in: JsonReader, default: scala.collection.immutable.Map[String,String]): scala.collection.immutable.Map[String,String] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[String, String];
[info]             do 
[info]               x = x.updated(in.readKeyAsString(), in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d7(in: JsonReader, default: (Double, Double)): (Double, Double) = if (in.isNextToken('['))
[info]         {
[info]           val _1: Double = in.readDouble();
[info]           val _2: Double = if (in.isNextToken(','))
[info]             in.readDouble()
[info]           else
[info]             in.commaError();
[info]           if (in.isNextToken(']'))
[info]             new (Double, Double)(_1, _2)
[info]           else
[info]             in.arrayEndError()
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: IndexedSeq[(Double, Double)]): IndexedSeq[(Double, Double)] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[(Double, Double)];
[info]             do 
[info]               x.+=(d7(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d5(in: JsonReader, default: IndexedSeq[IndexedSeq[(Double, Double)]]): IndexedSeq[IndexedSeq[(Double, Double)]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[IndexedSeq[(Double, Double)]];
[info]             do 
[info]               x.+=(d6(in, IndexedSeq.empty[(Double, Double)]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d4(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString): com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[(Double, Double)]] = IndexedSeq.empty[IndexedSeq[(Double, Double)]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d5(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d9(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection): com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection = if (in.isNextToken('{'))
[info]         {
[info]           var _geometries: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 203916432 => if (in.isCharBufEqualsTo(l, "geometries"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geometries = d9(in, _geometries)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection(geometries = _geometries)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.LineString): com.github.plokhotnyuk.jsoniter_scala.macros.LineString = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[(Double, Double)] = IndexedSeq.empty[(Double, Double)];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d6(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.LineString(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Polygon): com.github.plokhotnyuk.jsoniter_scala.macros.Polygon = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[(Double, Double)]] = IndexedSeq.empty[IndexedSeq[(Double, Double)]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d5(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Polygon(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[(Double, Double)] = IndexedSeq.empty[(Double, Double)];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d6(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Point): com.github.plokhotnyuk.jsoniter_scala.macros.Point = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: (Double, Double) = null;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d7(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Point(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d15(in: JsonReader, default: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]]): IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[IndexedSeq[IndexedSeq[(Double, Double)]]];
[info]             do 
[info]               x.+=(d5(in, IndexedSeq.empty[IndexedSeq[(Double, Double)]]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d14(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]] = IndexedSeq.empty[IndexedSeq[IndexedSeq[(Double, Double)]]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d15(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry): com.github.plokhotnyuk.jsoniter_scala.macros.Geometry = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case -627102946 => if (in.isCharBufEqualsTo(l, "MultiLineString"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d4(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1950410960 => if (in.isCharBufEqualsTo(l, "GeometryCollection"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d8(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1806700869 => if (in.isCharBufEqualsTo(l, "LineString"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d10(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1267133722 => if (in.isCharBufEqualsTo(l, "Polygon"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d11(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -1065891849 => if (in.isCharBufEqualsTo(l, "MultiPoint"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d12(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 77292912 => if (in.isCharBufEqualsTo(l, "Point"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d13(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -2116761119 => if (in.isCharBufEqualsTo(l, "MultiPolygon"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d14(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Feature): com.github.plokhotnyuk.jsoniter_scala.macros.Feature = if (in.isNextToken('{'))
[info]         {
[info]           var _properties: scala.collection.immutable.Map[String,String] = Map.empty[String, String];
[info]           var _geometry: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry = null;
[info]           var p0 = 3;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -926053069 => if (in.isCharBufEqualsTo(l, "properties"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _properties = d2(in, _properties)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1846020210 => if (in.isCharBufEqualsTo(l, "geometry"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geometry = d3(in, _geometry)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(2).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Feature(properties = _properties, geometry = _geometry)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d17(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON];
[info]             do 
[info]               x.+=(d0(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d16(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection): com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection = if (in.isNextToken('{'))
[info]         {
[info]           var _features: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -290659267 => if (in.isCharBufEqualsTo(l, "features"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _features = d17(in, _features)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection(features = _features)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON): com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 685445846 => if (in.isCharBufEqualsTo(l, "Feature"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -1377727980 => if (in.isCharBufEqualsTo(l, "FeatureCollection"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d16(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e2(x: scala.collection.immutable.Map[String,String], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e7(x: (Double, Double), out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         {
[info]           out.writeComma();
[info]           out.writeVal(x._1)
[info]         };
[info]         {
[info]           out.writeComma();
[info]           out.writeVal(x._2)
[info]         };
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: IndexedSeq[(Double, Double)], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e7(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e5(x: IndexedSeq[IndexedSeq[(Double, Double)]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e6(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e4(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiLineString")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e5(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e9(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e3(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("GeometryCollection")
[info]         };
[info]         {
[info]           val v = x.geometries;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geometries");
[info]               e9(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.LineString, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("LineString")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.Polygon, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Polygon")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e5(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiPoint")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e13(x: com.github.plokhotnyuk.jsoniter_scala.macros.Point, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Point")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("coordinates");
[info]           e7(x.coordinates, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e15(x: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e5(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e14(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiPolygon")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e15(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString)) => e4(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection)) => e8(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.LineString)) => e10(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Polygon)) => e11(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint)) => e12(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Point)) => e13(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon)) => e14(x, out)
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Feature, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Feature")
[info]         };
[info]         {
[info]           val v = x.properties;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("properties");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geometry");
[info]           e3(x.geometry, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e17(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e0(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e16(x: com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("FeatureCollection")
[info]         };
[info]         {
[info]           val v = x.features;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("features");
[info]               e17(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Feature)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection)) => e16(x, out)
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "properties"
[info]         case 1 => "geometry"
[info]       };
[info]       private[this] def f1(i: Int): String = (i: @switch) match {
[info]         case 0 => "coordinates"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val geoJSONCodec: JsonValueCodec[GeoJSON] = make[GeoJSON](CodecMakerConfig()) // don't define implicit for recursive structures
[info]                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:21:78: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs): com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: Option[com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs]): Option[com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(d0(in, null))
[info]         };
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs): com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs = if (in.isNextToken('{'))
[info]         {
[info]           var _n: Option[com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs] = None;
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 110 => if (in.isCharBufEqualsTo(l, "n"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _n = d1(in, _n)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs(n = _n)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.n;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("n");
[info]               e0(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val nestedStructsCodec: JsonValueCodec[NestedStructs] = make[NestedStructs](CodecMakerConfig())
[info]                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:22:69: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _bd: scala.math.BigDecimal = null;
[info]           var _os: Option[String] = None;
[info]           var p0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3138 => if (in.isCharBufEqualsTo(l, "bd"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _bd = in.readBigDecimal(_bd, 300)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556 => if (in.isCharBufEqualsTo(l, "os"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _os = d1(in, _os)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs(s = _s, bd = _bd, os = _os)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bd");
[info]           out.writeVal(x.bd)
[info]         };
[info]         {
[info]           val v = x.os;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("os");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "s"
[info]         case 1 => "bd"
[info]         case 2 => "os"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val anyRefsCodec: JsonValueCodec[AnyRefs] = make[AnyRefs](CodecMakerConfig())
[info]                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:23:97: Generated JSON codec for type 'Array[BigDecimal]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigDecimal]] {
[info]       def nullValue: Array[BigDecimal] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = d0(in, default);
[info]       def encodeValue(x: Array[BigDecimal], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigDecimal](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigDecimal(null, 300));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigDecimal], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[BigDecimal] = new Array[scala.math.BigDecimal](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigDecimalArrayCodec: JsonValueCodec[Array[BigDecimal]] = make[Array[BigDecimal]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:24:85: Generated JSON codec for type 'Array[BigInt]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigInt]] {
[info]       def nullValue: Array[BigInt] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigInt]): Array[BigInt] = d0(in, default);
[info]       def encodeValue(x: Array[BigInt], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigInt](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigInt(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigInt], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[BigInt] = new Array[scala.math.BigInt](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigIntArrayCodec: JsonValueCodec[Array[BigInt]] = make[Array[BigInt]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:25:122: Generated JSON codec for type 'scala.collection.mutable.ArrayBuffer[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.ArrayBuffer[Boolean]] {
[info]       def nullValue: scala.collection.mutable.ArrayBuffer[Boolean] = ArrayBuffer.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[Boolean]): scala.collection.mutable.ArrayBuffer[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.ArrayBuffer[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[Boolean]): scala.collection.mutable.ArrayBuffer[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = default;
[info]             if (x.nonEmpty)
[info]               x.clear()
[info]             else
[info]               ();
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.ArrayBuffer[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayBufferCodec: JsonValueCodec[mutable.ArrayBuffer[Boolean]] = make[mutable.ArrayBuffer[Boolean]](CodecMakerConfig())
[info]                                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:26:88: Generated JSON codec for type 'Array[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Boolean]] {
[info]       def nullValue: Array[Boolean] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Boolean]): Array[Boolean] = d0(in, default);
[info]       def encodeValue(x: Array[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Boolean]): Array[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Boolean](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBoolean());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Boolean] = new Array[Boolean](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayCodec: JsonValueCodec[Array[Boolean]] = make[Array[Boolean]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:27:85: Generated JSON codec for type 'List[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[List[Boolean]] {
[info]       def nullValue: List[Boolean] = List.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: List[Boolean]): List[Boolean] = d0(in, default);
[info]       def encodeValue(x: List[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: List[Boolean]): List[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = List.newBuilder[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: List[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var l = x;
[info]         while (l.isEmpty.`unary_!`) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(l.head);
[info]             l = l.tail
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanListCodec: JsonValueCodec[List[Boolean]] = make[List[Boolean]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:28:91: Generated JSON codec for type 'scala.collection.immutable.Vector[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Vector[Boolean]] {
[info]       def nullValue: scala.collection.immutable.Vector[Boolean] = Vector.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Vector[Boolean]): scala.collection.immutable.Vector[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Vector[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Vector[Boolean]): scala.collection.immutable.Vector[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Vector.newBuilder[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.Vector[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanVectorCodec: JsonValueCodec[Vector[Boolean]] = make[Vector[Boolean]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:29:79: Generated JSON codec for type 'Array[Byte]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Byte]] {
[info]       def nullValue: Array[Byte] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Byte]): Array[Byte] = d0(in, default);
[info]       def encodeValue(x: Array[Byte], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Byte]): Array[Byte] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Byte](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readByte());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Byte], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Byte] = new Array[Byte](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val byteArrayCodec: JsonValueCodec[Array[Byte]] = make[Array[Byte]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:30:79: Generated JSON codec for type 'Array[Char]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Char]] {
[info]       def nullValue: Array[Char] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Char]): Array[Char] = d0(in, default);
[info]       def encodeValue(x: Array[Char], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Char]): Array[Char] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Char](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readChar());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Char], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Char] = new Array[Char](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val charArrayCodec: JsonValueCodec[Array[Char]] = make[Array[Char]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:31:85: Generated JSON codec for type 'Array[Double]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Double]] {
[info]       def nullValue: Array[Double] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Double]): Array[Double] = d0(in, default);
[info]       def encodeValue(x: Array[Double], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Double]): Array[Double] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Double](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDouble());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Double], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Double] = new Array[Double](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val doubleArrayCodec: JsonValueCodec[Array[Double]] = make[Array[Double]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:32:91: Generated JSON codec for type 'Array[java.time.Duration]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Duration]] {
[info]       def nullValue: Array[java.time.Duration] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Duration], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Duration](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDuration(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Duration], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.Duration] = new Array[java.time.Duration](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val durationArrayCodec: JsonValueCodec[Array[Duration]] = make[Array[Duration]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:33:87: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value): com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val len = in.readStringAsCharBuf();
[info]           SuitEnum.values.iterator.find(((e) => in.isCharBufEqualsTo(len, e.toString))).getOrElse(in.enumValueError(len))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value, out: JsonWriter): Unit = out.writeVal(x.toString);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val enumArrayCodec: JsonValueCodec[Array[SuitEnum]] = make[Array[SuitEnum]](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:34:82: Generated JSON codec for type 'Array[Float]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Float]] {
[info]       def nullValue: Array[Float] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Float]): Array[Float] = d0(in, default);
[info]       def encodeValue(x: Array[Float], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Float]): Array[Float] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Float](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readFloat());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Float], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Float] = new Array[Float](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val floatArrayCodec: JsonValueCodec[Array[Float]] = make[Array[Float]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:35:88: Generated JSON codec for type 'Array[java.time.Instant]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Instant]] {
[info]       def nullValue: Array[java.time.Instant] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Instant], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Instant](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInstant(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Instant], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.Instant] = new Array[java.time.Instant](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val instantArrayCodec: JsonValueCodec[Array[Instant]] = make[Array[Instant]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:36:76: Generated JSON codec for type 'Array[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Int]] {
[info]       def nullValue: Array[Int] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Int]): Array[Int] = d0(in, default);
[info]       def encodeValue(x: Array[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Int](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInt());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Int] = new Array[Int](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intArrayCodec: JsonValueCodec[Array[Int]] = make[Array[Int]](CodecMakerConfig())
[info]                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:37:83: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Suit): com.github.plokhotnyuk.jsoniter_scala.macros.Suit = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val v = in.readString(null);
[info]           try {
[info]             Suit.valueOf(v)
[info]           } catch {
[info]             case ((_): IllegalArgumentException) => in.enumValueError(v)
[info]           }
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Suit, out: JsonWriter): Unit = out.writeVal(x.name);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val javaEnumArrayCodec: JsonValueCodec[Array[Suit]] = make[Array[Suit]](CodecMakerConfig())
[info]                                                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:38:79: Generated JSON codec for type 'Array[Long]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Long]] {
[info]       def nullValue: Array[Long] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Long]): Array[Long] = d0(in, default);
[info]       def encodeValue(x: Array[Long], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Long]): Array[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLong());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Long] = new Array[Long](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val longArrayCodec: JsonValueCodec[Array[Long]] = make[Array[Long]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:39:94: Generated JSON codec for type 'Array[java.time.LocalDate]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDate]] {
[info]       def nullValue: Array[java.time.LocalDate] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDate], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDate](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDate(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDate], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.LocalDate] = new Array[java.time.LocalDate](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateArrayCodec: JsonValueCodec[Array[LocalDate]] = make[Array[LocalDate]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:40:106: Generated JSON codec for type 'Array[java.time.LocalDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDateTime]] {
[info]       def nullValue: Array[java.time.LocalDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.LocalDateTime] = new Array[java.time.LocalDateTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateTimeArrayCodec: JsonValueCodec[Array[LocalDateTime]] = make[Array[LocalDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:41:94: Generated JSON codec for type 'Array[java.time.LocalTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalTime]] {
[info]       def nullValue: Array[java.time.LocalTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.LocalTime] = new Array[java.time.LocalTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localTimeArrayCodec: JsonValueCodec[Array[LocalTime]] = make[Array[LocalTime]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:42:109: Generated JSON codec for type 'Array[java.time.OffsetDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetDateTime]] {
[info]       def nullValue: Array[java.time.OffsetDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.OffsetDateTime] = new Array[java.time.OffsetDateTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetDateTimeArrayCodec: JsonValueCodec[Array[OffsetDateTime]] = make[Array[OffsetDateTime]](CodecMakerConfig())
[info]                                                                                                             ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:43:97: Generated JSON codec for type 'Array[java.time.OffsetTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetTime]] {
[info]       def nullValue: Array[java.time.OffsetTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.OffsetTime] = new Array[java.time.OffsetTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetTimeArrayCodec: JsonValueCodec[Array[OffsetTime]] = make[Array[OffsetTime]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:44:85: Generated JSON codec for type 'Array[java.time.Period]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Period]] {
[info]       def nullValue: Array[java.time.Period] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Period], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Period](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readPeriod(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Period], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.Period] = new Array[java.time.Period](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val periodArrayCodec: JsonValueCodec[Array[Period]] = make[Array[Period]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:45:82: Generated JSON codec for type 'Array[Short]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Short]] {
[info]       def nullValue: Array[Short] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Short]): Array[Short] = d0(in, default);
[info]       def encodeValue(x: Array[Short], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Short]): Array[Short] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Short](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readShort());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Short], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Short] = new Array[Short](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val shortArrayCodec: JsonValueCodec[Array[Short]] = make[Array[Short]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:46:79: Generated JSON codec for type 'Array[java.util.UUID]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.util.UUID]] {
[info]       def nullValue: Array[java.util.UUID] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = d0(in, default);
[info]       def encodeValue(x: Array[java.util.UUID], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.util.UUID](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readUUID(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.util.UUID], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.util.UUID] = new Array[java.util.UUID](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val uuidArrayCodec: JsonValueCodec[Array[UUID]] = make[Array[UUID]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:47:79: Generated JSON codec for type 'Array[java.time.Year]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Year]] {
[info]       def nullValue: Array[java.time.Year] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Year]): Array[java.time.Year] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Year], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Year]): Array[java.time.Year] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Year](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readYear(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Year], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.Year] = new Array[java.time.Year](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val yearArrayCodec: JsonValueCodec[Array[Year]] = make[Array[Year]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:48:94: Generated JSON codec for type 'Array[java.time.YearMonth]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.YearMonth]] {
[info]       def nullValue: Array[java.time.YearMonth] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.YearMonth]): Array[java.time.YearMonth] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.YearMonth], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.YearMonth]): Array[java.time.YearMonth] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.YearMonth](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readYearMonth(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.YearMonth], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.YearMonth] = new Array[java.time.YearMonth](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val yearMonthArrayCodec: JsonValueCodec[Array[YearMonth]] = make[Array[YearMonth]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:49:106: Generated JSON codec for type 'Array[java.time.ZonedDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZonedDateTime]] {
[info]       def nullValue: Array[java.time.ZonedDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZonedDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZonedDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.ZonedDateTime] = new Array[java.time.ZonedDateTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zonedDateTimeArrayCodec: JsonValueCodec[Array[ZonedDateTime]] = make[Array[ZonedDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:50:85: Generated JSON codec for type 'Array[java.time.ZoneId]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneId]] {
[info]       def nullValue: Array[java.time.ZoneId] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneId], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneId](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneId(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneId], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.ZoneId] = new Array[java.time.ZoneId](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneIdArrayCodec: JsonValueCodec[Array[ZoneId]] = make[Array[ZoneId]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:51:97: Generated JSON codec for type 'Array[java.time.ZoneOffset]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneOffset]] {
[info]       def nullValue: Array[java.time.ZoneOffset] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneOffset](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneOffset(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.ZoneOffset] = new Array[java.time.ZoneOffset](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneOffsetArrayCodec: JsonValueCodec[Array[ZoneOffset]] = make[Array[ZoneOffset]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:52:66: Generated JSON codec for type 'scala.collection.immutable.BitSet':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.BitSet] {
[info]       def nullValue: scala.collection.immutable.BitSet = BitSet.empty;
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](2);
[info]             var mi = 0;
[info]             do 
[info]               {
[info]                 val v = in.readInt();
[info]                 if (v.<(0).||(v.>=(2147483647)))
[info]                   in.decodeError("illegal value for bit set")
[info]                 else
[info]                   ();
[info]                 val i = v.>>>(6);
[info]                 if (i.>(mi))
[info]                   {
[info]                     mi = i;
[info]                     if (i.>=(x.length))
[info]                       x = java.util.Arrays.copyOf(x, java.lang.Integer.highestOneBit(i).<<(1))
[info]                     else
[info]                       ()
[info]                   }
[info]                 else
[info]                   ();
[info]                 x(i).|=(1L.<<(v.&(63)))
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               {
[info]                 if (mi.>(1).&&(mi.+(1).!=(x.length)))
[info]                   x = java.util.Arrays.copyOf(x, mi.+(1))
[info]                 else
[info]                   ();
[info]                 BitSet.fromBitMaskNoCopy(x)
[info]               }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bitSetCodec: JsonValueCodec[BitSet] = make[BitSet](CodecMakerConfig(bitSetValueLimit = Int.MaxValue /*WARNING: don't do this for open-system*/))
[info]                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:53:87: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields(s = _s, i = _i)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "s"
[info]         case 1 => "i"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val extractFieldsCodec: JsonValueCodec[ExtractFields] = make[ExtractFields](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:54:94: Generated JSON codec for type 'scala.collection.immutable.IntMap[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.IntMap[Boolean]] {
[info]       def nullValue: scala.collection.immutable.IntMap[Boolean] = IntMap.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.IntMap[Boolean]): scala.collection.immutable.IntMap[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.IntMap[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.IntMap[Boolean]): scala.collection.immutable.IntMap[Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = IntMap.empty[Boolean];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.immutable.IntMap[Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intMapOfBooleansCodec: JsonValueCodec[IntMap[Boolean]] = make[IntMap[Boolean]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:55:89: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: IndexedSeq[String]): IndexedSeq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Value): com.github.plokhotnyuk.jsoniter_scala.macros.Value = if (in.isNextToken('{'))
[info]         {
[info]           var _text: String = null;
[info]           var _value: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 111972721 => if (in.isCharBufEqualsTo(l, "value"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _value = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Value(text = _text, value = _value)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Elements): com.github.plokhotnyuk.jsoniter_scala.macros.Elements = if (in.isNextToken('{'))
[info]         {
[info]           var _distance: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _duration: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _status: String = null;
[info]           var p0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 288459765 => if (in.isCharBufEqualsTo(l, "distance"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _distance = d6(in, _distance)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1992012396 => if (in.isCharBufEqualsTo(l, "duration"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _duration = d6(in, _duration)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _status = in.readString(_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(7).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Elements(distance = _distance, duration = _duration, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Rows): com.github.plokhotnyuk.jsoniter_scala.macros.Rows = if (in.isNextToken('{'))
[info]         {
[info]           var _elements: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -8339209 => if (in.isCharBufEqualsTo(l, "elements"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _elements = d4(in, _elements)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Rows(elements = _elements)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = if (in.isNextToken('{'))
[info]         {
[info]           var _destination_addresses: IndexedSeq[String] = IndexedSeq.empty[String];
[info]           var _origin_addresses: IndexedSeq[String] = IndexedSeq.empty[String];
[info]           var _rows: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]           var _status: String = null;
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 715423921 => if (in.isCharBufEqualsTo(l, "destination_addresses"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _destination_addresses = d1(in, _destination_addresses)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1780936137 => if (in.isCharBufEqualsTo(l, "origin_addresses"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _origin_addresses = d1(in, _origin_addresses)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3506649 => if (in.isCharBufEqualsTo(l, "rows"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _rows = d2(in, _rows)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _status = in.readString(_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(8).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix(destination_addresses = _destination_addresses, origin_addresses = _origin_addresses, rows = _rows, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: IndexedSeq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: com.github.plokhotnyuk.jsoniter_scala.macros.Value, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("value");
[info]           out.writeVal(x.value)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.Elements, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("distance");
[info]           e6(x.distance, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("duration");
[info]           e6(x.duration, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e5(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Rows, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.elements;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("elements");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e3(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.destination_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("destination_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.origin_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("origin_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.rows;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("rows");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "destination_addresses"
[info]         case 1 => "origin_addresses"
[info]         case 2 => "rows"
[info]         case 3 => "status"
[info]       };
[info]       private[this] def f1(i: Int): String = (i: @switch) match {
[info]         case 0 => "distance"
[info]         case 1 => "duration"
[info]         case 2 => "status"
[info]       };
[info]       private[this] def f2(i: Int): String = (i: @switch) match {
[info]         case 0 => "text"
[info]         case 1 => "value"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val googleMapsAPICodec: JsonValueCodec[DistanceMatrix] = make[DistanceMatrix](CodecMakerConfig())
[info]                                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:56:101: Generated JSON codec for type 'scala.collection.immutable.Map[Int,Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Map[Int,Boolean]] {
[info]       def nullValue: scala.collection.immutable.Map[Int,Boolean] = Map.empty[Int, Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Map[Int,Boolean]): scala.collection.immutable.Map[Int,Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Map[Int,Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Map[Int,Boolean]): scala.collection.immutable.Map[Int,Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[Int, Boolean];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.immutable.Map[Int,Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mapOfIntsToBooleansCodec: JsonValueCodec[Map[Int, Boolean]] = make[Map[Int, Boolean]](CodecMakerConfig())
[info]                                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:57:95: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields(s = _s, i = _i)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "s"
[info]         case 1 => "i"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val missingReqFieldCodec: JsonValueCodec[MissingReqFields] = make[MissingReqFields](CodecMakerConfig())
[info]                                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:58:89: Generated JSON codec for type 'scala.collection.mutable.BitSet':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.BitSet] {
[info]       def nullValue: scala.collection.mutable.BitSet = BitSet.empty;
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](2);
[info]             do 
[info]               {
[info]                 val v = in.readInt();
[info]                 if (v.<(0).||(v.>=(2147483647)))
[info]                   in.decodeError("illegal value for bit set")
[info]                 else
[info]                   ();
[info]                 val i = v.>>>(6);
[info]                 if (i.>=(x.length))
[info]                   x = java.util.Arrays.copyOf(x, java.lang.Integer.highestOneBit(i).<<(1))
[info]                 else
[info]                   ();
[info]                 x(i).|=(1L.<<(v.&(63)))
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               BitSet.fromBitMaskNoCopy(x)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableBitSetCodec: JsonValueCodec[mutable.BitSet] = make[mutable.BitSet](CodecMakerConfig(bitSetValueLimit = Int.MaxValue /*WARNING: don't do this for open-system*/))
[info]                                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:59:120: Generated JSON codec for type 'scala.collection.mutable.LongMap[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.LongMap[Boolean]] {
[info]       def nullValue: scala.collection.mutable.LongMap[Boolean] = LongMap.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.LongMap[Boolean]): scala.collection.mutable.LongMap[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.LongMap[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.LongMap[Boolean]): scala.collection.mutable.LongMap[Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               LongMap.empty[Boolean];
[info]             do 
[info]               x.update(in.readKeyAsLong(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.mutable.LongMap[Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableLongMapOfBooleansCodec: JsonValueCodec[mutable.LongMap[Boolean]] = make[mutable.LongMap[Boolean]](CodecMakerConfig())
[info]                                                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:60:124: Generated JSON codec for type 'scala.collection.mutable.Map[Int,Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.Map[Int,Boolean]] {
[info]       def nullValue: scala.collection.mutable.Map[Int,Boolean] = Map.empty[Int, Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.Map[Int,Boolean]): scala.collection.mutable.Map[Int,Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.Map[Int,Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.Map[Int,Boolean]): scala.collection.mutable.Map[Int,Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Map.empty[Int, Boolean];
[info]             do 
[info]               x.update(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.mutable.Map[Int,Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableMapOfIntsToBooleansCodec: JsonValueCodec[mutable.Map[Int, Boolean]] = make[mutable.Map[Int, Boolean]](CodecMakerConfig())
[info]                                                                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:61:96: Generated JSON codec for type 'scala.collection.mutable.Set[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.Set[Int]] {
[info]       def nullValue: scala.collection.mutable.Set[Int] = Set.empty[Int];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.Set[Int]): scala.collection.mutable.Set[Int] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.Set[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.Set[Int]): scala.collection.mutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = default;
[info]             if (x.nonEmpty)
[info]               x.clear()
[info]             else
[info]               ();
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableSetOfIntsCodec: JsonValueCodec[mutable.Set[Int]] = make[mutable.Set[Int]](CodecMakerConfig())
[info]                                                                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:62:78: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Primitives':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Primitives] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = if (in.isNextToken('{'))
[info]         {
[info]           var _b: Byte = ((0): Byte);
[info]           var _s: Short = ((0): Short);
[info]           var _i: Int = 0;
[info]           var _l: Long = 0L;
[info]           var _bl: Boolean = false;
[info]           var _ch: Char = '\u0000';
[info]           var _dbl: Double = 0.0;
[info]           var _f: Float = 0.0F;
[info]           var p0 = 255;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _b = in.readByte()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readShort()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3146 => if (in.isCharBufEqualsTo(l, "bl"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _bl = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3173 => if (in.isCharBufEqualsTo(l, "ch"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _ch = in.readChar()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 99246 => if (in.isCharBufEqualsTo(l, "dbl"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _dbl = in.readDouble()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102 => if (in.isCharBufEqualsTo(l, "f"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _f = in.readFloat()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(255).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Primitives(b = _b, s = _s, i = _i, l = _l, bl = _bl, ch = _ch, dbl = _dbl, f = _f)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bl");
[info]           out.writeVal(x.bl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("ch");
[info]           out.writeVal(x.ch)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("dbl");
[info]           out.writeVal(x.dbl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("f");
[info]           out.writeVal(x.f)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "b"
[info]         case 1 => "s"
[info]         case 2 => "i"
[info]         case 3 => "l"
[info]         case 4 => "bl"
[info]         case 5 => "ch"
[info]         case 6 => "dbl"
[info]         case 7 => "f"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val primitivesCodec: JsonValueCodec[Primitives] = make[Primitives](CodecMakerConfig())
[info]                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:63:73: Generated JSON codec for type 'scala.collection.immutable.Set[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Set[Int]] {
[info]       def nullValue: scala.collection.immutable.Set[Int] = Set.empty[Int];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Set.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val setOfIntsCodec: JsonValueCodec[Set[Int]] = make[Set[Int]](CodecMakerConfig())
[info]                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:64:78: Generated JSON codec for type 'Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]] {
[info]       def nullValue: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]       def decodeValue(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = d0(in, default);
[info]       def encodeValue(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d3(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: Seq[Int]): Seq[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions): com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions = if (in.isNextToken('{'))
[info]         {
[info]           var _screen_name: String = null;
[info]           var _name: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var p0 = 31;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _screen_name = in.readString(_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _name = in.readString(_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _indices = d6(in, _indices)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(15).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions(screen_name = _screen_name, name = _name, id = _id, id_str = _id_str, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Urls): com.github.plokhotnyuk.jsoniter_scala.macros.Urls = if (in.isNextToken('{'))
[info]         {
[info]           var _url: String = null;
[info]           var _expanded_url: String = null;
[info]           var _display_url: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = in.readString(_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -518939415 => if (in.isCharBufEqualsTo(l, "expanded_url"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _expanded_url = in.readString(_expanded_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1714674802 => if (in.isCharBufEqualsTo(l, "display_url"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _display_url = in.readString(_display_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _indices = d6(in, _indices)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(7).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Urls(url = _url, expanded_url = _expanded_url, display_url = _display_url, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d7(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]             do 
[info]               x.+=(d8(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Entities): com.github.plokhotnyuk.jsoniter_scala.macros.Entities = if (in.isNextToken('{'))
[info]         {
[info]           var _hashtags: Seq[String] = Seq.empty[String];
[info]           var _symbols: Seq[String] = Seq.empty[String];
[info]           var _user_mentions: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 149143079 => if (in.isCharBufEqualsTo(l, "hashtags"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _hashtags = d3(in, _hashtags)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1743438373 => if (in.isCharBufEqualsTo(l, "symbols"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _symbols = d3(in, _symbols)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -553518659 => if (in.isCharBufEqualsTo(l, "user_mentions"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user_mentions = d4(in, _user_mentions)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _urls = d7(in, _urls)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Entities(hashtags = _hashtags, symbols = _symbols, user_mentions = _user_mentions, urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d9(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Url): com.github.plokhotnyuk.jsoniter_scala.macros.Url = if (in.isNextToken('{'))
[info]         {
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _urls = d7(in, _urls)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Url(urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities): com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = if (in.isNextToken('{'))
[info]         {
[info]           var _url: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var _description: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = d12(in, _url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _description = d12(in, _description)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f4(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities(url = _url, description = _description)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.User): com.github.plokhotnyuk.jsoniter_scala.macros.User = if (in.isNextToken('{'))
[info]         {
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _name: String = null;
[info]           var _screen_name: String = null;
[info]           var _location: String = null;
[info]           var _description: String = null;
[info]           var _url: String = null;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = null;
[info]           var _protected: Boolean = false;
[info]           var _followers_count: Int = 0;
[info]           var _friends_count: Int = 0;
[info]           var _listed_count: Int = 0;
[info]           var _created_at: String = null;
[info]           var _favourites_count: Int = 0;
[info]           var _utc_offset: Int = 0;
[info]           var _time_zone: String = null;
[info]           var _geo_enabled: Boolean = false;
[info]           var _verified: Boolean = false;
[info]           var _statuses_count: Int = 0;
[info]           var _lang: String = null;
[info]           var _contributors_enabled: Boolean = false;
[info]           var _is_translator: Boolean = false;
[info]           var _is_translation_enabled: Boolean = false;
[info]           var _profile_background_color: String = null;
[info]           var _profile_background_image_url: String = null;
[info]           var _profile_background_image_url_https: String = null;
[info]           var _profile_background_tile: Boolean = false;
[info]           var _profile_image_url: String = null;
[info]           var _profile_image_url_https: String = null;
[info]           var _profile_banner_url: String = null;
[info]           var _profile_link_color: String = null;
[info]           var _profile_sidebar_border_color: String = null;
[info]           var _profile_sidebar_fill_color: String = null;
[info]           var _profile_text_color: String = null;
[info]           var _profile_use_background_image: Boolean = false;
[info]           var _has_extended_profile: Boolean = false;
[info]           var _default_profile: Boolean = false;
[info]           var _default_profile_image: Boolean = false;
[info]           var _following: Boolean = false;
[info]           var _follow_request_sent: Boolean = false;
[info]           var _notifications: Boolean = false;
[info]           var _translator_type: String = null;
[info]           var p0 = -1;
[info]           var p1 = 1023;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _name = in.readString(_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _screen_name = in.readString(_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1901043637 => if (in.isCharBufEqualsTo(l, "location"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _location = in.readString(_location)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _description = in.readString(_description)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = in.readString(_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d11(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -608539730 => if (in.isCharBufEqualsTo(l, "protected"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _protected = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -460163995 => if (in.isCharBufEqualsTo(l, "followers_count"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _followers_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1666926107 => if (in.isCharBufEqualsTo(l, "friends_count"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _friends_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1974943731 => if (in.isCharBufEqualsTo(l, "listed_count"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _listed_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 226316666 => if (in.isCharBufEqualsTo(l, "favourites_count"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favourites_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1699658638 => if (in.isCharBufEqualsTo(l, "utc_offset"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _utc_offset = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 36848094 => if (in.isCharBufEqualsTo(l, "time_zone"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _time_zone = in.readString(_time_zone)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1085743021 => if (in.isCharBufEqualsTo(l, "geo_enabled"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1994383672 => if (in.isCharBufEqualsTo(l, "verified"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _verified = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1824078800 => if (in.isCharBufEqualsTo(l, "statuses_count"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _statuses_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 647263482 => if (in.isCharBufEqualsTo(l, "contributors_enabled"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 583435343 => if (in.isCharBufEqualsTo(l, "is_translator"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_translator = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1690715422 => if (in.isCharBufEqualsTo(l, "is_translation_enabled"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_translation_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1592986856 => if (in.isCharBufEqualsTo(l, "profile_background_color"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_color = in.readString(_profile_background_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1189803120 => if (in.isCharBufEqualsTo(l, "profile_background_image_url"))
[info]                       {
[info]                         if (p0.&(16777216).!=(0))
[info]                           p0.^=(16777216)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_image_url = in.readString(_profile_background_image_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 594447228 => if (in.isCharBufEqualsTo(l, "profile_background_image_url_https"))
[info]                       {
[info]                         if (p0.&(33554432).!=(0))
[info]                           p0.^=(33554432)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_image_url_https = in.readString(_profile_background_image_url_https)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1021718665 => if (in.isCharBufEqualsTo(l, "profile_background_tile"))
[info]                       {
[info]                         if (p0.&(67108864).!=(0))
[info]                           p0.^=(67108864)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_tile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -174080651 => if (in.isCharBufEqualsTo(l, "profile_image_url"))
[info]                       {
[info]                         if (p0.&(134217728).!=(0))
[info]                           p0.^=(134217728)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_image_url = in.readString(_profile_image_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -782008927 => if (in.isCharBufEqualsTo(l, "profile_image_url_https"))
[info]                       {
[info]                         if (p0.&(268435456).!=(0))
[info]                           p0.^=(268435456)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_image_url_https = in.readString(_profile_image_url_https)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -690137550 => if (in.isCharBufEqualsTo(l, "profile_banner_url"))
[info]                       {
[info]                         if (p0.&(536870912).!=(0))
[info]                           p0.^=(536870912)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_banner_url = in.readString(_profile_banner_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1512257332 => if (in.isCharBufEqualsTo(l, "profile_link_color"))
[info]                       {
[info]                         if (p0.&(1073741824).!=(0))
[info]                           p0.^=(1073741824)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_link_color = in.readString(_profile_link_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1412739479 => if (in.isCharBufEqualsTo(l, "profile_sidebar_border_color"))
[info]                       {
[info]                         if (p0.&(-2147483648).!=(0))
[info]                           p0.^=(-2147483648)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_sidebar_border_color = in.readString(_profile_sidebar_border_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 486184128 => if (in.isCharBufEqualsTo(l, "profile_sidebar_fill_color"))
[info]                       {
[info]                         if (p1.&(1).!=(0))
[info]                           p1.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_sidebar_fill_color = in.readString(_profile_sidebar_fill_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1774134745 => if (in.isCharBufEqualsTo(l, "profile_text_color"))
[info]                       {
[info]                         if (p1.&(2).!=(0))
[info]                           p1.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_text_color = in.readString(_profile_text_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -101767272 => if (in.isCharBufEqualsTo(l, "profile_use_background_image"))
[info]                       {
[info]                         if (p1.&(4).!=(0))
[info]                           p1.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_use_background_image = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 284519336 => if (in.isCharBufEqualsTo(l, "has_extended_profile"))
[info]                       {
[info]                         if (p1.&(8).!=(0))
[info]                           p1.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _has_extended_profile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -312724053 => if (in.isCharBufEqualsTo(l, "default_profile"))
[info]                       {
[info]                         if (p1.&(16).!=(0))
[info]                           p1.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _default_profile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 545330631 => if (in.isCharBufEqualsTo(l, "default_profile_image"))
[info]                       {
[info]                         if (p1.&(32).!=(0))
[info]                           p1.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _default_profile_image = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 765915793 => if (in.isCharBufEqualsTo(l, "following"))
[info]                       {
[info]                         if (p1.&(64).!=(0))
[info]                           p1.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _following = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 585125142 => if (in.isCharBufEqualsTo(l, "follow_request_sent"))
[info]                       {
[info]                         if (p1.&(128).!=(0))
[info]                           p1.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _follow_request_sent = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1272354024 => if (in.isCharBufEqualsTo(l, "notifications"))
[info]                       {
[info]                         if (p1.&(256).!=(0))
[info]                           p1.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _notifications = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -475640257 => if (in.isCharBufEqualsTo(l, "translator_type"))
[info]                       {
[info]                         if (p1.&(512).!=(0))
[info]                           p1.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _translator_type = in.readString(_translator_type)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(-1).!=(0))
[info]             in.requiredFieldError(f3(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           if (p1.&(1023).!=(0))
[info]             in.requiredFieldError(f3(Integer.numberOfTrailingZeros(p1).+(32)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.User(id = _id, id_str = _id_str, name = _name, screen_name = _screen_name, location = _location, description = _description, url = _url, entities = _entities, `protected` = _protected, followers_count = _followers_count, friends_count = _friends_count, listed_count = _listed_count, created_at = _created_at, favourites_count = _favourites_count, utc_offset = _utc_offset, time_zone = _time_zone, geo_enabled = _geo_enabled, verified = _verified, statuses_count = _statuses_count, lang = _lang, contributors_enabled = _contributors_enabled, is_translator = _is_translator, is_translation_enabled = _is_translation_enabled, profile_background_color = _profile_background_color, profile_background_image_url = _profile_background_image_url, profile_background_image_url_https = _profile_background_image_url_https, profile_background_tile = _profile_background_tile, profile_image_url = _profile_image_url, profile_image_url_https = _profile_image_url_https, profile_banner_url = _profile_banner_url, profile_link_color = _profile_link_color, profile_sidebar_border_color = _profile_sidebar_border_color, profile_sidebar_fill_color = _profile_sidebar_fill_color, profile_text_color = _profile_text_color, profile_use_background_image = _profile_use_background_image, has_extended_profile = _has_extended_profile, default_profile = _default_profile, default_profile_image = _default_profile_image, following = _following, follow_request_sent = _follow_request_sent, notifications = _notifications, translator_type = _translator_type)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus): com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var p0 = 16777215;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _truncated = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d2(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _source = in.readString(_source)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user = d10(in, _user)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo = d9(in, _geo)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _place = d9(in, _place)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors = d9(in, _contributors)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_quote_status = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweet_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorite_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorited = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _possibly_sensitive = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(16650367).!=(0))
[info]             in.requiredFieldError(f5(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet): com.github.plokhotnyuk.jsoniter_scala.macros.Tweet = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _retweeted_status: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = null;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var p0 = 33554431;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _truncated = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d2(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _source = in.readString(_source)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user = d10(in, _user)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo = d9(in, _geo)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _place = d9(in, _place)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors = d9(in, _contributors)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 364396852 => if (in.isCharBufEqualsTo(l, "retweeted_status"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted_status = d13(in, _retweeted_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_quote_status = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweet_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorite_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorited = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _possibly_sensitive = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(16777216).!=(0))
[info]                           p0.^=(16777216)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(33427583).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Tweet(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, retweeted_status = _retweeted_status, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]             do 
[info]               x.+=(d1(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e3(x: Seq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: Seq[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e5(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.Urls, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("expanded_url");
[info]           out.writeVal(x.expanded_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("display_url");
[info]           out.writeVal(x.display_url)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e7(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e8(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.Entities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.hashtags;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("hashtags");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.symbols;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("symbols");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.user_mentions;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("user_mentions");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.Url, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           e11(x.url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           e11(x.description, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e9(x: com.github.plokhotnyuk.jsoniter_scala.macros.User, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("location");
[info]           out.writeVal(x.location)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           out.writeVal(x.description)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e10(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("protected");
[info]           out.writeVal(x.`protected`)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("followers_count");
[info]           out.writeVal(x.followers_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("friends_count");
[info]           out.writeVal(x.friends_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("listed_count");
[info]           out.writeVal(x.listed_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favourites_count");
[info]           out.writeVal(x.favourites_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("utc_offset");
[info]           out.writeVal(x.utc_offset)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("time_zone");
[info]           out.writeVal(x.time_zone)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geo_enabled");
[info]           out.writeVal(x.geo_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("verified");
[info]           out.writeVal(x.verified)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("statuses_count");
[info]           out.writeVal(x.statuses_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("contributors_enabled");
[info]           out.writeVal(x.contributors_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translator");
[info]           out.writeVal(x.is_translator)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translation_enabled");
[info]           out.writeVal(x.is_translation_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_color");
[info]           out.writeVal(x.profile_background_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url");
[info]           out.writeVal(x.profile_background_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url_https");
[info]           out.writeVal(x.profile_background_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_tile");
[info]           out.writeVal(x.profile_background_tile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url");
[info]           out.writeVal(x.profile_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url_https");
[info]           out.writeVal(x.profile_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_banner_url");
[info]           out.writeVal(x.profile_banner_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_link_color");
[info]           out.writeVal(x.profile_link_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_border_color");
[info]           out.writeVal(x.profile_sidebar_border_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_fill_color");
[info]           out.writeVal(x.profile_sidebar_fill_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_text_color");
[info]           out.writeVal(x.profile_text_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_use_background_image");
[info]           out.writeVal(x.profile_use_background_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("has_extended_profile");
[info]           out.writeVal(x.has_extended_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile");
[info]           out.writeVal(x.default_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile_image");
[info]           out.writeVal(x.default_profile_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("following");
[info]           out.writeVal(x.following)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("follow_request_sent");
[info]           out.writeVal(x.follow_request_sent)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("notifications");
[info]           out.writeVal(x.notifications)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("translator_type");
[info]           out.writeVal(x.translator_type)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted_status");
[info]           e12(x.retweeted_status, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e1(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "created_at"
[info]         case 1 => "id"
[info]         case 2 => "id_str"
[info]         case 3 => "text"
[info]         case 4 => "truncated"
[info]         case 5 => "entities"
[info]         case 6 => "source"
[info]         case 7 => "in_reply_to_status_id"
[info]         case 8 => "in_reply_to_status_id_str"
[info]         case 9 => "in_reply_to_user_id"
[info]         case 10 => "in_reply_to_user_id_str"
[info]         case 11 => "in_reply_to_screen_name"
[info]         case 12 => "user"
[info]         case 13 => "geo"
[info]         case 14 => "coordinates"
[info]         case 15 => "place"
[info]         case 16 => "contributors"
[info]         case 17 => "retweeted_status"
[info]         case 18 => "is_quote_status"
[info]         case 19 => "retweet_count"
[info]         case 20 => "favorite_count"
[info]         case 21 => "favorited"
[info]         case 22 => "retweeted"
[info]         case 23 => "possibly_sensitive"
[info]         case 24 => "lang"
[info]       };
[info]       private[this] def f1(i: Int): String = (i: @switch) match {
[info]         case 0 => "screen_name"
[info]         case 1 => "name"
[info]         case 2 => "id"
[info]         case 3 => "id_str"
[info]         case 4 => "indices"
[info]       };
[info]       private[this] def f2(i: Int): String = (i: @switch) match {
[info]         case 0 => "url"
[info]         case 1 => "expanded_url"
[info]         case 2 => "display_url"
[info]         case 3 => "indices"
[info]       };
[info]       private[this] def f3(i: Int): String = (i: @switch) match {
[info]         case 0 => "id"
[info]         case 1 => "id_str"
[info]         case 2 => "name"
[info]         case 3 => "screen_name"
[info]         case 4 => "location"
[info]         case 5 => "description"
[info]         case 6 => "url"
[info]         case 7 => "entities"
[info]         case 8 => "protected"
[info]         case 9 => "followers_count"
[info]         case 10 => "friends_count"
[info]         case 11 => "listed_count"
[info]         case 12 => "created_at"
[info]         case 13 => "favourites_count"
[info]         case 14 => "utc_offset"
[info]         case 15 => "time_zone"
[info]         case 16 => "geo_enabled"
[info]         case 17 => "verified"
[info]         case 18 => "statuses_count"
[info]         case 19 => "lang"
[info]         case 20 => "contributors_enabled"
[info]         case 21 => "is_translator"
[info]         case 22 => "is_translation_enabled"
[info]         case 23 => "profile_background_color"
[info]         case 24 => "profile_background_image_url"
[info]         case 25 => "profile_background_image_url_https"
[info]         case 26 => "profile_background_tile"
[info]         case 27 => "profile_image_url"
[info]         case 28 => "profile_image_url_https"
[info]         case 29 => "profile_banner_url"
[info]         case 30 => "profile_link_color"
[info]         case 31 => "profile_sidebar_border_color"
[info]         case 32 => "profile_sidebar_fill_color"
[info]         case 33 => "profile_text_color"
[info]         case 34 => "profile_use_background_image"
[info]         case 35 => "has_extended_profile"
[info]         case 36 => "default_profile"
[info]         case 37 => "default_profile_image"
[info]         case 38 => "following"
[info]         case 39 => "follow_request_sent"
[info]         case 40 => "notifications"
[info]         case 41 => "translator_type"
[info]       };
[info]       private[this] def f4(i: Int): String = (i: @switch) match {
[info]         case 0 => "url"
[info]         case 1 => "description"
[info]       };
[info]       private[this] def f5(i: Int): String = (i: @switch) match {
[info]         case 0 => "created_at"
[info]         case 1 => "id"
[info]         case 2 => "id_str"
[info]         case 3 => "text"
[info]         case 4 => "truncated"
[info]         case 5 => "entities"
[info]         case 6 => "source"
[info]         case 7 => "in_reply_to_status_id"
[info]         case 8 => "in_reply_to_status_id_str"
[info]         case 9 => "in_reply_to_user_id"
[info]         case 10 => "in_reply_to_user_id_str"
[info]         case 11 => "in_reply_to_screen_name"
[info]         case 12 => "user"
[info]         case 13 => "geo"
[info]         case 14 => "coordinates"
[info]         case 15 => "place"
[info]         case 16 => "contributors"
[info]         case 17 => "is_quote_status"
[info]         case 18 => "retweet_count"
[info]         case 19 => "favorite_count"
[info]         case 20 => "favorited"
[info]         case 21 => "retweeted"
[info]         case 22 => "possibly_sensitive"
[info]         case 23 => "lang"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val twitterAPICodec: JsonValueCodec[Seq[Tweet]] = make[Seq[Tweet]](CodecMakerConfig())
[info]                                                                              ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:36:18: local val v1 in value primitivesFormat is never used
[warn]     implicit val v1: Format[Char] = Format(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:43:23: local val v1 in value adtFormat is never used
[warn]     implicit lazy val v1: OFormat[A] = Json.format[A]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:44:23: local val v2 in value adtFormat is never used
[warn]     implicit lazy val v2: OFormat[B] = Json.format[B]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:45:23: local val v3 in value adtFormat is never used
[warn]     implicit lazy val v3: OFormat[C] = Json.format[C]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:50:18: local val v1 in value googleMapsAPIFormat is never used
[warn]     implicit val v1: OFormat[Value] = Json.format[Value]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:51:18: local val v2 in value googleMapsAPIFormat is never used
[warn]     implicit val v2: OFormat[Elements] = Json.format[Elements]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:52:18: local val v3 in value googleMapsAPIFormat is never used
[warn]     implicit val v3: OFormat[Rows] = Json.format[Rows]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:56:18: local val v1 in value twitterAPIFormat is never used
[warn]     implicit val v1: OFormat[Urls] = Json.format[Urls]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:57:18: local val v2 in value twitterAPIFormat is never used
[warn]     implicit val v2: OFormat[Url] = Json.format[Url]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:58:18: local val v3 in value twitterAPIFormat is never used
[warn]     implicit val v3: OFormat[UserEntities] = Json.format[UserEntities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:59:18: local val v4 in value twitterAPIFormat is never used
[warn]     implicit val v4: OFormat[UserMentions] = Json.format[UserMentions]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:60:18: local val v5 in value twitterAPIFormat is never used
[warn]     implicit val v5: OFormat[Entities] = Json.format[Entities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:61:18: local val v6 in value twitterAPIFormat is never used
[warn]     implicit val v6: Format[User] = Jsonx.formatCaseClass[User]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:62:18: local val v7 in value twitterAPIFormat is never used
[warn]     implicit val v7: Format[RetweetedStatus] = Jsonx.formatCaseClass[RetweetedStatus]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:10:79: dead code following this construct
[warn]   implicit val adtReaderWriter: ReadWriter[AdtBase] = ReadWriter.merge(macroRW[A], macroRW[B], macroRW[C])
[warn]                                                                               ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:10:91: dead code following this construct
[warn]   implicit val adtReaderWriter: ReadWriter[AdtBase] = ReadWriter.merge(macroRW[A], macroRW[B], macroRW[C])
[warn]                                                                                           ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:10:103: dead code following this construct
[warn]   implicit val adtReaderWriter: ReadWriter[AdtBase] = ReadWriter.merge(macroRW[A], macroRW[B], macroRW[C])
[warn]                                                                                                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:11:66: dead code following this construct
[warn]   implicit val anyRefsReaderWriter: ReadWriter[AnyRefs] = macroRW[AnyRefs]
[warn]                                                                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:12:78: dead code following this construct
[warn]   implicit val extractFieldsReaderWriter: ReadWriter[ExtractFields] = macroRW[ExtractFields]
[warn]                                                                              ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:17:54: dead code following this construct
[warn]     implicit lazy val v1: ReadWriter[Point] = macroRW[Point]
[warn]                                                      ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:18:59: dead code following this construct
[warn]     implicit lazy val v2: ReadWriter[MultiPoint] = macroRW[MultiPoint]
[warn]                                                           ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:19:59: dead code following this construct
[warn]     implicit lazy val v3: ReadWriter[LineString] = macroRW[LineString]
[warn]                                                           ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:20:64: dead code following this construct
[warn]     implicit lazy val v4: ReadWriter[MultiLineString] = macroRW[MultiLineString]
[warn]                                                                ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:21:56: dead code following this construct
[warn]     implicit lazy val v5: ReadWriter[Polygon] = macroRW[Polygon]
[warn]                                                        ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:22:61: dead code following this construct
[warn]     implicit lazy val v6: ReadWriter[MultiPolygon] = macroRW[MultiPolygon]
[warn]                                                             ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:23:67: dead code following this construct
[warn]     implicit lazy val v7: ReadWriter[GeometryCollection] = macroRW[GeometryCollection]
[warn]                                                                   ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:25:66: dead code following this construct
[warn]     implicit lazy val v9: ReadWriter[FeatureCollection] = macroRW[FeatureCollection]
[warn]                                                                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:26:57: dead code following this construct
[warn]     implicit lazy val v10: ReadWriter[Feature] = macroRW[Feature]
[warn]                                                         ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:30:49: dead code following this construct
[warn]     implicit val v1: ReadWriter[Value] = macroRW[Value]
[warn]                                                 ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:31:52: dead code following this construct
[warn]     implicit val v2: ReadWriter[Elements] = macroRW[Elements]
[warn]                                                    ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:32:48: dead code following this construct
[warn]     implicit val v3: ReadWriter[Rows] = macroRW[Rows]
[warn]                                                ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:33:12: dead code following this construct
[warn]     macroRW[DistanceMatrix]
[warn]            ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:41:78: dead code following this construct
[warn]   implicit val nestedStructsReaderWriter: ReadWriter[NestedStructs] = macroRW[NestedStructs]
[warn]                                                                              ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:42:84: dead code following this construct
[warn]   implicit val missingReqFieldsReaderWriter: ReadWriter[MissingReqFields] = macroRW[MissingReqFields]
[warn]                                                                                    ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:48:72: dead code following this construct
[warn]   implicit val primitivesReaderWriter: ReadWriter[Primitives] = macroRW[Primitives]
[warn]                                                                        ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:53:48: dead code following this construct
[warn]     implicit val v1: ReadWriter[Urls] = macroRW[Urls]
[warn]                                                ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:54:47: dead code following this construct
[warn]     implicit val v2: ReadWriter[Url] = macroRW[Url]
[warn]                                               ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:55:56: dead code following this construct
[warn]     implicit val v3: ReadWriter[UserMentions] = macroRW[UserMentions]
[warn]                                                        ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:56:52: dead code following this construct
[warn]     implicit val v4: ReadWriter[Entities] = macroRW[Entities]
[warn]                                                    ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:57:56: dead code following this construct
[warn]     implicit val v5: ReadWriter[UserEntities] = macroRW[UserEntities]
[warn]                                                        ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:58:48: dead code following this construct
[warn]     implicit val v6: ReadWriter[User] = macroRW[User]
[warn]                                                ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:59:59: dead code following this construct
[warn]     implicit val v7: ReadWriter[RetweetedStatus] = macroRW[RetweetedStatus]
[warn]                                                           ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:60:12: dead code following this construct
[warn]     macroRW[Tweet]
[warn]            ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:6:14: Unused import
[warn] import ujson.BytesRenderer
[warn]              ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:17:23: local val v1 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v1: ReadWriter[Point] = macroRW[Point]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:18:23: local val v2 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v2: ReadWriter[MultiPoint] = macroRW[MultiPoint]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:19:23: local val v3 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v3: ReadWriter[LineString] = macroRW[LineString]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:20:23: local val v4 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v4: ReadWriter[MultiLineString] = macroRW[MultiLineString]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:21:23: local val v5 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v5: ReadWriter[Polygon] = macroRW[Polygon]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:22:23: local val v6 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v6: ReadWriter[MultiPolygon] = macroRW[MultiPolygon]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:23:23: local val v7 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v7: ReadWriter[GeometryCollection] = macroRW[GeometryCollection]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:24:23: local val v8 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v8: ReadWriter[Geometry] = macroRW[Geometry]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:25:23: local val v9 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v9: ReadWriter[FeatureCollection] = macroRW[FeatureCollection]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:26:23: local val v10 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v10: ReadWriter[Feature] = macroRW[Feature]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:30:18: local val v1 in value googleMApsAPIReaderWriter is never used
[warn]     implicit val v1: ReadWriter[Value] = macroRW[Value]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:31:18: local val v2 in value googleMApsAPIReaderWriter is never used
[warn]     implicit val v2: ReadWriter[Elements] = macroRW[Elements]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:32:18: local val v3 in value googleMApsAPIReaderWriter is never used
[warn]     implicit val v3: ReadWriter[Rows] = macroRW[Rows]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:53:18: local val v1 in value twitterAPIReaderWriter is never used
[warn]     implicit val v1: ReadWriter[Urls] = macroRW[Urls]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:54:18: local val v2 in value twitterAPIReaderWriter is never used
[warn]     implicit val v2: ReadWriter[Url] = macroRW[Url]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:55:18: local val v3 in value twitterAPIReaderWriter is never used
[warn]     implicit val v3: ReadWriter[UserMentions] = macroRW[UserMentions]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:56:18: local val v4 in value twitterAPIReaderWriter is never used
[warn]     implicit val v4: ReadWriter[Entities] = macroRW[Entities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:57:18: local val v5 in value twitterAPIReaderWriter is never used
[warn]     implicit val v5: ReadWriter[UserEntities] = macroRW[UserEntities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:58:18: local val v6 in value twitterAPIReaderWriter is never used
[warn]     implicit val v6: ReadWriter[User] = macroRW[User]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:59:18: local val v7 in value twitterAPIReaderWriter is never used
[warn]     implicit val v7: ReadWriter[RetweetedStatus] = macroRW[RetweetedStatus]
[warn]                  ^
[warn] 64 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.27.2-SNAPSHOT.jar ...
[info] Compiling 50 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/test-classes ...
Processing 523 classes from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes with "reflection" generator
Writing out Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/src_managed/jmh and resources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/resource_managed/jmh
[info] Done packaging.
[info] Compiling 694 Java sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.27.2-SNAPSHOT-tests.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.27.2-SNAPSHOT-jmh.jar ...
[info] Done packaging.
[info] Running (fork) org.openjdk.jmh.Main -p size=128 -jvm /usr/lib/jvm/jdk-10/bin/java -prof gc -rf json -rff jdk10.json .*Benchmark.*
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce
[info] # Run progress: 0.00% complete, ETA 01:23:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 356401.163 ops/s
[info] # Warmup Iteration   2: 744534.644 ops/s
[info] # Warmup Iteration   3: 733351.601 ops/s
[info] # Warmup Iteration   4: 757243.198 ops/s
[info] # Warmup Iteration   5: 760152.841 ops/s
[info] Iteration   1: 750430.079 ops/s
[info]                  ·gc.alloc.rate:                   1971.259 MB/sec
[info]                  ·gc.alloc.rate.norm:              4136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.044 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2012.153 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4221.803 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 763267.408 ops/s
[info]                  ·gc.alloc.rate:                   2005.426 MB/sec
[info]                  ·gc.alloc.rate.norm:              4136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.086 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2016.051 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4157.914 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 760369.953 ops/s
[info]                  ·gc.alloc.rate:                   1997.690 MB/sec
[info]                  ·gc.alloc.rate.norm:              4136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.129 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.468 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4181.090 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 759256.462 ops/s
[info]                  ·gc.alloc.rate:                   1994.703 MB/sec
[info]                  ·gc.alloc.rate.norm:              4136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.129 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2022.752 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4194.160 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 744211.748 ops/s
[info]                  ·gc.alloc.rate:                   1955.152 MB/sec
[info]                  ·gc.alloc.rate.norm:              4136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.132 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026.333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4286.577 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce":
[info]   755507.130 ±(99.9%) 30520.365 ops/s [Average]
[info]   (min, avg, max) = (744211.748, 755507.130, 763267.408), stdev = 7926.042
[info]   CI (99.9%): [724986.765, 786027.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate":
[info]   1984.846 ±(99.9%) 80.587 MB/sec [Average]
[info]   (min, avg, max) = (1955.152, 1984.846, 2005.426), stdev = 20.928
[info]   CI (99.9%): [1904.258, 2065.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4136.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4136.001, 4136.001, 4136.001), stdev = 0.001
[info]   CI (99.9%): [4136.000, 4136.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.050, 0.062), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.104 ±(99.9%) 0.150 B/op [Average]
[info]   (min, avg, max) = (0.044, 0.104, 0.132), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2019.351 ±(99.9%) 21.355 MB/sec [Average]
[info]   (min, avg, max) = (2012.153, 2019.351, 2026.333), stdev = 5.546
[info]   CI (99.9%): [1997.997, 2040.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4208.309 ±(99.9%) 190.487 B/op [Average]
[info]   (min, avg, max) = (4157.914, 4208.309, 4286.577), stdev = 49.469
[info]   CI (99.9%): [4017.822, 4398.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala
[info] # Run progress: 0.20% complete, ETA 02:13:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 462827.645 ops/s
[info] # Warmup Iteration   2: 1584448.224 ops/s
[info] # Warmup Iteration   3: 1660548.513 ops/s
[info] # Warmup Iteration   4: 1626271.644 ops/s
[info] # Warmup Iteration   5: 1624754.248 ops/s
[info] Iteration   1: 1604361.220 ops/s
[info]                  ·gc.alloc.rate:                   1288.231 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.563 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1325.160 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1616713.912 ops/s
[info]                  ·gc.alloc.rate:                   1297.941 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.081 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.048 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1315.719 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1581979.055 ops/s
[info]                  ·gc.alloc.rate:                   1270.166 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.446 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1345.881 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1610625.609 ops/s
[info]                  ·gc.alloc.rate:                   1293.149 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.081 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.775 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1323.259 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1611473.498 ops/s
[info]                  ·gc.alloc.rate:                   1293.857 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.463 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1323.207 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala":
[info]   1605030.659 ±(99.9%) 52414.629 ops/s [Average]
[info]   (min, avg, max) = (1581979.055, 1605030.659, 1616713.912), stdev = 13611.913
[info]   CI (99.9%): [1552616.030, 1657445.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1288.669 ±(99.9%) 41.984 MB/sec [Average]
[info]   (min, avg, max) = (1270.166, 1288.669, 1297.941), stdev = 10.903
[info]   CI (99.9%): [1246.685, 1330.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1264.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1264.000, 1264.000, 1264.000), stdev = 0.001
[info]   CI (99.9%): [1264.000, 1264.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.083), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.057 ±(99.9%) 0.129 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.057, 0.081), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1352.459 ±(99.9%) 6.481 MB/sec [Average]
[info]   (min, avg, max) = (1350.563, 1352.459, 1354.463), stdev = 1.683
[info]   CI (99.9%): [1345.978, 1358.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1326.645 ±(99.9%) 43.688 B/op [Average]
[info]   (min, avg, max) = (1315.719, 1326.645, 1345.881), stdev = 11.346
[info]   CI (99.9%): [1282.957, 1370.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala
[info] # Run progress: 0.40% complete, ETA 02:12:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2979026.654 ops/s
[info] # Warmup Iteration   2: 3734136.979 ops/s
[info] # Warmup Iteration   3: 3717068.726 ops/s
[info] # Warmup Iteration   4: 3772585.489 ops/s
[info] # Warmup Iteration   5: 3606149.869 ops/s
[info] Iteration   1: 3809443.339 ops/s
[info]                  ·gc.alloc.rate:      251.656 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3777077.145 ops/s
[info]                  ·gc.alloc.rate:                   249.559 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.559 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 213.185 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 3878593.940 ops/s
[info]                  ·gc.alloc.rate:      256.213 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3858157.452 ops/s
[info]                  ·gc.alloc.rate:                   254.857 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.011 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.395 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 208.686 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 3873940.637 ops/s
[info]                  ·gc.alloc.rate:      255.925 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala":
[info]   3839442.503 ±(99.9%) 170720.735 ops/s [Average]
[info]   (min, avg, max) = (3777077.145, 3839442.503, 3878593.940), stdev = 44335.633
[info]   CI (99.9%): [3668721.768, 4010163.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   253.642 ±(99.9%) 11.212 MB/sec [Average]
[info]   (min, avg, max) = (249.559, 253.642, 256.213), stdev = 2.912
[info]   CI (99.9%): [242.430, 264.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (104.000, 104.000, 104.000), stdev = 0.001
[info]   CI (99.9%): [104.000, 104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.002 ±(99.9%) 0.019 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.011), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.001 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   204.591 ±(99.9%) 1078.748 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.591, 511.559), stdev = 280.147
[info]   CI (99.9%): [≈ 0, 1283.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   84.374 ±(99.9%) 444.923 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 84.374, 213.185), stdev = 115.545
[info]   CI (99.9%): [≈ 0, 529.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 1.095
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson
[info] # Run progress: 0.60% complete, ETA 02:12:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30225.772 ops/s
[info] # Warmup Iteration   2: 170000.058 ops/s
[info] # Warmup Iteration   3: 168070.622 ops/s
[info] # Warmup Iteration   4: 167296.324 ops/s
[info] # Warmup Iteration   5: 172100.865 ops/s
[info] Iteration   1: 168354.563 ops/s
[info]                  ·gc.alloc.rate:                   1416.231 MB/sec
[info]                  ·gc.alloc.rate.norm:              13240.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.778 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.130 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12631.383 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 172230.684 ops/s
[info]                  ·gc.alloc.rate:                   1448.264 MB/sec
[info]                  ·gc.alloc.rate.norm:              13240.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.571 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.577 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12356.095 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 171841.377 ops/s
[info]                  ·gc.alloc.rate:                   1445.265 MB/sec
[info]                  ·gc.alloc.rate.norm:              13240.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.572 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.155 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12396.188 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 171134.076 ops/s
[info]                  ·gc.alloc.rate:                   1439.322 MB/sec
[info]                  ·gc.alloc.rate.norm:              13240.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.235 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12457.304 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 171681.309 ops/s
[info]                  ·gc.alloc.rate:                   1443.898 MB/sec
[info]                  ·gc.alloc.rate.norm:              13240.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.382 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.204 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12426.708 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson":
[info]   171048.401 ±(99.9%) 5993.685 ops/s [Average]
[info]   (min, avg, max) = (168354.563, 171048.401, 172230.684), stdev = 1556.541
[info]   CI (99.9%): [165054.716, 177042.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1438.596 ±(99.9%) 49.715 MB/sec [Average]
[info]   (min, avg, max) = (1416.231, 1438.596, 1448.264), stdev = 12.911
[info]   CI (99.9%): [1388.881, 1488.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   13240.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13240.002, 13240.002, 13240.003), stdev = 0.001
[info]   CI (99.9%): [13240.002, 13240.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.083), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.461 ±(99.9%) 1.129 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.461, 0.778), stdev = 0.293
[info]   CI (99.9%): [≈ 0, 1.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1353.060 ±(99.9%) 6.644 MB/sec [Average]
[info]   (min, avg, max) = (1351.130, 1353.060, 1355.204), stdev = 1.725
[info]   CI (99.9%): [1346.416, 1359.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   12453.536 ±(99.9%) 409.088 B/op [Average]
[info]   (min, avg, max) = (12356.095, 12453.536, 12631.383), stdev = 106.239
[info]   CI (99.9%): [12044.448, 12862.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce
[info] # Run progress: 0.80% complete, ETA 02:11:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 130121.888 ops/s
[info] # Warmup Iteration   2: 510311.318 ops/s
[info] # Warmup Iteration   3: 547805.311 ops/s
[info] # Warmup Iteration   4: 537438.785 ops/s
[info] # Warmup Iteration   5: 533081.939 ops/s
[info] Iteration   1: 535572.687 ops/s
[info]                  ·gc.alloc.rate:                   1619.330 MB/sec
[info]                  ·gc.alloc.rate.norm:              4760.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.184 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2011.702 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5913.376 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 547231.489 ops/s
[info]                  ·gc.alloc.rate:                   1654.797 MB/sec
[info]                  ·gc.alloc.rate.norm:              4760.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.058 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3860.412 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 546307.194 ops/s
[info]                  ·gc.alloc.rate:                   1651.749 MB/sec
[info]                  ·gc.alloc.rate.norm:              4760.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.180 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2014.625 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5805.732 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 548589.403 ops/s
[info]                  ·gc.alloc.rate:                   1658.714 MB/sec
[info]                  ·gc.alloc.rate.norm:              4760.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.119 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.181 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3860.258 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 549657.405 ops/s
[info]                  ·gc.alloc.rate:                   1662.012 MB/sec
[info]                  ·gc.alloc.rate.norm:              4760.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.179 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020.195 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5785.835 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce":
[info]   545471.636 ±(99.9%) 21869.621 ops/s [Average]
[info]   (min, avg, max) = (535572.687, 545471.636, 549657.405), stdev = 5679.471
[info]   CI (99.9%): [523602.014, 567341.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate":
[info]   1649.320 ±(99.9%) 66.267 MB/sec [Average]
[info]   (min, avg, max) = (1619.330, 1649.320, 1662.012), stdev = 17.209
[info]   CI (99.9%): [1583.053, 1715.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   4760.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4760.001, 4760.001, 4760.001), stdev = 0.001
[info]   CI (99.9%): [4760.001, 4760.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.050, 0.062), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.144 ±(99.9%) 0.209 B/op [Average]
[info]   (min, avg, max) = (0.060, 0.144, 0.184), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1746.752 ±(99.9%) 1417.123 MB/sec [Average]
[info]   (min, avg, max) = (1342.058, 1746.752, 2020.195), stdev = 368.022
[info]   CI (99.9%): [329.630, 3163.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5045.122 ±(99.9%) 4168.884 B/op [Average]
[info]   (min, avg, max) = (3860.258, 5045.122, 5913.376), stdev = 1082.646
[info]   CI (99.9%): [876.239, 9214.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala
[info] # Run progress: 1.00% complete, ETA 02:11:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_6a03406e/target/1bdf7fe1/jackson-module-afterburner-2.9.5.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 643702.535 ops/s
[info] # Warmup Iteration   2: 1934078.698 ops/s
[info] # Warmup Iteration   3: 2028878.185 ops/s
[info] # Warmup Iteration   4: 2036911.883 ops/s
[info] # Warmup Iteration   5: 2054222.545 ops/s
[info] Iteration   1: 2047672.230 ops/s
[info]                  ·gc.alloc.rate:                   853.259 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.572 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 517.854 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 2056616.043 ops/s
[info]                  ·gc.alloc.rate:                   856.994 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.471 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1032.210 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 2046962.231 ops/s
[info]                  ·gc.alloc.rate:                   852.962 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.905 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 519.059 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 2047502.636 ops/s
[info]                  ·gc.alloc.rate:                   853.163 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.896 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 518.929 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 2050610.098 ops/s
[info]                  ·gc.alloc.rate:                   854.414 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.360 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1036.776 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala":
[info]   2049872.647 ±(99.9%) 15516.056 ops/s [Average]
[info]   (min, avg, max) = (2046962.231, 2049872.647, 2056616.043), stdev = 4029.470
[info]   CI (99.9%): [2034356.592, 2065388.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   854.159 ±(99.9%) 6.482 MB/sec [Average]
[info]   (min, avg, max) = (852.962, 854.159, 856.994), stdev = 1.683
[info]   CI (99.9%): [847.677, 860.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   656.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (656.000, 656.000, 656.000), stdev = 0.001
[info]   CI (99.9%): [656.000, 656.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.062), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.026 ±(99.9%) 0.093 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.048), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   944.441 ±(99.9%) 1423.548 MB/sec [Average]
[info]   (min, avg, max) = (673.572, 944.441, 1350.360), stdev = 369.691
[info]   CI (99.9%): [≈ 0, 2367.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   724.966 ±(99.9%) 1088.052 B/op [Average]
[info]   (min, avg, max) = (517.854, 724.966, 1036.776), stdev = 282.564
[info]   CI (99.9%): [≈ 0, 1813.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala
[info] # Run progress: 1.20% complete, ETA 02:11:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4769958.189 ops/s
[info] # Warmup Iteration   2: 14070344.243 ops/s
[info] # Warmup Iteration   3: 14509133.631 ops/s
[info] # Warmup Iteration   4: 14873803.124 ops/s
[info] # Warmup Iteration   5: 14116391.300 ops/s
[info] Iteration   1: 14867010.061 ops/s
[info]                  ·gc.alloc.rate:                   755.453 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.274 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.347 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.525 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71.430 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 14399417.530 ops/s
[info]                  ·gc.alloc.rate:                   731.772 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.671 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73.757 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 14808845.597 ops/s
[info]                  ·gc.alloc.rate:                   752.493 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.522 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71.498 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 14858943.348 ops/s
[info]                  ·gc.alloc.rate:                   755.044 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.536 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71.258 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 14570538.586 ops/s
[info]                  ·gc.alloc.rate:                   740.458 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.270 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72.525 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala":
[info]   14700951.024 ±(99.9%) 798737.794 ops/s [Average]
[info]   (min, avg, max) = (14399417.530, 14700951.024, 14867010.061), stdev = 207429.669
[info]   CI (99.9%): [13902213.231, 15499688.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   747.044 ±(99.9%) 40.432 MB/sec [Average]
[info]   (min, avg, max) = (731.772, 747.044, 755.453), stdev = 10.500
[info]   CI (99.9%): [706.612, 787.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   80.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (80.000, 80.000, 80.000), stdev = 0.001
[info]   CI (99.9%): [80.000, 80.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.671 ±(99.9%) 5.602 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.671, 3.274), stdev = 1.455
[info]   CI (99.9%): [≈ 0, 6.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.071 ±(99.9%) 0.593 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.347), stdev = 0.154
[info]   CI (99.9%): [≈ 0, 0.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   673.105 ±(99.9%) 5.613 MB/sec [Average]
[info]   (min, avg, max) = (671.270, 673.105, 674.671), stdev = 1.458
[info]   CI (99.9%): [667.491, 678.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   72.094 ±(99.9%) 4.060 B/op [Average]
[info]   (min, avg, max) = (71.258, 72.094, 73.757), stdev = 1.054
[info]   CI (99.9%): [68.033, 76.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 1.41% complete, ETA 02:10:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4184724.193 ops/s
[info] # Warmup Iteration   2: 16384557.824 ops/s
[info] # Warmup Iteration   3: 18368236.404 ops/s
[info] # Warmup Iteration   4: 18321227.349 ops/s
[info] # Warmup Iteration   5: 18431929.864 ops/s
[info] Iteration   1: 18455798.964 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 18478878.775 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 18425349.389 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 18386737.684 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 18380217.748 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc":
[info]   18425396.512 ±(99.9%) 164728.025 ops/s [Average]
[info]   (min, avg, max) = (18380217.748, 18425396.512, 18478878.775), stdev = 42779.345
[info]   CI (99.9%): [18260668.487, 18590124.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson
[info] # Run progress: 1.61% complete, ETA 02:10:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 68730.177 ops/s
[info] # Warmup Iteration   2: 296700.993 ops/s
[info] # Warmup Iteration   3: 297631.476 ops/s
[info] # Warmup Iteration   4: 305961.575 ops/s
[info] # Warmup Iteration   5: 306368.398 ops/s
[info] Iteration   1: 305825.296 ops/s
[info]                  ·gc.alloc.rate:                   1011.816 MB/sec
[info]                  ·gc.alloc.rate.norm:              5208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.429 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6945.370 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 302143.818 ops/s
[info]                  ·gc.alloc.rate:                   999.570 MB/sec
[info]                  ·gc.alloc.rate.norm:              5208.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.961 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3516.709 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 305833.797 ops/s
[info]                  ·gc.alloc.rate:                   1011.811 MB/sec
[info]                  ·gc.alloc.rate.norm:              5208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.643 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.621 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6951.931 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 305533.074 ops/s
[info]                  ·gc.alloc.rate:                   1010.805 MB/sec
[info]                  ·gc.alloc.rate.norm:              5208.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.619 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3481.014 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 305791.806 ops/s
[info]                  ·gc.alloc.rate:                   1011.689 MB/sec
[info]                  ·gc.alloc.rate.norm:              5208.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.625 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6963.079 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson":
[info]   305025.558 ±(99.9%) 6221.490 ops/s [Average]
[info]   (min, avg, max) = (302143.818, 305025.558, 305833.797), stdev = 1615.701
[info]   CI (99.9%): [298804.068, 311247.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1009.138 ±(99.9%) 20.660 MB/sec [Average]
[info]   (min, avg, max) = (999.570, 1009.138, 1011.816), stdev = 5.365
[info]   CI (99.9%): [988.478, 1029.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5208.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5208.001, 5208.001, 5208.001), stdev = 0.001
[info]   CI (99.9%): [5208.001, 5208.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.227 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.125), stdev = 0.059
[info]   CI (99.9%): [≈ 0, 0.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.214 ±(99.9%) 1.167 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.214, 0.643), stdev = 0.303
[info]   CI (99.9%): [≈ 0, 1.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1080.636 ±(99.9%) 1424.856 MB/sec [Average]
[info]   (min, avg, max) = (674.961, 1080.636, 1352.625), stdev = 370.031
[info]   CI (99.9%): [≈ 0, 2505.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5571.620 ±(99.9%) 7286.244 B/op [Average]
[info]   (min, avg, max) = (3481.014, 5571.620, 6963.079), stdev = 1892.214
[info]   CI (99.9%): [≈ 0, 12857.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce
[info] # Run progress: 1.81% complete, ETA 02:10:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 971366.032 ops/s
[info] # Warmup Iteration   2: 1592291.822 ops/s
[info] # Warmup Iteration   3: 1587164.128 ops/s
[info] # Warmup Iteration   4: 1614759.562 ops/s
[info] # Warmup Iteration   5: 1613711.133 ops/s
[info] Iteration   1: 1610662.078 ops/s
[info]                  ·gc.alloc.rate:                   2488.245 MB/sec
[info]                  ·gc.alloc.rate.norm:              2432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.081 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2691.613 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2630.772 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1574777.699 ops/s
[info]                  ·gc.alloc.rate:                   2433.558 MB/sec
[info]                  ·gc.alloc.rate.norm:              2432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024.044 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2022.749 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1609797.443 ops/s
[info]                  ·gc.alloc.rate:                   2486.881 MB/sec
[info]                  ·gc.alloc.rate.norm:              2432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.081 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2702.376 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2642.739 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1610179.814 ops/s
[info]                  ·gc.alloc.rate:                   2487.185 MB/sec
[info]                  ·gc.alloc.rate.norm:              2432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2707.329 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2647.260 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1571720.503 ops/s
[info]                  ·gc.alloc.rate:                   2428.019 MB/sec
[info]                  ·gc.alloc.rate.norm:              2432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.388 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2036.722 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce":
[info]   1595427.507 ±(99.9%) 78080.160 ops/s [Average]
[info]   (min, avg, max) = (1571720.503, 1595427.507, 1610662.078), stdev = 20277.170
[info]   CI (99.9%): [1517347.347, 1673507.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate":
[info]   2464.778 ±(99.9%) 119.730 MB/sec [Average]
[info]   (min, avg, max) = (2428.019, 2464.778, 2488.245), stdev = 31.093
[info]   CI (99.9%): [2345.048, 2584.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2432.000, 2432.000, 2432.000), stdev = 0.001
[info]   CI (99.9%): [2432.000, 2432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.075, 0.083), stdev = 0.011
[info]   CI (99.9%): [0.031, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.074 ±(99.9%) 0.043 B/op [Average]
[info]   (min, avg, max) = (0.061, 0.074, 0.083), stdev = 0.011
[info]   CI (99.9%): [0.031, 0.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2431.750 ±(99.9%) 1416.946 MB/sec [Average]
[info]   (min, avg, max) = (2024.044, 2431.750, 2707.329), stdev = 367.977
[info]   CI (99.9%): [1014.803, 3848.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2396.048 ±(99.9%) 1287.991 B/op [Average]
[info]   (min, avg, max) = (2022.749, 2396.048, 2647.260), stdev = 334.487
[info]   CI (99.9%): [1108.057, 3684.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava
[info] # Run progress: 2.01% complete, ETA 02:10:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.959 ops/s
[info] # Warmup Iteration   2: 9578395.883 ops/s
[info] # Warmup Iteration   3: 9775954.904 ops/s
[info] # Warmup Iteration   4: 9944289.238 ops/s
[info] # Warmup Iteration   5: 10023478.230 ops/s
[info] Iteration   1: 10365155.947 ops/s
[info]                  ·gc.alloc.rate:                   1264.115 MB/sec
[info]                  ·gc.alloc.rate.norm:              192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.787 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 204.101 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 10484647.035 ops/s
[info]                  ·gc.alloc.rate:                   1279.062 MB/sec
[info]                  ·gc.alloc.rate.norm:              192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.278 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 201.790 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 10445792.010 ops/s
[info]                  ·gc.alloc.rate:                   1274.200 MB/sec
[info]                  ·gc.alloc.rate.norm:              192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.403 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 202.578 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 10003093.006 ops/s
[info]                  ·gc.alloc.rate:                   1220.147 MB/sec
[info]                  ·gc.alloc.rate.norm:              192.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.356 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 105.801 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 9965088.856 ops/s
[info]                  ·gc.alloc.rate:                   1215.410 MB/sec
[info]                  ·gc.alloc.rate.norm:              192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.921 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 212.617 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava":
[info]   10252755.371 ±(99.9%) 960259.223 ops/s [Average]
[info]   (min, avg, max) = (9965088.856, 10252755.371, 10484647.035), stdev = 249376.271
[info]   CI (99.9%): [9292496.148, 11213014.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   1250.587 ±(99.9%) 117.356 MB/sec [Average]
[info]   (min, avg, max) = (1215.410, 1250.587, 1279.062), stdev = 30.477
[info]   CI (99.9%): [1133.230, 1367.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   192.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (192.000, 192.000, 192.000), stdev = 0.001
[info]   CI (99.9%): [192.000, 192.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.083), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0.009 ±(99.9%) 0.020 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.013), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   1210.149 ±(99.9%) 1157.644 MB/sec [Average]
[info]   (min, avg, max) = (672.356, 1210.149, 1345.921), stdev = 300.637
[info]   CI (99.9%): [52.505, 2367.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   185.377 ±(99.9%) 172.101 B/op [Average]
[info]   (min, avg, max) = (105.801, 185.377, 212.617), stdev = 44.694
[info]   CI (99.9%): [13.276, 357.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala
[info] # Run progress: 2.21% complete, ETA 02:09:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 935008.025 ops/s
[info] # Warmup Iteration   2: 2494434.906 ops/s
[info] # Warmup Iteration   3: 2582618.825 ops/s
[info] # Warmup Iteration   4: 2571766.190 ops/s
[info] # Warmup Iteration   5: 2572580.670 ops/s
[info] Iteration   1: 2573440.617 ops/s
[info]                  ·gc.alloc.rate:                   1804.634 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.294 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1240.826 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 2586569.125 ops/s
[info]                  ·gc.alloc.rate:                   1813.860 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.036 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1236.183 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2589421.186 ops/s
[info]                  ·gc.alloc.rate:                   1815.787 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.428 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 824.101 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2587185.169 ops/s
[info]                  ·gc.alloc.rate:                   1814.310 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.027 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1238.306 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2515395.870 ops/s
[info]                  ·gc.alloc.rate:                   1764.129 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036.615 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1274.523 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala":
[info]   2570402.394 ±(99.9%) 120846.551 ops/s [Average]
[info]   (min, avg, max) = (2515395.870, 2570402.394, 2589421.186), stdev = 31383.465
[info]   CI (99.9%): [2449555.843, 2691248.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1802.544 ±(99.9%) 84.406 MB/sec [Average]
[info]   (min, avg, max) = (1764.129, 1802.544, 1815.787), stdev = 21.920
[info]   CI (99.9%): [1718.138, 1886.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1104.000, 1104.000, 1104.000), stdev = 0.001
[info]   CI (99.9%): [1104.000, 1104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.042, 0.062), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.025 ±(99.9%) 0.049 B/op [Average]
[info]   (min, avg, max) = (0.013, 0.025, 0.038), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1897.280 ±(99.9%) 1166.446 MB/sec [Average]
[info]   (min, avg, max) = (1355.428, 1897.280, 2036.615), stdev = 302.922
[info]   CI (99.9%): [730.834, 3063.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1162.788 ±(99.9%) 731.554 B/op [Average]
[info]   (min, avg, max) = (824.101, 1162.788, 1274.523), stdev = 189.982
[info]   CI (99.9%): [431.234, 1894.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala
[info] # Run progress: 2.41% complete, ETA 02:09:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9241710.603 ops/s
[info] # Warmup Iteration   2: 10425988.695 ops/s
[info] # Warmup Iteration   3: 10645922.086 ops/s
[info] # Warmup Iteration   4: 10561832.442 ops/s
[info] # Warmup Iteration   5: 10718508.875 ops/s
[info] Iteration   1: 10646784.006 ops/s
[info]                  ·gc.alloc.rate:                   1352.444 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.643 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 198.699 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 10652234.244 ops/s
[info]                  ·gc.alloc.rate:                   1353.414 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.820 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 198.582 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 10709606.188 ops/s
[info]                  ·gc.alloc.rate:                   1360.583 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.241 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 197.598 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 10701535.577 ops/s
[info]                  ·gc.alloc.rate:                   1359.632 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.332 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 197.897 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 10648915.820 ops/s
[info]                  ·gc.alloc.rate:                   1353.261 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.858 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 199.054 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala":
[info]   10671815.167 ±(99.9%) 119398.150 ops/s [Average]
[info]   (min, avg, max) = (10646784.006, 10671815.167, 10709606.188), stdev = 31007.321
[info]   CI (99.9%): [10552417.016, 10791213.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1355.867 ±(99.9%) 15.030 MB/sec [Average]
[info]   (min, avg, max) = (1352.444, 1355.867, 1360.583), stdev = 3.903
[info]   CI (99.9%): [1340.837, 1370.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   200.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (200.000, 200.000, 200.000), stdev = 0.001
[info]   CI (99.9%): [200.000, 200.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.050, 0.083), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.007 ±(99.9%) 0.016 B/op [Average]
[info]   (min, avg, max) = (0.003, 0.007, 0.012), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1344.779 ±(99.9%) 5.140 MB/sec [Average]
[info]   (min, avg, max) = (1343.643, 1344.779, 1346.858), stdev = 1.335
[info]   CI (99.9%): [1339.639, 1349.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   198.366 ±(99.9%) 2.311 B/op [Average]
[info]   (min, avg, max) = (197.598, 198.366, 199.054), stdev = 0.600
[info]   CI (99.9%): [196.055, 200.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson
[info] # Run progress: 2.61% complete, ETA 02:09:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 166806.184 ops/s
[info] # Warmup Iteration   2: 642501.412 ops/s
[info] # Warmup Iteration   3: 648184.609 ops/s
[info] # Warmup Iteration   4: 630549.456 ops/s
[info] # Warmup Iteration   5: 626143.966 ops/s
[info] Iteration   1: 631241.978 ops/s
[info]                  ·gc.alloc.rate:                   1668.110 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.156 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.939 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3371.520 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 631183.897 ops/s
[info]                  ·gc.alloc.rate:                   1667.821 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.208 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.161 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3375.152 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 644454.219 ops/s
[info]                  ·gc.alloc.rate:                   1702.924 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.203 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.383 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4962.381 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 649011.860 ops/s
[info]                  ·gc.alloc.rate:                   1715.072 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.050 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.829 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3288.637 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 647572.160 ops/s
[info]                  ·gc.alloc.rate:                   1711.145 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.101 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.011 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4947.358 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson":
[info]   640692.823 ±(99.9%) 33921.632 ops/s [Average]
[info]   (min, avg, max) = (631183.897, 640692.823, 649011.860), stdev = 8809.340
[info]   CI (99.9%): [606771.191, 674614.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1693.015 ±(99.9%) 89.654 MB/sec [Average]
[info]   (min, avg, max) = (1667.821, 1693.015, 1715.072), stdev = 23.283
[info]   CI (99.9%): [1603.361, 1782.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   4160.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4160.001, 4160.001, 4160.001), stdev = 0.001
[info]   CI (99.9%): [4160.001, 4160.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.083), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.144 ±(99.9%) 0.260 B/op [Average]
[info]   (min, avg, max) = (0.050, 0.144, 0.208), stdev = 0.068
[info]   CI (99.9%): [≈ 0, 0.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1625.465 ±(99.9%) 1433.255 MB/sec [Average]
[info]   (min, avg, max) = (1351.939, 1625.465, 2035.011), stdev = 372.212
[info]   CI (99.9%): [192.209, 3058.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3989.009 ±(99.9%) 3397.808 B/op [Average]
[info]   (min, avg, max) = (3288.637, 3989.009, 4962.381), stdev = 882.400
[info]   CI (99.9%): [591.201, 7386.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce
[info] # Run progress: 2.81% complete, ETA 02:09:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 957878.632 ops/s
[info] # Warmup Iteration   2: 1817529.511 ops/s
[info] # Warmup Iteration   3: 1788849.176 ops/s
[info] # Warmup Iteration   4: 1842465.219 ops/s
[info] # Warmup Iteration   5: 1832340.966 ops/s
[info] Iteration   1: 1835205.167 ops/s
[info]                  ·gc.alloc.rate:                   1566.763 MB/sec
[info]                  ·gc.alloc.rate.norm:              1344.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.170 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1150.482 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 1795035.234 ops/s
[info]                  ·gc.alloc.rate:                   1532.611 MB/sec
[info]                  ·gc.alloc.rate.norm:              1344.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.070 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1176.909 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1837828.829 ops/s
[info]                  ·gc.alloc.rate:                   1569.077 MB/sec
[info]                  ·gc.alloc.rate.norm:              1344.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2014.876 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1725.851 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1838946.576 ops/s
[info]                  ·gc.alloc.rate:                   1570.004 MB/sec
[info]                  ·gc.alloc.rate.norm:              1344.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.175 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1151.535 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1842123.200 ops/s
[info]                  ·gc.alloc.rate:                   1572.706 MB/sec
[info]                  ·gc.alloc.rate.norm:              1344.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.534 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1150.719 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce":
[info]   1829827.801 ±(99.9%) 75500.712 ops/s [Average]
[info]   (min, avg, max) = (1795035.234, 1829827.801, 1842123.200), stdev = 19607.295
[info]   CI (99.9%): [1754327.089, 1905328.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1562.232 ±(99.9%) 64.287 MB/sec [Average]
[info]   (min, avg, max) = (1532.611, 1562.232, 1572.706), stdev = 16.695
[info]   CI (99.9%): [1497.945, 1626.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1344.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1344.000, 1344.000, 1344.000), stdev = 0.001
[info]   CI (99.9%): [1344.000, 1344.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.054, 0.083), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.047 ±(99.9%) 0.092 B/op [Average]
[info]   (min, avg, max) = (0.018, 0.047, 0.071), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1477.965 ±(99.9%) 1155.771 MB/sec [Average]
[info]   (min, avg, max) = (1341.170, 1477.965, 2014.876), stdev = 300.150
[info]   CI (99.9%): [322.194, 2633.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1271.099 ±(99.9%) 979.848 B/op [Average]
[info]   (min, avg, max) = (1150.482, 1271.099, 1725.851), stdev = 254.463
[info]   CI (99.9%): [291.251, 2250.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava
[info] # Run progress: 3.01% complete, ETA 02:08:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 535.767 ops/s
[info] # Warmup Iteration   2: 16298756.633 ops/s
[info] # Warmup Iteration   3: 18092202.544 ops/s
[info] # Warmup Iteration   4: 18865591.580 ops/s
[info] # Warmup Iteration   5: 19071772.516 ops/s
[info] Iteration   1: 18918609.764 ops/s
[info]                  ·gc.alloc.rate:                   576.847 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.022 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.443 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 42.558 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 18862503.599 ops/s
[info]                  ·gc.alloc.rate:                   575.164 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.505 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.209 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.342 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56.193 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 18368290.400 ops/s
[info]                  ·gc.alloc.rate:                   560.041 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.233 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57.702 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 18383733.600 ops/s
[info]                  ·gc.alloc.rate:                   560.532 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.919 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57.538 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 19155020.258 ops/s
[info]                  ·gc.alloc.rate:      584.024 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava":
[info]   18737631.524 ±(99.9%) 1339747.599 ops/s [Average]
[info]   (min, avg, max) = (18368290.400, 18737631.524, 19155020.258), stdev = 347928.197
[info]   CI (99.9%): [17397883.925, 20077379.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   571.321 ±(99.9%) 40.857 MB/sec [Average]
[info]   (min, avg, max) = (560.041, 571.321, 584.024), stdev = 10.610
[info]   CI (99.9%): [530.465, 612.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.514 ±(99.9%) 4.286 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.514, 2.505), stdev = 1.113
[info]   CI (99.9%): [≈ 0, 4.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0.043 ±(99.9%) 0.358 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.043, 0.209), stdev = 0.093
[info]   CI (99.9%): [≈ 0, 0.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   505.987 ±(99.9%) 1121.927 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 505.987, 673.342), stdev = 291.361
[info]   CI (99.9%): [≈ 0, 1627.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   42.798 ±(99.9%) 95.309 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 42.798, 57.702), stdev = 24.752
[info]   CI (99.9%): [≈ 0, 138.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.140
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala
[info] # Run progress: 3.21% complete, ETA 02:08:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_6a03406e/target/1bdf7fe1/jackson-module-afterburner-2.9.5.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 1935298.311 ops/s
[info] # Warmup Iteration   2: 6086727.134 ops/s
[info] # Warmup Iteration   3: 6483423.935 ops/s
[info] # Warmup Iteration   4: 6221773.180 ops/s
[info] # Warmup Iteration   5: 6207159.430 ops/s
[info] Iteration   1: 6227997.149 ops/s
[info]                  ·gc.alloc.rate:                   1709.511 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.467 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 341.521 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 6414989.610 ops/s
[info]                  ·gc.alloc.rate:                   1760.358 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.038 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 497.935 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 6493307.251 ops/s
[info]                  ·gc.alloc.rate:                   1781.928 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.502 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 492.505 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 6419464.415 ops/s
[info]                  ·gc.alloc.rate:                   1761.530 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.413 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 332.403 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 6496618.105 ops/s
[info]                  ·gc.alloc.rate:                   1782.627 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034.989 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 493.157 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala":
[info]   6410475.306 ±(99.9%) 420413.675 ops/s [Average]
[info]   (min, avg, max) = (6227997.149, 6410475.306, 6496618.105), stdev = 109180.096
[info]   CI (99.9%): [5990061.630, 6830888.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1759.191 ±(99.9%) 114.572 MB/sec [Average]
[info]   (min, avg, max) = (1709.511, 1759.191, 1782.627), stdev = 29.754
[info]   CI (99.9%): [1644.619, 1873.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (432.000, 432.000, 432.000), stdev = 0.001
[info]   CI (99.9%): [432.000, 432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.104), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.016 ±(99.9%) 0.022 B/op [Average]
[info]   (min, avg, max) = (0.010, 0.016, 0.026), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1760.482 ±(99.9%) 1430.843 MB/sec [Average]
[info]   (min, avg, max) = (1351.467, 1760.482, 2034.989), stdev = 371.585
[info]   CI (99.9%): [329.639, 3191.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   431.504 ±(99.9%) 332.659 B/op [Average]
[info]   (min, avg, max) = (332.403, 431.504, 497.935), stdev = 86.391
[info]   CI (99.9%): [98.845, 764.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala
[info] # Run progress: 3.41% complete, ETA 02:08:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14954946.307 ops/s
[info] # Warmup Iteration   2: 20765861.557 ops/s
[info] # Warmup Iteration   3: 21433534.623 ops/s
[info] # Warmup Iteration   4: 21312253.214 ops/s
[info] # Warmup Iteration   5: 21474666.224 ops/s
[info] Iteration   1: 20780630.880 ops/s
[info]                  ·gc.alloc.rate:                   633.591 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.315 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.251 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.609 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51.107 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 21035659.084 ops/s
[info]                  ·gc.alloc.rate:      641.480 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 20969254.801 ops/s
[info]                  ·gc.alloc.rate:                   639.409 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.674 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50.647 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 20871821.997 ops/s
[info]                  ·gc.alloc.rate:                   636.602 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.181 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50.683 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 20980755.379 ops/s
[info]                  ·gc.alloc.rate:                   639.748 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.001 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50.420 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala":
[info]   20927624.428 ±(99.9%) 389603.004 ops/s [Average]
[info]   (min, avg, max) = (20780630.880, 20927624.428, 21035659.084), stdev = 101178.663
[info]   CI (99.9%): [20538021.425, 21317227.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   638.166 ±(99.9%) 11.932 MB/sec [Average]
[info]   (min, avg, max) = (633.591, 638.166, 641.480), stdev = 3.099
[info]   CI (99.9%): [626.234, 650.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.688 ±(99.9%) 5.657 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.688, 3.315), stdev = 1.469
[info]   CI (99.9%): [≈ 0, 6.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.052 ±(99.9%) 0.429 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.052, 0.251), stdev = 0.111
[info]   CI (99.9%): [≈ 0, 0.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   538.693 ±(99.9%) 1159.588 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538.693, 674.674), stdev = 301.141
[info]   CI (99.9%): [≈ 0, 1698.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   40.571 ±(99.9%) 87.338 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 40.571, 51.107), stdev = 22.682
[info]   CI (99.9%): [≈ 0, 127.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 3.61% complete, ETA 02:08:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16926227.982 ops/s
[info] # Warmup Iteration   2: 22110627.531 ops/s
[info] # Warmup Iteration   3: 22305597.576 ops/s
[info] # Warmup Iteration   4: 22310970.194 ops/s
[info] # Warmup Iteration   5: 22333075.084 ops/s
[info] Iteration   1: 22358249.465 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 22389893.648 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 22295233.392 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 21817693.033 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 22290575.283 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc":
[info]   22230328.964 ±(99.9%) 902922.957 ops/s [Average]
[info]   (min, avg, max) = (21817693.033, 22230328.964, 22389893.648), stdev = 234486.224
[info]   CI (99.9%): [21327406.008, 23133251.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson
[info] # Run progress: 3.82% complete, ETA 02:07:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 336951.235 ops/s
[info] # Warmup Iteration   2: 1154707.243 ops/s
[info] # Warmup Iteration   3: 1181186.776 ops/s
[info] # Warmup Iteration   4: 1180296.699 ops/s
[info] # Warmup Iteration   5: 1180734.273 ops/s
[info] Iteration   1: 1157207.651 ops/s
[info]                  ·gc.alloc.rate:                   1746.477 MB/sec
[info]                  ·gc.alloc.rate.norm:              2376.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.064 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2759.086 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1180979.745 ops/s
[info]                  ·gc.alloc.rate:                   1782.515 MB/sec
[info]                  ·gc.alloc.rate.norm:              2376.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.348 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1803.942 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1178798.632 ops/s
[info]                  ·gc.alloc.rate:                   1779.085 MB/sec
[info]                  ·gc.alloc.rate.norm:              2376.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.310 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2714.187 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1159467.609 ops/s
[info]                  ·gc.alloc.rate:                   1749.992 MB/sec
[info]                  ·gc.alloc.rate.norm:              2376.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2762.142 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1186415.155 ops/s
[info]                  ·gc.alloc.rate:                   1790.768 MB/sec
[info]                  ·gc.alloc.rate.norm:              2376.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1357.295 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1800.866 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson":
[info]   1172573.758 ±(99.9%) 51261.397 ops/s [Average]
[info]   (min, avg, max) = (1157207.651, 1172573.758, 1186415.155), stdev = 13312.422
[info]   CI (99.9%): [1121312.362, 1223835.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1769.767 ±(99.9%) 77.586 MB/sec [Average]
[info]   (min, avg, max) = (1746.477, 1769.767, 1790.768), stdev = 20.149
[info]   CI (99.9%): [1692.182, 1847.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2376.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2376.000, 2376.000, 2376.000), stdev = 0.001
[info]   CI (99.9%): [2376.000, 2376.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.046, 0.062), stdev = 0.009
[info]   CI (99.9%): [0.010, 0.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.061 ±(99.9%) 0.047 B/op [Average]
[info]   (min, avg, max) = (0.055, 0.061, 0.083), stdev = 0.012
[info]   CI (99.9%): [0.014, 0.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1761.082 ±(99.9%) 1426.345 MB/sec [Average]
[info]   (min, avg, max) = (1353.348, 1761.082, 2034.396), stdev = 370.417
[info]   CI (99.9%): [334.738, 3187.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2368.045 ±(99.9%) 1989.654 B/op [Average]
[info]   (min, avg, max) = (1800.866, 2368.045, 2762.142), stdev = 516.707
[info]   CI (99.9%): [378.391, 4357.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 4.02% complete, ETA 02:07:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 313483.696 ops/s
[info] # Warmup Iteration   2: 368777.625 ops/s
[info] # Warmup Iteration   3: 372209.684 ops/s
[info] # Warmup Iteration   4: 381812.657 ops/s
[info] # Warmup Iteration   5: 382179.777 ops/s
[info] Iteration   1: 382315.346 ops/s
[info]                  ·gc.alloc.rate:                   2103.854 MB/sec
[info]                  ·gc.alloc.rate.norm:              8664.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.343 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2016.244 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8303.207 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 382874.660 ops/s
[info]                  ·gc.alloc.rate:                   2107.652 MB/sec
[info]                  ·gc.alloc.rate.norm:              8664.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.257 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.678 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8302.364 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 380569.405 ops/s
[info]                  ·gc.alloc.rate:                   2094.443 MB/sec
[info]                  ·gc.alloc.rate.norm:              8664.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.258 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.339 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8369.866 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 382438.140 ops/s
[info]                  ·gc.alloc.rate:                   2104.970 MB/sec
[info]                  ·gc.alloc.rate.norm:              8664.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.257 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026.358 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8340.438 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 377858.577 ops/s
[info]                  ·gc.alloc.rate:                   2079.530 MB/sec
[info]                  ·gc.alloc.rate.norm:              8664.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2706.374 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11275.637 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce":
[info]   381211.226 ±(99.9%) 7971.763 ops/s [Average]
[info]   (min, avg, max) = (377858.577, 381211.226, 382874.660), stdev = 2070.242
[info]   CI (99.9%): [373239.462, 389182.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2098.090 ±(99.9%) 44.314 MB/sec [Average]
[info]   (min, avg, max) = (2079.530, 2098.090, 2107.652), stdev = 11.508
[info]   CI (99.9%): [2053.776, 2142.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   8664.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8664.001, 8664.001, 8664.001), stdev = 0.001
[info]   CI (99.9%): [8664.001, 8664.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.083), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.223 ±(99.9%) 0.501 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.223, 0.343), stdev = 0.130
[info]   CI (99.9%): [≈ 0, 0.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2158.399 ±(99.9%) 1179.649 MB/sec [Average]
[info]   (min, avg, max) = (2016.244, 2158.399, 2706.374), stdev = 306.351
[info]   CI (99.9%): [978.749, 3338.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   8918.302 ±(99.9%) 5075.501 B/op [Average]
[info]   (min, avg, max) = (8302.364, 8918.302, 11275.637), stdev = 1318.091
[info]   CI (99.9%): [3842.801, 13993.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 4.22% complete, ETA 02:07:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 243010.146 ops/s
[info] # Warmup Iteration   2: 469105.036 ops/s
[info] # Warmup Iteration   3: 469111.245 ops/s
[info] # Warmup Iteration   4: 465919.178 ops/s
[info] # Warmup Iteration   5: 457443.994 ops/s
[info] Iteration   1: 456495.957 ops/s
[info]                  ·gc.alloc.rate:                   621.650 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.271 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.933 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.509 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2322.856 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 458513.389 ops/s
[info]                  ·gc.alloc.rate:                   624.510 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.701 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2312.877 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 457700.980 ops/s
[info]                  ·gc.alloc.rate:                   623.348 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.143 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.553 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2320.122 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 455058.515 ops/s
[info]                  ·gc.alloc.rate:                   619.755 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.566 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2333.614 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 455334.366 ops/s
[info]                  ·gc.alloc.rate:                   620.245 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.144 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.040 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2333.413 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala":
[info]   456620.641 ±(99.9%) 5730.838 ops/s [Average]
[info]   (min, avg, max) = (455058.515, 456620.641, 458513.389), stdev = 1488.280
[info]   CI (99.9%): [450889.803, 462351.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   621.901 ±(99.9%) 7.775 MB/sec [Average]
[info]   (min, avg, max) = (619.755, 621.901, 624.510), stdev = 2.019
[info]   CI (99.9%): [614.126, 629.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2144.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2144.001, 2144.001, 2144.001), stdev = 0.001
[info]   CI (99.9%): [2144.001, 2144.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.437 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.271), stdev = 0.114
[info]   CI (99.9%): [≈ 0, 0.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.244 ±(99.9%) 1.509 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.244, 0.933), stdev = 0.392
[info]   CI (99.9%): [≈ 0, 1.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   674.274 ±(99.9%) 2.484 MB/sec [Average]
[info]   (min, avg, max) = (673.509, 674.274, 675.040), stdev = 0.645
[info]   CI (99.9%): [671.789, 676.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2324.576 ±(99.9%) 34.411 B/op [Average]
[info]   (min, avg, max) = (2312.877, 2324.576, 2333.614), stdev = 8.936
[info]   CI (99.9%): [2290.166, 2358.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 4.42% complete, ETA 02:07:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 920324.193 ops/s
[info] # Warmup Iteration   2: 1014865.402 ops/s
[info] # Warmup Iteration   3: 1013569.880 ops/s
[info] # Warmup Iteration   4: 1009918.557 ops/s
[info] # Warmup Iteration   5: 1012189.720 ops/s
[info] Iteration   1: 1011420.825 ops/s
[info]                  ·gc.alloc.rate:                   673.241 MB/sec
[info]                  ·gc.alloc.rate.norm:              1048.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.373 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.251 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.499 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1049.959 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1015591.645 ops/s
[info]                  ·gc.alloc.rate:                   676.280 MB/sec
[info]                  ·gc.alloc.rate.norm:              1048.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.829 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1045.753 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 1015544.580 ops/s
[info]                  ·gc.alloc.rate:                   676.093 MB/sec
[info]                  ·gc.alloc.rate.norm:              1048.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.951 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1041.581 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1013601.298 ops/s
[info]                  ·gc.alloc.rate:                   674.871 MB/sec
[info]                  ·gc.alloc.rate.norm:              1048.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1043.566 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 997671.740 ops/s
[info]                  ·gc.alloc.rate:                   664.177 MB/sec
[info]                  ·gc.alloc.rate.norm:              1048.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.249 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1059.159 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala":
[info]   1010766.018 ±(99.9%) 28947.075 ops/s [Average]
[info]   (min, avg, max) = (997671.740, 1010766.018, 1015591.645), stdev = 7517.464
[info]   CI (99.9%): [981818.942, 1039713.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   672.932 ±(99.9%) 19.417 MB/sec [Average]
[info]   (min, avg, max) = (664.177, 672.932, 676.280), stdev = 5.042
[info]   CI (99.9%): [653.516, 692.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1048.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1048.000, 1048.000, 1048.000), stdev = 0.001
[info]   CI (99.9%): [1048.000, 1048.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.687 ±(99.9%) 5.782 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.687, 3.373), stdev = 1.502
[info]   CI (99.9%): [≈ 0, 6.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.070 ±(99.9%) 9.001 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.070, 5.251), stdev = 2.338
[info]   CI (99.9%): [≈ 0, 10.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   672.909 ±(99.9%) 6.294 MB/sec [Average]
[info]   (min, avg, max) = (671.249, 672.909, 674.829), stdev = 1.635
[info]   CI (99.9%): [666.615, 679.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1048.004 ±(99.9%) 26.836 B/op [Average]
[info]   (min, avg, max) = (1041.581, 1048.004, 1059.159), stdev = 6.969
[info]   CI (99.9%): [1021.168, 1074.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.095
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 4.62% complete, ETA 02:06:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63360.295 ops/s
[info] # Warmup Iteration   2: 109445.898 ops/s
[info] # Warmup Iteration   3: 111835.868 ops/s
[info] # Warmup Iteration   4: 111712.156 ops/s
[info] # Warmup Iteration   5: 112257.244 ops/s
[info] Iteration   1: 112170.406 ops/s
[info]                  ·gc.alloc.rate:                   3879.812 MB/sec
[info]                  ·gc.alloc.rate.norm:              54448.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.460 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4073.852 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57171.094 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 111260.438 ops/s
[info]                  ·gc.alloc.rate:                   3847.669 MB/sec
[info]                  ·gc.alloc.rate.norm:              54448.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.178 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3398.794 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48096.013 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 111995.169 ops/s
[info]                  ·gc.alloc.rate:                   3873.418 MB/sec
[info]                  ·gc.alloc.rate.norm:              54448.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.463 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4082.815 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57391.463 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 111537.191 ops/s
[info]                  ·gc.alloc.rate:                   3857.868 MB/sec
[info]                  ·gc.alloc.rate.norm:              54448.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.587 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4084.231 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57642.779 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 111867.830 ops/s
[info]                  ·gc.alloc.rate:                   3868.767 MB/sec
[info]                  ·gc.alloc.rate.norm:              54448.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.586 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3405.910 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47933.885 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson":
[info]   111766.207 ±(99.9%) 1407.433 ops/s [Average]
[info]   (min, avg, max) = (111260.438, 111766.207, 112170.406), stdev = 365.506
[info]   CI (99.9%): [110358.774, 113173.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3865.507 ±(99.9%) 49.251 MB/sec [Average]
[info]   (min, avg, max) = (3847.669, 3865.507, 3879.812), stdev = 12.790
[info]   CI (99.9%): [3816.255, 3914.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   54448.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (54448.004, 54448.004, 54448.004), stdev = 0.001
[info]   CI (99.9%): [54448.003, 54448.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.055 ±(99.9%) 1.705 B/op [Average]
[info]   (min, avg, max) = (0.586, 1.055, 1.463), stdev = 0.443
[info]   CI (99.9%): [≈ 0, 2.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3809.120 ±(99.9%) 1429.963 MB/sec [Average]
[info]   (min, avg, max) = (3398.794, 3809.120, 4084.231), stdev = 371.357
[info]   CI (99.9%): [2379.158, 5239.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   53647.047 ±(99.9%) 19809.273 B/op [Average]
[info]   (min, avg, max) = (47933.885, 53647.047, 57642.779), stdev = 5144.405
[info]   CI (99.9%): [33837.773, 73456.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 4.82% complete, ETA 02:06:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 525898.819 ops/s
[info] # Warmup Iteration   2: 599621.739 ops/s
[info] # Warmup Iteration   3: 615152.584 ops/s
[info] # Warmup Iteration   4: 598637.104 ops/s
[info] # Warmup Iteration   5: 607188.984 ops/s
[info] Iteration   1: 603384.914 ops/s
[info]                  ·gc.alloc.rate:                   1845.617 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.217 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2014.961 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5257.893 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 599524.768 ops/s
[info]                  ·gc.alloc.rate:                   1834.248 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.164 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2017.419 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5296.934 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 609158.878 ops/s
[info]                  ·gc.alloc.rate:                   1863.563 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.108 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021.397 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5223.890 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 604492.779 ops/s
[info]                  ·gc.alloc.rate:                   1849.339 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.163 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.181 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3513.503 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 617374.958 ops/s
[info]                  ·gc.alloc.rate:                   1888.713 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026.130 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5166.399 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle":
[info]   606787.259 ±(99.9%) 26350.077 ops/s [Average]
[info]   (min, avg, max) = (599524.768, 606787.259, 617374.958), stdev = 6843.031
[info]   CI (99.9%): [580437.183, 633137.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.alloc.rate":
[info]   1856.296 ±(99.9%) 80.594 MB/sec [Average]
[info]   (min, avg, max) = (1834.248, 1856.296, 1888.713), stdev = 20.930
[info]   CI (99.9%): [1775.702, 1936.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   4816.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4816.001, 4816.001, 4816.001), stdev = 0.001
[info]   CI (99.9%): [4816.001, 4816.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.058, 0.083), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0.151 ±(99.9%) 0.178 B/op [Average]
[info]   (min, avg, max) = (0.106, 0.151, 0.217), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   1885.817 ±(99.9%) 1155.265 MB/sec [Average]
[info]   (min, avg, max) = (1349.181, 1885.817, 2026.130), stdev = 300.019
[info]   CI (99.9%): [730.552, 3041.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   4891.723 ±(99.9%) 2972.455 B/op [Average]
[info]   (min, avg, max) = (3513.503, 4891.723, 5296.934), stdev = 771.937
[info]   CI (99.9%): [1919.269, 7864.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 5.02% complete, ETA 02:06:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 286675.559 ops/s
[info] # Warmup Iteration   2: 364791.129 ops/s
[info] # Warmup Iteration   3: 373114.603 ops/s
[info] # Warmup Iteration   4: 383407.023 ops/s
[info] # Warmup Iteration   5: 379702.333 ops/s
[info] Iteration   1: 376595.123 ops/s
[info]                  ·gc.alloc.rate:                   583.639 MB/sec
[info]                  ·gc.alloc.rate.norm:              2440.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.054 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.226 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.371 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2137.872 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 383157.840 ops/s
[info]                  ·gc.alloc.rate:                   593.884 MB/sec
[info]                  ·gc.alloc.rate.norm:              2440.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.514 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14.436 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.959 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2768.994 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 376000.685 ops/s
[info]                  ·gc.alloc.rate:                   582.823 MB/sec
[info]                  ·gc.alloc.rate.norm:              2440.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.261 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.989 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2821.668 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 381767.861 ops/s
[info]                  ·gc.alloc.rate:                   591.787 MB/sec
[info]                  ·gc.alloc.rate.norm:              2440.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.026 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2770.836 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 382908.469 ops/s
[info]                  ·gc.alloc.rate:                   593.596 MB/sec
[info]                  ·gc.alloc.rate.norm:              2440.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.086 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.067 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2762.559 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce":
[info]   380085.996 ±(99.9%) 13491.989 ops/s [Average]
[info]   (min, avg, max) = (376000.685, 380085.996, 383157.840), stdev = 3503.827
[info]   CI (99.9%): [366594.006, 393577.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   589.146 ±(99.9%) 21.049 MB/sec [Average]
[info]   (min, avg, max) = (582.823, 589.146, 593.884), stdev = 5.466
[info]   CI (99.9%): [568.096, 610.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2440.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2440.001, 2440.001, 2440.001), stdev = 0.001
[info]   CI (99.9%): [2440.001, 2440.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.730 ±(99.9%) 5.992 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.730, 3.514), stdev = 1.556
[info]   CI (99.9%): [≈ 0, 6.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3.002 ±(99.9%) 24.616 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.002, 14.436), stdev = 6.393
[info]   CI (99.9%): [≈ 0, 27.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   640.682 ±(99.9%) 278.378 MB/sec [Average]
[info]   (min, avg, max) = (511.371, 640.682, 673.989), stdev = 72.294
[info]   CI (99.9%): [362.304, 919.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2652.386 ±(99.9%) 1111.275 B/op [Average]
[info]   (min, avg, max) = (2137.872, 2652.386, 2821.668), stdev = 288.595
[info]   CI (99.9%): [1541.111, 3763.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.342
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 5.22% complete, ETA 02:06:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 338264.447 ops/s
[info] # Warmup Iteration   2: 556669.105 ops/s
[info] # Warmup Iteration   3: 561805.137 ops/s
[info] # Warmup Iteration   4: 569634.957 ops/s
[info] # Warmup Iteration   5: 569104.730 ops/s
[info] Iteration   1: 569839.870 ops/s
[info]                  ·gc.alloc.rate:                   419.845 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.368 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1412.873 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 562844.897 ops/s
[info]                  ·gc.alloc.rate:                   414.722 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.404 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1430.428 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 566519.072 ops/s
[info]                  ·gc.alloc.rate:                   417.553 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.312 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.867 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.752 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1871.743 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 569362.795 ops/s
[info]                  ·gc.alloc.rate:      419.546 MB/sec
[info]                  ·gc.alloc.rate.norm: 1160.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 568456.069 ops/s
[info]                  ·gc.alloc.rate:                   418.858 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.115 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.558 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1865.374 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala":
[info]   567404.541 ±(99.9%) 10966.851 ops/s [Average]
[info]   (min, avg, max) = (562844.897, 567404.541, 569839.870), stdev = 2848.056
[info]   CI (99.9%): [556437.689, 578371.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   418.105 ±(99.9%) 8.036 MB/sec [Average]
[info]   (min, avg, max) = (414.722, 418.105, 419.845), stdev = 2.087
[info]   CI (99.9%): [410.069, 426.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1160.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1160.001, 1160.001, 1160.001), stdev = 0.001
[info]   CI (99.9%): [1160.001, 1160.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.524 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.312), stdev = 0.136
[info]   CI (99.9%): [≈ 0, 0.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.197 ±(99.9%) 1.457 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.197, 0.867), stdev = 0.378
[info]   CI (99.9%): [≈ 0, 1.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   474.016 ±(99.9%) 1067.114 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474.016, 673.752), stdev = 277.126
[info]   CI (99.9%): [≈ 0, 1541.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1316.083 ±(99.9%) 2960.865 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1316.083, 1871.743), stdev = 768.927
[info]   CI (99.9%): [≈ 0, 4276.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 5.42% complete, ETA 02:06:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2567643.972 ops/s
[info] # Warmup Iteration   2: 2755144.541 ops/s
[info] # Warmup Iteration   3: 2746548.482 ops/s
[info] # Warmup Iteration   4: 2761515.720 ops/s
[info] # Warmup Iteration   5: 2776276.769 ops/s
[info] Iteration   1: 2761959.036 ops/s
[info]                  ·gc.alloc.rate:                   1277.092 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.324 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 765.186 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 2726675.081 ops/s
[info]                  ·gc.alloc.rate:                   1261.060 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.738 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 775.152 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 2762486.180 ops/s
[info]                  ·gc.alloc.rate:                   1277.756 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.438 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 765.422 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2777244.772 ops/s
[info]                  ·gc.alloc.rate:                   1284.329 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.869 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 761.750 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 2628435.744 ops/s
[info]                  ·gc.alloc.rate:                   1215.506 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.151 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 805.648 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala":
[info]   2731360.162 ±(99.9%) 232843.819 ops/s [Average]
[info]   (min, avg, max) = (2628435.744, 2731360.162, 2777244.772), stdev = 60468.800
[info]   CI (99.9%): [2498516.343, 2964203.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1263.148 ±(99.9%) 107.724 MB/sec [Average]
[info]   (min, avg, max) = (1215.506, 1263.148, 1284.329), stdev = 27.976
[info]   CI (99.9%): [1155.425, 1370.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (728.000, 728.000, 728.000), stdev = 0.001
[info]   CI (99.9%): [728.000, 728.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.104), stdev = 0.015
[info]   CI (99.9%): [0.027, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.048 ±(99.9%) 0.029 B/op [Average]
[info]   (min, avg, max) = (0.037, 0.048, 0.059), stdev = 0.008
[info]   CI (99.9%): [0.018, 0.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1343.504 ±(99.9%) 4.231 MB/sec [Average]
[info]   (min, avg, max) = (1342.324, 1343.504, 1345.151), stdev = 1.099
[info]   CI (99.9%): [1339.273, 1347.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   774.632 ±(99.9%) 69.479 B/op [Average]
[info]   (min, avg, max) = (761.750, 774.632, 805.648), stdev = 18.043
[info]   CI (99.9%): [705.153, 844.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 5.62% complete, ETA 02:05:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2745098.415 ops/s
[info] # Warmup Iteration   2: 2918013.747 ops/s
[info] # Warmup Iteration   3: 2933506.173 ops/s
[info] # Warmup Iteration   4: 2934257.569 ops/s
[info] # Warmup Iteration   5: 2938756.086 ops/s
[info] Iteration   1: 2941006.993 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2935109.051 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2941536.148 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2937535.137 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2932811.090 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2937599.684 ±(99.9%) 14439.087 ops/s [Average]
[info]   (min, avg, max) = (2932811.090, 2937599.684, 2941536.148), stdev = 3749.785
[info]   CI (99.9%): [2923160.597, 2952038.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 5.82% complete, ETA 02:05:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 309711.475 ops/s
[info] # Warmup Iteration   2: 370928.593 ops/s
[info] # Warmup Iteration   3: 375210.598 ops/s
[info] # Warmup Iteration   4: 379746.997 ops/s
[info] # Warmup Iteration   5: 387530.431 ops/s
[info] Iteration   1: 387027.265 ops/s
[info]                  ·gc.alloc.rate:                   556.665 MB/sec
[info]                  ·gc.alloc.rate.norm:              2264.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.002 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.481 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2080.234 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 389207.228 ops/s
[info]                  ·gc.alloc.rate:                   559.807 MB/sec
[info]                  ·gc.alloc.rate.norm:              2264.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4.056 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16.402 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2723.385 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 391965.559 ops/s
[info]                  ·gc.alloc.rate:      563.677 MB/sec
[info]                  ·gc.alloc.rate.norm: 2264.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 374711.019 ops/s
[info]                  ·gc.alloc.rate:                   538.893 MB/sec
[info]                  ·gc.alloc.rate.norm:              2264.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.175 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.244 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2828.439 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 376378.297 ops/s
[info]                  ·gc.alloc.rate:                   541.275 MB/sec
[info]                  ·gc.alloc.rate.norm:              2264.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.893 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2801.974 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson":
[info]   383857.874 ±(99.9%) 30074.751 ops/s [Average]
[info]   (min, avg, max) = (374711.019, 383857.874, 391965.559), stdev = 7810.317
[info]   CI (99.9%): [353783.123, 413932.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   552.063 ±(99.9%) 43.303 MB/sec [Average]
[info]   (min, avg, max) = (538.893, 552.063, 563.677), stdev = 11.246
[info]   CI (99.9%): [508.761, 595.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2264.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2264.001, 2264.001, 2264.001), stdev = 0.001
[info]   CI (99.9%): [2264.001, 2264.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.820 ±(99.9%) 6.966 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.820, 4.056), stdev = 1.809
[info]   CI (99.9%): [≈ 0, 7.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3.317 ±(99.9%) 28.169 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.317, 16.402), stdev = 7.315
[info]   CI (99.9%): [≈ 0, 31.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   505.603 ±(99.9%) 1120.859 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 505.603, 673.396), stdev = 291.084
[info]   CI (99.9%): [≈ 0, 1626.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2086.806 ±(99.9%) 4645.383 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2086.806, 2828.439), stdev = 1206.391
[info]   CI (99.9%): [≈ 0, 6732.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.342
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 6.02% complete, ETA 02:05:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 171826.097 ops/s
[info] # Warmup Iteration   2: 179554.168 ops/s
[info] # Warmup Iteration   3: 175693.548 ops/s
[info] # Warmup Iteration   4: 174372.635 ops/s
[info] # Warmup Iteration   5: 174795.880 ops/s
[info] Iteration   1: 180495.931 ops/s
[info]                  ·gc.alloc.rate:                   460.404 MB/sec
[info]                  ·gc.alloc.rate.norm:              4016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.011 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.097 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.361 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4460.493 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 179766.519 ops/s
[info]                  ·gc.alloc.rate:                   458.641 MB/sec
[info]                  ·gc.alloc.rate.norm:              4016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.018 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.156 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.511 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4478.951 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 181193.365 ops/s
[info]                  ·gc.alloc.rate:      462.265 MB/sec
[info]                  ·gc.alloc.rate.norm: 4016.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 180124.182 ops/s
[info]                  ·gc.alloc.rate:                   459.489 MB/sec
[info]                  ·gc.alloc.rate.norm:              4016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.311 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28.936 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.525 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5895.454 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 180336.211 ops/s
[info]                  ·gc.alloc.rate:                   460.011 MB/sec
[info]                  ·gc.alloc.rate.norm:              4016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.363 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.551 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5888.982 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle":
[info]   180383.242 ±(99.9%) 2036.359 ops/s [Average]
[info]   (min, avg, max) = (179766.519, 180383.242, 181193.365), stdev = 528.836
[info]   CI (99.9%): [178346.883, 182419.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.alloc.rate":
[info]   460.162 ±(99.9%) 5.192 MB/sec [Average]
[info]   (min, avg, max) = (458.641, 460.162, 462.265), stdev = 1.348
[info]   CI (99.9%): [454.970, 465.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   4016.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4016.002, 4016.002, 4016.002), stdev = 0.001
[info]   CI (99.9%): [4016.002, 4016.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0.676 ±(99.9%) 5.671 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.676, 3.311), stdev = 1.473
[info]   CI (99.9%): [≈ 0, 6.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   5.910 ±(99.9%) 49.567 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.910, 28.936), stdev = 12.872
[info]   CI (99.9%): [≈ 0, 55.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   474.390 ±(99.9%) 1068.353 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474.390, 674.551), stdev = 277.448
[info]   CI (99.9%): [≈ 0, 1542.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   4144.776 ±(99.9%) 9332.877 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4144.776, 5895.454), stdev = 2423.719
[info]   CI (99.9%): [≈ 0, 13477.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.304
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 6.22% complete, ETA 02:05:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13366.125 ops/s
[info] # Warmup Iteration   2: 17361.039 ops/s
[info] # Warmup Iteration   3: 17223.281 ops/s
[info] # Warmup Iteration   4: 17361.548 ops/s
[info] # Warmup Iteration   5: 17335.692 ops/s
[info] Iteration   1: 17344.000 ops/s
[info]                  ·gc.alloc.rate:                   1084.845 MB/sec
[info]                  ·gc.alloc.rate.norm:              98480.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.833 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60987.617 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 17039.492 ops/s
[info]                  ·gc.alloc.rate:                   1066.256 MB/sec
[info]                  ·gc.alloc.rate.norm:              98480.042 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.613 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.944 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 124035.042 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 17358.974 ops/s
[info]                  ·gc.alloc.rate:                   1086.409 MB/sec
[info]                  ·gc.alloc.rate.norm:              98480.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.549 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.108 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 121749.077 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 17133.563 ops/s
[info]                  ·gc.alloc.rate:                   1072.242 MB/sec
[info]                  ·gc.alloc.rate.norm:              98480.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.577 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61680.941 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 17262.885 ops/s
[info]                  ·gc.alloc.rate:                   1079.946 MB/sec
[info]                  ·gc.alloc.rate.norm:              98480.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.796 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.951 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 122463.425 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce":
[info]   17227.783 ±(99.9%) 531.754 ops/s [Average]
[info]   (min, avg, max) = (17039.492, 17227.783, 17358.974), stdev = 138.095
[info]   CI (99.9%): [16696.029, 17759.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate":
[info]   1077.940 ±(99.9%) 32.922 MB/sec [Average]
[info]   (min, avg, max) = (1066.256, 1077.940, 1086.409), stdev = 8.550
[info]   CI (99.9%): [1045.017, 1110.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   98480.028 ±(99.9%) 0.031 B/op [Average]
[info]   (min, avg, max) = (98480.024, 98480.028, 98480.042), stdev = 0.008
[info]   CI (99.9%): [98479.996, 98480.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.183 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.104), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4.192 ±(99.9%) 16.780 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.192, 9.613), stdev = 4.358
[info]   CI (99.9%): [≈ 0, 20.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1074.482 ±(99.9%) 1415.820 MB/sec [Average]
[info]   (min, avg, max) = (671.577, 1074.482, 1343.108), stdev = 367.684
[info]   CI (99.9%): [≈ 0, 2490.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   98183.220 ±(99.9%) 129571.792 B/op [Average]
[info]   (min, avg, max) = (60987.617, 98183.220, 124035.042), stdev = 33649.383
[info]   CI (99.9%): [≈ 0, 227755.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 6.43% complete, ETA 02:04:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20917.532 ops/s
[info] # Warmup Iteration   2: 33579.327 ops/s
[info] # Warmup Iteration   3: 33415.162 ops/s
[info] # Warmup Iteration   4: 33095.866 ops/s
[info] # Warmup Iteration   5: 33549.399 ops/s
[info] Iteration   1: 33609.767 ops/s
[info]                  ·gc.alloc.rate:                   841.579 MB/sec
[info]                  ·gc.alloc.rate.norm:              39424.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.504 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31597.331 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 33629.673 ops/s
[info]                  ·gc.alloc.rate:                   842.110 MB/sec
[info]                  ·gc.alloc.rate.norm:              39424.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.569 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31580.422 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 33616.030 ops/s
[info]                  ·gc.alloc.rate:                   841.857 MB/sec
[info]                  ·gc.alloc.rate.norm:              39424.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.272 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31622.879 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 33557.624 ops/s
[info]                  ·gc.alloc.rate:                   840.390 MB/sec
[info]                  ·gc.alloc.rate.norm:              39424.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.953 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.186 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63386.286 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 33527.525 ops/s
[info]                  ·gc.alloc.rate:                   839.746 MB/sec
[info]                  ·gc.alloc.rate.norm:              39424.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.977 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676.033 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31738.076 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala":
[info]   33588.124 ±(99.9%) 167.580 ops/s [Average]
[info]   (min, avg, max) = (33527.525, 33588.124, 33629.673), stdev = 43.520
[info]   CI (99.9%): [33420.543, 33755.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   841.136 ±(99.9%) 3.924 MB/sec [Average]
[info]   (min, avg, max) = (839.746, 841.136, 842.110), stdev = 1.019
[info]   CI (99.9%): [837.213, 845.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   39424.013 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (39424.012, 39424.013, 39424.013), stdev = 0.001
[info]   CI (99.9%): [39424.011, 39424.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.586 ±(99.9%) 3.363 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.586, 1.953), stdev = 0.873
[info]   CI (99.9%): [≈ 0, 3.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   810.313 ±(99.9%) 1164.274 MB/sec [Average]
[info]   (min, avg, max) = (674.504, 810.313, 1351.186), stdev = 302.358
[info]   CI (99.9%): [≈ 0, 1974.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   37984.999 ±(99.9%) 54678.701 B/op [Average]
[info]   (min, avg, max) = (31580.422, 37984.999, 63386.286), stdev = 14199.885
[info]   CI (99.9%): [≈ 0, 92663.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 6.63% complete, ETA 02:04:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32298.662 ops/s
[info] # Warmup Iteration   2: 36079.673 ops/s
[info] # Warmup Iteration   3: 36291.456 ops/s
[info] # Warmup Iteration   4: 36360.902 ops/s
[info] # Warmup Iteration   5: 36385.311 ops/s
[info] Iteration   1: 35703.259 ops/s
[info]                  ·gc.alloc.rate:                   531.869 MB/sec
[info]                  ·gc.alloc.rate.norm:              23448.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.017 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.736 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.557 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22552.548 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 36427.308 ops/s
[info]                  ·gc.alloc.rate:                   542.551 MB/sec
[info]                  ·gc.alloc.rate.norm:              23448.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.336 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     144.167 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.604 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29155.093 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 35401.817 ops/s
[info]                  ·gc.alloc.rate:      527.284 MB/sec
[info]                  ·gc.alloc.rate.norm: 23448.012 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 36420.675 ops/s
[info]                  ·gc.alloc.rate:                   542.431 MB/sec
[info]                  ·gc.alloc.rate.norm:              23448.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.799 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.510 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29157.493 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 36561.571 ops/s
[info]                  ·gc.alloc.rate:                   544.723 MB/sec
[info]                  ·gc.alloc.rate.norm:              23448.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.085 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28930.387 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala":
[info]   36102.926 ±(99.9%) 1989.550 ops/s [Average]
[info]   (min, avg, max) = (35401.817, 36102.926, 36561.571), stdev = 516.680
[info]   CI (99.9%): [34113.376, 38092.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   537.771 ±(99.9%) 29.685 MB/sec [Average]
[info]   (min, avg, max) = (527.284, 537.771, 544.723), stdev = 7.709
[info]   CI (99.9%): [508.087, 567.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   23448.011 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (23448.011, 23448.011, 23448.012), stdev = 0.001
[info]   CI (99.9%): [23448.010, 23448.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.679 ±(99.9%) 5.720 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.679, 3.336), stdev = 1.485
[info]   CI (99.9%): [≈ 0, 6.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   29.340 ±(99.9%) 247.189 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 29.340, 144.167), stdev = 64.194
[info]   CI (99.9%): [≈ 0, 276.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   506.551 ±(99.9%) 1123.426 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506.551, 674.604), stdev = 291.750
[info]   CI (99.9%): [≈ 0, 1629.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   21959.104 ±(99.9%) 48507.121 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21959.104, 29157.493), stdev = 12597.145
[info]   CI (99.9%): [≈ 0, 70466.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 6.83% complete, ETA 02:04:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14766.798 ops/s
[info] # Warmup Iteration   2: 25510.481 ops/s
[info] # Warmup Iteration   3: 25556.018 ops/s
[info] # Warmup Iteration   4: 26396.650 ops/s
[info] # Warmup Iteration   5: 25981.577 ops/s
[info] Iteration   1: 26329.689 ops/s
[info]                  ·gc.alloc.rate:                   1394.839 MB/sec
[info]                  ·gc.alloc.rate.norm:              83400.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.977 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.722 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80822.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 26359.256 ops/s
[info]                  ·gc.alloc.rate:                   1396.298 MB/sec
[info]                  ·gc.alloc.rate.norm:              83400.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.243 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.647 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80792.769 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 26367.925 ops/s
[info]                  ·gc.alloc.rate:                   1396.977 MB/sec
[info]                  ·gc.alloc.rate.norm:              83400.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.842 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80824.834 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 26486.055 ops/s
[info]                  ·gc.alloc.rate:                   1403.464 MB/sec
[info]                  ·gc.alloc.rate.norm:              83400.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.474 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.301 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80537.919 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 26516.628 ops/s
[info]                  ·gc.alloc.rate:                   1404.798 MB/sec
[info]                  ·gc.alloc.rate.norm:              83400.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.471 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80509.162 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson":
[info]   26411.911 ±(99.9%) 321.770 ops/s [Average]
[info]   (min, avg, max) = (26329.689, 26411.911, 26516.628), stdev = 83.563
[info]   CI (99.9%): [26090.141, 26733.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1399.275 ±(99.9%) 17.421 MB/sec [Average]
[info]   (min, avg, max) = (1394.839, 1399.275, 1404.798), stdev = 4.524
[info]   CI (99.9%): [1381.854, 1416.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   83400.016 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (83400.015, 83400.016, 83400.017), stdev = 0.001
[info]   CI (99.9%): [83400.014, 83400.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.083), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.233 ±(99.9%) 7.103 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.233, 4.977), stdev = 1.845
[info]   CI (99.9%): [≈ 0, 9.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1353.923 ±(99.9%) 6.977 MB/sec [Average]
[info]   (min, avg, max) = (1351.722, 1353.923, 1356.104), stdev = 1.812
[info]   CI (99.9%): [1346.946, 1360.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   80697.339 ±(99.9%) 614.084 B/op [Average]
[info]   (min, avg, max) = (80509.162, 80697.339, 80824.834), stdev = 159.476
[info]   CI (99.9%): [80083.255, 81311.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 7.03% complete, ETA 02:04:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18966.956 ops/s
[info] # Warmup Iteration   2: 31308.144 ops/s
[info] # Warmup Iteration   3: 30969.996 ops/s
[info] # Warmup Iteration   4: 31298.550 ops/s
[info] # Warmup Iteration   5: 31404.714 ops/s
[info] Iteration   1: 31547.103 ops/s
[info]                  ·gc.alloc.rate:                   1731.956 MB/sec
[info]                  ·gc.alloc.rate.norm:              86432.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.367 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66939.927 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 31351.089 ops/s
[info]                  ·gc.alloc.rate:                   1721.349 MB/sec
[info]                  ·gc.alloc.rate.norm:              86432.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.135 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2014.185 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 101135.854 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 30816.123 ops/s
[info]                  ·gc.alloc.rate:                   1692.101 MB/sec
[info]                  ·gc.alloc.rate.norm:              86432.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2017.789 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 103068.070 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 31344.777 ops/s
[info]                  ·gc.alloc.rate:                   1721.034 MB/sec
[info]                  ·gc.alloc.rate.norm:              86432.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.575 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67626.329 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 30624.474 ops/s
[info]                  ·gc.alloc.rate:                   1681.345 MB/sec
[info]                  ·gc.alloc.rate.norm:              86432.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2022.661 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 103977.853 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce":
[info]   31136.713 ±(99.9%) 1519.462 ops/s [Average]
[info]   (min, avg, max) = (30624.474, 31136.713, 31547.103), stdev = 394.600
[info]   CI (99.9%): [29617.251, 32656.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1709.557 ±(99.9%) 83.327 MB/sec [Average]
[info]   (min, avg, max) = (1681.345, 1709.557, 1731.956), stdev = 21.640
[info]   CI (99.9%): [1626.230, 1792.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   86432.013 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (86432.013, 86432.013, 86432.014), stdev = 0.001
[info]   CI (99.9%): [86432.011, 86432.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.047 ±(99.9%) 4.928 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.047, 3.135), stdev = 1.280
[info]   CI (99.9%): [≈ 0, 5.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1748.516 ±(99.9%) 1422.096 MB/sec [Average]
[info]   (min, avg, max) = (1341.367, 1748.516, 2022.661), stdev = 369.314
[info]   CI (99.9%): [326.419, 3170.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   88549.607 ±(99.9%) 74864.876 B/op [Average]
[info]   (min, avg, max) = (66939.927, 88549.607, 103977.853), stdev = 19442.170
[info]   CI (99.9%): [13684.731, 163414.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 7.23% complete, ETA 02:03:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13712.768 ops/s
[info] # Warmup Iteration   2: 28422.802 ops/s
[info] # Warmup Iteration   3: 28373.613 ops/s
[info] # Warmup Iteration   4: 28964.756 ops/s
[info] # Warmup Iteration   5: 28269.201 ops/s
[info] Iteration   1: 28346.941 ops/s
[info]                  ·gc.alloc.rate:                   1525.402 MB/sec
[info]                  ·gc.alloc.rate.norm:              84720.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.311 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.746 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75075.275 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 28796.006 ops/s
[info]                  ·gc.alloc.rate:                   1549.622 MB/sec
[info]                  ·gc.alloc.rate.norm:              84720.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.138 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.174 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 110992.498 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 28966.070 ops/s
[info]                  ·gc.alloc.rate:                   1558.928 MB/sec
[info]                  ·gc.alloc.rate.norm:              84720.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.651 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73618.570 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 29051.511 ops/s
[info]                  ·gc.alloc.rate:                   1563.388 MB/sec
[info]                  ·gc.alloc.rate.norm:              84720.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73452.283 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 28994.164 ops/s
[info]                  ·gc.alloc.rate:                   1560.598 MB/sec
[info]                  ·gc.alloc.rate.norm:              84720.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.390 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356.698 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73650.885 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala":
[info]   28830.938 ±(99.9%) 1104.385 ops/s [Average]
[info]   (min, avg, max) = (28346.941, 28830.938, 29051.511), stdev = 286.805
[info]   CI (99.9%): [27726.554, 29935.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1551.588 ±(99.9%) 59.774 MB/sec [Average]
[info]   (min, avg, max) = (1525.402, 1551.588, 1563.388), stdev = 15.523
[info]   CI (99.9%): [1491.813, 1611.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   84720.014 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (84720.014, 84720.014, 84720.015), stdev = 0.001
[info]   CI (99.9%): [84720.013, 84720.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.062), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.594 ±(99.9%) 4.984 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.594, 3.390), stdev = 1.294
[info]   CI (99.9%): [≈ 0, 6.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1489.745 ±(99.9%) 1163.335 MB/sec [Average]
[info]   (min, avg, max) = (1351.746, 1489.745, 2030.174), stdev = 302.114
[info]   CI (99.9%): [326.411, 2653.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   81357.902 ±(99.9%) 63840.461 B/op [Average]
[info]   (min, avg, max) = (73452.283, 81357.902, 110992.498), stdev = 16579.165
[info]   CI (99.9%): [17517.441, 145198.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 7.43% complete, ETA 02:03:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25320.267 ops/s
[info] # Warmup Iteration   2: 33889.002 ops/s
[info] # Warmup Iteration   3: 34228.450 ops/s
[info] # Warmup Iteration   4: 34504.155 ops/s
[info] # Warmup Iteration   5: 34712.104 ops/s
[info] Iteration   1: 34640.940 ops/s
[info]                  ·gc.alloc.rate:                   1721.370 MB/sec
[info]                  ·gc.alloc.rate.norm:              78224.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.728 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2014.449 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 91542.349 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 34840.333 ops/s
[info]                  ·gc.alloc.rate:                   1731.046 MB/sec
[info]                  ·gc.alloc.rate.norm:              78224.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.940 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.691 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60719.859 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 34793.330 ops/s
[info]                  ·gc.alloc.rate:                   1729.249 MB/sec
[info]                  ·gc.alloc.rate.norm:              78224.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.883 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.160 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 91338.375 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 34782.317 ops/s
[info]                  ·gc.alloc.rate:                   1728.162 MB/sec
[info]                  ·gc.alloc.rate.norm:              78224.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.683 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61001.921 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 34802.720 ops/s
[info]                  ·gc.alloc.rate:                   1729.357 MB/sec
[info]                  ·gc.alloc.rate.norm:              78224.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.589 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024.092 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 91555.737 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala":
[info]   34771.928 ±(99.9%) 294.211 ops/s [Average]
[info]   (min, avg, max) = (34640.940, 34771.928, 34840.333), stdev = 76.406
[info]   CI (99.9%): [34477.718, 35066.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1727.837 ±(99.9%) 14.475 MB/sec [Average]
[info]   (min, avg, max) = (1721.370, 1727.837, 1731.046), stdev = 3.759
[info]   CI (99.9%): [1713.361, 1742.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   78224.012 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (78224.012, 78224.012, 78224.013), stdev = 0.001
[info]   CI (99.9%): [78224.010, 78224.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.234 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.146), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2.828 ±(99.9%) 10.583 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.828, 6.589), stdev = 2.748
[info]   CI (99.9%): [≈ 0, 13.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1749.815 ±(99.9%) 1420.638 MB/sec [Average]
[info]   (min, avg, max) = (1343.691, 1749.815, 2024.092), stdev = 368.935
[info]   CI (99.9%): [329.177, 3170.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   79231.648 ±(99.9%) 64577.798 B/op [Average]
[info]   (min, avg, max) = (60719.859, 79231.648, 91555.737), stdev = 16770.649
[info]   CI (99.9%): [14653.851, 143809.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 7.63% complete, ETA 02:03:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25545.634 ops/s
[info] # Warmup Iteration   2: 33459.445 ops/s
[info] # Warmup Iteration   3: 33264.908 ops/s
[info] # Warmup Iteration   4: 34305.809 ops/s
[info] # Warmup Iteration   5: 34454.473 ops/s
[info] Iteration   1: 34671.126 ops/s
[info]                  ·gc.alloc.rate:                   1656.006 MB/sec
[info]                  ·gc.alloc.rate.norm:              75192.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.945 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.948 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60977.434 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 34694.230 ops/s
[info]                  ·gc.alloc.rate:                   1657.698 MB/sec
[info]                  ·gc.alloc.rate.norm:              75192.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.057 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60965.478 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 34171.060 ops/s
[info]                  ·gc.alloc.rate:                   1632.175 MB/sec
[info]                  ·gc.alloc.rate.norm:              75192.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.876 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2017.193 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 92929.273 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 34590.091 ops/s
[info]                  ·gc.alloc.rate:                   1652.241 MB/sec
[info]                  ·gc.alloc.rate.norm:              75192.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.284 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61313.676 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 34450.965 ops/s
[info]                  ·gc.alloc.rate:                   1645.442 MB/sec
[info]                  ·gc.alloc.rate.norm:              75192.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.853 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.274 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 92457.869 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc":
[info]   34515.494 ±(99.9%) 827.063 ops/s [Average]
[info]   (min, avg, max) = (34171.060, 34515.494, 34694.230), stdev = 214.786
[info]   CI (99.9%): [33688.431, 35342.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1648.712 ±(99.9%) 39.952 MB/sec [Average]
[info]   (min, avg, max) = (1632.175, 1648.712, 1657.698), stdev = 10.375
[info]   CI (99.9%): [1608.761, 1688.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   75192.012 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (75192.012, 75192.012, 75192.012), stdev = 0.001
[info]   CI (99.9%): [75192.012, 75192.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.062), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   1.335 ±(99.9%) 5.579 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.335, 2.876), stdev = 1.449
[info]   CI (99.9%): [≈ 0, 6.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   1614.951 ±(99.9%) 1424.661 MB/sec [Average]
[info]   (min, avg, max) = (1342.948, 1614.951, 2023.274), stdev = 369.980
[info]   CI (99.9%): [190.290, 3039.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   73728.746 ±(99.9%) 66669.294 B/op [Average]
[info]   (min, avg, max) = (60965.478, 73728.746, 92929.273), stdev = 17313.804
[info]   CI (99.9%): [7059.452, 140398.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 7.83% complete, ETA 02:03:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5449.196 ops/s
[info] # Warmup Iteration   2: 8786.028 ops/s
[info] # Warmup Iteration   3: 8963.656 ops/s
[info] # Warmup Iteration   4: 9059.033 ops/s
[info] # Warmup Iteration   5: 9081.576 ops/s
[info] Iteration   1: 8897.902 ops/s
[info]                  ·gc.alloc.rate:                   1146.403 MB/sec
[info]                  ·gc.alloc.rate.norm:              202832.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.980 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 236904.431 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 9086.013 ops/s
[info]                  ·gc.alloc.rate:                   1171.290 MB/sec
[info]                  ·gc.alloc.rate.norm:              202832.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.601 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1337.465 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 231608.545 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 8854.582 ops/s
[info]                  ·gc.alloc.rate:                   1140.921 MB/sec
[info]                  ·gc.alloc.rate.norm:              202833.325 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.261 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 118981.470 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 9051.996 ops/s
[info]                  ·gc.alloc.rate:                   1166.449 MB/sec
[info]                  ·gc.alloc.rate.norm:              202832.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.619 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.557 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 232759.554 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 9077.943 ops/s
[info]                  ·gc.alloc.rate:                   1170.010 MB/sec
[info]                  ·gc.alloc.rate.norm:              202832.045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1340.131 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 232324.074 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson":
[info]   8993.687 ±(99.9%) 419.826 ops/s [Average]
[info]   (min, avg, max) = (8854.582, 8993.687, 9086.013), stdev = 109.028
[info]   CI (99.9%): [8573.861, 9413.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1159.015 ±(99.9%) 54.906 MB/sec [Average]
[info]   (min, avg, max) = (1140.921, 1159.015, 1171.290), stdev = 14.259
[info]   CI (99.9%): [1104.108, 1213.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   202832.301 ±(99.9%) 2.204 B/op [Average]
[info]   (min, avg, max) = (202832.045, 202832.301, 202833.325), stdev = 0.572
[info]   CI (99.9%): [202830.097, 202834.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.444 ±(99.9%) 7.613 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.444, 3.619), stdev = 1.977
[info]   CI (99.9%): [≈ 0, 9.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1204.879 ±(99.9%) 1152.963 MB/sec [Average]
[info]   (min, avg, max) = (669.261, 1204.879, 1340.131), stdev = 299.421
[info]   CI (99.9%): [51.916, 2357.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   210515.615 ±(99.9%) 197194.542 B/op [Average]
[info]   (min, avg, max) = (118981.470, 210515.615, 236904.431), stdev = 51210.796
[info]   CI (99.9%): [13321.072, 407710.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 8.03% complete, ETA 02:02:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15028.640 ops/s
[info] # Warmup Iteration   2: 20399.264 ops/s
[info] # Warmup Iteration   3: 20423.385 ops/s
[info] # Warmup Iteration   4: 20389.345 ops/s
[info] # Warmup Iteration   5: 20977.765 ops/s
[info] Iteration   1: 20993.802 ops/s
[info]                  ·gc.alloc.rate:                   1603.255 MB/sec
[info]                  ·gc.alloc.rate.norm:              120240.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.363 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2013.431 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 151002.135 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 21177.152 ops/s
[info]                  ·gc.alloc.rate:                   1617.444 MB/sec
[info]                  ·gc.alloc.rate.norm:              120240.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.196 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 99852.594 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 20992.761 ops/s
[info]                  ·gc.alloc.rate:                   1603.478 MB/sec
[info]                  ·gc.alloc.rate.norm:              120240.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.472 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 100817.893 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 21156.279 ops/s
[info]                  ·gc.alloc.rate:                   1616.025 MB/sec
[info]                  ·gc.alloc.rate.norm:              120240.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.645 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.163 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 150235.442 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 21165.705 ops/s
[info]                  ·gc.alloc.rate:                   1616.592 MB/sec
[info]                  ·gc.alloc.rate.norm:              120240.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.450 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 100295.990 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce":
[info]   21097.140 ±(99.9%) 366.188 ops/s [Average]
[info]   (min, avg, max) = (20992.761, 21097.140, 21177.152), stdev = 95.098
[info]   CI (99.9%): [20730.951, 21463.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1611.359 ±(99.9%) 28.162 MB/sec [Average]
[info]   (min, avg, max) = (1603.255, 1611.359, 1617.444), stdev = 7.314
[info]   CI (99.9%): [1583.197, 1639.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   120240.021 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (120240.019, 120240.021, 120240.024), stdev = 0.002
[info]   CI (99.9%): [120240.013, 120240.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.215 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.125), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2.802 ±(99.9%) 16.108 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.802, 9.363), stdev = 4.183
[info]   CI (99.9%): [≈ 0, 18.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1613.742 ±(99.9%) 1415.078 MB/sec [Average]
[info]   (min, avg, max) = (1343.196, 1613.742, 2019.163), stdev = 367.491
[info]   CI (99.9%): [198.665, 3028.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   120440.811 ±(99.9%) 106093.136 B/op [Average]
[info]   (min, avg, max) = (99852.594, 120440.811, 151002.135), stdev = 27552.051
[info]   CI (99.9%): [14347.675, 226533.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8.23% complete, ETA 02:02:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27251.191 ops/s
[info] # Warmup Iteration   2: 43140.131 ops/s
[info] # Warmup Iteration   3: 42150.120 ops/s
[info] # Warmup Iteration   4: 43295.853 ops/s
[info] # Warmup Iteration   5: 42541.046 ops/s
[info] Iteration   1: 43124.266 ops/s
[info]                  ·gc.alloc.rate:                   1062.847 MB/sec
[info]                  ·gc.alloc.rate.norm:              38792.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.519 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.152 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49278.113 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 42223.523 ops/s
[info]                  ·gc.alloc.rate:                   1040.329 MB/sec
[info]                  ·gc.alloc.rate.norm:              38792.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.172 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25175.954 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 43069.136 ops/s
[info]                  ·gc.alloc.rate:                   1061.590 MB/sec
[info]                  ·gc.alloc.rate.norm:              38792.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.282 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.181 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49410.615 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 43114.884 ops/s
[info]                  ·gc.alloc.rate:                   1062.418 MB/sec
[info]                  ·gc.alloc.rate.norm:              38792.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676.577 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24703.843 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 43156.092 ops/s
[info]                  ·gc.alloc.rate:                   1063.371 MB/sec
[info]                  ·gc.alloc.rate.norm:              38792.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.555 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.717 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49383.905 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala":
[info]   42937.580 ±(99.9%) 1541.725 ops/s [Average]
[info]   (min, avg, max) = (42223.523, 42937.580, 43156.092), stdev = 400.381
[info]   CI (99.9%): [41395.856, 44479.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1058.111 ±(99.9%) 38.359 MB/sec [Average]
[info]   (min, avg, max) = (1040.329, 1058.111, 1063.371), stdev = 9.962
[info]   CI (99.9%): [1019.752, 1096.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   38792.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (38792.009, 38792.010, 38792.010), stdev = 0.001
[info]   CI (99.9%): [38792.008, 38792.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.200 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.125), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.671 ±(99.9%) 7.280 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.671, 4.555), stdev = 1.890
[info]   CI (99.9%): [≈ 0, 8.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1081.560 ±(99.9%) 1426.050 MB/sec [Average]
[info]   (min, avg, max) = (675.172, 1081.560, 1353.717), stdev = 370.341
[info]   CI (99.9%): [≈ 0, 2507.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   39590.486 ±(99.9%) 51503.243 B/op [Average]
[info]   (min, avg, max) = (24703.843, 39590.486, 49410.615), stdev = 13375.229
[info]   CI (99.9%): [≈ 0, 91093.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8.43% complete, ETA 02:02:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51019.331 ops/s
[info] # Warmup Iteration   2: 57714.121 ops/s
[info] # Warmup Iteration   3: 57822.160 ops/s
[info] # Warmup Iteration   4: 58143.291 ops/s
[info] # Warmup Iteration   5: 58040.193 ops/s
[info] Iteration   1: 58276.207 ops/s
[info]                  ·gc.alloc.rate:                   752.709 MB/sec
[info]                  ·gc.alloc.rate.norm:              20336.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.480 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18222.496 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 58138.435 ops/s
[info]                  ·gc.alloc.rate:                   750.996 MB/sec
[info]                  ·gc.alloc.rate.norm:              20336.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.563 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.878 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18193.613 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 58174.107 ops/s
[info]                  ·gc.alloc.rate:                   751.545 MB/sec
[info]                  ·gc.alloc.rate.norm:              20336.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.563 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.988 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18183.295 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 58088.716 ops/s
[info]                  ·gc.alloc.rate:                   750.389 MB/sec
[info]                  ·gc.alloc.rate.norm:              20336.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.692 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.247 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18191.223 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 58200.458 ops/s
[info]                  ·gc.alloc.rate:                   751.850 MB/sec
[info]                  ·gc.alloc.rate.norm:              20336.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.225 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18155.289 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala":
[info]   58175.585 ±(99.9%) 270.040 ops/s [Average]
[info]   (min, avg, max) = (58088.716, 58175.585, 58276.207), stdev = 70.128
[info]   CI (99.9%): [57905.545, 58445.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   751.498 ±(99.9%) 3.376 MB/sec [Average]
[info]   (min, avg, max) = (750.389, 751.498, 752.709), stdev = 0.877
[info]   CI (99.9%): [748.121, 754.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   20336.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (20336.007, 20336.007, 20336.008), stdev = 0.001
[info]   CI (99.9%): [20336.006, 20336.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.564 ±(99.9%) 2.660 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.564, 1.692), stdev = 0.691
[info]   CI (99.9%): [≈ 0, 3.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   672.164 ±(99.9%) 5.166 MB/sec [Average]
[info]   (min, avg, max) = (671.225, 672.164, 674.480), stdev = 1.342
[info]   CI (99.9%): [666.998, 677.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   18189.183 ±(99.9%) 92.676 B/op [Average]
[info]   (min, avg, max) = (18155.289, 18189.183, 18222.496), stdev = 24.068
[info]   CI (99.9%): [18096.507, 18281.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 8.63% complete, ETA 02:02:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14626.887 ops/s
[info] # Warmup Iteration   2: 32485.955 ops/s
[info] # Warmup Iteration   3: 32486.302 ops/s
[info] # Warmup Iteration   4: 32000.791 ops/s
[info] # Warmup Iteration   5: 32704.841 ops/s
[info] Iteration   1: 32716.050 ops/s
[info]                  ·gc.alloc.rate:                   2185.530 MB/sec
[info]                  ·gc.alloc.rate.norm:              105144.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.386 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 97728.244 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 32772.443 ops/s
[info]                  ·gc.alloc.rate:                   2189.002 MB/sec
[info]                  ·gc.alloc.rate.norm:              105144.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.998 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2711.401 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 130236.332 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 32446.555 ops/s
[info]                  ·gc.alloc.rate:                   2167.205 MB/sec
[info]                  ·gc.alloc.rate.norm:              105144.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.376 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 98748.230 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 32707.342 ops/s
[info]                  ·gc.alloc.rate:                   2184.600 MB/sec
[info]                  ·gc.alloc.rate.norm:              105144.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037.739 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 98075.638 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 32593.629 ops/s
[info]                  ·gc.alloc.rate:                   2176.848 MB/sec
[info]                  ·gc.alloc.rate.norm:              105144.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2038.940 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 98482.906 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson":
[info]   32647.204 ±(99.9%) 498.995 ops/s [Average]
[info]   (min, avg, max) = (32446.555, 32647.204, 32772.443), stdev = 129.587
[info]   CI (99.9%): [32148.209, 33146.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2180.637 ±(99.9%) 33.592 MB/sec [Average]
[info]   (min, avg, max) = (2167.205, 2180.637, 2189.002), stdev = 8.724
[info]   CI (99.9%): [2147.045, 2214.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   105144.013 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (105144.012, 105144.013, 105144.014), stdev = 0.001
[info]   CI (99.9%): [105144.011, 105144.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.075, 0.125), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3.608 ±(99.9%) 6.988 B/op [Average]
[info]   (min, avg, max) = (1.010, 3.608, 6.008), stdev = 1.815
[info]   CI (99.9%): [≈ 0, 10.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2170.968 ±(99.9%) 1163.375 MB/sec [Average]
[info]   (min, avg, max) = (2031.386, 2170.968, 2711.401), stdev = 302.125
[info]   CI (99.9%): [1007.594, 3334.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   104654.270 ±(99.9%) 55087.669 B/op [Average]
[info]   (min, avg, max) = (97728.244, 104654.270, 130236.332), stdev = 14306.093
[info]   CI (99.9%): [49566.601, 159741.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8.84% complete, ETA 02:01:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18202.890 ops/s
[info] # Warmup Iteration   2: 33548.500 ops/s
[info] # Warmup Iteration   3: 33889.623 ops/s
[info] # Warmup Iteration   4: 33659.660 ops/s
[info] # Warmup Iteration   5: 33740.842 ops/s
[info] Iteration   1: 33960.455 ops/s
[info]                  ·gc.alloc.rate:                   1923.032 MB/sec
[info]                  ·gc.alloc.rate.norm:              89144.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.823 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.400 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 94121.179 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 33356.343 ops/s
[info]                  ·gc.alloc.rate:                   1888.704 MB/sec
[info]                  ·gc.alloc.rate.norm:              89144.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.964 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.099 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63958.642 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 32922.479 ops/s
[info]                  ·gc.alloc.rate:                   1864.302 MB/sec
[info]                  ·gc.alloc.rate.norm:              89144.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.980 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034.372 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 97276.113 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 32805.765 ops/s
[info]                  ·gc.alloc.rate:                   1857.784 MB/sec
[info]                  ·gc.alloc.rate.norm:              89144.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.994 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036.361 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 97712.866 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 32760.491 ops/s
[info]                  ·gc.alloc.rate:                   1855.501 MB/sec
[info]                  ·gc.alloc.rate.norm:              89144.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2038.441 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 97933.011 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala":
[info]   33161.107 ±(99.9%) 1945.222 ops/s [Average]
[info]   (min, avg, max) = (32760.491, 33161.107, 33960.455), stdev = 505.168
[info]   CI (99.9%): [31215.885, 35106.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1877.865 ±(99.9%) 109.673 MB/sec [Average]
[info]   (min, avg, max) = (1855.501, 1877.865, 1923.032), stdev = 28.482
[info]   CI (99.9%): [1768.192, 1987.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   89144.012 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (89144.012, 89144.012, 89144.012), stdev = 0.001
[info]   CI (99.9%): [89144.012, 89144.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3.352 ±(99.9%) 4.993 B/op [Average]
[info]   (min, avg, max) = (1.964, 3.352, 4.823), stdev = 1.297
[info]   CI (99.9%): [≈ 0, 8.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1898.935 ±(99.9%) 1170.703 MB/sec [Average]
[info]   (min, avg, max) = (1355.099, 1898.935, 2038.441), stdev = 304.028
[info]   CI (99.9%): [728.232, 3069.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   90200.362 ±(99.9%) 56798.582 B/op [Average]
[info]   (min, avg, max) = (63958.642, 90200.362, 97933.011), stdev = 14750.411
[info]   CI (99.9%): [33401.781, 146998.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.04% complete, ETA 02:01:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 43688.250 ops/s
[info] # Warmup Iteration   2: 49023.174 ops/s
[info] # Warmup Iteration   3: 47632.022 ops/s
[info] # Warmup Iteration   4: 48182.007 ops/s
[info] # Warmup Iteration   5: 49385.242 ops/s
[info] Iteration   1: 48407.706 ops/s
[info]                  ·gc.alloc.rate:                   1859.534 MB/sec
[info]                  ·gc.alloc.rate.norm:              60480.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.324 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 43690.667 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 48634.184 ops/s
[info]                  ·gc.alloc.rate:                   1868.285 MB/sec
[info]                  ·gc.alloc.rate.norm:              60480.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.368 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2017.061 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65296.178 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 49017.011 ops/s
[info]                  ·gc.alloc.rate:                   1883.183 MB/sec
[info]                  ·gc.alloc.rate.norm:              60480.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021.385 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64918.467 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 48612.367 ops/s
[info]                  ·gc.alloc.rate:                   1867.757 MB/sec
[info]                  ·gc.alloc.rate.norm:              60480.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.348 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024.147 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65544.087 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 49408.730 ops/s
[info]                  ·gc.alloc.rate:                   1898.753 MB/sec
[info]                  ·gc.alloc.rate.norm:              60480.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.663 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.927 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64594.505 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala":
[info]   48816.000 ±(99.9%) 1531.764 ops/s [Average]
[info]   (min, avg, max) = (48407.706, 48816.000, 49408.730), stdev = 397.794
[info]   CI (99.9%): [47284.235, 50347.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1875.502 ±(99.9%) 59.861 MB/sec [Average]
[info]   (min, avg, max) = (1859.534, 1875.502, 1898.753), stdev = 15.546
[info]   CI (99.9%): [1815.641, 1935.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   60480.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (60480.008, 60480.008, 60480.009), stdev = 0.001
[info]   CI (99.9%): [60480.007, 60480.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.104), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.477 ±(99.9%) 4.990 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.477, 3.368), stdev = 1.296
[info]   CI (99.9%): [≈ 0, 6.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1886.769 ±(99.9%) 1169.904 MB/sec [Average]
[info]   (min, avg, max) = (1343.324, 1886.769, 2027.927), stdev = 303.820
[info]   CI (99.9%): [716.864, 3056.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   60808.781 ±(99.9%) 36874.360 B/op [Average]
[info]   (min, avg, max) = (43690.667, 60808.781, 65544.087), stdev = 9576.154
[info]   CI (99.9%): [23934.421, 97683.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 9.24% complete, ETA 02:01:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42662.615 ops/s
[info] # Warmup Iteration   2: 47072.521 ops/s
[info] # Warmup Iteration   3: 46752.027 ops/s
[info] # Warmup Iteration   4: 48318.012 ops/s
[info] # Warmup Iteration   5: 48357.898 ops/s
[info] Iteration   1: 48367.820 ops/s
[info]                  ·gc.alloc.rate:                   1931.030 MB/sec
[info]                  ·gc.alloc.rate.norm:              62856.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2015.194 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65595.603 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 47601.505 ops/s
[info]                  ·gc.alloc.rate:                   1900.491 MB/sec
[info]                  ·gc.alloc.rate.norm:              62856.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.753 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2018.772 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66768.009 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 48457.547 ops/s
[info]                  ·gc.alloc.rate:                   1934.724 MB/sec
[info]                  ·gc.alloc.rate.norm:              62856.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2022.084 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65694.205 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 48476.079 ops/s
[info]                  ·gc.alloc.rate:                   1935.766 MB/sec
[info]                  ·gc.alloc.rate.norm:              62856.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.676 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.086 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 43838.453 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 47745.757 ops/s
[info]                  ·gc.alloc.rate:                   1906.432 MB/sec
[info]                  ·gc.alloc.rate.norm:              62856.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.925 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66861.706 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   48129.741 ±(99.9%) 1622.951 ops/s [Average]
[info]   (min, avg, max) = (47601.505, 48129.741, 48476.079), stdev = 421.475
[info]   CI (99.9%): [46506.791, 49752.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1921.689 ±(99.9%) 64.935 MB/sec [Average]
[info]   (min, avg, max) = (1900.491, 1921.689, 1935.766), stdev = 16.863
[info]   CI (99.9%): [1856.754, 1986.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   62856.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (62856.008, 62856.008, 62856.009), stdev = 0.001
[info]   CI (99.9%): [62856.008, 62856.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.083), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   1.910 ±(99.9%) 2.910 B/op [Average]
[info]   (min, avg, max) = (0.676, 1.910, 2.753), stdev = 0.756
[info]   CI (99.9%): [≈ 0, 4.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   1886.812 ±(99.9%) 1155.486 MB/sec [Average]
[info]   (min, avg, max) = (1350.086, 1886.812, 2027.925), stdev = 300.076
[info]   CI (99.9%): [731.327, 3042.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   61751.595 ±(99.9%) 38625.571 B/op [Average]
[info]   (min, avg, max) = (43838.453, 61751.595, 66861.706), stdev = 10030.938
[info]   CI (99.9%): [23126.024, 100377.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 9.44% complete, ETA 02:01:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 322309.408 ops/s
[info] # Warmup Iteration   2: 371755.810 ops/s
[info] # Warmup Iteration   3: 368943.833 ops/s
[info] # Warmup Iteration   4: 382158.194 ops/s
[info] # Warmup Iteration   5: 381751.078 ops/s
[info] Iteration   1: 380074.361 ops/s
[info]                  ·gc.alloc.rate:                   1921.555 MB/sec
[info]                  ·gc.alloc.rate.norm:              7960.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.431 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2014.853 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8346.484 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 383899.814 ops/s
[info]                  ·gc.alloc.rate:                   1941.282 MB/sec
[info]                  ·gc.alloc.rate.norm:              7960.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.341 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.044 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8278.857 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 381924.075 ops/s
[info]                  ·gc.alloc.rate:                   1931.649 MB/sec
[info]                  ·gc.alloc.rate.norm:              7960.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.257 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.160 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5555.544 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 381163.380 ops/s
[info]                  ·gc.alloc.rate:                   1927.258 MB/sec
[info]                  ·gc.alloc.rate.norm:              7960.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.344 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.997 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8359.554 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 381916.563 ops/s
[info]                  ·gc.alloc.rate:                   1931.070 MB/sec
[info]                  ·gc.alloc.rate.norm:              7960.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.172 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.406 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8357.107 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce":
[info]   381795.638 ±(99.9%) 5384.441 ops/s [Average]
[info]   (min, avg, max) = (380074.361, 381795.638, 383899.814), stdev = 1398.322
[info]   CI (99.9%): [376411.198, 387180.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1930.563 ±(99.9%) 27.794 MB/sec [Average]
[info]   (min, avg, max) = (1921.555, 1930.563, 1941.282), stdev = 7.218
[info]   CI (99.9%): [1902.769, 1958.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   7960.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7960.001, 7960.001, 7960.001), stdev = 0.001
[info]   CI (99.9%): [7960.001, 7960.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.309 ±(99.9%) 0.379 B/op [Average]
[info]   (min, avg, max) = (0.172, 0.309, 0.431), stdev = 0.098
[info]   CI (99.9%): [≈ 0, 0.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1886.692 ±(99.9%) 1159.376 MB/sec [Average]
[info]   (min, avg, max) = (1348.160, 1886.692, 2027.406), stdev = 301.086
[info]   CI (99.9%): [727.316, 3046.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   7779.509 ±(99.9%) 4788.946 B/op [Average]
[info]   (min, avg, max) = (5555.544, 7779.509, 8359.554), stdev = 1243.674
[info]   CI (99.9%): [2990.563, 12568.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 9.64% complete, ETA 02:00:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 141123.732 ops/s
[info] # Warmup Iteration   2: 1527433.104 ops/s
[info] # Warmup Iteration   3: 1549825.807 ops/s
[info] # Warmup Iteration   4: 1541750.613 ops/s
[info] # Warmup Iteration   5: 1552529.032 ops/s
[info] Iteration   1: 1550837.714 ops/s
[info]                  ·gc.alloc.rate:                   488.608 MB/sec
[info]                  ·gc.alloc.rate.norm:              496.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.415 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 519.153 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1562218.907 ops/s
[info]                  ·gc.alloc.rate:      492.315 MB/sec
[info]                  ·gc.alloc.rate.norm: 496.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1544277.476 ops/s
[info]                  ·gc.alloc.rate:                   486.568 MB/sec
[info]                  ·gc.alloc.rate.norm:              496.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.540 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.590 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.255 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 686.307 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1548824.955 ops/s
[info]                  ·gc.alloc.rate:                   488.003 MB/sec
[info]                  ·gc.alloc.rate.norm:              496.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.272 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 684.305 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1553584.070 ops/s
[info]                  ·gc.alloc.rate:      489.636 MB/sec
[info]                  ·gc.alloc.rate.norm: 496.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava":
[info]   1551948.624 ±(99.9%) 25686.374 ops/s [Average]
[info]   (min, avg, max) = (1544277.476, 1551948.624, 1562218.907), stdev = 6670.670
[info]   CI (99.9%): [1526262.251, 1577634.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   489.026 ±(99.9%) 8.272 MB/sec [Average]
[info]   (min, avg, max) = (486.568, 489.026, 492.315), stdev = 2.148
[info]   CI (99.9%): [480.754, 497.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   496.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (496.000, 496.000, 496.000), stdev = 0.001
[info]   CI (99.9%): [496.000, 496.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.508 ±(99.9%) 4.375 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.508, 2.540), stdev = 1.136
[info]   CI (99.9%): [≈ 0, 4.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0.518 ±(99.9%) 4.460 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.518, 2.590), stdev = 1.158
[info]   CI (99.9%): [≈ 0, 4.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   371.588 ±(99.9%) 1330.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 371.588, 673.272), stdev = 345.588
[info]   CI (99.9%): [≈ 0, 1702.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   377.953 ±(99.9%) 1353.993 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 377.953, 686.307), stdev = 351.628
[info]   CI (99.9%): [≈ 0, 1731.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.84% complete, ETA 02:00:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 430862.203 ops/s
[info] # Warmup Iteration   2: 679139.895 ops/s
[info] # Warmup Iteration   3: 680420.170 ops/s
[info] # Warmup Iteration   4: 681007.266 ops/s
[info] # Warmup Iteration   5: 678466.606 ops/s
[info] Iteration   1: 677999.221 ops/s
[info]                  ·gc.alloc.rate:                   561.527 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.387 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.485 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1563.993 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 680646.264 ops/s
[info]                  ·gc.alloc.rate:      563.866 MB/sec
[info]                  ·gc.alloc.rate.norm: 1304.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 677994.603 ops/s
[info]                  ·gc.alloc.rate:                   561.647 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.625 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1563.986 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 675913.683 ops/s
[info]                  ·gc.alloc.rate:                   559.901 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.145 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.927 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1571.895 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 677943.058 ops/s
[info]                  ·gc.alloc.rate:                   561.527 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.836 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1567.130 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala":
[info]   678099.366 ±(99.9%) 6474.734 ops/s [Average]
[info]   (min, avg, max) = (675913.683, 678099.366, 680646.264), stdev = 1681.468
[info]   CI (99.9%): [671624.632, 684574.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   561.694 ±(99.9%) 5.442 MB/sec [Average]
[info]   (min, avg, max) = (559.901, 561.694, 563.866), stdev = 1.413
[info]   CI (99.9%): [556.251, 567.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1304.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1304.001, 1304.001, 1304.001), stdev = 0.001
[info]   CI (99.9%): [1304.001, 1304.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.280 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.166), stdev = 0.073
[info]   CI (99.9%): [≈ 0, 0.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.106 ±(99.9%) 0.650 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.106, 0.387), stdev = 0.169
[info]   CI (99.9%): [≈ 0, 0.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   539.375 ±(99.9%) 1161.047 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.375, 674.927), stdev = 301.520
[info]   CI (99.9%): [≈ 0, 1700.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1253.401 ±(99.9%) 2698.069 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1253.401, 1571.895), stdev = 700.680
[info]   CI (99.9%): [≈ 0, 3951.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   3.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 10.04% complete, ETA 02:00:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1711776.599 ops/s
[info] # Warmup Iteration   2: 1783884.829 ops/s
[info] # Warmup Iteration   3: 1785058.166 ops/s
[info] # Warmup Iteration   4: 1802756.897 ops/s
[info] # Warmup Iteration   5: 1797306.135 ops/s
[info] Iteration   1: 1797901.877 ops/s
[info]                  ·gc.alloc.rate:                   347.157 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.386 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 447.814 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1805619.884 ops/s
[info]                  ·gc.alloc.rate:      348.687 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1798554.685 ops/s
[info]                  ·gc.alloc.rate:                   347.343 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.506 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 447.679 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1797348.013 ops/s
[info]                  ·gc.alloc.rate:                   347.075 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.022 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.448 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 447.974 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1746362.402 ops/s
[info]                  ·gc.alloc.rate:      337.249 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala":
[info]   1789157.372 ±(99.9%) 93020.875 ops/s [Average]
[info]   (min, avg, max) = (1746362.402, 1789157.372, 1805619.884), stdev = 24157.226
[info]   CI (99.9%): [1696136.497, 1882178.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   345.502 ±(99.9%) 17.943 MB/sec [Average]
[info]   (min, avg, max) = (337.249, 345.502, 348.687), stdev = 4.660
[info]   CI (99.9%): [327.559, 363.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   304.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (304.000, 304.000, 304.000), stdev = 0.001
[info]   CI (99.9%): [304.000, 304.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.004 ±(99.9%) 0.037 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.022), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.004 ±(99.9%) 0.033 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.019), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   306.868 ±(99.9%) 1078.685 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.868, 511.506), stdev = 280.131
[info]   CI (99.9%): [≈ 0, 1385.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   268.693 ±(99.9%) 944.495 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 268.693, 447.974), stdev = 245.282
[info]   CI (99.9%): [≈ 0, 1213.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 10.24% complete, ETA 02:00:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 60101.777 ops/s
[info] # Warmup Iteration   2: 103772.495 ops/s
[info] # Warmup Iteration   3: 103945.872 ops/s
[info] # Warmup Iteration   4: 104440.721 ops/s
[info] # Warmup Iteration   5: 104628.605 ops/s
[info] Iteration   1: 104273.970 ops/s
[info]                  ·gc.alloc.rate:                   3787.052 MB/sec
[info]                  ·gc.alloc.rate.norm:              57176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.943 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3394.046 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51242.492 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 104458.699 ops/s
[info]                  ·gc.alloc.rate:                   3793.709 MB/sec
[info]                  ·gc.alloc.rate.norm:              57176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.255 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4078.242 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61464.268 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 103288.842 ops/s
[info]                  ·gc.alloc.rate:                   3752.867 MB/sec
[info]                  ·gc.alloc.rate.norm:              57176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.269 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3403.700 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51856.340 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 104365.527 ops/s
[info]                  ·gc.alloc.rate:                   3790.635 MB/sec
[info]                  ·gc.alloc.rate.norm:              57176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.256 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4083.582 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61594.674 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 102858.338 ops/s
[info]                  ·gc.alloc.rate:                   3735.982 MB/sec
[info]                  ·gc.alloc.rate.norm:              57176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.592 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3406.345 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52131.199 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson":
[info]   103849.075 ±(99.9%) 2799.554 ops/s [Average]
[info]   (min, avg, max) = (102858.338, 103849.075, 104458.699), stdev = 727.035
[info]   CI (99.9%): [101049.522, 106648.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3772.049 ±(99.9%) 100.199 MB/sec [Average]
[info]   (min, avg, max) = (3735.982, 3772.049, 3793.709), stdev = 26.021
[info]   CI (99.9%): [3671.850, 3872.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   57176.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (57176.004, 57176.004, 57176.004), stdev = 0.001
[info]   CI (99.9%): [57176.003, 57176.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.104), stdev = 0.015
[info]   CI (99.9%): [0.027, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.263 ±(99.9%) 0.885 B/op [Average]
[info]   (min, avg, max) = (0.943, 1.263, 1.592), stdev = 0.230
[info]   CI (99.9%): [0.378, 2.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3673.183 ±(99.9%) 1433.352 MB/sec [Average]
[info]   (min, avg, max) = (3394.046, 3673.183, 4083.582), stdev = 372.237
[info]   CI (99.9%): [2239.831, 5106.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   55657.795 ±(99.9%) 20677.681 B/op [Average]
[info]   (min, avg, max) = (51242.492, 55657.795, 61594.674), stdev = 5369.928
[info]   CI (99.9%): [34980.114, 76335.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 1.000
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 10.44% complete, ETA 01:59:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 535155.963 ops/s
[info] # Warmup Iteration   2: 615436.308 ops/s
[info] # Warmup Iteration   3: 614257.738 ops/s
[info] # Warmup Iteration   4: 616532.452 ops/s
[info] # Warmup Iteration   5: 625681.725 ops/s
[info] Iteration   1: 634315.887 ops/s
[info]                  ·gc.alloc.rate:                   1656.665 MB/sec
[info]                  ·gc.alloc.rate.norm:              4112.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.155 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.689 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3332.682 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 618937.091 ops/s
[info]                  ·gc.alloc.rate:                   1616.809 MB/sec
[info]                  ·gc.alloc.rate.norm:              4112.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.212 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2015.759 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5126.643 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 617655.252 ops/s
[info]                  ·gc.alloc.rate:                   1613.340 MB/sec
[info]                  ·gc.alloc.rate.norm:              4112.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.159 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.152 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3428.455 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 634301.565 ops/s
[info]                  ·gc.alloc.rate:                   1657.066 MB/sec
[info]                  ·gc.alloc.rate.norm:              4112.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.103 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020.617 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5014.150 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 634408.788 ops/s
[info]                  ·gc.alloc.rate:                   1657.061 MB/sec
[info]                  ·gc.alloc.rate.norm:              4112.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.207 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3347.908 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle":
[info]   627923.717 ±(99.9%) 33887.513 ops/s [Average]
[info]   (min, avg, max) = (617655.252, 627923.717, 634408.788), stdev = 8800.479
[info]   CI (99.9%): [594036.204, 661811.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.alloc.rate":
[info]   1640.188 ±(99.9%) 88.407 MB/sec [Average]
[info]   (min, avg, max) = (1613.340, 1640.188, 1657.066), stdev = 22.959
[info]   CI (99.9%): [1551.782, 1728.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   4112.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4112.001, 4112.001, 4112.001), stdev = 0.001
[info]   CI (99.9%): [4112.001, 4112.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.083), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0.167 ±(99.9%) 0.170 B/op [Average]
[info]   (min, avg, max) = (0.103, 0.167, 0.212), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   1614.673 ±(99.9%) 1418.458 MB/sec [Average]
[info]   (min, avg, max) = (1342.689, 1614.673, 2020.617), stdev = 368.369
[info]   CI (99.9%): [196.215, 3033.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   4049.968 ±(99.9%) 3592.953 B/op [Average]
[info]   (min, avg, max) = (3332.682, 4049.968, 5126.643), stdev = 933.079
[info]   CI (99.9%): [457.014, 7642.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 10.64% complete, ETA 01:59:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 299865.024 ops/s
[info] # Warmup Iteration   2: 383128.048 ops/s
[info] # Warmup Iteration   3: 378254.791 ops/s
[info] # Warmup Iteration   4: 378064.709 ops/s
[info] # Warmup Iteration   5: 376973.511 ops/s
[info] Iteration   1: 386704.791 ops/s
[info]                  ·gc.alloc.rate:                   603.234 MB/sec
[info]                  ·gc.alloc.rate.norm:              2456.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.378 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2082.019 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 385491.534 ops/s
[info]                  ·gc.alloc.rate:                   601.436 MB/sec
[info]                  ·gc.alloc.rate.norm:              2456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.603 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14.713 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.996 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2752.304 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 384652.626 ops/s
[info]                  ·gc.alloc.rate:                   600.104 MB/sec
[info]                  ·gc.alloc.rate.norm:              2456.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.912 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2758.069 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 383930.902 ops/s
[info]                  ·gc.alloc.rate:                   598.961 MB/sec
[info]                  ·gc.alloc.rate.norm:              2456.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.233 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2752.347 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 384700.891 ops/s
[info]                  ·gc.alloc.rate:                   600.191 MB/sec
[info]                  ·gc.alloc.rate.norm:              2456.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.266 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2746.839 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce":
[info]   385096.149 ±(99.9%) 4063.661 ops/s [Average]
[info]   (min, avg, max) = (383930.902, 385096.149, 386704.791), stdev = 1055.320
[info]   CI (99.9%): [381032.488, 389159.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   600.785 ±(99.9%) 6.258 MB/sec [Average]
[info]   (min, avg, max) = (598.961, 600.785, 603.234), stdev = 1.625
[info]   CI (99.9%): [594.528, 607.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2456.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2456.001, 2456.001, 2456.001), stdev = 0.001
[info]   CI (99.9%): [2456.001, 2456.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.721 ±(99.9%) 6.204 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.721, 3.603), stdev = 1.611
[info]   CI (99.9%): [≈ 0, 6.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2.943 ±(99.9%) 25.336 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.943, 14.713), stdev = 6.580
[info]   CI (99.9%): [≈ 0, 28.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   640.357 ±(99.9%) 277.685 MB/sec [Average]
[info]   (min, avg, max) = (511.378, 640.357, 673.996), stdev = 72.114
[info]   CI (99.9%): [362.672, 918.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2618.316 ±(99.9%) 1154.520 B/op [Average]
[info]   (min, avg, max) = (2082.019, 2618.316, 2758.069), stdev = 299.825
[info]   CI (99.9%): [1463.796, 3772.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.342
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 10.84% complete, ETA 01:59:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 91102.142 ops/s
[info] # Warmup Iteration   2: 1180743.026 ops/s
[info] # Warmup Iteration   3: 1165100.602 ops/s
[info] # Warmup Iteration   4: 1157156.832 ops/s
[info] # Warmup Iteration   5: 1168502.369 ops/s
[info] Iteration   1: 1157061.530 ops/s
[info]                  ·gc.alloc.rate:                   535.141 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.007 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.493 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 695.830 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1168973.475 ops/s
[info]                  ·gc.alloc.rate:                   540.609 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.530 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.407 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.281 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 906.660 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1166738.356 ops/s
[info]                  ·gc.alloc.rate:                   539.561 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.272 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 908.410 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1172293.491 ops/s
[info]                  ·gc.alloc.rate:      542.129 MB/sec
[info]                  ·gc.alloc.rate.norm: 728.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1167248.724 ops/s
[info]                  ·gc.alloc.rate:                   539.834 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.977 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 906.203 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava":
[info]   1166463.115 ±(99.9%) 21899.463 ops/s [Average]
[info]   (min, avg, max) = (1157061.530, 1166463.115, 1172293.491), stdev = 5687.221
[info]   CI (99.9%): [1144563.652, 1188362.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   539.455 ±(99.9%) 10.050 MB/sec [Average]
[info]   (min, avg, max) = (535.141, 539.455, 542.129), stdev = 2.610
[info]   CI (99.9%): [529.405, 549.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   728.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (728.000, 728.000, 728.000), stdev = 0.001
[info]   CI (99.9%): [728.000, 728.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.507 ±(99.9%) 4.354 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.507, 2.530), stdev = 1.131
[info]   CI (99.9%): [≈ 0, 4.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0.683 ±(99.9%) 5.863 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.683, 3.407), stdev = 1.523
[info]   CI (99.9%): [≈ 0, 6.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   506.005 ±(99.9%) 1121.948 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506.005, 673.281), stdev = 291.366
[info]   CI (99.9%): [≈ 0, 1627.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   683.420 ±(99.9%) 1512.702 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 683.420, 908.410), stdev = 392.844
[info]   CI (99.9%): [≈ 0, 2196.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 11.04% complete, ETA 01:59:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 712113.813 ops/s
[info] # Warmup Iteration   2: 1004971.539 ops/s
[info] # Warmup Iteration   3: 1004494.057 ops/s
[info] # Warmup Iteration   4: 1018948.281 ops/s
[info] # Warmup Iteration   5: 986226.596 ops/s
[info] Iteration   1: 992365.092 ops/s
[info]                  ·gc.alloc.rate:                   700.978 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.576 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1068.531 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 991801.875 ops/s
[info]                  ·gc.alloc.rate:                   700.629 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.099 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.956 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1071.254 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 988434.795 ops/s
[info]                  ·gc.alloc.rate:                   698.346 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1074.893 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1004868.762 ops/s
[info]                  ·gc.alloc.rate:                   709.824 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.597 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1058.380 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1025305.295 ops/s
[info]                  ·gc.alloc.rate:                   724.111 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.486 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1037.327 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala":
[info]   1000555.164 ±(99.9%) 58454.271 ops/s [Average]
[info]   (min, avg, max) = (988434.795, 1000555.164, 1025305.295), stdev = 15180.389
[info]   CI (99.9%): [942100.893, 1059009.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   706.778 ±(99.9%) 40.945 MB/sec [Average]
[info]   (min, avg, max) = (698.346, 706.778, 724.111), stdev = 10.633
[info]   CI (99.9%): [665.832, 747.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1112.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1112.000, 1112.000, 1112.000), stdev = 0.001
[info]   CI (99.9%): [1112.000, 1112.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.033 ±(99.9%) 0.179 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.099), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   674.931 ±(99.9%) 3.105 MB/sec [Average]
[info]   (min, avg, max) = (673.576, 674.931, 675.597), stdev = 0.806
[info]   CI (99.9%): [671.826, 678.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1062.077 ±(99.9%) 58.281 B/op [Average]
[info]   (min, avg, max) = (1037.327, 1062.077, 1074.893), stdev = 15.135
[info]   CI (99.9%): [1003.796, 1120.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 11.24% complete, ETA 01:58:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1527823.629 ops/s
[info] # Warmup Iteration   2: 1617961.699 ops/s
[info] # Warmup Iteration   3: 1613711.668 ops/s
[info] # Warmup Iteration   4: 1583406.286 ops/s
[info] # Warmup Iteration   5: 1622538.180 ops/s
[info] Iteration   1: 1630380.001 ops/s
[info]                  ·gc.alloc.rate:                   753.831 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.462 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 651.352 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 1635438.428 ops/s
[info]                  ·gc.alloc.rate:                   756.341 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.011 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 646.830 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 1629608.878 ops/s
[info]                  ·gc.alloc.rate:                   753.740 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 649.085 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1624848.624 ops/s
[info]                  ·gc.alloc.rate:                   751.658 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.467 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 650.334 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1671630.550 ops/s
[info]                  ·gc.alloc.rate:                   773.031 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.279 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 632.176 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala":
[info]   1638381.296 ±(99.9%) 73017.251 ops/s [Average]
[info]   (min, avg, max) = (1624848.624, 1638381.296, 1671630.550), stdev = 18962.348
[info]   CI (99.9%): [1565364.045, 1711398.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   757.720 ±(99.9%) 33.571 MB/sec [Average]
[info]   (min, avg, max) = (751.658, 757.720, 773.031), stdev = 8.718
[info]   CI (99.9%): [724.149, 791.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (728.000, 728.000, 728.000), stdev = 0.001
[info]   CI (99.9%): [728.000, 728.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.062), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.028 ±(99.9%) 0.086 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.059), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   672.251 ±(99.9%) 4.929 MB/sec [Average]
[info]   (min, avg, max) = (671.279, 672.251, 674.462), stdev = 1.280
[info]   CI (99.9%): [667.322, 677.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   645.955 ±(99.9%) 30.364 B/op [Average]
[info]   (min, avg, max) = (632.176, 645.955, 651.352), stdev = 7.885
[info]   CI (99.9%): [615.592, 676.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 11.45% complete, ETA 01:58:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1773878.306 ops/s
[info] # Warmup Iteration   2: 1869329.125 ops/s
[info] # Warmup Iteration   3: 1869944.207 ops/s
[info] # Warmup Iteration   4: 1876705.844 ops/s
[info] # Warmup Iteration   5: 1871227.659 ops/s
[info] Iteration   1: 1876824.324 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1871196.293 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1878219.838 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1873814.729 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1875756.229 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   1875162.283 ±(99.9%) 10546.965 ops/s [Average]
[info]   (min, avg, max) = (1871196.293, 1875162.283, 1878219.838), stdev = 2739.013
[info]   CI (99.9%): [1864615.318, 1885709.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 11.65% complete, ETA 01:58:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 394834.026 ops/s
[info] # Warmup Iteration   2: 506560.000 ops/s
[info] # Warmup Iteration   3: 507888.446 ops/s
[info] # Warmup Iteration   4: 515088.279 ops/s
[info] # Warmup Iteration   5: 505715.260 ops/s
[info] Iteration   1: 515852.474 ops/s
[info]                  ·gc.alloc.rate:                   608.206 MB/sec
[info]                  ·gc.alloc.rate.norm:              1856.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.489 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1560.859 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 516764.325 ops/s
[info]                  ·gc.alloc.rate:                   609.263 MB/sec
[info]                  ·gc.alloc.rate.norm:              1856.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4.044 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.318 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.307 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2051.099 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 512205.592 ops/s
[info]                  ·gc.alloc.rate:                   604.086 MB/sec
[info]                  ·gc.alloc.rate.norm:              1856.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.128 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.525 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2069.348 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 517871.224 ops/s
[info]                  ·gc.alloc.rate:                   610.612 MB/sec
[info]                  ·gc.alloc.rate.norm:              1856.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.026 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2036.593 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 518254.311 ops/s
[info]                  ·gc.alloc.rate:                   611.201 MB/sec
[info]                  ·gc.alloc.rate.norm:              1856.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.157 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2035.029 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson":
[info]   516189.585 ±(99.9%) 9314.892 ops/s [Average]
[info]   (min, avg, max) = (512205.592, 516189.585, 518254.311), stdev = 2419.048
[info]   CI (99.9%): [506874.693, 525504.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   608.674 ±(99.9%) 10.851 MB/sec [Average]
[info]   (min, avg, max) = (604.086, 608.674, 611.201), stdev = 2.818
[info]   CI (99.9%): [597.823, 619.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1856.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1856.001, 1856.001, 1856.001), stdev = 0.001
[info]   CI (99.9%): [1856.001, 1856.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.821 ±(99.9%) 6.937 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.821, 4.044), stdev = 1.801
[info]   CI (99.9%): [≈ 0, 7.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.502 ±(99.9%) 21.131 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.502, 12.318), stdev = 5.488
[info]   CI (99.9%): [≈ 0, 23.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   639.701 ±(99.9%) 276.061 MB/sec [Average]
[info]   (min, avg, max) = (511.489, 639.701, 673.525), stdev = 71.692
[info]   CI (99.9%): [363.640, 915.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1950.585 ±(99.9%) 840.601 B/op [Average]
[info]   (min, avg, max) = (1560.859, 1950.585, 2069.348), stdev = 218.302
[info]   CI (99.9%): [1109.984, 2791.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.342
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 11.85% complete, ETA 01:58:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 178490.420 ops/s
[info] # Warmup Iteration   2: 186394.581 ops/s
[info] # Warmup Iteration   3: 183346.729 ops/s
[info] # Warmup Iteration   4: 187080.158 ops/s
[info] # Warmup Iteration   5: 187732.470 ops/s
[info] Iteration   1: 188307.700 ops/s
[info]                  ·gc.alloc.rate:                   480.381 MB/sec
[info]                  ·gc.alloc.rate.norm:              4016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.003 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.475 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4275.948 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 188214.613 ops/s
[info]                  ·gc.alloc.rate:                   480.184 MB/sec
[info]                  ·gc.alloc.rate.norm:              4016.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.521 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4278.083 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 188079.850 ops/s
[info]                  ·gc.alloc.rate:                   479.753 MB/sec
[info]                  ·gc.alloc.rate.norm:              4016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.314 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27.739 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.536 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5646.526 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 186498.745 ops/s
[info]                  ·gc.alloc.rate:      475.770 MB/sec
[info]                  ·gc.alloc.rate.norm: 4016.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 188440.046 ops/s
[info]                  ·gc.alloc.rate:                   480.835 MB/sec
[info]                  ·gc.alloc.rate.norm:              4016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.348 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.749 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5635.591 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle":
[info]   187908.191 ±(99.9%) 3075.925 ops/s [Average]
[info]   (min, avg, max) = (186498.745, 187908.191, 188440.046), stdev = 798.808
[info]   CI (99.9%): [184832.265, 190984.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.alloc.rate":
[info]   479.385 ±(99.9%) 7.923 MB/sec [Average]
[info]   (min, avg, max) = (475.770, 479.385, 480.835), stdev = 2.058
[info]   CI (99.9%): [471.461, 487.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   4016.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4016.002, 4016.002, 4016.002), stdev = 0.001
[info]   CI (99.9%): [4016.002, 4016.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0.672 ±(99.9%) 5.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.672, 3.314), stdev = 1.477
[info]   CI (99.9%): [≈ 0, 6.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   5.622 ±(99.9%) 47.611 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.622, 27.739), stdev = 12.364
[info]   CI (99.9%): [≈ 0, 53.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   474.456 ±(99.9%) 1068.513 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474.456, 674.749), stdev = 277.489
[info]   CI (99.9%): [≈ 0, 1542.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   3967.230 ±(99.9%) 8934.472 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3967.230, 5646.526), stdev = 2320.254
[info]   CI (99.9%): [≈ 0, 12901.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.140
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 12.05% complete, ETA 01:57:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 121620.080 ops/s
[info] # Warmup Iteration   2: 141466.915 ops/s
[info] # Warmup Iteration   3: 143303.062 ops/s
[info] # Warmup Iteration   4: 142853.872 ops/s
[info] # Warmup Iteration   5: 142725.334 ops/s
[info] Iteration   1: 142014.356 ops/s
[info]                  ·gc.alloc.rate:                   1706.510 MB/sec
[info]                  ·gc.alloc.rate.norm:              18920.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.384 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2013.391 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22322.378 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 139847.216 ops/s
[info]                  ·gc.alloc.rate:                   1680.884 MB/sec
[info]                  ·gc.alloc.rate.norm:              18920.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.703 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2016.672 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22699.631 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 140323.754 ops/s
[info]                  ·gc.alloc.rate:                   1686.487 MB/sec
[info]                  ·gc.alloc.rate.norm:              18920.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.700 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.851 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15098.550 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 141996.494 ops/s
[info]                  ·gc.alloc.rate:                   1706.609 MB/sec
[info]                  ·gc.alloc.rate.norm:              18920.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.692 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021.769 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22413.957 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 142963.538 ops/s
[info]                  ·gc.alloc.rate:                   1718.131 MB/sec
[info]                  ·gc.alloc.rate.norm:              18920.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.757 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14863.485 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce":
[info]   141429.072 ±(99.9%) 4999.578 ops/s [Average]
[info]   (min, avg, max) = (139847.216, 141429.072, 142963.538), stdev = 1298.375
[info]   CI (99.9%): [136429.494, 146428.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate":
[info]   1699.724 ±(99.9%) 59.730 MB/sec [Average]
[info]   (min, avg, max) = (1680.884, 1699.724, 1718.131), stdev = 15.512
[info]   CI (99.9%): [1639.994, 1759.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   18920.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (18920.003, 18920.003, 18920.003), stdev = 0.001
[info]   CI (99.9%): [18920.002, 18920.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.170 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.125), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.696 ±(99.9%) 1.884 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.696, 1.384), stdev = 0.489
[info]   CI (99.9%): [≈ 0, 2.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1749.488 ±(99.9%) 1412.032 MB/sec [Average]
[info]   (min, avg, max) = (1345.851, 1749.488, 2021.769), stdev = 366.700
[info]   CI (99.9%): [337.456, 3161.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   19479.600 ±(99.9%) 15825.461 B/op [Average]
[info]   (min, avg, max) = (14863.485, 19479.600, 22699.631), stdev = 4109.822
[info]   CI (99.9%): [3654.139, 35305.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 12.25% complete, ETA 01:57:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 257464.038 ops/s
[info] # Warmup Iteration   2: 403678.799 ops/s
[info] # Warmup Iteration   3: 406254.785 ops/s
[info] # Warmup Iteration   4: 406122.004 ops/s
[info] # Warmup Iteration   5: 405884.236 ops/s
[info] Iteration   1: 406602.105 ops/s
[info]                  ·gc.alloc.rate:      336.771 MB/sec
[info]                  ·gc.alloc.rate.norm: 1304.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 406356.069 ops/s
[info]                  ·gc.alloc.rate:                   336.552 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.395 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1981.444 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 404764.732 ops/s
[info]                  ·gc.alloc.rate:                   335.258 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.392 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1989.079 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 406185.458 ops/s
[info]                  ·gc.alloc.rate:      336.452 MB/sec
[info]                  ·gc.alloc.rate.norm: 1304.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 405983.327 ops/s
[info]                  ·gc.alloc.rate:                   336.284 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.484 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.580 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2611.924 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala":
[info]   405978.338 ±(99.9%) 2754.980 ops/s [Average]
[info]   (min, avg, max) = (404764.732, 405978.338, 406602.105), stdev = 715.460
[info]   CI (99.9%): [403223.358, 408733.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   336.264 ±(99.9%) 2.268 MB/sec [Average]
[info]   (min, avg, max) = (335.258, 336.264, 336.771), stdev = 0.589
[info]   CI (99.9%): [333.996, 338.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1304.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1304.001, 1304.001, 1304.001), stdev = 0.001
[info]   CI (99.9%): [1304.001, 1304.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.215 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.125), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.097 ±(99.9%) 0.834 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.097, 0.484), stdev = 0.217
[info]   CI (99.9%): [≈ 0, 0.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   339.273 ±(99.9%) 1219.542 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339.273, 673.580), stdev = 316.711
[info]   CI (99.9%): [≈ 0, 1558.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1316.489 ±(99.9%) 4731.352 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1316.489, 2611.924), stdev = 1228.717
[info]   CI (99.9%): [≈ 0, 6047.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 0.837
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 12.45% complete, ETA 01:57:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 998201.683 ops/s
[info] # Warmup Iteration   2: 1090927.241 ops/s
[info] # Warmup Iteration   3: 1074132.661 ops/s
[info] # Warmup Iteration   4: 1096551.082 ops/s
[info] # Warmup Iteration   5: 1088840.007 ops/s
[info] Iteration   1: 1094976.033 ops/s
[info]                  ·gc.alloc.rate:      211.433 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1092271.612 ops/s
[info]                  ·gc.alloc.rate:      210.926 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1068120.155 ops/s
[info]                  ·gc.alloc.rate:                   206.249 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.033 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.391 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 753.763 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1094666.096 ops/s
[info]                  ·gc.alloc.rate:      211.383 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1089231.393 ops/s
[info]                  ·gc.alloc.rate:                   210.370 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.494 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 739.146 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala":
[info]   1087853.058 ±(99.9%) 43393.064 ops/s [Average]
[info]   (min, avg, max) = (1068120.155, 1087853.058, 1094976.033), stdev = 11269.041
[info]   CI (99.9%): [1044459.994, 1131246.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   210.072 ±(99.9%) 8.393 MB/sec [Average]
[info]   (min, avg, max) = (206.249, 210.072, 211.433), stdev = 2.180
[info]   CI (99.9%): [201.679, 218.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   304.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (304.000, 304.000, 304.000), stdev = 0.001
[info]   CI (99.9%): [304.000, 304.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.007 ±(99.9%) 0.056 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.033), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.010 ±(99.9%) 0.083 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.048), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   204.577 ±(99.9%) 1078.676 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.577, 511.494), stdev = 280.129
[info]   CI (99.9%): [≈ 0, 1283.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   298.582 ±(99.9%) 1574.462 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 298.582, 753.763), stdev = 408.883
[info]   CI (99.9%): [≈ 0, 1873.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 1.095
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 12.65% complete, ETA 01:56:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 52887.380 ops/s
[info] # Warmup Iteration   2: 87163.911 ops/s
[info] # Warmup Iteration   3: 88173.091 ops/s
[info] # Warmup Iteration   4: 88561.639 ops/s
[info] # Warmup Iteration   5: 88933.224 ops/s
[info] Iteration   1: 87957.544 ops/s
[info]                  ·gc.alloc.rate:                   3744.239 MB/sec
[info]                  ·gc.alloc.rate.norm:              67016.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.745 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4078.608 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73000.693 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 88867.668 ops/s
[info]                  ·gc.alloc.rate:                   3783.078 MB/sec
[info]                  ·gc.alloc.rate.norm:              67016.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.737 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3402.503 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60274.244 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 88097.201 ops/s
[info]                  ·gc.alloc.rate:                   3750.388 MB/sec
[info]                  ·gc.alloc.rate.norm:              67016.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.487 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4083.478 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72968.010 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 88765.299 ops/s
[info]                  ·gc.alloc.rate:                   3779.090 MB/sec
[info]                  ·gc.alloc.rate.norm:              67016.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.845 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3405.729 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60395.068 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 88309.253 ops/s
[info]                  ·gc.alloc.rate:                   3759.101 MB/sec
[info]                  ·gc.alloc.rate.norm:              67016.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.484 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4087.136 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72864.108 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson":
[info]   88399.393 ±(99.9%) 1549.668 ops/s [Average]
[info]   (min, avg, max) = (87957.544, 88399.393, 88867.668), stdev = 402.444
[info]   CI (99.9%): [86849.726, 89949.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3763.179 ±(99.9%) 66.364 MB/sec [Average]
[info]   (min, avg, max) = (3744.239, 3763.179, 3783.078), stdev = 17.234
[info]   CI (99.9%): [3696.816, 3829.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   67016.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (67016.005, 67016.005, 67016.005), stdev = 0.001
[info]   CI (99.9%): [67016.004, 67016.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.260 ±(99.9%) 1.909 B/op [Average]
[info]   (min, avg, max) = (0.737, 1.260, 1.845), stdev = 0.496
[info]   CI (99.9%): [≈ 0, 3.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3811.491 ±(99.9%) 1432.033 MB/sec [Average]
[info]   (min, avg, max) = (3402.503, 3811.491, 4087.136), stdev = 371.894
[info]   CI (99.9%): [2379.458, 5243.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   67900.424 ±(99.9%) 26595.961 B/op [Average]
[info]   (min, avg, max) = (60274.244, 67900.424, 73000.693), stdev = 6906.886
[info]   CI (99.9%): [41304.464, 94496.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 12.85% complete, ETA 01:56:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 217821.121 ops/s
[info] # Warmup Iteration   2: 243228.192 ops/s
[info] # Warmup Iteration   3: 246026.976 ops/s
[info] # Warmup Iteration   4: 247496.356 ops/s
[info] # Warmup Iteration   5: 248373.172 ops/s
[info] Iteration   1: 247451.914 ops/s
[info]                  ·gc.alloc.rate:                   1129.076 MB/sec
[info]                  ·gc.alloc.rate.norm:              7184.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.530 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.970 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8544.951 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 243946.172 ops/s
[info]                  ·gc.alloc.rate:                   1113.336 MB/sec
[info]                  ·gc.alloc.rate.norm:              7184.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.537 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.726 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8664.177 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 240246.446 ops/s
[info]                  ·gc.alloc.rate:                   1096.311 MB/sec
[info]                  ·gc.alloc.rate.norm:              7184.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.217 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4398.411 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 247656.251 ops/s
[info]                  ·gc.alloc.rate:                   1130.143 MB/sec
[info]                  ·gc.alloc.rate.norm:              7184.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.529 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.186 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8538.258 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 247739.467 ops/s
[info]                  ·gc.alloc.rate:                   1130.644 MB/sec
[info]                  ·gc.alloc.rate.norm:              7184.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.529 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.014 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8539.733 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle":
[info]   245408.050 ±(99.9%) 12690.564 ops/s [Average]
[info]   (min, avg, max) = (240246.446, 245408.050, 247739.467), stdev = 3295.699
[info]   CI (99.9%): [232717.486, 258098.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1119.902 ±(99.9%) 57.891 MB/sec [Average]
[info]   (min, avg, max) = (1096.311, 1119.902, 1130.644), stdev = 15.034
[info]   CI (99.9%): [1062.011, 1177.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   7184.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7184.002, 7184.002, 7184.002), stdev = 0.001
[info]   CI (99.9%): [7184.001, 7184.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0.425 ±(99.9%) 0.915 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.425, 0.537), stdev = 0.238
[info]   CI (99.9%): [≈ 0, 1.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   1208.823 ±(99.9%) 1157.238 MB/sec [Average]
[info]   (min, avg, max) = (671.217, 1208.823, 1344.014), stdev = 300.531
[info]   CI (99.9%): [51.585, 2366.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   7737.106 ±(99.9%) 7189.734 B/op [Average]
[info]   (min, avg, max) = (4398.411, 7737.106, 8664.177), stdev = 1867.151
[info]   CI (99.9%): [547.372, 14926.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 13.05% complete, ETA 01:56:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 194343.777 ops/s
[info] # Warmup Iteration   2: 268115.741 ops/s
[info] # Warmup Iteration   3: 268848.696 ops/s
[info] # Warmup Iteration   4: 270279.765 ops/s
[info] # Warmup Iteration   5: 271053.159 ops/s
[info] Iteration   1: 267476.287 ops/s
[info]                  ·gc.alloc.rate:                   1183.692 MB/sec
[info]                  ·gc.alloc.rate.norm:              6968.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.612 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.326 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7901.830 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 265172.409 ops/s
[info]                  ·gc.alloc.rate:                   1173.861 MB/sec
[info]                  ·gc.alloc.rate.norm:              6968.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.370 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7962.327 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 269842.848 ops/s
[info]                  ·gc.alloc.rate:                   1194.409 MB/sec
[info]                  ·gc.alloc.rate.norm:              6968.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.243 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.517 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7826.209 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 270158.186 ops/s
[info]                  ·gc.alloc.rate:                   1195.738 MB/sec
[info]                  ·gc.alloc.rate.norm:              6968.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.438 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7822.877 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 270031.508 ops/s
[info]                  ·gc.alloc.rate:                   1195.248 MB/sec
[info]                  ·gc.alloc.rate.norm:              6968.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.121 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.592 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3915.219 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce":
[info]   268536.248 ±(99.9%) 8395.071 ops/s [Average]
[info]   (min, avg, max) = (265172.409, 268536.248, 270158.186), stdev = 2180.173
[info]   CI (99.9%): [260141.177, 276931.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1188.589 ±(99.9%) 37.045 MB/sec [Average]
[info]   (min, avg, max) = (1173.861, 1188.589, 1195.738), stdev = 9.620
[info]   CI (99.9%): [1151.544, 1225.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   6968.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6968.002, 6968.002, 6968.002), stdev = 0.001
[info]   CI (99.9%): [6968.001, 6968.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.195 ±(99.9%) 0.978 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.195, 0.612), stdev = 0.254
[info]   CI (99.9%): [≈ 0, 1.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1207.849 ±(99.9%) 1154.333 MB/sec [Average]
[info]   (min, avg, max) = (671.592, 1207.849, 1342.438), stdev = 299.777
[info]   CI (99.9%): [53.515, 2362.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   7085.692 ±(99.9%) 6828.321 B/op [Average]
[info]   (min, avg, max) = (3915.219, 7085.692, 7962.327), stdev = 1773.293
[info]   CI (99.9%): [257.371, 13914.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 13.25% complete, ETA 01:56:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 906409.008 ops/s
[info] # Warmup Iteration   2: 1411574.223 ops/s
[info] # Warmup Iteration   3: 1468153.205 ops/s
[info] # Warmup Iteration   4: 1466625.741 ops/s
[info] # Warmup Iteration   5: 1469937.697 ops/s
[info] Iteration   1: 1463666.198 ops/s
[info]                  ·gc.alloc.rate:                   751.197 MB/sec
[info]                  ·gc.alloc.rate.norm:              808.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.528 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 724.458 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 1451775.490 ops/s
[info]                  ·gc.alloc.rate:                   745.118 MB/sec
[info]                  ·gc.alloc.rate.norm:              808.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.886 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 731.841 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 1399683.779 ops/s
[info]                  ·gc.alloc.rate:                   718.305 MB/sec
[info]                  ·gc.alloc.rate.norm:              808.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.811 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 759.075 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1453397.436 ops/s
[info]                  ·gc.alloc.rate:                   745.963 MB/sec
[info]                  ·gc.alloc.rate.norm:              808.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.558 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 731.741 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1444000.512 ops/s
[info]                  ·gc.alloc.rate:                   740.610 MB/sec
[info]                  ·gc.alloc.rate.norm:              808.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.067 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 736.494 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala":
[info]   1442504.683 ±(99.9%) 96040.127 ops/s [Average]
[info]   (min, avg, max) = (1399683.779, 1442504.683, 1463666.198), stdev = 24941.316
[info]   CI (99.9%): [1346464.556, 1538544.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   740.238 ±(99.9%) 49.383 MB/sec [Average]
[info]   (min, avg, max) = (718.305, 740.238, 751.197), stdev = 12.825
[info]   CI (99.9%): [690.855, 789.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   808.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (808.000, 808.000, 808.000), stdev = 0.001
[info]   CI (99.9%): [808.000, 808.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.018 ±(99.9%) 0.073 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.045), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   674.770 ±(99.9%) 2.899 MB/sec [Average]
[info]   (min, avg, max) = (673.528, 674.770, 675.558), stdev = 0.753
[info]   CI (99.9%): [671.871, 677.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   736.722 ±(99.9%) 50.894 B/op [Average]
[info]   (min, avg, max) = (724.458, 736.722, 759.075), stdev = 13.217
[info]   CI (99.9%): [685.828, 787.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 13.45% complete, ETA 01:55:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1861347.977 ops/s
[info] # Warmup Iteration   2: 2034582.673 ops/s
[info] # Warmup Iteration   3: 2031931.971 ops/s
[info] # Warmup Iteration   4: 2041938.281 ops/s
[info] # Warmup Iteration   5: 1998913.018 ops/s
[info] Iteration   1: 2010963.027 ops/s
[info]                  ·gc.alloc.rate:                   541.630 MB/sec
[info]                  ·gc.alloc.rate.norm:              424.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.448 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 400.374 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2033303.414 ops/s
[info]                  ·gc.alloc.rate:                   547.643 MB/sec
[info]                  ·gc.alloc.rate.norm:              424.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.295 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.551 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.622 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 522.311 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1978615.830 ops/s
[info]                  ·gc.alloc.rate:      532.971 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1977106.646 ops/s
[info]                  ·gc.alloc.rate:                   532.444 MB/sec
[info]                  ·gc.alloc.rate.norm:              424.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.496 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 537.120 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1982820.649 ops/s
[info]                  ·gc.alloc.rate:                   534.040 MB/sec
[info]                  ·gc.alloc.rate.norm:              424.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.576 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 533.991 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala":
[info]   1996561.913 ±(99.9%) 95234.795 ops/s [Average]
[info]   (min, avg, max) = (1977106.646, 1996561.913, 2033303.414), stdev = 24732.174
[info]   CI (99.9%): [1901327.119, 2091796.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   537.746 ±(99.9%) 25.663 MB/sec [Average]
[info]   (min, avg, max) = (532.444, 537.746, 547.643), stdev = 6.665
[info]   CI (99.9%): [512.082, 563.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   424.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (424.000, 424.000, 424.000), stdev = 0.001
[info]   CI (99.9%): [424.000, 424.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.663 ±(99.9%) 5.666 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.663, 3.295), stdev = 1.471
[info]   CI (99.9%): [≈ 0, 6.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.514 ±(99.9%) 4.386 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.514, 2.551), stdev = 1.139
[info]   CI (99.9%): [≈ 0, 4.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   506.629 ±(99.9%) 1123.695 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506.629, 674.622), stdev = 291.820
[info]   CI (99.9%): [≈ 0, 1630.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   398.759 ±(99.9%) 885.874 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 398.759, 537.120), stdev = 230.059
[info]   CI (99.9%): [≈ 0, 1284.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.342
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 13.65% complete, ETA 01:55:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1878048.936 ops/s
[info] # Warmup Iteration   2: 2010167.145 ops/s
[info] # Warmup Iteration   3: 2005407.058 ops/s
[info] # Warmup Iteration   4: 2005317.778 ops/s
[info] # Warmup Iteration   5: 2010237.728 ops/s
[info] Iteration   1: 2013896.363 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2007166.415 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2010025.917 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2005395.565 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2004858.440 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc":
[info]   2008268.540 ±(99.9%) 14389.539 ops/s [Average]
[info]   (min, avg, max) = (2004858.440, 2008268.540, 2013896.363), stdev = 3736.918
[info]   CI (99.9%): [1993879.001, 2022658.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 13.86% complete, ETA 01:55:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30175.385 ops/s
[info] # Warmup Iteration   2: 45286.020 ops/s
[info] # Warmup Iteration   3: 45944.700 ops/s
[info] # Warmup Iteration   4: 46132.361 ops/s
[info] # Warmup Iteration   5: 45560.534 ops/s
[info] Iteration   1: 44817.198 ops/s
[info]                  ·gc.alloc.rate:                   1976.118 MB/sec
[info]                  ·gc.alloc.rate.norm:              69408.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.193 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2010.137 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70602.870 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 45690.639 ops/s
[info]                  ·gc.alloc.rate:                   2014.823 MB/sec
[info]                  ·gc.alloc.rate.norm:              69408.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.151 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2013.733 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69370.477 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 45487.459 ops/s
[info]                  ·gc.alloc.rate:                   2005.515 MB/sec
[info]                  ·gc.alloc.rate.norm:              69408.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.440 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2017.369 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69818.260 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 46244.224 ops/s
[info]                  ·gc.alloc.rate:                   2038.987 MB/sec
[info]                  ·gc.alloc.rate.norm:              69408.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.125 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021.714 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68820.025 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 46067.983 ops/s
[info]                  ·gc.alloc.rate:                   2031.153 MB/sec
[info]                  ·gc.alloc.rate.norm:              69408.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.422 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025.012 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69198.143 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson":
[info]   45661.501 ±(99.9%) 2151.526 ops/s [Average]
[info]   (min, avg, max) = (44817.198, 45661.501, 46244.224), stdev = 558.745
[info]   CI (99.9%): [43509.975, 47813.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2013.319 ±(99.9%) 94.792 MB/sec [Average]
[info]   (min, avg, max) = (1976.118, 2013.319, 2038.987), stdev = 24.617
[info]   CI (99.9%): [1918.528, 2108.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   69408.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (69408.009, 69408.009, 69408.010), stdev = 0.001
[info]   CI (99.9%): [69408.008, 69408.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.054, 0.062), stdev = 0.011
[info]   CI (99.9%): [0.010, 0.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.866 ±(99.9%) 1.532 B/op [Average]
[info]   (min, avg, max) = (1.422, 1.866, 2.193), stdev = 0.398
[info]   CI (99.9%): [0.334, 3.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   2017.593 ±(99.9%) 22.989 MB/sec [Average]
[info]   (min, avg, max) = (2010.137, 2017.593, 2025.012), stdev = 5.970
[info]   CI (99.9%): [1994.605, 2040.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   69561.955 ±(99.9%) 2631.908 B/op [Average]
[info]   (min, avg, max) = (68820.025, 69561.955, 70602.870), stdev = 683.498
[info]   CI (99.9%): [66930.047, 72193.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 14.06% complete, ETA 01:55:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 138065.873 ops/s
[info] # Warmup Iteration   2: 147048.111 ops/s
[info] # Warmup Iteration   3: 147422.162 ops/s
[info] # Warmup Iteration   4: 146939.136 ops/s
[info] # Warmup Iteration   5: 148352.408 ops/s
[info] Iteration   1: 148469.119 ops/s
[info]                  ·gc.alloc.rate:                   790.632 MB/sec
[info]                  ·gc.alloc.rate.norm:              8384.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.441 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.587 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7153.442 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 147564.298 ops/s
[info]                  ·gc.alloc.rate:                   785.914 MB/sec
[info]                  ·gc.alloc.rate.norm:              8384.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7168.840 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 148927.814 ops/s
[info]                  ·gc.alloc.rate:                   793.225 MB/sec
[info]                  ·gc.alloc.rate.norm:              8384.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.000 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7102.714 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 148216.637 ops/s
[info]                  ·gc.alloc.rate:                   789.567 MB/sec
[info]                  ·gc.alloc.rate.norm:              8384.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.105 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.905 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14259.604 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 147470.246 ops/s
[info]                  ·gc.alloc.rate:                   785.428 MB/sec
[info]                  ·gc.alloc.rate.norm:              8384.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.269 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7165.425 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle":
[info]   148129.623 ±(99.9%) 2369.247 ops/s [Average]
[info]   (min, avg, max) = (147470.246, 148129.623, 148927.814), stdev = 615.286
[info]   CI (99.9%): [145760.375, 150498.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   788.953 ±(99.9%) 12.640 MB/sec [Average]
[info]   (min, avg, max) = (785.428, 788.953, 793.225), stdev = 3.283
[info]   CI (99.9%): [776.313, 801.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   8384.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8384.003, 8384.003, 8384.003), stdev = 0.001
[info]   CI (99.9%): [8384.002, 8384.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.104), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0.309 ±(99.9%) 1.865 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.309, 1.105), stdev = 0.484
[info]   CI (99.9%): [≈ 0, 2.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   806.553 ±(99.9%) 1154.548 MB/sec [Average]
[info]   (min, avg, max) = (671.269, 806.553, 1342.905), stdev = 299.832
[info]   CI (99.9%): [≈ 0, 1961.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   8570.005 ±(99.9%) 12247.717 B/op [Average]
[info]   (min, avg, max) = (7102.714, 8570.005, 14259.604), stdev = 3180.693
[info]   CI (99.9%): [≈ 0, 20817.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 0.837
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 14.26% complete, ETA 01:54:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 191121.818 ops/s
[info] # Warmup Iteration   2: 223047.316 ops/s
[info] # Warmup Iteration   3: 220043.621 ops/s
[info] # Warmup Iteration   4: 226400.967 ops/s
[info] # Warmup Iteration   5: 226852.170 ops/s
[info] Iteration   1: 228377.339 ops/s
[info]                  ·gc.alloc.rate:                   2349.856 MB/sec
[info]                  ·gc.alloc.rate.norm:              16200.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.430 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2018.273 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13914.052 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 224256.876 ops/s
[info]                  ·gc.alloc.rate:                   2307.838 MB/sec
[info]                  ·gc.alloc.rate.norm:              16200.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.438 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2696.596 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18928.909 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 221015.126 ops/s
[info]                  ·gc.alloc.rate:                   2274.389 MB/sec
[info]                  ·gc.alloc.rate.norm:              16200.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026.060 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14431.207 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 227686.974 ops/s
[info]                  ·gc.alloc.rate:                   2343.037 MB/sec
[info]                  ·gc.alloc.rate.norm:              16200.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.432 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.314 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14030.891 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 227352.957 ops/s
[info]                  ·gc.alloc.rate:                   2339.573 MB/sec
[info]                  ·gc.alloc.rate.norm:              16200.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.288 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2710.076 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18765.496 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce":
[info]   225737.854 ±(99.9%) 11848.471 ops/s [Average]
[info]   (min, avg, max) = (221015.126, 225737.854, 228377.339), stdev = 3077.010
[info]   CI (99.9%): [213889.384, 237586.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   2322.939 ±(99.9%) 121.620 MB/sec [Average]
[info]   (min, avg, max) = (2274.389, 2322.939, 2349.856), stdev = 31.584
[info]   CI (99.9%): [2201.319, 2444.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   16200.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16200.002, 16200.002, 16200.002), stdev = 0.001
[info]   CI (99.9%): [16200.002, 16200.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.318 ±(99.9%) 0.726 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.318, 0.438), stdev = 0.188
[info]   CI (99.9%): [≈ 0, 1.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2296.064 ±(99.9%) 1431.820 MB/sec [Average]
[info]   (min, avg, max) = (2018.273, 2296.064, 2710.076), stdev = 371.839
[info]   CI (99.9%): [864.244, 3727.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   16014.111 ±(99.9%) 9988.537 B/op [Average]
[info]   (min, avg, max) = (13914.052, 16014.111, 18928.909), stdev = 2593.991
[info]   CI (99.9%): [6025.574, 26002.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 14.46% complete, ETA 01:54:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 231040.736 ops/s
[info] # Warmup Iteration   2: 345917.705 ops/s
[info] # Warmup Iteration   3: 357716.132 ops/s
[info] # Warmup Iteration   4: 356493.665 ops/s
[info] # Warmup Iteration   5: 357213.317 ops/s
[info] Iteration   1: 357057.565 ops/s
[info]                  ·gc.alloc.rate:                   1719.969 MB/sec
[info]                  ·gc.alloc.rate.norm:              7584.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.151 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5966.560 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 356921.241 ops/s
[info]                  ·gc.alloc.rate:                   1719.553 MB/sec
[info]                  ·gc.alloc.rate.norm:              7584.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.367 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.650 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8964.899 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 356695.483 ops/s
[info]                  ·gc.alloc.rate:                   1718.394 MB/sec
[info]                  ·gc.alloc.rate.norm:              7584.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356.136 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5985.204 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 356205.971 ops/s
[info]                  ·gc.alloc.rate:                   1715.963 MB/sec
[info]                  ·gc.alloc.rate.norm:              7584.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.184 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.286 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8995.303 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 357099.073 ops/s
[info]                  ·gc.alloc.rate:                   1720.337 MB/sec
[info]                  ·gc.alloc.rate.norm:              7584.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1358.487 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5988.810 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala":
[info]   356795.867 ±(99.9%) 1407.188 ops/s [Average]
[info]   (min, avg, max) = (356205.971, 356795.867, 357099.073), stdev = 365.442
[info]   CI (99.9%): [355388.678, 358203.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1718.843 ±(99.9%) 6.807 MB/sec [Average]
[info]   (min, avg, max) = (1715.963, 1718.843, 1720.337), stdev = 1.768
[info]   CI (99.9%): [1712.036, 1725.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   7584.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7584.001, 7584.001, 7584.001), stdev = 0.001
[info]   CI (99.9%): [7584.001, 7584.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.083), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.147 ±(99.9%) 0.536 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.147, 0.367), stdev = 0.139
[info]   CI (99.9%): [≈ 0, 0.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1627.142 ±(99.9%) 1430.073 MB/sec [Average]
[info]   (min, avg, max) = (1353.151, 1627.142, 2035.286), stdev = 371.385
[info]   CI (99.9%): [197.069, 3057.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7180.155 ±(99.9%) 6327.283 B/op [Average]
[info]   (min, avg, max) = (5966.560, 7180.155, 8995.303), stdev = 1643.175
[info]   CI (99.9%): [852.873, 13507.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 14.66% complete, ETA 01:54:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1205391.345 ops/s
[info] # Warmup Iteration   2: 1258429.549 ops/s
[info] # Warmup Iteration   3: 1266307.078 ops/s
[info] # Warmup Iteration   4: 1267501.022 ops/s
[info] # Warmup Iteration   5: 1266603.232 ops/s
[info] Iteration   1: 1271240.673 ops/s
[info]                  ·gc.alloc.rate:                   439.271 MB/sec
[info]                  ·gc.alloc.rate.norm:              544.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.443 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 633.379 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1273908.032 ops/s
[info]                  ·gc.alloc.rate:                   440.262 MB/sec
[info]                  ·gc.alloc.rate.norm:              544.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.014 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.551 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 632.087 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1274935.519 ops/s
[info]                  ·gc.alloc.rate:      440.559 MB/sec
[info]                  ·gc.alloc.rate.norm: 544.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1270630.218 ops/s
[info]                  ·gc.alloc.rate:                   439.084 MB/sec
[info]                  ·gc.alloc.rate.norm:              544.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.284 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.637 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 835.838 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1272907.928 ops/s
[info]                  ·gc.alloc.rate:                   439.896 MB/sec
[info]                  ·gc.alloc.rate.norm:              544.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.677 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 834.345 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala":
[info]   1272724.474 ±(99.9%) 6917.980 ops/s [Average]
[info]   (min, avg, max) = (1270630.218, 1272724.474, 1274935.519), stdev = 1796.577
[info]   CI (99.9%): [1265806.494, 1279642.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   439.814 ±(99.9%) 2.427 MB/sec [Average]
[info]   (min, avg, max) = (439.084, 439.814, 440.559), stdev = 0.630
[info]   CI (99.9%): [437.387, 442.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   544.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (544.000, 544.000, 544.000), stdev = 0.001
[info]   CI (99.9%): [544.000, 544.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.659 ±(99.9%) 5.649 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.659, 3.284), stdev = 1.467
[info]   CI (99.9%): [≈ 0, 6.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.817 ±(99.9%) 6.999 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.817, 4.069), stdev = 1.818
[info]   CI (99.9%): [≈ 0, 7.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   474.462 ±(99.9%) 1068.534 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474.462, 674.677), stdev = 277.495
[info]   CI (99.9%): [≈ 0, 1542.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   587.130 ±(99.9%) 1322.533 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 587.130, 835.838), stdev = 343.458
[info]   CI (99.9%): [≈ 0, 1909.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.140
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 14.86% complete, ETA 01:54:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37879.823 ops/s
[info] # Warmup Iteration   2: 84107.588 ops/s
[info] # Warmup Iteration   3: 82856.892 ops/s
[info] # Warmup Iteration   4: 84415.223 ops/s
[info] # Warmup Iteration   5: 84825.723 ops/s
[info] Iteration   1: 84539.669 ops/s
[info]                  ·gc.alloc.rate:                   3551.773 MB/sec
[info]                  ·gc.alloc.rate.norm:              66144.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.163 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3395.272 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63229.530 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 85201.986 ops/s
[info]                  ·gc.alloc.rate:                   3580.449 MB/sec
[info]                  ·gc.alloc.rate.norm:              66144.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.154 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4080.400 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75379.935 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 84549.515 ops/s
[info]                  ·gc.alloc.rate:                   3552.568 MB/sec
[info]                  ·gc.alloc.rate.norm:              66144.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.550 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3402.916 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63357.692 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 83687.868 ops/s
[info]                  ·gc.alloc.rate:                   3516.635 MB/sec
[info]                  ·gc.alloc.rate.norm:              66144.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.566 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3403.225 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64010.887 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 82353.715 ops/s
[info]                  ·gc.alloc.rate:                   3460.363 MB/sec
[info]                  ·gc.alloc.rate.norm:              66144.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.989 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3405.121 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65088.066 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson":
[info]   84066.551 ±(99.9%) 4228.489 ops/s [Average]
[info]   (min, avg, max) = (82353.715, 84066.551, 85201.986), stdev = 1098.125
[info]   CI (99.9%): [79838.062, 88295.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3532.357 ±(99.9%) 177.805 MB/sec [Average]
[info]   (min, avg, max) = (3460.363, 3532.357, 3580.449), stdev = 46.175
[info]   CI (99.9%): [3354.553, 3710.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66144.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (66144.005, 66144.005, 66144.005), stdev = 0.001
[info]   CI (99.9%): [66144.004, 66144.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.104), stdev = 0.017
[info]   CI (99.9%): [0.012, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.484 ±(99.9%) 1.332 B/op [Average]
[info]   (min, avg, max) = (1.154, 1.484, 1.989), stdev = 0.346
[info]   CI (99.9%): [0.152, 2.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3537.387 ±(99.9%) 1168.967 MB/sec [Average]
[info]   (min, avg, max) = (3395.272, 3537.387, 4080.400), stdev = 303.577
[info]   CI (99.9%): [2368.419, 4706.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   66213.222 ±(99.9%) 19934.416 B/op [Average]
[info]   (min, avg, max) = (63229.530, 66213.222, 75379.935), stdev = 5176.905
[info]   CI (99.9%): [46278.806, 86147.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 15.06% complete, ETA 01:53:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 196714.424 ops/s
[info] # Warmup Iteration   2: 234725.339 ops/s
[info] # Warmup Iteration   3: 233827.888 ops/s
[info] # Warmup Iteration   4: 235279.192 ops/s
[info] # Warmup Iteration   5: 231766.573 ops/s
[info] Iteration   1: 228067.306 ops/s
[info]                  ·gc.alloc.rate:                   2415.083 MB/sec
[info]                  ·gc.alloc.rate.norm:              16672.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.575 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2693.700 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18595.375 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 235977.450 ops/s
[info]                  ·gc.alloc.rate:                   2499.732 MB/sec
[info]                  ·gc.alloc.rate.norm:              16672.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.555 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024.769 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13504.230 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 236484.397 ops/s
[info]                  ·gc.alloc.rate:                   2504.572 MB/sec
[info]                  ·gc.alloc.rate.norm:              16672.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.277 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2704.568 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18003.303 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 236337.482 ops/s
[info]                  ·gc.alloc.rate:                   2502.892 MB/sec
[info]                  ·gc.alloc.rate.norm:              16672.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.554 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2708.902 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18044.253 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 235164.072 ops/s
[info]                  ·gc.alloc.rate:                   2490.588 MB/sec
[info]                  ·gc.alloc.rate.norm:              16672.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.100 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13622.965 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle":
[info]   234406.141 ±(99.9%) 13786.370 ops/s [Average]
[info]   (min, avg, max) = (228067.306, 234406.141, 236484.397), stdev = 3580.277
[info]   CI (99.9%): [220619.771, 248192.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.alloc.rate":
[info]   2482.573 ±(99.9%) 146.760 MB/sec [Average]
[info]   (min, avg, max) = (2415.083, 2482.573, 2504.572), stdev = 38.113
[info]   CI (99.9%): [2335.813, 2629.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   16672.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16672.002, 16672.002, 16672.002), stdev = 0.001
[info]   CI (99.9%): [16672.002, 16672.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.083), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0.420 ±(99.9%) 0.769 B/op [Average]
[info]   (min, avg, max) = (0.139, 0.420, 0.575), stdev = 0.200
[info]   CI (99.9%): [≈ 0, 1.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   2433.408 ±(99.9%) 1418.495 MB/sec [Average]
[info]   (min, avg, max) = (2024.769, 2433.408, 2708.902), stdev = 368.379
[info]   CI (99.9%): [1014.913, 3851.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   16354.025 ±(99.9%) 9851.303 B/op [Average]
[info]   (min, avg, max) = (13504.230, 16354.025, 18595.375), stdev = 2558.352
[info]   CI (99.9%): [6502.722, 26205.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 15.26% complete, ETA 01:53:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 164602.182 ops/s
[info] # Warmup Iteration   2: 218679.210 ops/s
[info] # Warmup Iteration   3: 219398.874 ops/s
[info] # Warmup Iteration   4: 225912.589 ops/s
[info] # Warmup Iteration   5: 224950.812 ops/s
[info] Iteration   1: 224619.600 ops/s
[info]                  ·gc.alloc.rate:                   1906.093 MB/sec
[info]                  ·gc.alloc.rate.norm:              13360.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.292 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2013.245 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14111.039 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 226185.441 ops/s
[info]                  ·gc.alloc.rate:                   1919.703 MB/sec
[info]                  ·gc.alloc.rate.norm:              13360.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.290 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2016.150 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14031.221 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 225920.200 ops/s
[info]                  ·gc.alloc.rate:                   1917.391 MB/sec
[info]                  ·gc.alloc.rate.norm:              13360.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.290 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.970 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14074.752 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 225403.520 ops/s
[info]                  ·gc.alloc.rate:                   1912.894 MB/sec
[info]                  ·gc.alloc.rate.norm:              13360.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.145 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.058 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14129.408 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 225427.586 ops/s
[info]                  ·gc.alloc.rate:                   1913.309 MB/sec
[info]                  ·gc.alloc.rate.norm:              13360.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.436 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.710 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14158.822 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce":
[info]   225511.269 ±(99.9%) 2306.709 ops/s [Average]
[info]   (min, avg, max) = (224619.600, 225511.269, 226185.441), stdev = 599.045
[info]   CI (99.9%): [223204.560, 227817.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1913.878 ±(99.9%) 20.023 MB/sec [Average]
[info]   (min, avg, max) = (1906.093, 1913.878, 1919.703), stdev = 5.200
[info]   CI (99.9%): [1893.855, 1933.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   13360.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13360.002, 13360.002, 13360.002), stdev = 0.001
[info]   CI (99.9%): [13360.002, 13360.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.042, 0.062), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.291 ±(99.9%) 0.396 B/op [Average]
[info]   (min, avg, max) = (0.145, 0.291, 0.436), stdev = 0.103
[info]   CI (99.9%): [≈ 0, 0.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   2020.027 ±(99.9%) 21.888 MB/sec [Average]
[info]   (min, avg, max) = (2013.245, 2020.027, 2027.710), stdev = 5.684
[info]   CI (99.9%): [1998.139, 2041.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   14101.049 ±(99.9%) 190.686 B/op [Average]
[info]   (min, avg, max) = (14031.221, 14101.049, 14158.822), stdev = 49.521
[info]   CI (99.9%): [13910.362, 14291.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 15.46% complete, ETA 01:53:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 753493.454 ops/s
[info] # Warmup Iteration   2: 1138782.578 ops/s
[info] # Warmup Iteration   3: 1159231.174 ops/s
[info] # Warmup Iteration   4: 1157869.049 ops/s
[info] # Warmup Iteration   5: 1157126.279 ops/s
[info] Iteration   1: 1159086.510 ops/s
[info]                  ·gc.alloc.rate:                   677.365 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.113 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.605 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 914.893 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 1159728.968 ops/s
[info]                  ·gc.alloc.rate:                   677.836 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.085 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.707 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 914.395 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 1156659.962 ops/s
[info]                  ·gc.alloc.rate:                   675.896 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.832 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 918.552 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 1158353.919 ops/s
[info]                  ·gc.alloc.rate:                   676.964 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.924 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 917.228 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1154895.822 ops/s
[info]                  ·gc.alloc.rate:                   674.911 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.085 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.556 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 920.880 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala":
[info]   1157745.036 ±(99.9%) 7555.922 ops/s [Average]
[info]   (min, avg, max) = (1154895.822, 1157745.036, 1159728.968), stdev = 1962.249
[info]   CI (99.9%): [1150189.114, 1165300.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   676.595 ±(99.9%) 4.554 MB/sec [Average]
[info]   (min, avg, max) = (674.911, 676.595, 677.836), stdev = 1.183
[info]   CI (99.9%): [672.040, 681.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   920.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (920.000, 920.000, 920.000), stdev = 0.001
[info]   CI (99.9%): [920.000, 920.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.083), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.057 ±(99.9%) 0.204 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.057, 0.113), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   674.525 ±(99.9%) 3.241 MB/sec [Average]
[info]   (min, avg, max) = (673.605, 674.525, 675.556), stdev = 0.842
[info]   CI (99.9%): [671.284, 677.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   917.190 ±(99.9%) 10.289 B/op [Average]
[info]   (min, avg, max) = (914.395, 917.190, 920.880), stdev = 2.672
[info]   CI (99.9%): [906.901, 927.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 15.66% complete, ETA 01:52:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2274749.233 ops/s
[info] # Warmup Iteration   2: 2409581.883 ops/s
[info] # Warmup Iteration   3: 2438780.671 ops/s
[info] # Warmup Iteration   4: 2396972.518 ops/s
[info] # Warmup Iteration   5: 2444625.736 ops/s
[info] Iteration   1: 2449081.072 ops/s
[info]                  ·gc.alloc.rate:                   833.901 MB/sec
[info]                  ·gc.alloc.rate.norm:              536.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.603 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 433.610 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 2431617.263 ops/s
[info]                  ·gc.alloc.rate:                   828.047 MB/sec
[info]                  ·gc.alloc.rate.norm:              536.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.367 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 870.864 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 2426717.587 ops/s
[info]                  ·gc.alloc.rate:                   826.231 MB/sec
[info]                  ·gc.alloc.rate.norm:              536.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.231 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 435.447 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 2440148.759 ops/s
[info]                  ·gc.alloc.rate:                   830.833 MB/sec
[info]                  ·gc.alloc.rate.norm:              536.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.252 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 433.049 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 2440992.225 ops/s
[info]                  ·gc.alloc.rate:                   831.278 MB/sec
[info]                  ·gc.alloc.rate.norm:              536.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.366 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 432.890 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala":
[info]   2437711.381 ±(99.9%) 33567.833 ops/s [Average]
[info]   (min, avg, max) = (2426717.587, 2437711.381, 2449081.072), stdev = 8717.460
[info]   CI (99.9%): [2404143.548, 2471279.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   830.058 ±(99.9%) 11.479 MB/sec [Average]
[info]   (min, avg, max) = (826.231, 830.058, 833.901), stdev = 2.981
[info]   CI (99.9%): [818.579, 841.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   536.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (536.000, 536.000, 536.000), stdev = 0.001
[info]   CI (99.9%): [536.000, 536.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.016 ±(99.9%) 0.056 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.040), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   806.764 ±(99.9%) 1159.397 MB/sec [Average]
[info]   (min, avg, max) = (671.231, 806.764, 1345.367), stdev = 301.092
[info]   CI (99.9%): [≈ 0, 1966.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   521.172 ±(99.9%) 752.749 B/op [Average]
[info]   (min, avg, max) = (432.890, 521.172, 870.864), stdev = 195.487
[info]   CI (99.9%): [≈ 0, 1273.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 15.86% complete, ETA 01:52:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2662195.333 ops/s
[info] # Warmup Iteration   2: 2859755.397 ops/s
[info] # Warmup Iteration   3: 2755043.667 ops/s
[info] # Warmup Iteration   4: 2723202.623 ops/s
[info] # Warmup Iteration   5: 2762035.408 ops/s
[info] Iteration   1: 2770516.006 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2766246.630 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2770957.766 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2778081.910 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2766191.215 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   2770398.705 ±(99.9%) 18696.516 ops/s [Average]
[info]   (min, avg, max) = (2766191.215, 2770398.705, 2778081.910), stdev = 4855.426
[info]   CI (99.9%): [2751702.189, 2789095.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 16.06% complete, ETA 01:52:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 182565.952 ops/s
[info] # Warmup Iteration   2: 309330.956 ops/s
[info] # Warmup Iteration   3: 308632.911 ops/s
[info] # Warmup Iteration   4: 308826.387 ops/s
[info] # Warmup Iteration   5: 308626.286 ops/s
[info] Iteration   1: 304238.461 ops/s
[info]                  ·gc.alloc.rate:                   2489.340 MB/sec
[info]                  ·gc.alloc.rate.norm:              12880.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.215 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2711.849 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14031.276 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 311190.555 ops/s
[info]                  ·gc.alloc.rate:                   2546.116 MB/sec
[info]                  ·gc.alloc.rate.norm:              12880.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.632 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.914 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10299.050 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 306372.982 ops/s
[info]                  ·gc.alloc.rate:                   2506.655 MB/sec
[info]                  ·gc.alloc.rate.norm:              12880.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.535 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2717.112 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13961.394 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 309010.237 ops/s
[info]                  ·gc.alloc.rate:                   2528.300 MB/sec
[info]                  ·gc.alloc.rate.norm:              12880.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.318 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2719.679 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13854.948 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 310028.830 ops/s
[info]                  ·gc.alloc.rate:                   2536.405 MB/sec
[info]                  ·gc.alloc.rate.norm:              12880.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.211 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2720.956 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13817.164 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson":
[info]   308168.213 ±(99.9%) 10886.373 ops/s [Average]
[info]   (min, avg, max) = (304238.461, 308168.213, 311190.555), stdev = 2827.156
[info]   CI (99.9%): [297281.840, 319054.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2521.363 ±(99.9%) 88.834 MB/sec [Average]
[info]   (min, avg, max) = (2489.340, 2521.363, 2546.116), stdev = 23.070
[info]   CI (99.9%): [2432.529, 2610.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   12880.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (12880.001, 12880.001, 12880.001), stdev = 0.001
[info]   CI (99.9%): [12880.001, 12880.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.125), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.382 ±(99.9%) 0.737 B/op [Average]
[info]   (min, avg, max) = (0.211, 0.382, 0.632), stdev = 0.191
[info]   CI (99.9%): [≈ 0, 1.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   2581.102 ±(99.9%) 1173.636 MB/sec [Average]
[info]   (min, avg, max) = (2035.914, 2581.102, 2720.956), stdev = 304.789
[info]   CI (99.9%): [1407.466, 3754.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   13192.766 ±(99.9%) 6237.520 B/op [Average]
[info]   (min, avg, max) = (10299.050, 13192.766, 14031.276), stdev = 1619.864
[info]   CI (99.9%): [6955.246, 19430.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 16.27% complete, ETA 01:52:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 74771.468 ops/s
[info] # Warmup Iteration   2: 79453.185 ops/s
[info] # Warmup Iteration   3: 80707.738 ops/s
[info] # Warmup Iteration   4: 80646.953 ops/s
[info] # Warmup Iteration   5: 78725.154 ops/s
[info] Iteration   1: 80729.134 ops/s
[info]                  ·gc.alloc.rate:                   598.886 MB/sec
[info]                  ·gc.alloc.rate.norm:              11680.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.202 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.365 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9973.081 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 80982.114 ops/s
[info]                  ·gc.alloc.rate:                   600.892 MB/sec
[info]                  ·gc.alloc.rate.norm:              11680.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.316 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64.450 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.707 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13114.806 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 80671.743 ops/s
[info]                  ·gc.alloc.rate:                   598.537 MB/sec
[info]                  ·gc.alloc.rate.norm:              11680.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.406 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.537 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13163.075 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 80957.844 ops/s
[info]                  ·gc.alloc.rate:                   600.736 MB/sec
[info]                  ·gc.alloc.rate.norm:              11680.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.976 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13065.117 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 80924.328 ops/s
[info]                  ·gc.alloc.rate:                   600.427 MB/sec
[info]                  ·gc.alloc.rate.norm:              11680.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.214 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.905 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13070.443 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle":
[info]   80853.033 ±(99.9%) 547.778 ops/s [Average]
[info]   (min, avg, max) = (80671.743, 80853.033, 80982.114), stdev = 142.256
[info]   CI (99.9%): [80305.254, 81400.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   599.896 ±(99.9%) 4.238 MB/sec [Average]
[info]   (min, avg, max) = (598.537, 599.896, 600.892), stdev = 1.101
[info]   CI (99.9%): [595.658, 604.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   11680.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11680.005, 11680.005, 11680.005), stdev = 0.001
[info]   CI (99.9%): [11680.004, 11680.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0.682 ±(99.9%) 5.670 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.682, 3.316), stdev = 1.473
[info]   CI (99.9%): [≈ 0, 6.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   13.255 ±(99.9%) 110.216 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.255, 64.450), stdev = 28.623
[info]   CI (99.9%): [≈ 0, 123.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   640.898 ±(99.9%) 278.878 MB/sec [Average]
[info]   (min, avg, max) = (511.365, 640.898, 674.707), stdev = 72.424
[info]   CI (99.9%): [362.020, 919.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   12477.305 ±(99.9%) 5392.675 B/op [Average]
[info]   (min, avg, max) = (9973.081, 12477.305, 13163.075), stdev = 1400.461
[info]   CI (99.9%): [7084.629, 17869.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 16.47% complete, ETA 01:51:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20129.235 ops/s
[info] # Warmup Iteration   2: 26560.203 ops/s
[info] # Warmup Iteration   3: 26526.869 ops/s
[info] # Warmup Iteration   4: 27225.478 ops/s
[info] # Warmup Iteration   5: 26884.453 ops/s
[info] Iteration   1: 27082.492 ops/s
[info]                  ·gc.alloc.rate:                   1550.755 MB/sec
[info]                  ·gc.alloc.rate.norm:              90144.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.210 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.467 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78036.443 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 26830.132 ops/s
[info]                  ·gc.alloc.rate:                   1536.758 MB/sec
[info]                  ·gc.alloc.rate.norm:              90144.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.442 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2015.079 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 118201.692 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 26778.739 ops/s
[info]                  ·gc.alloc.rate:                   1533.491 MB/sec
[info]                  ·gc.alloc.rate.norm:              90144.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.223 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.536 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79036.622 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 27163.871 ops/s
[info]                  ·gc.alloc.rate:                   1555.490 MB/sec
[info]                  ·gc.alloc.rate.norm:              90144.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.206 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.832 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77993.894 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 27230.671 ops/s
[info]                  ·gc.alloc.rate:                   1559.246 MB/sec
[info]                  ·gc.alloc.rate.norm:              90144.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.478 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77901.147 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce":
[info]   27017.181 ±(99.9%) 777.800 ops/s [Average]
[info]   (min, avg, max) = (26778.739, 27017.181, 27230.671), stdev = 201.992
[info]   CI (99.9%): [26239.381, 27794.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate":
[info]   1547.148 ±(99.9%) 44.049 MB/sec [Average]
[info]   (min, avg, max) = (1533.491, 1547.148, 1559.246), stdev = 11.439
[info]   CI (99.9%): [1503.098, 1591.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   90144.015 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (90144.015, 90144.015, 90144.016), stdev = 0.001
[info]   CI (99.9%): [90144.014, 90144.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.216 ±(99.9%) 3.325 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.216, 2.442), stdev = 0.863
[info]   CI (99.9%): [≈ 0, 4.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1479.079 ±(99.9%) 1153.804 MB/sec [Average]
[info]   (min, avg, max) = (1342.467, 1479.079, 2015.079), stdev = 299.639
[info]   CI (99.9%): [325.275, 2632.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   86233.960 ±(99.9%) 68835.882 B/op [Average]
[info]   (min, avg, max) = (77901.147, 86233.960, 118201.692), stdev = 17876.460
[info]   CI (99.9%): [17398.077, 155069.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 16.67% complete, ETA 01:51:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2271.032 ops/s
[info] # Warmup Iteration   2: 97383.826 ops/s
[info] # Warmup Iteration   3: 99163.313 ops/s
[info] # Warmup Iteration   4: 97971.530 ops/s
[info] # Warmup Iteration   5: 99023.308 ops/s
[info] Iteration   1: 99992.817 ops/s
[info]                  ·gc.alloc.rate:                   900.397 MB/sec
[info]                  ·gc.alloc.rate.norm:              14176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.328 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.221 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10599.301 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 99999.813 ops/s
[info]                  ·gc.alloc.rate:                   900.347 MB/sec
[info]                  ·gc.alloc.rate.norm:              14176.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.609 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21155.186 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 99916.572 ops/s
[info]                  ·gc.alloc.rate:                   899.794 MB/sec
[info]                  ·gc.alloc.rate.norm:              14176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.984 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.963 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10586.590 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 99745.334 ops/s
[info]                  ·gc.alloc.rate:                   898.246 MB/sec
[info]                  ·gc.alloc.rate.norm:              14176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.985 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.887 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21209.044 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 100017.194 ops/s
[info]                  ·gc.alloc.rate:                   900.642 MB/sec
[info]                  ·gc.alloc.rate.norm:              14176.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.911 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10575.796 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava":
[info]   99934.346 ±(99.9%) 433.132 ops/s [Average]
[info]   (min, avg, max) = (99745.334, 99934.346, 100017.194), stdev = 112.483
[info]   CI (99.9%): [99501.214, 100367.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   899.885 ±(99.9%) 3.725 MB/sec [Average]
[info]   (min, avg, max) = (898.246, 899.885, 900.642), stdev = 0.967
[info]   CI (99.9%): [896.161, 903.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   14176.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (14176.004, 14176.004, 14176.004), stdev = 0.001
[info]   CI (99.9%): [14176.004, 14176.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.062), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0.459 ±(99.9%) 1.917 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.459, 0.985), stdev = 0.498
[info]   CI (99.9%): [≈ 0, 2.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   940.918 ±(99.9%) 1416.005 MB/sec [Average]
[info]   (min, avg, max) = (671.911, 940.918, 1343.887), stdev = 367.732
[info]   CI (99.9%): [≈ 0, 2356.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   14825.184 ±(99.9%) 22345.655 B/op [Average]
[info]   (min, avg, max) = (10575.796, 14825.184, 21209.044), stdev = 5803.096
[info]   CI (99.9%): [≈ 0, 37170.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 16.87% complete, ETA 01:51:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36519.685 ops/s
[info] # Warmup Iteration   2: 62311.034 ops/s
[info] # Warmup Iteration   3: 62171.535 ops/s
[info] # Warmup Iteration   4: 62191.453 ops/s
[info] # Warmup Iteration   5: 61149.585 ops/s
[info] Iteration   1: 60779.245 ops/s
[info]                  ·gc.alloc.rate:                   1004.289 MB/sec
[info]                  ·gc.alloc.rate.norm:              26008.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.684 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17472.242 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 62309.001 ops/s
[info]                  ·gc.alloc.rate:                   1029.298 MB/sec
[info]                  ·gc.alloc.rate.norm:              26008.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.351 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34120.277 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 62011.271 ops/s
[info]                  ·gc.alloc.rate:                   1024.767 MB/sec
[info]                  ·gc.alloc.rate.norm:              26008.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676.099 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17159.008 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 60112.849 ops/s
[info]                  ·gc.alloc.rate:                   993.132 MB/sec
[info]                  ·gc.alloc.rate.norm:              26008.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.090 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.487 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35418.738 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 61205.290 ops/s
[info]                  ·gc.alloc.rate:                   1011.452 MB/sec
[info]                  ·gc.alloc.rate.norm:              26008.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676.755 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17401.761 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala":
[info]   61283.531 ±(99.9%) 3450.634 ops/s [Average]
[info]   (min, avg, max) = (60112.849, 61283.531, 62309.001), stdev = 896.119
[info]   CI (99.9%): [57832.897, 64734.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1012.588 ±(99.9%) 56.993 MB/sec [Average]
[info]   (min, avg, max) = (993.132, 1012.588, 1029.298), stdev = 14.801
[info]   CI (99.9%): [955.594, 1069.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   26008.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (26008.007, 26008.007, 26008.007), stdev = 0.001
[info]   CI (99.9%): [26008.006, 26008.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.428 ±(99.9%) 2.259 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.428, 1.090), stdev = 0.587
[info]   CI (99.9%): [≈ 0, 2.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   946.075 ±(99.9%) 1424.847 MB/sec [Average]
[info]   (min, avg, max) = (674.684, 946.075, 1352.487), stdev = 370.028
[info]   CI (99.9%): [≈ 0, 2370.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   24314.405 ±(99.9%) 36796.367 B/op [Average]
[info]   (min, avg, max) = (17159.008, 24314.405, 35418.738), stdev = 9555.900
[info]   CI (99.9%): [≈ 0, 61110.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 17.07% complete, ETA 01:51:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 113859.937 ops/s
[info] # Warmup Iteration   2: 131006.626 ops/s
[info] # Warmup Iteration   3: 129796.328 ops/s
[info] # Warmup Iteration   4: 130578.302 ops/s
[info] # Warmup Iteration   5: 133643.520 ops/s
[info] Iteration   1: 133777.672 ops/s
[info]                  ·gc.alloc.rate:                   861.801 MB/sec
[info]                  ·gc.alloc.rate.norm:              10144.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.245 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.436 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7938.592 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 133331.308 ops/s
[info]                  ·gc.alloc.rate:                   859.312 MB/sec
[info]                  ·gc.alloc.rate.norm:              10144.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.246 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.227 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15868.333 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 132279.927 ops/s
[info]                  ·gc.alloc.rate:                   852.300 MB/sec
[info]                  ·gc.alloc.rate.norm:              10144.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.218 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7988.788 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 133082.782 ops/s
[info]                  ·gc.alloc.rate:                   857.509 MB/sec
[info]                  ·gc.alloc.rate.norm:              10144.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.212 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7940.177 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 133232.173 ops/s
[info]                  ·gc.alloc.rate:                   858.506 MB/sec
[info]                  ·gc.alloc.rate.norm:              10144.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.983 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.421 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15861.885 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala":
[info]   133140.772 ±(99.9%) 2104.437 ops/s [Average]
[info]   (min, avg, max) = (132279.927, 133140.772, 133777.672), stdev = 546.516
[info]   CI (99.9%): [131036.336, 135245.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   857.886 ±(99.9%) 13.490 MB/sec [Average]
[info]   (min, avg, max) = (852.300, 857.886, 861.801), stdev = 3.503
[info]   CI (99.9%): [844.396, 871.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10144.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10144.003, 10144.003, 10144.003), stdev = 0.001
[info]   CI (99.9%): [10144.003, 10144.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.083), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.295 ±(99.9%) 1.556 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.295, 0.983), stdev = 0.404
[info]   CI (99.9%): [≈ 0, 1.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   940.703 ±(99.9%) 1415.282 MB/sec [Average]
[info]   (min, avg, max) = (671.212, 940.703, 1344.227), stdev = 367.544
[info]   CI (99.9%): [≈ 0, 2355.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   11119.555 ±(99.9%) 16681.473 B/op [Average]
[info]   (min, avg, max) = (7938.592, 11119.555, 15868.333), stdev = 4332.126
[info]   CI (99.9%): [≈ 0, 27801.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 17.27% complete, ETA 01:50:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18549.781 ops/s
[info] # Warmup Iteration   2: 35844.505 ops/s
[info] # Warmup Iteration   3: 36039.892 ops/s
[info] # Warmup Iteration   4: 35688.630 ops/s
[info] # Warmup Iteration   5: 36137.196 ops/s
[info] Iteration   1: 36023.804 ops/s
[info]                  ·gc.alloc.rate:                   1882.047 MB/sec
[info]                  ·gc.alloc.rate.norm:              82248.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.547 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.308 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 88727.228 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 36215.019 ops/s
[info]                  ·gc.alloc.rate:                   1892.079 MB/sec
[info]                  ·gc.alloc.rate.norm:              82248.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.619 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.144 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 88380.060 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 35900.024 ops/s
[info]                  ·gc.alloc.rate:                   1876.300 MB/sec
[info]                  ·gc.alloc.rate.norm:              82248.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.738 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.817 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 89240.511 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 35702.680 ops/s
[info]                  ·gc.alloc.rate:                   1865.688 MB/sec
[info]                  ·gc.alloc.rate.norm:              82248.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.918 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1358.091 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59870.809 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 36017.924 ops/s
[info]                  ·gc.alloc.rate:                   1881.803 MB/sec
[info]                  ·gc.alloc.rate.norm:              82248.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.729 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037.651 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 89059.691 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson":
[info]   35971.890 ±(99.9%) 724.403 ops/s [Average]
[info]   (min, avg, max) = (35702.680, 35971.890, 36215.019), stdev = 188.125
[info]   CI (99.9%): [35247.487, 36696.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1879.583 ±(99.9%) 37.084 MB/sec [Average]
[info]   (min, avg, max) = (1865.688, 1879.583, 1892.079), stdev = 9.631
[info]   CI (99.9%): [1842.499, 1916.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   82248.012 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (82248.011, 82248.012, 82248.012), stdev = 0.001
[info]   CI (99.9%): [82248.010, 82248.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.104), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.910 ±(99.9%) 5.171 B/op [Average]
[info]   (min, avg, max) = (0.918, 2.910, 4.547), stdev = 1.343
[info]   CI (99.9%): [≈ 0, 8.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1899.002 ±(99.9%) 1164.402 MB/sec [Average]
[info]   (min, avg, max) = (1358.091, 1899.002, 2037.651), stdev = 302.391
[info]   CI (99.9%): [734.601, 3063.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   83055.660 ±(99.9%) 49923.194 B/op [Average]
[info]   (min, avg, max) = (59870.809, 83055.660, 89240.511), stdev = 12964.895
[info]   CI (99.9%): [33132.466, 132978.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 17.47% complete, ETA 01:50:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 58461.990 ops/s
[info] # Warmup Iteration   2: 66505.240 ops/s
[info] # Warmup Iteration   3: 65714.779 ops/s
[info] # Warmup Iteration   4: 67509.451 ops/s
[info] # Warmup Iteration   5: 67764.605 ops/s
[info] Iteration   1: 67840.304 ops/s
[info]                  ·gc.alloc.rate:                   1220.195 MB/sec
[info]                  ·gc.alloc.rate.norm:              28312.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.483 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.624 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31152.707 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 67932.740 ops/s
[info]                  ·gc.alloc.rate:                   1221.852 MB/sec
[info]                  ·gc.alloc.rate.norm:              28312.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.343 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15555.950 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 64290.996 ops/s
[info]                  ·gc.alloc.rate:                   1156.298 MB/sec
[info]                  ·gc.alloc.rate.norm:              28312.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.529 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.885 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32880.612 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 65855.466 ops/s
[info]                  ·gc.alloc.rate:                   1184.370 MB/sec
[info]                  ·gc.alloc.rate.norm:              28312.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.474 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32115.346 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 67399.571 ops/s
[info]                  ·gc.alloc.rate:                   1212.150 MB/sec
[info]                  ·gc.alloc.rate.norm:              28312.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.944 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.494 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31403.153 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle":
[info]   66663.815 ±(99.9%) 6033.154 ops/s [Average]
[info]   (min, avg, max) = (64290.996, 66663.815, 67932.740), stdev = 1566.791
[info]   CI (99.9%): [60630.662, 72696.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1198.973 ±(99.9%) 108.604 MB/sec [Average]
[info]   (min, avg, max) = (1156.298, 1198.973, 1221.852), stdev = 28.204
[info]   CI (99.9%): [1090.369, 1307.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   28312.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (28312.006, 28312.006, 28312.007), stdev = 0.001
[info]   CI (99.9%): [28312.005, 28312.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.083), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0.791 ±(99.9%) 3.455 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.791, 1.944), stdev = 0.897
[info]   CI (99.9%): [≈ 0, 4.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   1208.964 ±(99.9%) 1157.273 MB/sec [Average]
[info]   (min, avg, max) = (671.343, 1208.964, 1344.494), stdev = 300.540
[info]   CI (99.9%): [51.691, 2366.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   28621.554 ±(99.9%) 28243.901 B/op [Average]
[info]   (min, avg, max) = (15555.950, 28621.554, 32880.612), stdev = 7334.851
[info]   CI (99.9%): [377.653, 56865.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 17.67% complete, ETA 01:50:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27957.576 ops/s
[info] # Warmup Iteration   2: 37546.227 ops/s
[info] # Warmup Iteration   3: 38938.022 ops/s
[info] # Warmup Iteration   4: 38460.100 ops/s
[info] # Warmup Iteration   5: 37442.424 ops/s
[info] Iteration   1: 38360.135 ops/s
[info]                  ·gc.alloc.rate:                   503.891 MB/sec
[info]                  ·gc.alloc.rate.norm:              20680.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.434 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20989.558 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 38381.845 ops/s
[info]                  ·gc.alloc.rate:                   504.233 MB/sec
[info]                  ·gc.alloc.rate.norm:              20680.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.038 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.570 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.501 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20978.076 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 37847.970 ops/s
[info]                  ·gc.alloc.rate:                   497.212 MB/sec
[info]                  ·gc.alloc.rate.norm:              20680.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.561 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     148.118 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.017 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28033.681 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 38388.527 ops/s
[info]                  ·gc.alloc.rate:      504.338 MB/sec
[info]                  ·gc.alloc.rate.norm: 20680.011 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 38552.784 ops/s
[info]                  ·gc.alloc.rate:                   506.465 MB/sec
[info]                  ·gc.alloc.rate.norm:              20680.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.700 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.955 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27518.968 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce":
[info]   38306.252 ±(99.9%) 1029.980 ops/s [Average]
[info]   (min, avg, max) = (37847.970, 38306.252, 38552.784), stdev = 267.483
[info]   CI (99.9%): [37276.272, 39336.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate":
[info]   503.228 ±(99.9%) 13.525 MB/sec [Average]
[info]   (min, avg, max) = (497.212, 503.228, 506.465), stdev = 3.512
[info]   CI (99.9%): [489.703, 516.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   20680.011 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (20680.011, 20680.011, 20680.011), stdev = 0.001
[info]   CI (99.9%): [20680.009, 20680.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.728 ±(99.9%) 6.099 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.728, 3.561), stdev = 1.584
[info]   CI (99.9%): [≈ 0, 6.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   30.277 ±(99.9%) 253.680 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 30.277, 148.118), stdev = 65.880
[info]   CI (99.9%): [≈ 0, 283.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   474.181 ±(99.9%) 1067.595 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474.181, 674.017), stdev = 277.251
[info]   CI (99.9%): [≈ 0, 1541.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   19504.056 ±(99.9%) 43979.215 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19504.056, 28033.681), stdev = 11421.263
[info]   CI (99.9%): [≈ 0, 63483.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.304
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 17.87% complete, ETA 01:50:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25331.342 ops/s
[info] # Warmup Iteration   2: 40466.570 ops/s
[info] # Warmup Iteration   3: 41018.124 ops/s
[info] # Warmup Iteration   4: 41297.381 ops/s
[info] # Warmup Iteration   5: 41661.647 ops/s
[info] Iteration   1: 41780.732 ops/s
[info]                  ·gc.alloc.rate:                   377.281 MB/sec
[info]                  ·gc.alloc.rate.norm:              14216.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.430 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19270.774 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 41861.497 ops/s
[info]                  ·gc.alloc.rate:      378.150 MB/sec
[info]                  ·gc.alloc.rate.norm: 14216.010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 41680.697 ops/s
[info]                  ·gc.alloc.rate:                   376.356 MB/sec
[info]                  ·gc.alloc.rate.norm:              14216.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.388 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19316.536 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 41525.110 ops/s
[info]                  ·gc.alloc.rate:                   374.992 MB/sec
[info]                  ·gc.alloc.rate.norm:              14216.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.367 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.606 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25536.539 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 41699.120 ops/s
[info]                  ·gc.alloc.rate:      376.553 MB/sec
[info]                  ·gc.alloc.rate.norm: 14216.010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala":
[info]   41709.431 ±(99.9%) 483.690 ops/s [Average]
[info]   (min, avg, max) = (41525.110, 41709.431, 41861.497), stdev = 125.613
[info]   CI (99.9%): [41225.742, 42193.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   376.666 ±(99.9%) 4.513 MB/sec [Average]
[info]   (min, avg, max) = (374.992, 376.666, 378.150), stdev = 1.172
[info]   CI (99.9%): [372.154, 381.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   14216.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (14216.010, 14216.010, 14216.010), stdev = 0.001
[info]   CI (99.9%): [14216.010, 14216.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.012 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.473 ±(99.9%) 4.076 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.473, 2.367), stdev = 1.058
[info]   CI (99.9%): [≈ 0, 4.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   339.285 ±(99.9%) 1219.585 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339.285, 673.606), stdev = 316.722
[info]   CI (99.9%): [≈ 0, 1558.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   12824.770 ±(99.9%) 46136.777 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12824.770, 25536.539), stdev = 11981.575
[info]   CI (99.9%): [≈ 0, 58961.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 0.837
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 18.07% complete, ETA 01:49:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38975.763 ops/s
[info] # Warmup Iteration   2: 44658.463 ops/s
[info] # Warmup Iteration   3: 45130.242 ops/s
[info] # Warmup Iteration   4: 44748.059 ops/s
[info] # Warmup Iteration   5: 45168.627 ops/s
[info] Iteration   1: 42170.233 ops/s
[info]                  ·gc.alloc.rate:                   370.606 MB/sec
[info]                  ·gc.alloc.rate.norm:              13832.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.003 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.124 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.530 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19091.685 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 45175.412 ops/s
[info]                  ·gc.alloc.rate:                   396.899 MB/sec
[info]                  ·gc.alloc.rate.norm:              13832.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.389 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17822.033 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 45111.276 ops/s
[info]                  ·gc.alloc.rate:                   396.367 MB/sec
[info]                  ·gc.alloc.rate.norm:              13832.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.417 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17846.915 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 45181.810 ops/s
[info]                  ·gc.alloc.rate:      396.951 MB/sec
[info]                  ·gc.alloc.rate.norm: 13832.010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 45056.855 ops/s
[info]                  ·gc.alloc.rate:                   395.890 MB/sec
[info]                  ·gc.alloc.rate.norm:              13832.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.354 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     117.191 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.576 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23568.995 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala":
[info]   44539.117 ±(99.9%) 5102.995 ops/s [Average]
[info]   (min, avg, max) = (42170.233, 44539.117, 45181.810), stdev = 1325.232
[info]   CI (99.9%): [39436.122, 49642.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   391.343 ±(99.9%) 44.669 MB/sec [Average]
[info]   (min, avg, max) = (370.606, 391.343, 396.951), stdev = 11.600
[info]   CI (99.9%): [346.673, 436.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   13832.009 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (13832.009, 13832.009, 13832.010), stdev = 0.001
[info]   CI (99.9%): [13832.007, 13832.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.671 ±(99.9%) 5.775 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.671, 3.354), stdev = 1.500
[info]   CI (99.9%): [≈ 0, 6.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   23.463 ±(99.9%) 201.757 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 23.463, 117.191), stdev = 52.396
[info]   CI (99.9%): [≈ 0, 225.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   441.782 ±(99.9%) 989.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 441.782, 674.576), stdev = 256.867
[info]   CI (99.9%): [≈ 0, 1430.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   15665.926 ±(99.9%) 34923.296 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15665.926, 23568.995), stdev = 9069.469
[info]   CI (99.9%): [≈ 0, 50589.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 3.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 18.27% complete, ETA 01:49:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 40339.613 ops/s
[info] # Warmup Iteration   2: 45465.653 ops/s
[info] # Warmup Iteration   3: 45702.701 ops/s
[info] # Warmup Iteration   4: 45114.012 ops/s
[info] # Warmup Iteration   5: 45411.612 ops/s
[info] Iteration   1: 45243.026 ops/s
[info]                  ·gc.alloc.rate:                   345.874 MB/sec
[info]                  ·gc.alloc.rate.norm:              12032.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.533 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17794.860 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 45883.752 ops/s
[info]                  ·gc.alloc.rate:      350.691 MB/sec
[info]                  ·gc.alloc.rate.norm: 12032.009 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 45651.245 ops/s
[info]                  ·gc.alloc.rate:                   348.883 MB/sec
[info]                  ·gc.alloc.rate.norm:              12032.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.006 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.199 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.374 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17635.862 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 45625.088 ops/s
[info]                  ·gc.alloc.rate:                   348.719 MB/sec
[info]                  ·gc.alloc.rate.norm:              12032.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.040 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.363 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.424 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17645.909 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 45854.598 ops/s
[info]                  ·gc.alloc.rate:      350.474 MB/sec
[info]                  ·gc.alloc.rate.norm: 12032.009 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc":
[info]   45651.542 ±(99.9%) 986.882 ops/s [Average]
[info]   (min, avg, max) = (45243.026, 45651.542, 45883.752), stdev = 256.290
[info]   CI (99.9%): [44664.659, 46638.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   348.928 ±(99.9%) 7.425 MB/sec [Average]
[info]   (min, avg, max) = (345.874, 348.928, 350.691), stdev = 1.928
[info]   CI (99.9%): [341.503, 356.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   12032.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (12032.009, 12032.009, 12032.010), stdev = 0.001
[info]   CI (99.9%): [12032.008, 12032.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   0.009 ±(99.9%) 0.066 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.040), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   0.313 ±(99.9%) 2.286 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.313, 1.363), stdev = 0.594
[info]   CI (99.9%): [≈ 0, 2.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   306.866 ±(99.9%) 1078.678 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.866, 511.533), stdev = 280.129
[info]   CI (99.9%): [≈ 0, 1385.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   10615.326 ±(99.9%) 37315.155 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10615.326, 17794.860), stdev = 9690.627
[info]   CI (99.9%): [≈ 0, 47930.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 18.47% complete, ETA 01:49:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28989.704 ops/s
[info] # Warmup Iteration   2: 32594.560 ops/s
[info] # Warmup Iteration   3: 32092.293 ops/s
[info] # Warmup Iteration   4: 32905.547 ops/s
[info] # Warmup Iteration   5: 33249.718 ops/s
[info] Iteration   1: 33216.952 ops/s
[info]                  ·gc.alloc.rate:                   496.184 MB/sec
[info]                  ·gc.alloc.rate.norm:              23520.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.973 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.346 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24238.694 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 33340.266 ops/s
[info]                  ·gc.alloc.rate:                   498.145 MB/sec
[info]                  ·gc.alloc.rate.norm:              23520.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.983 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.488 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24150.014 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 33286.291 ops/s
[info]                  ·gc.alloc.rate:                   497.270 MB/sec
[info]                  ·gc.alloc.rate.norm:              23520.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.360 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     158.902 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.525 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31903.871 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 33291.476 ops/s
[info]                  ·gc.alloc.rate:                   497.365 MB/sec
[info]                  ·gc.alloc.rate.norm:              23520.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.984 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.553 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31899.081 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 33346.634 ops/s
[info]                  ·gc.alloc.rate:      498.219 MB/sec
[info]                  ·gc.alloc.rate.norm: 23520.013 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle":
[info]   33296.324 ±(99.9%) 200.880 ops/s [Average]
[info]   (min, avg, max) = (33216.952, 33296.324, 33346.634), stdev = 52.168
[info]   CI (99.9%): [33095.444, 33497.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   497.437 ±(99.9%) 3.172 MB/sec [Average]
[info]   (min, avg, max) = (496.184, 497.437, 498.219), stdev = 0.824
[info]   CI (99.9%): [494.264, 500.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   23520.013 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (23520.012, 23520.013, 23520.013), stdev = 0.001
[info]   CI (99.9%): [23520.011, 23520.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0.684 ±(99.9%) 5.759 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.684, 3.360), stdev = 1.496
[info]   CI (99.9%): [≈ 0, 6.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   32.368 ±(99.9%) 272.379 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 32.368, 158.902), stdev = 70.736
[info]   CI (99.9%): [≈ 0, 304.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   474.382 ±(99.9%) 1068.349 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474.382, 674.553), stdev = 277.447
[info]   CI (99.9%): [≈ 0, 1542.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   22438.332 ±(99.9%) 50528.317 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22438.332, 31903.871), stdev = 13122.043
[info]   CI (99.9%): [≈ 0, 72966.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.140
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 18.67% complete, ETA 01:48:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15682.933 ops/s
[info] # Warmup Iteration   2: 19744.591 ops/s
[info] # Warmup Iteration   3: 19792.462 ops/s
[info] # Warmup Iteration   4: 19856.431 ops/s
[info] # Warmup Iteration   5: 19862.611 ops/s
[info] Iteration   1: 19853.182 ops/s
[info]                  ·gc.alloc.rate:                   744.600 MB/sec
[info]                  ·gc.alloc.rate.norm:              59039.202 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.175 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     251.747 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.615 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53490.154 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 19902.170 ops/s
[info]                  ·gc.alloc.rate:                   746.485 MB/sec
[info]                  ·gc.alloc.rate.norm:              59040.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.646 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.369 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 106564.315 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 19926.456 ops/s
[info]                  ·gc.alloc.rate:                   747.580 MB/sec
[info]                  ·gc.alloc.rate.norm:              59040.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.793 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53133.743 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 19782.678 ops/s
[info]                  ·gc.alloc.rate:                   741.984 MB/sec
[info]                  ·gc.alloc.rate.norm:              59040.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.656 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.950 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53467.414 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 19749.806 ops/s
[info]                  ·gc.alloc.rate:                   740.983 MB/sec
[info]                  ·gc.alloc.rate.norm:              59040.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.165 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53556.729 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce":
[info]   19842.858 ±(99.9%) 291.312 ops/s [Average]
[info]   (min, avg, max) = (19749.806, 19842.858, 19926.456), stdev = 75.653
[info]   CI (99.9%): [19551.546, 20134.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate":
[info]   744.326 ±(99.9%) 10.889 MB/sec [Average]
[info]   (min, avg, max) = (740.983, 744.326, 747.580), stdev = 2.828
[info]   CI (99.9%): [733.438, 755.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   59039.857 ±(99.9%) 1.411 B/op [Average]
[info]   (min, avg, max) = (59039.202, 59039.857, 59040.022), stdev = 0.366
[info]   CI (99.9%): [59038.446, 59041.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.643 ±(99.9%) 5.450 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.643, 3.175), stdev = 1.415
[info]   CI (99.9%): [≈ 0, 6.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   51.010 ±(99.9%) 432.113 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 51.010, 251.747), stdev = 112.218
[info]   CI (99.9%): [≈ 0, 483.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   807.779 ±(99.9%) 1161.516 MB/sec [Average]
[info]   (min, avg, max) = (671.950, 807.779, 1347.369), stdev = 301.642
[info]   CI (99.9%): [≈ 0, 1969.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   64042.471 ±(99.9%) 91533.652 B/op [Average]
[info]   (min, avg, max) = (53133.743, 64042.471, 106564.315), stdev = 23770.999
[info]   CI (99.9%): [≈ 0, 155576.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 18.88% complete, ETA 01:48:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12860.896 ops/s
[info] # Warmup Iteration   2: 18563.845 ops/s
[info] # Warmup Iteration   3: 18446.590 ops/s
[info] # Warmup Iteration   4: 19759.128 ops/s
[info] # Warmup Iteration   5: 19263.697 ops/s
[info] Iteration   1: 19876.118 ops/s
[info]                  ·gc.alloc.rate:      564.135 MB/sec
[info]                  ·gc.alloc.rate.norm: 44680.027 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 19364.374 ops/s
[info]                  ·gc.alloc.rate:                   549.310 MB/sec
[info]                  ·gc.alloc.rate.norm:              44650.667 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.767 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.671 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54759.390 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 19232.736 ops/s
[info]                  ·gc.alloc.rate:                   545.479 MB/sec
[info]                  ·gc.alloc.rate.norm:              44648.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.604 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55135.137 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 19586.000 ops/s
[info]                  ·gc.alloc.rate:                   555.535 MB/sec
[info]                  ·gc.alloc.rate.norm:              44648.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.624 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54219.156 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 19908.146 ops/s
[info]                  ·gc.alloc.rate:                   564.623 MB/sec
[info]                  ·gc.alloc.rate.norm:              44648.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.645 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.539 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53339.735 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala":
[info]   19593.475 ±(99.9%) 1157.727 ops/s [Average]
[info]   (min, avg, max) = (19232.736, 19593.475, 19908.146), stdev = 300.658
[info]   CI (99.9%): [18435.748, 20751.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   555.816 ±(99.9%) 33.126 MB/sec [Average]
[info]   (min, avg, max) = (545.479, 555.816, 564.623), stdev = 8.603
[info]   CI (99.9%): [522.690, 588.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   44654.952 ±(99.9%) 54.157 B/op [Average]
[info]   (min, avg, max) = (44648.021, 44654.952, 44680.027), stdev = 14.064
[info]   CI (99.9%): [44600.795, 44709.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.083), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.683 ±(99.9%) 11.284 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.683, 6.767), stdev = 2.930
[info]   CI (99.9%): [≈ 0, 12.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   539.288 ±(99.9%) 1160.859 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.288, 674.624), stdev = 301.471
[info]   CI (99.9%): [≈ 0, 1700.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   43490.684 ±(99.9%) 93653.022 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 43490.684, 55135.137), stdev = 24321.392
[info]   CI (99.9%): [≈ 0, 137143.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 19.08% complete, ETA 01:48:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 76147.548 ops/s
[info] # Warmup Iteration   2: 81208.723 ops/s
[info] # Warmup Iteration   3: 79617.550 ops/s
[info] # Warmup Iteration   4: 81606.507 ops/s
[info] # Warmup Iteration   5: 79700.165 ops/s
[info] Iteration   1: 81165.519 ops/s
[info]                  ·gc.alloc.rate:      211.179 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 81619.533 ops/s
[info]                  ·gc.alloc.rate:      212.364 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 80851.228 ops/s
[info]                  ·gc.alloc.rate:                   210.350 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.388 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9957.913 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 81158.379 ops/s
[info]                  ·gc.alloc.rate:      211.144 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 80908.298 ops/s
[info]                  ·gc.alloc.rate:                   210.514 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.405 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.433 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9951.022 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala":
[info]   81140.591 ±(99.9%) 1167.980 ops/s [Average]
[info]   (min, avg, max) = (80851.228, 81140.591, 81619.533), stdev = 303.321
[info]   CI (99.9%): [79972.611, 82308.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   211.110 ±(99.9%) 3.050 MB/sec [Average]
[info]   (min, avg, max) = (210.350, 211.110, 212.364), stdev = 0.792
[info]   CI (99.9%): [208.060, 214.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.005, 4096.005, 4096.005), stdev = 0.001
[info]   CI (99.9%): [4096.004, 4096.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.081 ±(99.9%) 0.697 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.081, 0.405), stdev = 0.181
[info]   CI (99.9%): [≈ 0, 0.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   204.564 ±(99.9%) 1078.608 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.564, 511.433), stdev = 280.111
[info]   CI (99.9%): [≈ 0, 1283.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3981.787 ±(99.9%) 20994.816 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3981.787, 9957.913), stdev = 5452.287
[info]   CI (99.9%): [≈ 0, 24976.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 1.095
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 19.28% complete, ETA 01:48:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9319.851 ops/s
[info] # Warmup Iteration   2: 15549.071 ops/s
[info] # Warmup Iteration   3: 15828.156 ops/s
[info] # Warmup Iteration   4: 15945.950 ops/s
[info] # Warmup Iteration   5: 15959.205 ops/s
[info] Iteration   1: 15827.849 ops/s
[info]                  ·gc.alloc.rate:                   1025.997 MB/sec
[info]                  ·gc.alloc.rate.norm:              102048.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.927 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67129.794 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 15928.528 ops/s
[info]                  ·gc.alloc.rate:                   1032.519 MB/sec
[info]                  ·gc.alloc.rate.norm:              102048.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.154 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 133540.089 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 16055.271 ops/s
[info]                  ·gc.alloc.rate:                   1040.843 MB/sec
[info]                  ·gc.alloc.rate.norm:              102048.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676.304 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66307.300 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 15930.387 ops/s
[info]                  ·gc.alloc.rate:                   1032.747 MB/sec
[info]                  ·gc.alloc.rate.norm:              102048.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.056 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.949 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 133687.846 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 15820.028 ops/s
[info]                  ·gc.alloc.rate:                   1025.477 MB/sec
[info]                  ·gc.alloc.rate.norm:              102048.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676.506 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67320.898 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson":
[info]   15912.413 ±(99.9%) 368.725 ops/s [Average]
[info]   (min, avg, max) = (15820.028, 15912.413, 16055.271), stdev = 95.757
[info]   CI (99.9%): [15543.688, 16281.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1031.517 ±(99.9%) 24.081 MB/sec [Average]
[info]   (min, avg, max) = (1025.477, 1031.517, 1040.843), stdev = 6.254
[info]   CI (99.9%): [1007.435, 1055.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   102048.027 ±(99.9%) 0.015 B/op [Average]
[info]   (min, avg, max) = (102048.025, 102048.027, 102048.034), stdev = 0.004
[info]   CI (99.9%): [102048.013, 102048.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.823 ±(99.9%) 4.338 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.823, 2.057), stdev = 1.126
[info]   CI (99.9%): [≈ 0, 5.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   946.368 ±(99.9%) 1426.039 MB/sec [Average]
[info]   (min, avg, max) = (674.927, 946.368, 1352.949), stdev = 370.338
[info]   CI (99.9%): [≈ 0, 2372.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   93597.186 ±(99.9%) 140672.415 B/op [Average]
[info]   (min, avg, max) = (66307.300, 93597.186, 133687.846), stdev = 36532.180
[info]   CI (99.9%): [≈ 0, 234269.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 19.48% complete, ETA 01:47:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14355.475 ops/s
[info] # Warmup Iteration   2: 16716.901 ops/s
[info] # Warmup Iteration   3: 16639.745 ops/s
[info] # Warmup Iteration   4: 16243.628 ops/s
[info] # Warmup Iteration   5: 16593.586 ops/s
[info] Iteration   1: 16737.896 ops/s
[info]                  ·gc.alloc.rate:                   577.070 MB/sec
[info]                  ·gc.alloc.rate.norm:              54280.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.378 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48100.966 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 16377.856 ops/s
[info]                  ·gc.alloc.rate:                   564.647 MB/sec
[info]                  ·gc.alloc.rate.norm:              54273.994 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.744 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     263.781 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.903 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64967.931 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 16266.930 ops/s
[info]                  ·gc.alloc.rate:                   560.646 MB/sec
[info]                  ·gc.alloc.rate.norm:              54256.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.916 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65411.139 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 16266.547 ops/s
[info]                  ·gc.alloc.rate:                   560.645 MB/sec
[info]                  ·gc.alloc.rate.norm:              54256.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.916 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65217.805 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 16269.442 ops/s
[info]                  ·gc.alloc.rate:      560.705 MB/sec
[info]                  ·gc.alloc.rate.norm: 54256.027 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle":
[info]   16383.734 ±(99.9%) 784.208 ops/s [Average]
[info]   (min, avg, max) = (16266.547, 16383.734, 16737.896), stdev = 203.656
[info]   CI (99.9%): [15599.526, 17167.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.alloc.rate":
[info]   564.743 ±(99.9%) 27.354 MB/sec [Average]
[info]   (min, avg, max) = (560.645, 564.743, 577.070), stdev = 7.104
[info]   CI (99.9%): [537.389, 592.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   54264.420 ±(99.9%) 45.012 B/op [Average]
[info]   (min, avg, max) = (54256.025, 54264.420, 54280.026), stdev = 11.689
[info]   CI (99.9%): [54219.408, 54309.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0.553 ±(99.9%) 4.717 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.553, 2.744), stdev = 1.225
[info]   CI (99.9%): [≈ 0, 5.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   53.159 ±(99.9%) 453.392 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 53.159, 263.781), stdev = 117.744
[info]   CI (99.9%): [≈ 0, 506.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   507.423 ±(99.9%) 1125.925 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 507.423, 675.916), stdev = 292.399
[info]   CI (99.9%): [≈ 0, 1633.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   48739.568 ±(99.9%) 108721.665 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 48739.568, 65411.139), stdev = 28234.671
[info]   CI (99.9%): [≈ 0, 157461.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.517
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 19.68% complete, ETA 01:47:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 43119.051 ops/s
[info] # Warmup Iteration   2: 59198.452 ops/s
[info] # Warmup Iteration   3: 59647.006 ops/s
[info] # Warmup Iteration   4: 62307.959 ops/s
[info] # Warmup Iteration   5: 62356.348 ops/s
[info] Iteration   1: 61486.617 ops/s
[info]                  ·gc.alloc.rate:                   931.726 MB/sec
[info]                  ·gc.alloc.rate.norm:              23848.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.816 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17221.076 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 62528.600 ops/s
[info]                  ·gc.alloc.rate:                   947.306 MB/sec
[info]                  ·gc.alloc.rate.norm:              23848.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.691 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16934.692 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 62303.782 ops/s
[info]                  ·gc.alloc.rate:                   943.812 MB/sec
[info]                  ·gc.alloc.rate.norm:              23848.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.577 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.841 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33955.845 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 62285.000 ops/s
[info]                  ·gc.alloc.rate:                   943.548 MB/sec
[info]                  ·gc.alloc.rate.norm:              23848.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.239 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16965.452 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 62509.481 ops/s
[info]                  ·gc.alloc.rate:                   946.984 MB/sec
[info]                  ·gc.alloc.rate.norm:              23848.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.206 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33826.114 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce":
[info]   62222.696 ±(99.9%) 1642.844 ops/s [Average]
[info]   (min, avg, max) = (61486.617, 62222.696, 62528.600), stdev = 426.641
[info]   CI (99.9%): [60579.852, 63865.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate":
[info]   942.675 ±(99.9%) 24.501 MB/sec [Average]
[info]   (min, avg, max) = (931.726, 942.675, 947.306), stdev = 6.363
[info]   CI (99.9%): [918.174, 967.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   23848.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (23848.007, 23848.007, 23848.007), stdev = 0.001
[info]   CI (99.9%): [23848.006, 23848.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.738 ±(99.9%) 2.721 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.738, 1.577), stdev = 0.707
[info]   CI (99.9%): [≈ 0, 3.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   940.758 ±(99.9%) 1415.778 MB/sec [Average]
[info]   (min, avg, max) = (671.239, 940.758, 1343.841), stdev = 367.673
[info]   CI (99.9%): [≈ 0, 2356.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   23780.636 ±(99.9%) 35542.299 B/op [Average]
[info]   (min, avg, max) = (16934.692, 23780.636, 33955.845), stdev = 9230.222
[info]   CI (99.9%): [≈ 0, 59322.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 19.88% complete, ETA 01:47:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 55996.406 ops/s
[info] # Warmup Iteration   2: 91869.989 ops/s
[info] # Warmup Iteration   3: 91315.241 ops/s
[info] # Warmup Iteration   4: 89565.822 ops/s
[info] # Warmup Iteration   5: 89623.768 ops/s
[info] Iteration   1: 89517.453 ops/s
[info]                  ·gc.alloc.rate:                   1060.954 MB/sec
[info]                  ·gc.alloc.rate.norm:              18664.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.497 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23739.973 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 89164.615 ops/s
[info]                  ·gc.alloc.rate:                   1056.977 MB/sec
[info]                  ·gc.alloc.rate.norm:              18664.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.213 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11922.852 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 90408.561 ops/s
[info]                  ·gc.alloc.rate:                   1071.816 MB/sec
[info]                  ·gc.alloc.rate.norm:              18664.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.725 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.817 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23539.793 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 92153.973 ops/s
[info]                  ·gc.alloc.rate:                   1092.563 MB/sec
[info]                  ·gc.alloc.rate.norm:              18664.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.213 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23116.634 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 89266.109 ops/s
[info]                  ·gc.alloc.rate:                   1058.184 MB/sec
[info]                  ·gc.alloc.rate.norm:              18664.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.734 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      677.111 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11942.726 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala":
[info]   90102.142 ±(99.9%) 4803.157 ops/s [Average]
[info]   (min, avg, max) = (89164.615, 90102.142, 92153.973), stdev = 1247.365
[info]   CI (99.9%): [85298.985, 94905.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1068.099 ±(99.9%) 57.287 MB/sec [Average]
[info]   (min, avg, max) = (1056.977, 1068.099, 1092.563), stdev = 14.877
[info]   CI (99.9%): [1010.811, 1125.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   18664.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (18664.004, 18664.005, 18664.005), stdev = 0.001
[info]   CI (99.9%): [18664.004, 18664.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.107 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.511 ±(99.9%) 1.889 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.511, 1.098), stdev = 0.490
[info]   CI (99.9%): [≈ 0, 2.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1081.370 ±(99.9%) 1424.375 MB/sec [Average]
[info]   (min, avg, max) = (675.213, 1081.370, 1353.213), stdev = 369.906
[info]   CI (99.9%): [≈ 0, 2505.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   18852.396 ±(99.9%) 24338.839 B/op [Average]
[info]   (min, avg, max) = (11922.852, 18852.396, 23739.973), stdev = 6320.719
[info]   CI (99.9%): [≈ 0, 43191.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 20.08% complete, ETA 01:47:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 192501.477 ops/s
[info] # Warmup Iteration   2: 204300.204 ops/s
[info] # Warmup Iteration   3: 200707.055 ops/s
[info] # Warmup Iteration   4: 202862.026 ops/s
[info] # Warmup Iteration   5: 202815.215 ops/s
[info] Iteration   1: 203545.694 ops/s
[info]                  ·gc.alloc.rate:      322.698 MB/sec
[info]                  ·gc.alloc.rate.norm: 2496.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 194398.397 ops/s
[info]                  ·gc.alloc.rate:                   308.338 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.632 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4141.670 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 202456.577 ops/s
[info]                  ·gc.alloc.rate:                   320.972 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.395 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3976.802 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 203803.747 ops/s
[info]                  ·gc.alloc.rate:      323.111 MB/sec
[info]                  ·gc.alloc.rate.norm: 2496.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 203055.598 ops/s
[info]                  ·gc.alloc.rate:                   321.921 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.379 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3964.956 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala":
[info]   201452.003 ±(99.9%) 15311.853 ops/s [Average]
[info]   (min, avg, max) = (194398.397, 201452.003, 203803.747), stdev = 3976.440
[info]   CI (99.9%): [186140.149, 216763.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   319.408 ±(99.9%) 24.035 MB/sec [Average]
[info]   (min, avg, max) = (308.338, 319.408, 323.111), stdev = 6.242
[info]   CI (99.9%): [295.373, 343.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2496.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2496.002, 2496.002, 2496.002), stdev = 0.001
[info]   CI (99.9%): [2496.002, 2496.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   306.881 ±(99.9%) 1078.731 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.881, 511.632), stdev = 280.143
[info]   CI (99.9%): [≈ 0, 1385.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2416.686 ±(99.9%) 8499.248 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2416.686, 4141.670), stdev = 2207.228
[info]   CI (99.9%): [≈ 0, 10915.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 20.28% complete, ETA 01:46:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 230930.592 ops/s
[info] # Warmup Iteration   2: 245486.168 ops/s
[info] # Warmup Iteration   3: 249527.306 ops/s
[info] # Warmup Iteration   4: 247589.929 ops/s
[info] # Warmup Iteration   5: 248913.361 ops/s
[info] Iteration   1: 249365.671 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 248962.171 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 248997.006 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 249827.169 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 249279.740 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc":
[info]   249286.352 ±(99.9%) 1344.465 ops/s [Average]
[info]   (min, avg, max) = (248962.171, 249286.352, 249827.169), stdev = 349.153
[info]   CI (99.9%): [247941.886, 250630.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 20.48% complete, ETA 01:46:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 57762.823 ops/s
[info] # Warmup Iteration   2: 80876.610 ops/s
[info] # Warmup Iteration   3: 80200.241 ops/s
[info] # Warmup Iteration   4: 82553.525 ops/s
[info] # Warmup Iteration   5: 82463.845 ops/s
[info] Iteration   1: 82590.473 ops/s
[info]                  ·gc.alloc.rate:                   1126.406 MB/sec
[info]                  ·gc.alloc.rate.norm:              21472.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.190 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.796 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25539.730 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 82636.214 ops/s
[info]                  ·gc.alloc.rate:                   1127.190 MB/sec
[info]                  ·gc.alloc.rate.norm:              21472.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.325 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12750.071 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 82525.958 ops/s
[info]                  ·gc.alloc.rate:                   1125.559 MB/sec
[info]                  ·gc.alloc.rate.norm:              21472.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.794 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.446 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25533.197 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 82382.101 ops/s
[info]                  ·gc.alloc.rate:                   1123.637 MB/sec
[info]                  ·gc.alloc.rate.norm:              21472.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.398 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.129 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25589.922 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 82496.833 ops/s
[info]                  ·gc.alloc.rate:                   1125.216 MB/sec
[info]                  ·gc.alloc.rate.norm:              21472.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12789.682 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson":
[info]   82526.316 ±(99.9%) 374.628 ops/s [Average]
[info]   (min, avg, max) = (82382.101, 82526.316, 82636.214), stdev = 97.290
[info]   CI (99.9%): [82151.688, 82900.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1125.601 ±(99.9%) 5.159 MB/sec [Average]
[info]   (min, avg, max) = (1123.637, 1125.601, 1127.190), stdev = 1.340
[info]   CI (99.9%): [1120.442, 1130.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   21472.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (21472.005, 21472.005, 21472.005), stdev = 0.001
[info]   CI (99.9%): [21472.004, 21472.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.476 ±(99.9%) 1.992 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.476, 1.190), stdev = 0.517
[info]   CI (99.9%): [≈ 0, 2.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1071.385 ±(99.9%) 1411.710 MB/sec [Average]
[info]   (min, avg, max) = (669.325, 1071.385, 1339.796), stdev = 366.617
[info]   CI (99.9%): [≈ 0, 2483.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   20440.520 ±(99.9%) 26963.580 B/op [Average]
[info]   (min, avg, max) = (12750.071, 20440.520, 25589.922), stdev = 7002.356
[info]   CI (99.9%): [≈ 0, 47404.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 20.68% complete, ETA 01:46:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16214.406 ops/s
[info] # Warmup Iteration   2: 18069.980 ops/s
[info] # Warmup Iteration   3: 18341.795 ops/s
[info] # Warmup Iteration   4: 18327.471 ops/s
[info] # Warmup Iteration   5: 18261.267 ops/s
[info] Iteration   1: 18266.357 ops/s
[info]                  ·gc.alloc.rate:                   351.500 MB/sec
[info]                  ·gc.alloc.rate.norm:              30296.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.374 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44075.659 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 18346.477 ops/s
[info]                  ·gc.alloc.rate:      353.051 MB/sec
[info]                  ·gc.alloc.rate.norm: 30296.022 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 18215.350 ops/s
[info]                  ·gc.alloc.rate:                   350.613 MB/sec
[info]                  ·gc.alloc.rate.norm:              30296.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.512 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44199.032 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 18253.195 ops/s
[info]                  ·gc.alloc.rate:                   351.301 MB/sec
[info]                  ·gc.alloc.rate.norm:              30296.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.898 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.448 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44107.042 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 18317.508 ops/s
[info]                  ·gc.alloc.rate:      352.525 MB/sec
[info]                  ·gc.alloc.rate.norm: 30296.022 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle":
[info]   18279.777 ±(99.9%) 201.102 ops/s [Average]
[info]   (min, avg, max) = (18215.350, 18279.777, 18346.477), stdev = 52.226
[info]   CI (99.9%): [18078.675, 18480.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   351.798 ±(99.9%) 3.772 MB/sec [Average]
[info]   (min, avg, max) = (350.613, 351.798, 353.051), stdev = 0.980
[info]   CI (99.9%): [348.026, 355.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   30296.024 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (30296.022, 30296.024, 30296.030), stdev = 0.003
[info]   CI (99.9%): [30296.012, 30296.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0.002 ±(99.9%) 0.018 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.010), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0.180 ±(99.9%) 1.547 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.180, 0.898), stdev = 0.402
[info]   CI (99.9%): [≈ 0, 1.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   306.867 ±(99.9%) 1078.680 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.867, 511.512), stdev = 280.130
[info]   CI (99.9%): [≈ 0, 1385.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   26476.347 ±(99.9%) 93068.253 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 26476.347, 44199.032), stdev = 24169.530
[info]   CI (99.9%): [≈ 0, 119544.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 20.88% complete, ETA 01:46:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19863.973 ops/s
[info] # Warmup Iteration   2: 26086.724 ops/s
[info] # Warmup Iteration   3: 27599.009 ops/s
[info] # Warmup Iteration   4: 27835.191 ops/s
[info] # Warmup Iteration   5: 26976.184 ops/s
[info] Iteration   1: 27915.059 ops/s
[info]                  ·gc.alloc.rate:                   580.458 MB/sec
[info]                  ·gc.alloc.rate.norm:              32736.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.024 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.327 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.398 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28841.285 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 27942.677 ops/s
[info]                  ·gc.alloc.rate:                   581.090 MB/sec
[info]                  ·gc.alloc.rate.norm:              32736.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.521 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     198.345 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.981 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37969.047 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 27777.670 ops/s
[info]                  ·gc.alloc.rate:                   577.683 MB/sec
[info]                  ·gc.alloc.rate.norm:              32736.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38194.540 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 27938.967 ops/s
[info]                  ·gc.alloc.rate:                   581.020 MB/sec
[info]                  ·gc.alloc.rate.norm:              32736.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.997 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37861.909 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 27982.935 ops/s
[info]                  ·gc.alloc.rate:      581.948 MB/sec
[info]                  ·gc.alloc.rate.norm: 32736.015 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce":
[info]   27911.462 ±(99.9%) 302.910 ops/s [Average]
[info]   (min, avg, max) = (27777.670, 27911.462, 27982.935), stdev = 78.665
[info]   CI (99.9%): [27608.552, 28214.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   580.440 ±(99.9%) 6.279 MB/sec [Average]
[info]   (min, avg, max) = (577.683, 580.440, 581.948), stdev = 1.631
[info]   CI (99.9%): [574.161, 586.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   32736.015 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (32736.015, 32736.015, 32736.016), stdev = 0.001
[info]   CI (99.9%): [32736.013, 32736.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.709 ±(99.9%) 6.053 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.709, 3.521), stdev = 1.572
[info]   CI (99.9%): [≈ 0, 6.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   39.934 ±(99.9%) 340.998 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 39.934, 198.345), stdev = 88.556
[info]   CI (99.9%): [≈ 0, 380.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   506.277 ±(99.9%) 1122.752 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506.277, 674.008), stdev = 291.575
[info]   CI (99.9%): [≈ 0, 1629.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   28573.356 ±(99.9%) 63378.834 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 28573.356, 38194.540), stdev = 16459.282
[info]   CI (99.9%): [≈ 0, 91952.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.342
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 21.08% complete, ETA 01:45:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18406.397 ops/s
[info] # Warmup Iteration   2: 28035.224 ops/s
[info] # Warmup Iteration   3: 28779.725 ops/s
[info] # Warmup Iteration   4: 28903.285 ops/s
[info] # Warmup Iteration   5: 27725.560 ops/s
[info] Iteration   1: 28842.289 ops/s
[info]                  ·gc.alloc.rate:                   378.440 MB/sec
[info]                  ·gc.alloc.rate.norm:              20656.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.441 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27915.501 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 28955.378 ops/s
[info]                  ·gc.alloc.rate:      379.954 MB/sec
[info]                  ·gc.alloc.rate.norm: 20656.014 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 28827.686 ops/s
[info]                  ·gc.alloc.rate:                   378.266 MB/sec
[info]                  ·gc.alloc.rate.norm:              20656.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.455 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27929.055 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 28763.373 ops/s
[info]                  ·gc.alloc.rate:                   377.431 MB/sec
[info]                  ·gc.alloc.rate.norm:              20656.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.972 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.599 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36864.712 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 28805.003 ops/s
[info]                  ·gc.alloc.rate:      377.960 MB/sec
[info]                  ·gc.alloc.rate.norm: 20656.015 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala":
[info]   28838.746 ±(99.9%) 276.051 ops/s [Average]
[info]   (min, avg, max) = (28763.373, 28838.746, 28955.378), stdev = 71.689
[info]   CI (99.9%): [28562.695, 29114.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   378.410 ±(99.9%) 3.637 MB/sec [Average]
[info]   (min, avg, max) = (377.431, 378.410, 379.954), stdev = 0.945
[info]   CI (99.9%): [374.773, 382.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   20656.015 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (20656.014, 20656.015, 20656.015), stdev = 0.001
[info]   CI (99.9%): [20656.012, 20656.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.251 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.146), stdev = 0.065
[info]   CI (99.9%): [≈ 0, 0.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.594 ±(99.9%) 13.729 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.594, 7.972), stdev = 3.565
[info]   CI (99.9%): [≈ 0, 15.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   339.299 ±(99.9%) 1219.620 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339.299, 673.599), stdev = 316.731
[info]   CI (99.9%): [≈ 0, 1558.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   18541.854 ±(99.9%) 66676.004 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18541.854, 36864.712), stdev = 17315.547
[info]   CI (99.9%): [≈ 0, 85217.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.time":
[info]   3.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 21.29% complete, ETA 01:45:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 109871.192 ops/s
[info] # Warmup Iteration   2: 118702.029 ops/s
[info] # Warmup Iteration   3: 123962.416 ops/s
[info] # Warmup Iteration   4: 120680.826 ops/s
[info] # Warmup Iteration   5: 124144.104 ops/s
[info] Iteration   1: 124186.646 ops/s
[info]                  ·gc.alloc.rate:                   484.613 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.017 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.218 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.357 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6483.061 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 124648.397 ops/s
[info]                  ·gc.alloc.rate:                   486.461 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.445 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6459.556 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 124761.479 ops/s
[info]                  ·gc.alloc.rate:                   486.898 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.330 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.542 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8511.824 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 124780.963 ops/s
[info]                  ·gc.alloc.rate:      487.022 MB/sec
[info]                  ·gc.alloc.rate.norm: 6144.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 124715.946 ops/s
[info]                  ·gc.alloc.rate:                   486.753 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.525 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.563 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8514.621 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala":
[info]   124618.686 ±(99.9%) 950.502 ops/s [Average]
[info]   (min, avg, max) = (124186.646, 124618.686, 124780.963), stdev = 246.842
[info]   CI (99.9%): [123668.184, 125569.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   486.349 ±(99.9%) 3.823 MB/sec [Average]
[info]   (min, avg, max) = (484.613, 486.349, 487.022), stdev = 0.993
[info]   CI (99.9%): [482.526, 490.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6144.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6144.003, 6144.003, 6144.004), stdev = 0.001
[info]   CI (99.9%): [6144.003, 6144.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.678 ±(99.9%) 5.710 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.678, 3.330), stdev = 1.483
[info]   CI (99.9%): [≈ 0, 6.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   8.554 ±(99.9%) 72.055 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.554, 42.025), stdev = 18.712
[info]   CI (99.9%): [≈ 0, 80.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   474.381 ±(99.9%) 1068.364 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474.381, 674.563), stdev = 277.451
[info]   CI (99.9%): [≈ 0, 1542.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5993.812 ±(99.9%) 13487.828 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5993.812, 8514.621), stdev = 3502.746
[info]   CI (99.9%): [≈ 0, 19481.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.304
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 21.49% complete, ETA 01:45:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10979.448 ops/s
[info] # Warmup Iteration   2: 22270.992 ops/s
[info] # Warmup Iteration   3: 22492.850 ops/s
[info] # Warmup Iteration   4: 22466.233 ops/s
[info] # Warmup Iteration   5: 22462.633 ops/s
[info] Iteration   1: 22561.981 ops/s
[info]                  ·gc.alloc.rate:                   1245.679 MB/sec
[info]                  ·gc.alloc.rate.norm:              86920.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.904 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 94226.876 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 22573.386 ops/s
[info]                  ·gc.alloc.rate:                   1246.620 MB/sec
[info]                  ·gc.alloc.rate.norm:              86920.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.364 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 94223.238 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 22630.221 ops/s
[info]                  ·gc.alloc.rate:                   1249.582 MB/sec
[info]                  ·gc.alloc.rate.norm:              86920.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.556 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 94082.782 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 22641.570 ops/s
[info]                  ·gc.alloc.rate:                   1250.201 MB/sec
[info]                  ·gc.alloc.rate.norm:              86920.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.447 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676.920 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47062.765 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 22613.485 ops/s
[info]                  ·gc.alloc.rate:                   1248.555 MB/sec
[info]                  ·gc.alloc.rate.norm:              86920.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.065 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 94265.221 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson":
[info]   22604.129 ±(99.9%) 134.658 ops/s [Average]
[info]   (min, avg, max) = (22561.981, 22604.129, 22641.570), stdev = 34.970
[info]   CI (99.9%): [22469.471, 22738.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1248.128 ±(99.9%) 7.424 MB/sec [Average]
[info]   (min, avg, max) = (1245.679, 1248.128, 1250.201), stdev = 1.928
[info]   CI (99.9%): [1240.704, 1255.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   86920.019 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (86920.018, 86920.019, 86920.023), stdev = 0.002
[info]   CI (99.9%): [86920.011, 86920.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.870 ±(99.9%) 4.999 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.870, 2.904), stdev = 1.298
[info]   CI (99.9%): [≈ 0, 5.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1217.060 ±(99.9%) 1162.704 MB/sec [Average]
[info]   (min, avg, max) = (676.920, 1217.060, 1354.065), stdev = 301.950
[info]   CI (99.9%): [54.356, 2379.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   84772.176 ±(99.9%) 81172.790 B/op [Average]
[info]   (min, avg, max) = (47062.765, 84772.176, 94265.221), stdev = 21080.316
[info]   CI (99.9%): [3599.386, 165944.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.095
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 21.69% complete, ETA 01:44:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21942.522 ops/s
[info] # Warmup Iteration   2: 26801.278 ops/s
[info] # Warmup Iteration   3: 27177.638 ops/s
[info] # Warmup Iteration   4: 26838.279 ops/s
[info] # Warmup Iteration   5: 26561.713 ops/s
[info] Iteration   1: 27065.975 ops/s
[info]                  ·gc.alloc.rate:                   516.491 MB/sec
[info]                  ·gc.alloc.rate.norm:              30040.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.432 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29745.738 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 27268.669 ops/s
[info]                  ·gc.alloc.rate:      520.345 MB/sec
[info]                  ·gc.alloc.rate.norm: 30040.015 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 27133.926 ops/s
[info]                  ·gc.alloc.rate:                   517.777 MB/sec
[info]                  ·gc.alloc.rate.norm:              30040.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.409 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     197.797 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.569 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39136.638 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 27214.712 ops/s
[info]                  ·gc.alloc.rate:                   519.329 MB/sec
[info]                  ·gc.alloc.rate.norm:              30040.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.408 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.627 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39023.052 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 27220.216 ops/s
[info]                  ·gc.alloc.rate:                   519.451 MB/sec
[info]                  ·gc.alloc.rate.norm:              30040.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.997 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38861.825 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle":
[info]   27180.700 ±(99.9%) 309.293 ops/s [Average]
[info]   (min, avg, max) = (27065.975, 27180.700, 27268.669), stdev = 80.322
[info]   CI (99.9%): [26871.407, 27489.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.alloc.rate":
[info]   518.679 ±(99.9%) 5.901 MB/sec [Average]
[info]   (min, avg, max) = (516.491, 518.679, 520.345), stdev = 1.532
[info]   CI (99.9%): [512.778, 524.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   30040.015 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (30040.015, 30040.015, 30040.016), stdev = 0.001
[info]   CI (99.9%): [30040.013, 30040.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0.690 ±(99.9%) 5.853 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.690, 3.409), stdev = 1.520
[info]   CI (99.9%): [≈ 0, 6.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   40.041 ±(99.9%) 339.606 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 40.041, 197.797), stdev = 88.194
[info]   CI (99.9%): [≈ 0, 379.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   506.525 ±(99.9%) 1123.421 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506.525, 674.627), stdev = 291.749
[info]   CI (99.9%): [≈ 0, 1629.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   29353.451 ±(99.9%) 65046.258 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 29353.451, 39136.638), stdev = 16892.307
[info]   CI (99.9%): [≈ 0, 94399.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.140
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 21.89% complete, ETA 01:44:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 137150.671 ops/s
[info] # Warmup Iteration   2: 177408.361 ops/s
[info] # Warmup Iteration   3: 178955.511 ops/s
[info] # Warmup Iteration   4: 179311.524 ops/s
[info] # Warmup Iteration   5: 179305.997 ops/s
[info] Iteration   1: 179116.013 ops/s
[info]                  ·gc.alloc.rate:      622.599 MB/sec
[info]                  ·gc.alloc.rate.norm: 5472.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 180259.299 ops/s
[info]                  ·gc.alloc.rate:                   626.473 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.528 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30.818 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.872 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5886.008 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 180736.144 ops/s
[info]                  ·gc.alloc.rate:                   628.290 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.363 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.046 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5870.508 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 180351.733 ops/s
[info]                  ·gc.alloc.rate:                   627.035 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.096 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5865.241 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 179631.027 ops/s
[info]                  ·gc.alloc.rate:                   624.595 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.182 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.137 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5888.516 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce":
[info]   180018.843 ±(99.9%) 2472.115 ops/s [Average]
[info]   (min, avg, max) = (179116.013, 180018.843, 180736.144), stdev = 642.000
[info]   CI (99.9%): [177546.729, 182490.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   625.798 ±(99.9%) 8.584 MB/sec [Average]
[info]   (min, avg, max) = (622.599, 625.798, 628.290), stdev = 2.229
[info]   CI (99.9%): [617.214, 634.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5472.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5472.002, 5472.002, 5472.002), stdev = 0.001
[info]   CI (99.9%): [5472.002, 5472.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.718 ±(99.9%) 6.049 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.718, 3.528), stdev = 1.571
[info]   CI (99.9%): [≈ 0, 6.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   6.273 ±(99.9%) 52.839 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.273, 30.818), stdev = 13.722
[info]   CI (99.9%): [≈ 0, 59.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   538.430 ±(99.9%) 1159.017 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538.430, 674.046), stdev = 300.993
[info]   CI (99.9%): [≈ 0, 1697.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4702.054 ±(99.9%) 10121.599 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4702.054, 5888.516), stdev = 2628.547
[info]   CI (99.9%): [≈ 0, 14823.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 22.09% complete, ETA 01:44:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 190156.910 ops/s
[info] # Warmup Iteration   2: 277389.196 ops/s
[info] # Warmup Iteration   3: 278743.166 ops/s
[info] # Warmup Iteration   4: 279553.062 ops/s
[info] # Warmup Iteration   5: 282924.314 ops/s
[info] Iteration   1: 281854.278 ops/s
[info]                  ·gc.alloc.rate:                   285.039 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2856.486 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 283024.746 ops/s
[info]                  ·gc.alloc.rate:      286.233 MB/sec
[info]                  ·gc.alloc.rate.norm: 1592.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 280453.518 ops/s
[info]                  ·gc.alloc.rate:                   283.608 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.420 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2870.793 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 282531.769 ops/s
[info]                  ·gc.alloc.rate:      285.720 MB/sec
[info]                  ·gc.alloc.rate.norm: 1592.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 281801.562 ops/s
[info]                  ·gc.alloc.rate:                   284.964 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.394 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2856.993 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala":
[info]   281933.175 ±(99.9%) 3734.716 ops/s [Average]
[info]   (min, avg, max) = (280453.518, 281933.175, 283024.746), stdev = 969.894
[info]   CI (99.9%): [278198.459, 285667.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   285.113 ±(99.9%) 3.809 MB/sec [Average]
[info]   (min, avg, max) = (283.608, 285.113, 286.233), stdev = 0.989
[info]   CI (99.9%): [281.303, 288.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1592.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1592.001, 1592.001, 1592.002), stdev = 0.001
[info]   CI (99.9%): [1592.001, 1592.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.023 ±(99.9%) 0.201 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.117), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   306.850 ±(99.9%) 1078.622 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.850, 511.437), stdev = 280.115
[info]   CI (99.9%): [≈ 0, 1385.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1716.855 ±(99.9%) 6035.026 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1716.855, 2870.793), stdev = 1567.277
[info]   CI (99.9%): [≈ 0, 7751.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 1.000
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 22.29% complete, ETA 01:44:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 473462.495 ops/s
[info] # Warmup Iteration   2: 496528.300 ops/s
[info] # Warmup Iteration   3: 507466.116 ops/s
[info] # Warmup Iteration   4: 502835.664 ops/s
[info] # Warmup Iteration   5: 493990.270 ops/s
[info] Iteration   1: 504845.646 ops/s
[info]                  ·gc.alloc.rate:                   387.346 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.003 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.362 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1594.764 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 501195.210 ops/s
[info]                  ·gc.alloc.rate:                   384.592 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.455 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1606.478 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 498168.477 ops/s
[info]                  ·gc.alloc.rate:                   382.332 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.011 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.495 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1616.101 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 509394.674 ops/s
[info]                  ·gc.alloc.rate:      390.846 MB/sec
[info]                  ·gc.alloc.rate.norm: 1208.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 496963.876 ops/s
[info]                  ·gc.alloc.rate:                   381.502 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.341 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.578 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.869 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2136.929 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala":
[info]   502113.577 ±(99.9%) 19578.281 ops/s [Average]
[info]   (min, avg, max) = (496963.876, 502113.577, 509394.674), stdev = 5084.417
[info]   CI (99.9%): [482535.296, 521691.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   385.324 ±(99.9%) 14.748 MB/sec [Average]
[info]   (min, avg, max) = (381.502, 385.324, 390.846), stdev = 3.830
[info]   CI (99.9%): [370.575, 400.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1208.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1208.001, 1208.001, 1208.001), stdev = 0.001
[info]   CI (99.9%): [1208.001, 1208.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.671 ±(99.9%) 5.747 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.671, 3.341), stdev = 1.492
[info]   CI (99.9%): [≈ 0, 6.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2.125 ±(99.9%) 18.197 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.125, 10.578), stdev = 4.726
[info]   CI (99.9%): [≈ 0, 20.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   441.836 ±(99.9%) 989.355 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 441.836, 674.869), stdev = 256.932
[info]   CI (99.9%): [≈ 0, 1431.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1390.854 ±(99.9%) 3122.295 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1390.854, 2136.929), stdev = 810.850
[info]   CI (99.9%): [≈ 0, 4513.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 3.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 22.49% complete, ETA 01:43:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 502284.603 ops/s
[info] # Warmup Iteration   2: 529545.127 ops/s
[info] # Warmup Iteration   3: 524861.679 ops/s
[info] # Warmup Iteration   4: 523819.591 ops/s
[info] # Warmup Iteration   5: 524510.663 ops/s
[info] Iteration   1: 524558.796 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 525354.350 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 524380.359 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 524431.110 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 524154.413 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   524575.806 ±(99.9%) 1767.869 ops/s [Average]
[info]   (min, avg, max) = (524154.413, 524575.806, 525354.350), stdev = 459.110
[info]   CI (99.9%): [522807.937, 526343.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 22.69% complete, ETA 01:43:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 157888.025 ops/s
[info] # Warmup Iteration   2: 265159.865 ops/s
[info] # Warmup Iteration   3: 271836.991 ops/s
[info] # Warmup Iteration   4: 272225.681 ops/s
[info] # Warmup Iteration   5: 272086.753 ops/s
[info] Iteration   1: 272019.706 ops/s
[info]                  ·gc.alloc.rate:                   751.918 MB/sec
[info]                  ·gc.alloc.rate.norm:              4352.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.241 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.513 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3898.202 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 272907.845 ops/s
[info]                  ·gc.alloc.rate:                   754.293 MB/sec
[info]                  ·gc.alloc.rate.norm:              4352.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.485 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3891.540 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 271572.298 ops/s
[info]                  ·gc.alloc.rate:                   750.769 MB/sec
[info]                  ·gc.alloc.rate.norm:              4352.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.565 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3910.264 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 272242.335 ops/s
[info]                  ·gc.alloc.rate:                   752.641 MB/sec
[info]                  ·gc.alloc.rate.norm:              4352.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.241 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.273 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3904.637 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 271430.784 ops/s
[info]                  ·gc.alloc.rate:                   750.574 MB/sec
[info]                  ·gc.alloc.rate.norm:              4352.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.688 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7825.799 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson":
[info]   272034.594 ±(99.9%) 2265.222 ops/s [Average]
[info]   (min, avg, max) = (271430.784, 272034.594, 272907.845), stdev = 588.271
[info]   CI (99.9%): [269769.372, 274299.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   752.039 ±(99.9%) 5.845 MB/sec [Average]
[info]   (min, avg, max) = (750.574, 752.039, 754.293), stdev = 1.518
[info]   CI (99.9%): [746.195, 757.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4352.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4352.001, 4352.002, 4352.002), stdev = 0.001
[info]   CI (99.9%): [4352.001, 4352.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.096 ±(99.9%) 0.508 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.096, 0.241), stdev = 0.132
[info]   CI (99.9%): [≈ 0, 0.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   809.505 ±(99.9%) 1162.787 MB/sec [Average]
[info]   (min, avg, max) = (673.513, 809.505, 1349.688), stdev = 301.972
[info]   CI (99.9%): [≈ 0, 1972.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4686.088 ±(99.9%) 6758.517 B/op [Average]
[info]   (min, avg, max) = (3891.540, 4686.088, 7825.799), stdev = 1755.165
[info]   CI (99.9%): [≈ 0, 11444.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 22.89% complete, ETA 01:43:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 39482.167 ops/s
[info] # Warmup Iteration   2: 43246.145 ops/s
[info] # Warmup Iteration   3: 42697.827 ops/s
[info] # Warmup Iteration   4: 43367.227 ops/s
[info] # Warmup Iteration   5: 43284.328 ops/s
[info] Iteration   1: 43238.785 ops/s
[info]                  ·gc.alloc.rate:      200.433 MB/sec
[info]                  ·gc.alloc.rate.norm: 7296.009 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 43195.767 ops/s
[info]                  ·gc.alloc.rate:      200.193 MB/sec
[info]                  ·gc.alloc.rate.norm: 7296.009 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 41570.453 ops/s
[info]                  ·gc.alloc.rate:                   192.638 MB/sec
[info]                  ·gc.alloc.rate.norm:              7296.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.003 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.107 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.355 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19367.172 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 42393.207 ops/s
[info]                  ·gc.alloc.rate:      196.518 MB/sec
[info]                  ·gc.alloc.rate.norm: 7296.010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 42912.076 ops/s
[info]                  ·gc.alloc.rate:                   198.906 MB/sec
[info]                  ·gc.alloc.rate.norm:              7296.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.006 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.227 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.485 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18761.652 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle":
[info]   42662.058 ±(99.9%) 2684.323 ops/s [Average]
[info]   (min, avg, max) = (41570.453, 42662.058, 43238.785), stdev = 697.110
[info]   CI (99.9%): [39977.734, 45346.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   197.737 ±(99.9%) 12.500 MB/sec [Average]
[info]   (min, avg, max) = (192.638, 197.737, 200.433), stdev = 3.246
[info]   CI (99.9%): [185.237, 210.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   7296.010 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (7296.009, 7296.010, 7296.011), stdev = 0.001
[info]   CI (99.9%): [7296.008, 7296.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0.002 ±(99.9%) 0.011 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.006), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0.067 ±(99.9%) 0.388 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.227), stdev = 0.101
[info]   CI (99.9%): [≈ 0, 0.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   204.568 ±(99.9%) 1078.628 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.568, 511.485), stdev = 280.116
[info]   CI (99.9%): [≈ 0, 1283.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   7625.765 ±(99.9%) 40216.906 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7625.765, 19367.172), stdev = 10444.203
[info]   CI (99.9%): [≈ 0, 47842.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 3.000), stdev = 1.414
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 23.09% complete, ETA 01:43:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30078.678 ops/s
[info] # Warmup Iteration   2: 37423.017 ops/s
[info] # Warmup Iteration   3: 38077.427 ops/s
[info] # Warmup Iteration   4: 38467.279 ops/s
[info] # Warmup Iteration   5: 38583.702 ops/s
[info] Iteration   1: 38566.653 ops/s
[info]                  ·gc.alloc.rate:                   1719.671 MB/sec
[info]                  ·gc.alloc.rate.norm:              70200.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.247 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2013.702 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 82202.878 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 38040.029 ops/s
[info]                  ·gc.alloc.rate:                   1696.343 MB/sec
[info]                  ·gc.alloc.rate.norm:              70200.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.723 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.931 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55616.116 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 37751.496 ops/s
[info]                  ·gc.alloc.rate:                   1683.476 MB/sec
[info]                  ·gc.alloc.rate.norm:              70200.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2018.369 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 84164.871 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 37767.955 ops/s
[info]                  ·gc.alloc.rate:                   1684.131 MB/sec
[info]                  ·gc.alloc.rate.norm:              70200.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.735 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.419 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56164.793 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 37617.762 ops/s
[info]                  ·gc.alloc.rate:                   1677.481 MB/sec
[info]                  ·gc.alloc.rate.norm:              70200.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.483 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.950 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 84699.215 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce":
[info]   37948.779 ±(99.9%) 1455.223 ops/s [Average]
[info]   (min, avg, max) = (37617.762, 37948.779, 38566.653), stdev = 377.917
[info]   CI (99.9%): [36493.556, 39404.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate":
[info]   1692.220 ±(99.9%) 64.711 MB/sec [Average]
[info]   (min, avg, max) = (1677.481, 1692.220, 1719.671), stdev = 16.805
[info]   CI (99.9%): [1627.509, 1756.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   70200.011 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (70200.011, 70200.011, 70200.012), stdev = 0.001
[info]   CI (99.9%): [70200.009, 70200.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.104), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2.238 ±(99.9%) 6.419 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.238, 4.247), stdev = 1.667
[info]   CI (99.9%): [≈ 0, 8.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1749.474 ±(99.9%) 1419.487 MB/sec [Average]
[info]   (min, avg, max) = (1343.931, 1749.474, 2023.950), stdev = 368.636
[info]   CI (99.9%): [329.987, 3168.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   72569.575 ±(99.9%) 58743.344 B/op [Average]
[info]   (min, avg, max) = (55616.116, 72569.575, 84699.215), stdev = 15255.460
[info]   CI (99.9%): [13826.230, 131312.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 23.29% complete, ETA 01:42:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27784.578 ops/s
[info] # Warmup Iteration   2: 298967.145 ops/s
[info] # Warmup Iteration   3: 292503.491 ops/s
[info] # Warmup Iteration   4: 299096.352 ops/s
[info] # Warmup Iteration   5: 304870.902 ops/s
[info] Iteration   1: 304507.749 ops/s
[info]                  ·gc.alloc.rate:                   315.655 MB/sec
[info]                  ·gc.alloc.rate.norm:              1632.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.408 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2644.085 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 304978.686 ops/s
[info]                  ·gc.alloc.rate:      316.161 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 303581.388 ops/s
[info]                  ·gc.alloc.rate:                   314.719 MB/sec
[info]                  ·gc.alloc.rate.norm:              1632.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.435 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2652.087 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 303488.711 ops/s
[info]                  ·gc.alloc.rate:                   314.639 MB/sec
[info]                  ·gc.alloc.rate.norm:              1632.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.003 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2652.883 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 299368.705 ops/s
[info]                  ·gc.alloc.rate:      310.356 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava":
[info]   303185.048 ±(99.9%) 8562.911 ops/s [Average]
[info]   (min, avg, max) = (299368.705, 303185.048, 304978.686), stdev = 2223.761
[info]   CI (99.9%): [294622.137, 311747.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   314.306 ±(99.9%) 8.854 MB/sec [Average]
[info]   (min, avg, max) = (310.356, 314.306, 316.161), stdev = 2.299
[info]   CI (99.9%): [305.452, 323.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1632.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1632.001, 1632.001, 1632.001), stdev = 0.001
[info]   CI (99.9%): [1632.001, 1632.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.001 ±(99.9%) 0.006 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0.003 ±(99.9%) 0.029 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.017), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   306.860 ±(99.9%) 1078.657 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.860, 511.458), stdev = 280.124
[info]   CI (99.9%): [≈ 0, 1385.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   1589.811 ±(99.9%) 5588.425 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1589.811, 2652.883), stdev = 1451.296
[info]   CI (99.9%): [≈ 0, 7178.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 23.49% complete, ETA 01:42:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 67153.121 ops/s
[info] # Warmup Iteration   2: 100397.934 ops/s
[info] # Warmup Iteration   3: 102726.200 ops/s
[info] # Warmup Iteration   4: 104551.205 ops/s
[info] # Warmup Iteration   5: 104360.436 ops/s
[info] Iteration   1: 102343.600 ops/s
[info]                  ·gc.alloc.rate:                   1128.323 MB/sec
[info]                  ·gc.alloc.rate.norm:              17360.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.077 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10386.504 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 100806.347 ops/s
[info]                  ·gc.alloc.rate:                   1111.680 MB/sec
[info]                  ·gc.alloc.rate.norm:              17360.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.325 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.302 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21101.938 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 103066.826 ops/s
[info]                  ·gc.alloc.rate:                   1136.578 MB/sec
[info]                  ·gc.alloc.rate.norm:              17360.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.318 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.478 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20657.638 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 104500.389 ops/s
[info]                  ·gc.alloc.rate:                   1152.411 MB/sec
[info]                  ·gc.alloc.rate.norm:              17360.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676.573 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10191.939 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 102188.452 ops/s
[info]                  ·gc.alloc.rate:                   1127.198 MB/sec
[info]                  ·gc.alloc.rate.norm:              17360.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.282 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.823 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20865.653 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala":
[info]   102581.123 ±(99.9%) 5194.777 ops/s [Average]
[info]   (min, avg, max) = (100806.347, 102581.123, 104500.389), stdev = 1349.067
[info]   CI (99.9%): [97386.346, 107775.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1131.238 ±(99.9%) 57.249 MB/sec [Average]
[info]   (min, avg, max) = (1111.680, 1131.238, 1152.411), stdev = 14.867
[info]   CI (99.9%): [1073.990, 1188.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   17360.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (17360.004, 17360.004, 17360.004), stdev = 0.001
[info]   CI (99.9%): [17360.003, 17360.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.083), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.385 ±(99.9%) 2.028 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.385, 1.282), stdev = 0.527
[info]   CI (99.9%): [≈ 0, 2.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1082.050 ±(99.9%) 1427.950 MB/sec [Average]
[info]   (min, avg, max) = (675.077, 1082.050, 1354.823), stdev = 370.834
[info]   CI (99.9%): [≈ 0, 2510.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   16640.734 ±(99.9%) 22336.236 B/op [Average]
[info]   (min, avg, max) = (10191.939, 16640.734, 21101.938), stdev = 5800.650
[info]   CI (99.9%): [≈ 0, 38976.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 23.69% complete, ETA 01:42:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 401036.961 ops/s
[info] # Warmup Iteration   2: 412496.283 ops/s
[info] # Warmup Iteration   3: 422779.195 ops/s
[info] # Warmup Iteration   4: 415423.009 ops/s
[info] # Warmup Iteration   5: 423161.264 ops/s
[info] Iteration   1: 419921.684 ops/s
[info]                  ·gc.alloc.rate:                   273.118 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.372 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1917.287 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 423038.556 ops/s
[info]                  ·gc.alloc.rate:      275.184 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 427018.016 ops/s
[info]                  ·gc.alloc.rate:                   277.758 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.016 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.427 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1885.460 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 430126.074 ops/s
[info]                  ·gc.alloc.rate:      279.785 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 429054.600 ops/s
[info]                  ·gc.alloc.rate:                   279.094 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.007 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.469 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1876.589 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala":
[info]   425831.786 ±(99.9%) 16446.129 ops/s [Average]
[info]   (min, avg, max) = (419921.684, 425831.786, 430126.074), stdev = 4271.007
[info]   CI (99.9%): [409385.657, 442277.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   276.988 ±(99.9%) 10.735 MB/sec [Average]
[info]   (min, avg, max) = (273.118, 276.988, 279.785), stdev = 2.788
[info]   CI (99.9%): [266.253, 287.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1024.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1024.001, 1024.001, 1024.001), stdev = 0.001
[info]   CI (99.9%): [1024.001, 1024.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.005 ±(99.9%) 0.027 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.016), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.017 ±(99.9%) 0.099 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.058), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   306.853 ±(99.9%) 1078.633 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.853, 511.469), stdev = 280.118
[info]   CI (99.9%): [≈ 0, 1385.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1135.867 ±(99.9%) 3993.158 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1135.867, 1917.287), stdev = 1037.011
[info]   CI (99.9%): [≈ 0, 5129.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 1.095
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 23.90% complete, ETA 01:42:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22731.216 ops/s
[info] # Warmup Iteration   2: 40813.115 ops/s
[info] # Warmup Iteration   3: 41000.952 ops/s
[info] # Warmup Iteration   4: 40877.040 ops/s
[info] # Warmup Iteration   5: 40963.664 ops/s
[info] Iteration   1: 41013.507 ops/s
[info]                  ·gc.alloc.rate:                   2188.765 MB/sec
[info]                  ·gc.alloc.rate.norm:              84016.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.396 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.896 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78032.968 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 41136.620 ops/s
[info]                  ·gc.alloc.rate:                   2195.269 MB/sec
[info]                  ·gc.alloc.rate.norm:              84016.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.982 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.037 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77883.732 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 40938.355 ops/s
[info]                  ·gc.alloc.rate:                   2184.867 MB/sec
[info]                  ·gc.alloc.rate.norm:              84016.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.201 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037.037 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78331.436 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 41015.714 ops/s
[info]                  ·gc.alloc.rate:                   2188.955 MB/sec
[info]                  ·gc.alloc.rate.norm:              84016.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.799 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2038.067 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78224.664 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 40143.750 ops/s
[info]                  ·gc.alloc.rate:                   2142.610 MB/sec
[info]                  ·gc.alloc.rate.norm:              84016.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.448 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2719.406 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 106633.298 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson":
[info]   40849.589 ±(99.9%) 1543.794 ops/s [Average]
[info]   (min, avg, max) = (40143.750, 40849.589, 41136.620), stdev = 400.918
[info]   CI (99.9%): [39305.795, 42393.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2180.093 ±(99.9%) 81.951 MB/sec [Average]
[info]   (min, avg, max) = (2142.610, 2180.093, 2195.269), stdev = 21.282
[info]   CI (99.9%): [2098.142, 2262.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   84016.010 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (84016.010, 84016.010, 84016.011), stdev = 0.001
[info]   CI (99.9%): [84016.009, 84016.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.104), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.565 ±(99.9%) 4.546 B/op [Average]
[info]   (min, avg, max) = (0.799, 2.565, 3.982), stdev = 1.181
[info]   CI (99.9%): [≈ 0, 7.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2172.489 ±(99.9%) 1177.305 MB/sec [Average]
[info]   (min, avg, max) = (2032.896, 2172.489, 2719.406), stdev = 305.742
[info]   CI (99.9%): [995.184, 3349.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   83821.220 ±(99.9%) 49109.212 B/op [Average]
[info]   (min, avg, max) = (77883.732, 83821.220, 106633.298), stdev = 12753.506
[info]   CI (99.9%): [34712.008, 132930.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 24.10% complete, ETA 01:41:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 69191.411 ops/s
[info] # Warmup Iteration   2: 78198.084 ops/s
[info] # Warmup Iteration   3: 79156.632 ops/s
[info] # Warmup Iteration   4: 79529.368 ops/s
[info] # Warmup Iteration   5: 78994.550 ops/s
[info] Iteration   1: 79321.590 ops/s
[info]                  ·gc.alloc.rate:                   1450.641 MB/sec
[info]                  ·gc.alloc.rate.norm:              28784.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.239 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.821 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26644.599 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 79644.861 ops/s
[info]                  ·gc.alloc.rate:                   1456.468 MB/sec
[info]                  ·gc.alloc.rate.norm:              28784.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.234 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.765 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26536.897 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 79395.213 ops/s
[info]                  ·gc.alloc.rate:                   1451.565 MB/sec
[info]                  ·gc.alloc.rate.norm:              28784.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.651 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.738 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26645.843 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 79375.326 ops/s
[info]                  ·gc.alloc.rate:                   1451.273 MB/sec
[info]                  ·gc.alloc.rate.norm:              28784.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.105 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26678.299 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 79289.960 ops/s
[info]                  ·gc.alloc.rate:                   1449.778 MB/sec
[info]                  ·gc.alloc.rate.norm:              28784.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.413 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.491 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26733.333 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle":
[info]   79405.390 ±(99.9%) 540.121 ops/s [Average]
[info]   (min, avg, max) = (79289.960, 79405.390, 79644.861), stdev = 140.268
[info]   CI (99.9%): [78865.269, 79945.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1451.945 ±(99.9%) 10.087 MB/sec [Average]
[info]   (min, avg, max) = (1449.778, 1451.945, 1456.468), stdev = 2.619
[info]   CI (99.9%): [1441.858, 1462.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   28784.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (28784.005, 28784.005, 28784.006), stdev = 0.001
[info]   CI (99.9%): [28784.005, 28784.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.083), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0.907 ±(99.9%) 2.609 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.907, 1.651), stdev = 0.678
[info]   CI (99.9%): [≈ 0, 3.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   1344.184 ±(99.9%) 6.162 MB/sec [Average]
[info]   (min, avg, max) = (1342.765, 1344.184, 1346.491), stdev = 1.600
[info]   CI (99.9%): [1338.022, 1350.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   26647.794 ±(99.9%) 276.065 B/op [Average]
[info]   (min, avg, max) = (26536.897, 26647.794, 26733.333), stdev = 71.693
[info]   CI (99.9%): [26371.729, 26923.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 24.30% complete, ETA 01:41:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63907.242 ops/s
[info] # Warmup Iteration   2: 84405.206 ops/s
[info] # Warmup Iteration   3: 82927.182 ops/s
[info] # Warmup Iteration   4: 82238.896 ops/s
[info] # Warmup Iteration   5: 82613.181 ops/s
[info] Iteration   1: 82838.665 ops/s
[info]                  ·gc.alloc.rate:                   506.343 MB/sec
[info]                  ·gc.alloc.rate.norm:              9624.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.061 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.157 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.322 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9718.645 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 83280.478 ops/s
[info]                  ·gc.alloc.rate:                   509.237 MB/sec
[info]                  ·gc.alloc.rate.norm:              9624.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.571 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9668.124 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 83039.601 ops/s
[info]                  ·gc.alloc.rate:                   507.781 MB/sec
[info]                  ·gc.alloc.rate.norm:              9624.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.551 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67.301 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.076 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12775.812 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 82897.600 ops/s
[info]                  ·gc.alloc.rate:                   506.895 MB/sec
[info]                  ·gc.alloc.rate.norm:              9624.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.790 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.053 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12797.691 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 83056.657 ops/s
[info]                  ·gc.alloc.rate:      507.819 MB/sec
[info]                  ·gc.alloc.rate.norm: 9624.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce":
[info]   83022.600 ±(99.9%) 659.706 ops/s [Average]
[info]   (min, avg, max) = (82838.665, 83022.600, 83280.478), stdev = 171.324
[info]   CI (99.9%): [82362.894, 83682.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate":
[info]   507.615 ±(99.9%) 4.233 MB/sec [Average]
[info]   (min, avg, max) = (506.343, 507.615, 509.237), stdev = 1.099
[info]   CI (99.9%): [503.382, 511.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   9624.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9624.005, 9624.005, 9624.005), stdev = 0.001
[info]   CI (99.9%): [9624.004, 9624.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.731 ±(99.9%) 6.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.731, 3.551), stdev = 1.577
[info]   CI (99.9%): [≈ 0, 6.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   13.850 ±(99.9%) 115.075 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.850, 67.301), stdev = 29.885
[info]   CI (99.9%): [≈ 0, 128.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   474.204 ±(99.9%) 1067.698 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474.204, 674.076), stdev = 277.278
[info]   CI (99.9%): [≈ 0, 1541.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   8992.054 ±(99.9%) 20251.764 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8992.054, 12797.691), stdev = 5259.319
[info]   CI (99.9%): [≈ 0, 29243.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.483
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 24.50% complete, ETA 01:41:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9436.962 ops/s
[info] # Warmup Iteration   2: 113885.858 ops/s
[info] # Warmup Iteration   3: 112203.510 ops/s
[info] # Warmup Iteration   4: 113206.469 ops/s
[info] # Warmup Iteration   5: 113645.653 ops/s
[info] Iteration   1: 114052.795 ops/s
[info]                  ·gc.alloc.rate:                   348.897 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.402 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7059.137 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 114598.845 ops/s
[info]                  ·gc.alloc.rate:                   350.621 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.520 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7026.064 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 114362.737 ops/s
[info]                  ·gc.alloc.rate:                   349.870 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.034 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.465 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.443 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7040.068 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 115052.901 ops/s
[info]                  ·gc.alloc.rate:      352.043 MB/sec
[info]                  ·gc.alloc.rate.norm: 4816.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 114267.195 ops/s
[info]                  ·gc.alloc.rate:                   349.566 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.491 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34.324 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.223 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9275.050 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava":
[info]   114466.895 ±(99.9%) 1470.095 ops/s [Average]
[info]   (min, avg, max) = (114052.795, 114466.895, 115052.901), stdev = 381.779
[info]   CI (99.9%): [112996.799, 115936.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   350.199 ±(99.9%) 4.629 MB/sec [Average]
[info]   (min, avg, max) = (348.897, 350.199, 352.043), stdev = 1.202
[info]   CI (99.9%): [345.571, 354.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   4816.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4816.004, 4816.004, 4816.004), stdev = 0.001
[info]   CI (99.9%): [4816.003, 4816.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.505 ±(99.9%) 4.276 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.505, 2.491), stdev = 1.111
[info]   CI (99.9%): [≈ 0, 4.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   6.958 ±(99.9%) 58.913 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.958, 34.324), stdev = 15.300
[info]   CI (99.9%): [≈ 0, 65.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   441.518 ±(99.9%) 987.934 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 441.518, 673.223), stdev = 256.563
[info]   CI (99.9%): [≈ 0, 1429.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   6080.064 ±(99.9%) 13607.303 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6080.064, 9275.050), stdev = 3533.773
[info]   CI (99.9%): [≈ 0, 19687.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 3.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 24.70% complete, ETA 01:40:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 67742.905 ops/s
[info] # Warmup Iteration   2: 97437.874 ops/s
[info] # Warmup Iteration   3: 98119.746 ops/s
[info] # Warmup Iteration   4: 97898.635 ops/s
[info] # Warmup Iteration   5: 97850.050 ops/s
[info] Iteration   1: 98280.089 ops/s
[info]                  ·gc.alloc.rate:      324.600 MB/sec
[info]                  ·gc.alloc.rate.norm: 5200.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 99167.780 ops/s
[info]                  ·gc.alloc.rate:                   327.681 MB/sec
[info]                  ·gc.alloc.rate.norm:              5200.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.535 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8117.599 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 98707.153 ops/s
[info]                  ·gc.alloc.rate:                   326.024 MB/sec
[info]                  ·gc.alloc.rate.norm:              5200.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.332 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8156.653 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 99320.572 ops/s
[info]                  ·gc.alloc.rate:      328.078 MB/sec
[info]                  ·gc.alloc.rate.norm: 5200.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 99254.247 ops/s
[info]                  ·gc.alloc.rate:      327.864 MB/sec
[info]                  ·gc.alloc.rate.norm: 5200.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala":
[info]   98945.968 ±(99.9%) 1705.831 ops/s [Average]
[info]   (min, avg, max) = (98280.089, 98945.968, 99320.572), stdev = 442.999
[info]   CI (99.9%): [97240.137, 100651.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   326.849 ±(99.9%) 5.768 MB/sec [Average]
[info]   (min, avg, max) = (324.600, 326.849, 328.078), stdev = 1.498
[info]   CI (99.9%): [321.082, 332.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   5200.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5200.004, 5200.004, 5200.004), stdev = 0.001
[info]   CI (99.9%): [5200.004, 5200.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.066 ±(99.9%) 0.572 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.066, 0.332), stdev = 0.148
[info]   CI (99.9%): [≈ 0, 0.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   204.586 ±(99.9%) 1078.725 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.586, 511.535), stdev = 280.141
[info]   CI (99.9%): [≈ 0, 1283.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3254.850 ±(99.9%) 17161.969 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3254.850, 8156.653), stdev = 4456.909
[info]   CI (99.9%): [≈ 0, 20416.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time":
[info]   3.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 2.000), stdev = 0.894
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 24.90% complete, ETA 01:40:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 109360.597 ops/s
[info] # Warmup Iteration   2: 113535.083 ops/s
[info] # Warmup Iteration   3: 114095.118 ops/s
[info] # Warmup Iteration   4: 113568.484 ops/s
[info] # Warmup Iteration   5: 114211.233 ops/s
[info] Iteration   1: 114354.935 ops/s
[info]                  ·gc.alloc.rate:                   349.819 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.395 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7040.438 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 114803.681 ops/s
[info]                  ·gc.alloc.rate:      351.232 MB/sec
[info]                  ·gc.alloc.rate.norm: 4816.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 115712.981 ops/s
[info]                  ·gc.alloc.rate:                   354.025 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.037 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.500 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.466 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6957.771 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 115668.291 ops/s
[info]                  ·gc.alloc.rate:                   353.924 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.520 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6960.478 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 115548.805 ops/s
[info]                  ·gc.alloc.rate:      353.497 MB/sec
[info]                  ·gc.alloc.rate.norm: 4816.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala":
[info]   115217.739 ±(99.9%) 2337.297 ops/s [Average]
[info]   (min, avg, max) = (114354.935, 115217.739, 115712.981), stdev = 606.989
[info]   CI (99.9%): [112880.442, 117555.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   352.499 ±(99.9%) 7.240 MB/sec [Average]
[info]   (min, avg, max) = (349.819, 352.499, 354.025), stdev = 1.880
[info]   CI (99.9%): [345.259, 359.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   4816.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4816.004, 4816.004, 4816.004), stdev = 0.001
[info]   CI (99.9%): [4816.003, 4816.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.007 ±(99.9%) 0.063 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.037), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.100 ±(99.9%) 0.860 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.100, 0.500), stdev = 0.223
[info]   CI (99.9%): [≈ 0, 0.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   306.876 ±(99.9%) 1078.713 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.876, 511.520), stdev = 280.138
[info]   CI (99.9%): [≈ 0, 1385.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4191.737 ±(99.9%) 14735.102 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4191.737, 7040.438), stdev = 3826.659
[info]   CI (99.9%): [≈ 0, 18926.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 25.10% complete, ETA 01:40:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 106919.250 ops/s
[info] # Warmup Iteration   2: 113698.663 ops/s
[info] # Warmup Iteration   3: 116230.181 ops/s
[info] # Warmup Iteration   4: 115033.633 ops/s
[info] # Warmup Iteration   5: 114303.046 ops/s
[info] Iteration   1: 114062.734 ops/s
[info]                  ·gc.alloc.rate:                   259.085 MB/sec
[info]                  ·gc.alloc.rate.norm:              3576.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.406 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7058.642 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 116460.408 ops/s
[info]                  ·gc.alloc.rate:      264.579 MB/sec
[info]                  ·gc.alloc.rate.norm: 3576.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 115820.557 ops/s
[info]                  ·gc.alloc.rate:                   263.094 MB/sec
[info]                  ·gc.alloc.rate.norm:              3576.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.007 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.102 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.451 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6951.705 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 116159.504 ops/s
[info]                  ·gc.alloc.rate:      263.876 MB/sec
[info]                  ·gc.alloc.rate.norm: 3576.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 115868.662 ops/s
[info]                  ·gc.alloc.rate:                   263.211 MB/sec
[info]                  ·gc.alloc.rate.norm:              3576.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.472 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6948.886 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc":
[info]   115674.373 ±(99.9%) 3606.935 ops/s [Average]
[info]   (min, avg, max) = (114062.734, 115674.373, 116460.408), stdev = 936.710
[info]   CI (99.9%): [112067.438, 119281.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   262.769 ±(99.9%) 8.253 MB/sec [Average]
[info]   (min, avg, max) = (259.085, 262.769, 264.579), stdev = 2.143
[info]   CI (99.9%): [254.516, 271.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   3576.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3576.004, 3576.004, 3576.004), stdev = 0.001
[info]   CI (99.9%): [3576.003, 3576.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   0.001 ±(99.9%) 0.013 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.007), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   0.020 ±(99.9%) 0.175 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.102), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   306.866 ±(99.9%) 1078.676 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.866, 511.472), stdev = 280.129
[info]   CI (99.9%): [≈ 0, 1385.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   4191.847 ±(99.9%) 14735.916 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4191.847, 7058.642), stdev = 3826.871
[info]   CI (99.9%): [≈ 0, 18927.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 1.095
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 25.30% complete, ETA 01:40:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5791.499 ops/s
[info] # Warmup Iteration   2: 9605.134 ops/s
[info] # Warmup Iteration   3: 9760.656 ops/s
[info] # Warmup Iteration   4: 9751.796 ops/s
[info] # Warmup Iteration   5: 9868.824 ops/s
[info] Iteration   1: 9827.205 ops/s
[info]                  ·gc.alloc.rate:                   1616.026 MB/sec
[info]                  ·gc.alloc.rate.norm:              258840.042 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.334 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.091 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 215283.993 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 10019.127 ops/s
[info]                  ·gc.alloc.rate:                   1647.566 MB/sec
[info]                  ·gc.alloc.rate.norm:              258845.146 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.809 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2016.528 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 316811.827 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 10023.913 ops/s
[info]                  ·gc.alloc.rate:                   1648.346 MB/sec
[info]                  ·gc.alloc.rate.norm:              258856.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.805 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.949 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 211367.654 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 10016.733 ops/s
[info]                  ·gc.alloc.rate:                   1647.596 MB/sec
[info]                  ·gc.alloc.rate.norm:              258856.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.812 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021.746 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 317639.301 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 10017.905 ops/s
[info]                  ·gc.alloc.rate:                   1647.212 MB/sec
[info]                  ·gc.alloc.rate.norm:              258856.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.270 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.024 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 211996.305 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce":
[info]   9980.976 ±(99.9%) 331.172 ops/s [Average]
[info]   (min, avg, max) = (9827.205, 9980.976, 10023.913), stdev = 86.004
[info]   CI (99.9%): [9649.804, 10312.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate":
[info]   1641.349 ±(99.9%) 54.534 MB/sec [Average]
[info]   (min, avg, max) = (1616.026, 1641.349, 1648.346), stdev = 14.162
[info]   CI (99.9%): [1586.816, 1695.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   258850.662 ±(99.9%) 29.200 B/op [Average]
[info]   (min, avg, max) = (258840.042, 258850.662, 258856.041), stdev = 7.583
[info]   CI (99.9%): [258821.462, 258879.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.046, 0.062), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   7.206 ±(99.9%) 13.723 B/op [Average]
[info]   (min, avg, max) = (3.270, 7.206, 9.812), stdev = 3.564
[info]   CI (99.9%): [≈ 0, 20.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1615.467 ±(99.9%) 1418.989 MB/sec [Average]
[info]   (min, avg, max) = (1344.091, 1615.467, 2021.746), stdev = 368.507
[info]   CI (99.9%): [196.478, 3034.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   254619.816 ±(99.9%) 220145.408 B/op [Average]
[info]   (min, avg, max) = (211367.654, 254619.816, 317639.301), stdev = 57171.063
[info]   CI (99.9%): [34474.408, 474765.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 25.50% complete, ETA 01:39:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4993.686 ops/s
[info] # Warmup Iteration   2: 9937.055 ops/s
[info] # Warmup Iteration   3: 9907.387 ops/s
[info] # Warmup Iteration   4: 9878.011 ops/s
[info] # Warmup Iteration   5: 9882.023 ops/s
[info] Iteration   1: 9871.968 ops/s
[info]                  ·gc.alloc.rate:                   1527.123 MB/sec
[info]                  ·gc.alloc.rate.norm:              243480.041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.978 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 215555.370 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 10136.918 ops/s
[info]                  ·gc.alloc.rate:                   1567.960 MB/sec
[info]                  ·gc.alloc.rate.norm:              243490.069 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16.158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.360 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 315296.669 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 10027.199 ops/s
[info]                  ·gc.alloc.rate:                   1551.516 MB/sec
[info]                  ·gc.alloc.rate.norm:              243512.041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.166 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 212694.703 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 10099.962 ops/s
[info]                  ·gc.alloc.rate:                   1562.370 MB/sec
[info]                  ·gc.alloc.rate.norm:              243512.040 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.487 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.785 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 211313.544 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 10065.880 ops/s
[info]                  ·gc.alloc.rate:                   1556.875 MB/sec
[info]                  ·gc.alloc.rate.norm:              243512.044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.509 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.032 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 318300.978 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala":
[info]   10040.385 ±(99.9%) 394.837 ops/s [Average]
[info]   (min, avg, max) = (9871.968, 10040.385, 10136.918), stdev = 102.538
[info]   CI (99.9%): [9645.548, 10435.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1553.169 ±(99.9%) 60.831 MB/sec [Average]
[info]   (min, avg, max) = (1527.123, 1553.169, 1567.960), stdev = 15.798
[info]   CI (99.9%): [1492.338, 1614.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   243501.247 ±(99.9%) 58.531 B/op [Average]
[info]   (min, avg, max) = (243480.041, 243501.247, 243512.044), stdev = 15.200
[info]   CI (99.9%): [243442.716, 243559.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.164 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   5.831 ±(99.9%) 25.508 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.831, 16.158), stdev = 6.624
[info]   CI (99.9%): [≈ 0, 31.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1625.664 ±(99.9%) 1430.800 MB/sec [Average]
[info]   (min, avg, max) = (1351.978, 1625.664, 2035.032), stdev = 371.574
[info]   CI (99.9%): [194.865, 3056.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   254632.253 ±(99.9%) 218641.899 B/op [Average]
[info]   (min, avg, max) = (211313.544, 254632.253, 318300.978), stdev = 56780.607
[info]   CI (99.9%): [35990.354, 473274.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 25.70% complete, ETA 01:39:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 176736.220 ops/s
[info] # Warmup Iteration   2: 187209.224 ops/s
[info] # Warmup Iteration   3: 186942.681 ops/s
[info] # Warmup Iteration   4: 188722.387 ops/s
[info] # Warmup Iteration   5: 186205.052 ops/s
[info] Iteration   1: 185116.290 ops/s
[info]                  ·gc.alloc.rate:                   481.618 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.395 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4349.246 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 189076.819 ops/s
[info]                  ·gc.alloc.rate:                   491.963 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.348 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.490 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4258.582 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 188932.903 ops/s
[info]                  ·gc.alloc.rate:                   491.564 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.671 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22.260 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.917 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5632.135 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 188876.254 ops/s
[info]                  ·gc.alloc.rate:                   491.423 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.520 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.931 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5633.865 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 188913.451 ops/s
[info]                  ·gc.alloc.rate:      491.527 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala":
[info]   188183.143 ±(99.9%) 6608.129 ops/s [Average]
[info]   (min, avg, max) = (185116.290, 188183.143, 189076.819), stdev = 1716.110
[info]   CI (99.9%): [181575.015, 194791.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   489.619 ±(99.9%) 17.242 MB/sec [Average]
[info]   (min, avg, max) = (481.618, 489.619, 491.963), stdev = 4.478
[info]   CI (99.9%): [472.377, 506.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.002, 4096.002, 4096.002), stdev = 0.001
[info]   CI (99.9%): [4096.002, 4096.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.555 ±(99.9%) 4.557 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.555, 2.671), stdev = 1.183
[info]   CI (99.9%): [≈ 0, 5.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4.626 ±(99.9%) 37.970 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.626, 22.260), stdev = 9.861
[info]   CI (99.9%): [≈ 0, 42.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   474.946 ±(99.9%) 1070.281 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474.946, 675.931), stdev = 277.949
[info]   CI (99.9%): [≈ 0, 1545.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3974.766 ±(99.9%) 8931.301 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3974.766, 5633.865), stdev = 2319.431
[info]   CI (99.9%): [≈ 0, 12906.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.140
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 25.90% complete, ETA 01:39:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2559.630 ops/s
[info] # Warmup Iteration   2: 5790.825 ops/s
[info] # Warmup Iteration   3: 5868.867 ops/s
[info] # Warmup Iteration   4: 5960.255 ops/s
[info] # Warmup Iteration   5: 6012.051 ops/s
[info] Iteration   1: 5987.210 ops/s
[info]                  ·gc.alloc.rate:                   1590.521 MB/sec
[info]                  ·gc.alloc.rate.norm:              418040.068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.699 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 532944.523 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 6030.708 ops/s
[info]                  ·gc.alloc.rate:                   1602.030 MB/sec
[info]                  ·gc.alloc.rate.norm:              418040.078 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.861 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.227 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 353377.411 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 5998.514 ops/s
[info]                  ·gc.alloc.rate:                   1592.949 MB/sec
[info]                  ·gc.alloc.rate.norm:              418040.073 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.955 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 355582.763 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 6033.814 ops/s
[info]                  ·gc.alloc.rate:                   1602.303 MB/sec
[info]                  ·gc.alloc.rate.norm:              418040.068 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43.430 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034.177 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 530715.653 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 6025.911 ops/s
[info]                  ·gc.alloc.rate:                   1600.288 MB/sec
[info]                  ·gc.alloc.rate.norm:              418040.068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1357.097 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 354511.926 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson":
[info]   6015.231 ±(99.9%) 80.853 ops/s [Average]
[info]   (min, avg, max) = (5987.210, 6015.231, 6033.814), stdev = 20.997
[info]   CI (99.9%): [5934.378, 6096.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1597.618 ±(99.9%) 21.152 MB/sec [Average]
[info]   (min, avg, max) = (1590.521, 1597.618, 1602.303), stdev = 5.493
[info]   CI (99.9%): [1576.466, 1618.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   418040.071 ±(99.9%) 0.018 B/op [Average]
[info]   (min, avg, max) = (418040.068, 418040.071, 418040.078), stdev = 0.005
[info]   CI (99.9%): [418040.053, 418040.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.278 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.166), stdev = 0.072
[info]   CI (99.9%): [≈ 0, 0.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   10.858 ±(99.9%) 72.414 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.858, 43.430), stdev = 18.806
[info]   CI (99.9%): [≈ 0, 83.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1625.631 ±(99.9%) 1424.745 MB/sec [Average]
[info]   (min, avg, max) = (1354.227, 1625.631, 2034.177), stdev = 370.002
[info]   CI (99.9%): [200.886, 3050.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   425426.455 ±(99.9%) 374048.124 B/op [Average]
[info]   (min, avg, max) = (353377.411, 425426.455, 532944.523), stdev = 97139.110
[info]   CI (99.9%): [51378.331, 799474.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 26.10% complete, ETA 01:39:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6381.027 ops/s
[info] # Warmup Iteration   2: 9561.289 ops/s
[info] # Warmup Iteration   3: 9678.385 ops/s
[info] # Warmup Iteration   4: 9657.073 ops/s
[info] # Warmup Iteration   5: 9721.280 ops/s
[info] Iteration   1: 9609.495 ops/s
[info]                  ·gc.alloc.rate:                   1545.264 MB/sec
[info]                  ·gc.alloc.rate.norm:              253152.042 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.817 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.305 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 220557.648 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 9675.911 ops/s
[info]                  ·gc.alloc.rate:                   1556.094 MB/sec
[info]                  ·gc.alloc.rate.norm:              253159.134 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.771 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 219053.691 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 9695.954 ops/s
[info]                  ·gc.alloc.rate:                   1559.258 MB/sec
[info]                  ·gc.alloc.rate.norm:              253176.042 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13.515 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021.358 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 328207.099 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 9698.262 ops/s
[info]                  ·gc.alloc.rate:                   1559.810 MB/sec
[info]                  ·gc.alloc.rate.norm:              253176.042 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.715 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 218912.666 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 9499.541 ops/s
[info]                  ·gc.alloc.rate:                   1527.777 MB/sec
[info]                  ·gc.alloc.rate.norm:              253176.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.449 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.820 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 223685.914 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle":
[info]   9635.833 ±(99.9%) 324.388 ops/s [Average]
[info]   (min, avg, max) = (9499.541, 9635.833, 9698.262), stdev = 84.243
[info]   CI (99.9%): [9311.445, 9960.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1549.641 ±(99.9%) 52.188 MB/sec [Average]
[info]   (min, avg, max) = (1527.777, 1549.641, 1559.810), stdev = 13.553
[info]   CI (99.9%): [1497.452, 1601.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   253167.861 ±(99.9%) 44.209 B/op [Average]
[info]   (min, avg, max) = (253152.042, 253167.861, 253176.046), stdev = 11.481
[info]   CI (99.9%): [253123.652, 253212.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.083), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   6.110 ±(99.9%) 19.272 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.110, 13.515), stdev = 5.005
[info]   CI (99.9%): [≈ 0, 25.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   1482.531 ±(99.9%) 1159.880 MB/sec [Average]
[info]   (min, avg, max) = (1346.305, 1482.531, 2021.358), stdev = 301.217
[info]   CI (99.9%): [322.652, 2642.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   242083.404 ±(99.9%) 185535.192 B/op [Average]
[info]   (min, avg, max) = (218912.666, 242083.404, 328207.099), stdev = 48182.900
[info]   CI (99.9%): [56548.212, 427618.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 26.31% complete, ETA 01:38:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17615.418 ops/s
[info] # Warmup Iteration   2: 25666.096 ops/s
[info] # Warmup Iteration   3: 26042.873 ops/s
[info] # Warmup Iteration   4: 26207.019 ops/s
[info] # Warmup Iteration   5: 26058.595 ops/s
[info] Iteration   1: 25902.268 ops/s
[info]                  ·gc.alloc.rate:                   1342.375 MB/sec
[info]                  ·gc.alloc.rate.norm:              81592.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 81631.008 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 25639.106 ops/s
[info]                  ·gc.alloc.rate:                   1329.152 MB/sec
[info]                  ·gc.alloc.rate.norm:              81592.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.327 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 41210.410 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 25522.441 ops/s
[info]                  ·gc.alloc.rate:                   1322.763 MB/sec
[info]                  ·gc.alloc.rate.norm:              81592.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.851 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.760 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 82887.162 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 25976.188 ops/s
[info]                  ·gc.alloc.rate:                   1346.361 MB/sec
[info]                  ·gc.alloc.rate.norm:              81592.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.567 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.500 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 81479.234 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 26280.977 ops/s
[info]                  ·gc.alloc.rate:                   1362.132 MB/sec
[info]                  ·gc.alloc.rate.norm:              81592.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.247 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.799 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80613.668 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce":
[info]   25864.196 ±(99.9%) 1147.402 ops/s [Average]
[info]   (min, avg, max) = (25522.441, 25864.196, 26280.977), stdev = 297.977
[info]   CI (99.9%): [24716.794, 27011.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1340.557 ±(99.9%) 59.317 MB/sec [Average]
[info]   (min, avg, max) = (1322.763, 1340.557, 1362.132), stdev = 15.404
[info]   CI (99.9%): [1281.240, 1399.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   81592.016 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (81592.016, 81592.016, 81592.017), stdev = 0.001
[info]   CI (99.9%): [81592.014, 81592.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.204 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.125), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2.533 ±(99.9%) 12.412 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.533, 7.567), stdev = 3.223
[info]   CI (99.9%): [≈ 0, 14.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1209.680 ±(99.9%) 1158.854 MB/sec [Average]
[info]   (min, avg, max) = (671.327, 1209.680, 1345.799), stdev = 300.951
[info]   CI (99.9%): [50.826, 2368.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   73564.297 ±(99.9%) 69714.244 B/op [Average]
[info]   (min, avg, max) = (41210.410, 73564.297, 82887.162), stdev = 18104.568
[info]   CI (99.9%): [3850.053, 143278.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 26.51% complete, ETA 01:38:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17330.309 ops/s
[info] # Warmup Iteration   2: 31297.415 ops/s
[info] # Warmup Iteration   3: 30659.598 ops/s
[info] # Warmup Iteration   4: 31445.486 ops/s
[info] # Warmup Iteration   5: 31566.421 ops/s
[info] Iteration   1: 31152.020 ops/s
[info]                  ·gc.alloc.rate:                   1522.519 MB/sec
[info]                  ·gc.alloc.rate.norm:              76944.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.155 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.675 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68310.044 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 30660.499 ops/s
[info]                  ·gc.alloc.rate:                   1498.533 MB/sec
[info]                  ·gc.alloc.rate.norm:              76944.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.274 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.381 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 104252.396 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 31357.041 ops/s
[info]                  ·gc.alloc.rate:                   1532.648 MB/sec
[info]                  ·gc.alloc.rate.norm:              76944.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.147 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68032.908 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 31607.907 ops/s
[info]                  ·gc.alloc.rate:                   1544.872 MB/sec
[info]                  ·gc.alloc.rate.norm:              76944.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.073 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356.196 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67546.815 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 31609.371 ops/s
[info]                  ·gc.alloc.rate:                   1544.953 MB/sec
[info]                  ·gc.alloc.rate.norm:              76944.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356.891 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67577.846 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala":
[info]   31277.367 ±(99.9%) 1518.528 ops/s [Average]
[info]   (min, avg, max) = (30660.499, 31277.367, 31609.371), stdev = 394.357
[info]   CI (99.9%): [29758.839, 32795.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1528.705 ±(99.9%) 74.307 MB/sec [Average]
[info]   (min, avg, max) = (1498.533, 1528.705, 1544.953), stdev = 19.297
[info]   CI (99.9%): [1454.398, 1603.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   76944.013 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (76944.013, 76944.013, 76944.014), stdev = 0.001
[info]   CI (99.9%): [76944.011, 76944.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.050, 0.083), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2.526 ±(99.9%) 4.742 B/op [Average]
[info]   (min, avg, max) = (1.036, 2.526, 4.274), stdev = 1.231
[info]   CI (99.9%): [≈ 0, 7.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1490.058 ±(99.9%) 1163.112 MB/sec [Average]
[info]   (min, avg, max) = (1351.675, 1490.058, 2030.381), stdev = 302.056
[info]   CI (99.9%): [326.946, 2653.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   75144.002 ±(99.9%) 62670.138 B/op [Average]
[info]   (min, avg, max) = (67546.815, 75144.002, 104252.396), stdev = 16275.236
[info]   CI (99.9%): [12473.864, 137814.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 26.71% complete, ETA 01:38:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 331636.207 ops/s
[info] # Warmup Iteration   2: 351592.445 ops/s
[info] # Warmup Iteration   3: 354492.364 ops/s
[info] # Warmup Iteration   4: 353521.146 ops/s
[info] # Warmup Iteration   5: 358559.441 ops/s
[info] Iteration   1: 360875.426 ops/s
[info]                  ·gc.alloc.rate:                   797.624 MB/sec
[info]                  ·gc.alloc.rate.norm:              3480.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.804 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2948.506 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 361589.683 ops/s
[info]                  ·gc.alloc.rate:                   799.285 MB/sec
[info]                  ·gc.alloc.rate.norm:              3480.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.937 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2934.248 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 359683.862 ops/s
[info]                  ·gc.alloc.rate:                   795.095 MB/sec
[info]                  ·gc.alloc.rate.norm:              3480.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.895 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2949.532 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 345102.514 ops/s
[info]                  ·gc.alloc.rate:                   762.854 MB/sec
[info]                  ·gc.alloc.rate.norm:              3480.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.380 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.465 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6142.327 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 357718.238 ops/s
[info]                  ·gc.alloc.rate:                   791.033 MB/sec
[info]                  ·gc.alloc.rate.norm:              3480.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.484 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2962.866 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala":
[info]   356993.945 ±(99.9%) 26212.189 ops/s [Average]
[info]   (min, avg, max) = (345102.514, 356993.945, 361589.683), stdev = 6807.222
[info]   CI (99.9%): [330781.755, 383206.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   789.178 ±(99.9%) 57.916 MB/sec [Average]
[info]   (min, avg, max) = (762.854, 789.178, 799.285), stdev = 15.041
[info]   CI (99.9%): [731.262, 847.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3480.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3480.001, 3480.001, 3480.001), stdev = 0.001
[info]   CI (99.9%): [3480.001, 3480.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.083), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.112 ±(99.9%) 0.602 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.112, 0.380), stdev = 0.156
[info]   CI (99.9%): [≈ 0, 0.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   808.717 ±(99.9%) 1157.548 MB/sec [Average]
[info]   (min, avg, max) = (673.484, 808.717, 1346.465), stdev = 300.612
[info]   CI (99.9%): [≈ 0, 1966.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3587.496 ±(99.9%) 5499.605 B/op [Average]
[info]   (min, avg, max) = (2934.248, 3587.496, 6142.327), stdev = 1428.230
[info]   CI (99.9%): [≈ 0, 9087.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 26.91% complete, ETA 01:38:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 376231.732 ops/s
[info] # Warmup Iteration   2: 398845.942 ops/s
[info] # Warmup Iteration   3: 407660.080 ops/s
[info] # Warmup Iteration   4: 407500.140 ops/s
[info] # Warmup Iteration   5: 408434.465 ops/s
[info] Iteration   1: 387475.566 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 408584.577 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 408767.832 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 407867.948 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 407772.083 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc":
[info]   404093.601 ±(99.9%) 35810.642 ops/s [Average]
[info]   (min, avg, max) = (387475.566, 404093.601, 408767.832), stdev = 9299.910
[info]   CI (99.9%): [368282.959, 439904.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 27.11% complete, ETA 01:37:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18814.602 ops/s
[info] # Warmup Iteration   2: 28400.722 ops/s
[info] # Warmup Iteration   3: 28850.492 ops/s
[info] # Warmup Iteration   4: 28251.661 ops/s
[info] # Warmup Iteration   5: 28794.670 ops/s
[info] Iteration   1: 28987.272 ops/s
[info]                  ·gc.alloc.rate:                   1524.944 MB/sec
[info]                  ·gc.alloc.rate.norm:              82824.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.390 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.399 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72692.204 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 28863.165 ops/s
[info]                  ·gc.alloc.rate:                   1518.528 MB/sec
[info]                  ·gc.alloc.rate.norm:              82824.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.135 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.584 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73009.483 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 28265.080 ops/s
[info]                  ·gc.alloc.rate:                   1486.870 MB/sec
[info]                  ·gc.alloc.rate.norm:              82824.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.954 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.592 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 74620.129 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 28596.129 ops/s
[info]                  ·gc.alloc.rate:                   1504.385 MB/sec
[info]                  ·gc.alloc.rate.norm:              82824.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.437 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2013.195 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 110836.580 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 28940.077 ops/s
[info]                  ·gc.alloc.rate:                   1522.591 MB/sec
[info]                  ·gc.alloc.rate.norm:              82824.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.396 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.164 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73118.135 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson":
[info]   28730.345 ±(99.9%) 1158.599 ops/s [Average]
[info]   (min, avg, max) = (28265.080, 28730.345, 28987.272), stdev = 300.885
[info]   CI (99.9%): [27571.745, 29888.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1511.464 ±(99.9%) 61.200 MB/sec [Average]
[info]   (min, avg, max) = (1486.870, 1511.464, 1524.944), stdev = 15.893
[info]   CI (99.9%): [1450.264, 1572.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   82824.014 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (82824.014, 82824.014, 82824.015), stdev = 0.001
[info]   CI (99.9%): [82824.013, 82824.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.125), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3.662 ±(99.9%) 8.035 B/op [Average]
[info]   (min, avg, max) = (1.135, 3.662, 6.954), stdev = 2.087
[info]   CI (99.9%): [≈ 0, 11.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1474.787 ±(99.9%) 1158.999 MB/sec [Average]
[info]   (min, avg, max) = (1338.399, 1474.787, 2013.195), stdev = 300.988
[info]   CI (99.9%): [315.788, 2633.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   80855.306 ±(99.9%) 64600.540 B/op [Average]
[info]   (min, avg, max) = (72692.204, 80855.306, 110836.580), stdev = 16776.555
[info]   CI (99.9%): [16254.766, 145455.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 27.31% complete, ETA 01:37:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9080.587 ops/s
[info] # Warmup Iteration   2: 10686.111 ops/s
[info] # Warmup Iteration   3: 10594.306 ops/s
[info] # Warmup Iteration   4: 10556.002 ops/s
[info] # Warmup Iteration   5: 10585.176 ops/s
[info] Iteration   1: 10671.579 ops/s
[info]                  ·gc.alloc.rate:                   596.604 MB/sec
[info]                  ·gc.alloc.rate.norm:              88016.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.070 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.397 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75445.603 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 10717.688 ops/s
[info]                  ·gc.alloc.rate:                   599.297 MB/sec
[info]                  ·gc.alloc.rate.norm:              88016.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.745 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     403.140 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676.071 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 99291.412 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 10717.787 ops/s
[info]                  ·gc.alloc.rate:                   599.231 MB/sec
[info]                  ·gc.alloc.rate.norm:              88016.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.113 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.870 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 99272.889 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 10713.891 ops/s
[info]                  ·gc.alloc.rate:                   598.975 MB/sec
[info]                  ·gc.alloc.rate.norm:              88016.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.836 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 99016.414 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 10656.417 ops/s
[info]                  ·gc.alloc.rate:                   595.758 MB/sec
[info]                  ·gc.alloc.rate.norm:              88016.048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.148 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.863 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 99555.203 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle":
[info]   10695.472 ±(99.9%) 112.708 ops/s [Average]
[info]   (min, avg, max) = (10656.417, 10695.472, 10717.787), stdev = 29.270
[info]   CI (99.9%): [10582.764, 10808.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   597.973 ±(99.9%) 6.421 MB/sec [Average]
[info]   (min, avg, max) = (595.758, 597.973, 599.297), stdev = 1.668
[info]   CI (99.9%): [591.552, 604.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   88016.041 ±(99.9%) 0.017 B/op [Average]
[info]   (min, avg, max) = (88016.038, 88016.041, 88016.048), stdev = 0.004
[info]   CI (99.9%): [88016.024, 88016.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0.570 ±(99.9%) 4.683 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.570, 2.745), stdev = 1.216
[info]   CI (99.9%): [≈ 0, 5.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   83.694 ±(99.9%) 687.700 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 83.694, 403.140), stdev = 178.594
[info]   CI (99.9%): [≈ 0, 771.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   642.207 ±(99.9%) 281.610 MB/sec [Average]
[info]   (min, avg, max) = (511.397, 642.207, 676.071), stdev = 73.133
[info]   CI (99.9%): [360.598, 923.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   94516.304 ±(99.9%) 41057.683 B/op [Average]
[info]   (min, avg, max) = (75445.603, 94516.304, 99555.203), stdev = 10662.550
[info]   CI (99.9%): [53458.621, 135573.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.140
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 27.51% complete, ETA 01:37:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 81238.779 ops/s
[info] # Warmup Iteration   2: 96617.804 ops/s
[info] # Warmup Iteration   3: 96896.453 ops/s
[info] # Warmup Iteration   4: 97750.599 ops/s
[info] # Warmup Iteration   5: 95358.386 ops/s
[info] Iteration   1: 95128.705 ops/s
[info]                  ·gc.alloc.rate:                   1549.413 MB/sec
[info]                  ·gc.alloc.rate.norm:              25640.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.689 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2013.953 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33327.313 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 95431.146 ops/s
[info]                  ·gc.alloc.rate:                   1554.468 MB/sec
[info]                  ·gc.alloc.rate.norm:              25640.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.687 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.406 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22158.662 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 97726.173 ops/s
[info]                  ·gc.alloc.rate:                   1591.728 MB/sec
[info]                  ·gc.alloc.rate.norm:              25640.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.670 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.529 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21658.056 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 96642.299 ops/s
[info]                  ·gc.alloc.rate:                   1574.014 MB/sec
[info]                  ·gc.alloc.rate.norm:              25640.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.356 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.065 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32889.696 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 97495.990 ops/s
[info]                  ·gc.alloc.rate:                   1587.868 MB/sec
[info]                  ·gc.alloc.rate.norm:              25640.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.372 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21772.757 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce":
[info]   96484.862 ±(99.9%) 4530.647 ops/s [Average]
[info]   (min, avg, max) = (95128.705, 96484.862, 97726.173), stdev = 1176.595
[info]   CI (99.9%): [91954.215, 101015.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1571.498 ±(99.9%) 73.600 MB/sec [Average]
[info]   (min, avg, max) = (1549.413, 1571.498, 1591.728), stdev = 19.114
[info]   CI (99.9%): [1497.898, 1645.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   25640.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (25640.004, 25640.004, 25640.005), stdev = 0.001
[info]   CI (99.9%): [25640.004, 25640.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.083), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.680 ±(99.9%) 1.846 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.680, 1.356), stdev = 0.479
[info]   CI (99.9%): [≈ 0, 2.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1613.865 ±(99.9%) 1415.385 MB/sec [Average]
[info]   (min, avg, max) = (1343.406, 1613.865, 2019.065), stdev = 367.571
[info]   CI (99.9%): [198.480, 3029.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   26361.297 ±(99.9%) 23735.611 B/op [Average]
[info]   (min, avg, max) = (21658.056, 26361.297, 33327.313), stdev = 6164.063
[info]   CI (99.9%): [2625.686, 50096.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 27.71% complete, ETA 01:36:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 40017.593 ops/s
[info] # Warmup Iteration   2: 479176.357 ops/s
[info] # Warmup Iteration   3: 483703.543 ops/s
[info] # Warmup Iteration   4: 480103.246 ops/s
[info] # Warmup Iteration   5: 485999.239 ops/s
[info] Iteration   1: 485581.315 ops/s
[info]                  ·gc.alloc.rate:                   503.369 MB/sec
[info]                  ·gc.alloc.rate.norm:              1632.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.025 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.081 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.404 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1658.050 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 489869.574 ops/s
[info]                  ·gc.alloc.rate:      507.926 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 485911.830 ops/s
[info]                  ·gc.alloc.rate:                   503.835 MB/sec
[info]                  ·gc.alloc.rate.norm:              1632.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.542 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.234 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.392 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2181.221 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 487905.662 ops/s
[info]                  ·gc.alloc.rate:                   505.958 MB/sec
[info]                  ·gc.alloc.rate.norm:              1632.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.447 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2172.246 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 485678.160 ops/s
[info]                  ·gc.alloc.rate:                   503.482 MB/sec
[info]                  ·gc.alloc.rate.norm:              1632.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.926 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2177.999 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava":
[info]   486989.308 ±(99.9%) 7203.418 ops/s [Average]
[info]   (min, avg, max) = (485581.315, 486989.308, 489869.574), stdev = 1870.705
[info]   CI (99.9%): [479785.890, 494192.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   504.914 ±(99.9%) 7.644 MB/sec [Average]
[info]   (min, avg, max) = (503.369, 504.914, 507.926), stdev = 1.985
[info]   CI (99.9%): [497.270, 512.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1632.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1632.001, 1632.001, 1632.001), stdev = 0.001
[info]   CI (99.9%): [1632.001, 1632.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.513 ±(99.9%) 4.367 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.513, 2.542), stdev = 1.134
[info]   CI (99.9%): [≈ 0, 4.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1.663 ±(99.9%) 14.146 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.663, 8.234), stdev = 3.674
[info]   CI (99.9%): [≈ 0, 15.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   506.033 ±(99.9%) 1122.076 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506.033, 673.447), stdev = 291.400
[info]   CI (99.9%): [≈ 0, 1628.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   1637.903 ±(99.9%) 3630.420 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1637.903, 2181.221), stdev = 942.809
[info]   CI (99.9%): [≈ 0, 5268.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.140
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 27.91% complete, ETA 01:36:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 180408.096 ops/s
[info] # Warmup Iteration   2: 275731.327 ops/s
[info] # Warmup Iteration   3: 274884.368 ops/s
[info] # Warmup Iteration   4: 277199.677 ops/s
[info] # Warmup Iteration   5: 276191.803 ops/s
[info] Iteration   1: 276244.931 ops/s
[info]                  ·gc.alloc.rate:                   390.196 MB/sec
[info]                  ·gc.alloc.rate.norm:              2224.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.337 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2914.472 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 276472.884 ops/s
[info]                  ·gc.alloc.rate:                   390.574 MB/sec
[info]                  ·gc.alloc.rate.norm:              2224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.118 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.413 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2912.079 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 276736.430 ops/s
[info]                  ·gc.alloc.rate:      390.938 MB/sec
[info]                  ·gc.alloc.rate.norm: 2224.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 275773.258 ops/s
[info]                  ·gc.alloc.rate:                   389.582 MB/sec
[info]                  ·gc.alloc.rate.norm:              2224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.832 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.564 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3845.164 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 277098.184 ops/s
[info]                  ·gc.alloc.rate:      391.408 MB/sec
[info]                  ·gc.alloc.rate.norm: 2224.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala":
[info]   276465.137 ±(99.9%) 1926.858 ops/s [Average]
[info]   (min, avg, max) = (275773.258, 276465.137, 277098.184), stdev = 500.399
[info]   CI (99.9%): [274538.280, 278391.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   390.540 ±(99.9%) 2.688 MB/sec [Average]
[info]   (min, avg, max) = (389.582, 390.540, 391.408), stdev = 0.698
[info]   CI (99.9%): [387.852, 393.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2224.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2224.001, 2224.001, 2224.002), stdev = 0.001
[info]   CI (99.9%): [2224.001, 2224.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.244 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.146), stdev = 0.063
[info]   CI (99.9%): [≈ 0, 0.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.190 ±(99.9%) 1.395 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.190, 0.832), stdev = 0.362
[info]   CI (99.9%): [≈ 0, 1.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   339.263 ±(99.9%) 1219.507 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339.263, 673.564), stdev = 316.702
[info]   CI (99.9%): [≈ 0, 1558.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1934.343 ±(99.9%) 6955.510 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1934.343, 3845.164), stdev = 1806.324
[info]   CI (99.9%): [≈ 0, 8889.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 0.837
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 28.11% complete, ETA 01:36:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 576434.639 ops/s
[info] # Warmup Iteration   2: 589792.598 ops/s
[info] # Warmup Iteration   3: 604422.113 ops/s
[info] # Warmup Iteration   4: 611380.342 ops/s
[info] # Warmup Iteration   5: 615343.985 ops/s
[info] Iteration   1: 615044.921 ops/s
[info]                  ·gc.alloc.rate:                   400.038 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.388 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1309.030 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 614016.108 ops/s
[info]                  ·gc.alloc.rate:                   399.504 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.605 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1311.335 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 622357.182 ops/s
[info]                  ·gc.alloc.rate:                   404.806 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.403 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1293.648 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 629425.222 ops/s
[info]                  ·gc.alloc.rate:      409.416 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 623659.797 ops/s
[info]                  ·gc.alloc.rate:                   405.787 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.340 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.429 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.770 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1702.777 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala":
[info]   620900.646 ±(99.9%) 24662.855 ops/s [Average]
[info]   (min, avg, max) = (614016.108, 620900.646, 629425.222), stdev = 6404.865
[info]   CI (99.9%): [596237.791, 645563.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   403.910 ±(99.9%) 15.998 MB/sec [Average]
[info]   (min, avg, max) = (399.504, 403.910, 409.416), stdev = 4.155
[info]   CI (99.9%): [387.912, 419.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1024.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1024.001, 1024.001, 1024.001), stdev = 0.001
[info]   CI (99.9%): [1024.001, 1024.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.668 ±(99.9%) 5.752 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.668, 3.340), stdev = 1.494
[info]   CI (99.9%): [≈ 0, 6.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.686 ±(99.9%) 14.516 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.686, 8.429), stdev = 3.770
[info]   CI (99.9%): [≈ 0, 16.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   441.833 ±(99.9%) 989.289 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 441.833, 674.770), stdev = 256.915
[info]   CI (99.9%): [≈ 0, 1431.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1123.358 ±(99.9%) 2507.703 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1123.358, 1702.777), stdev = 651.243
[info]   CI (99.9%): [≈ 0, 3631.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.095
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 28.31% complete, ETA 01:36:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 46094.954 ops/s
[info] # Warmup Iteration   2: 76494.845 ops/s
[info] # Warmup Iteration   3: 74803.208 ops/s
[info] # Warmup Iteration   4: 76532.089 ops/s
[info] # Warmup Iteration   5: 77049.257 ops/s
[info] Iteration   1: 76963.438 ops/s
[info]                  ·gc.alloc.rate:                   3369.861 MB/sec
[info]                  ·gc.alloc.rate.norm:              68920.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.426 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2717.930 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55586.800 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 76748.840 ops/s
[info]                  ·gc.alloc.rate:                   3359.331 MB/sec
[info]                  ·gc.alloc.rate.norm:              68920.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.281 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3398.956 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69732.954 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 76765.250 ops/s
[info]                  ·gc.alloc.rate:                   3360.818 MB/sec
[info]                  ·gc.alloc.rate.norm:              68920.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.134 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3402.861 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69782.163 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 76550.518 ops/s
[info]                  ·gc.alloc.rate:                   3351.571 MB/sec
[info]                  ·gc.alloc.rate.norm:              68920.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.428 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3402.981 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69977.189 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 75500.328 ops/s
[info]                  ·gc.alloc.rate:                   3305.449 MB/sec
[info]                  ·gc.alloc.rate.norm:              68920.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.169 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3405.523 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71006.590 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson":
[info]   76505.675 ±(99.9%) 2236.018 ops/s [Average]
[info]   (min, avg, max) = (75500.328, 76505.675, 76963.438), stdev = 580.687
[info]   CI (99.9%): [74269.657, 78741.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3349.406 ±(99.9%) 97.871 MB/sec [Average]
[info]   (min, avg, max) = (3305.449, 3349.406, 3369.861), stdev = 25.417
[info]   CI (99.9%): [3251.535, 3447.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   68920.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (68920.005, 68920.005, 68920.006), stdev = 0.001
[info]   CI (99.9%): [68920.005, 68920.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.104), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.287 ±(99.9%) 3.321 B/op [Average]
[info]   (min, avg, max) = (0.426, 1.287, 2.169), stdev = 0.863
[info]   CI (99.9%): [≈ 0, 4.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3265.650 ±(99.9%) 1179.043 MB/sec [Average]
[info]   (min, avg, max) = (2717.930, 3265.650, 3405.523), stdev = 306.194
[info]   CI (99.9%): [2086.608, 4444.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   67217.139 ±(99.9%) 25114.293 B/op [Average]
[info]   (min, avg, max) = (55586.800, 67217.139, 71006.590), stdev = 6522.102
[info]   CI (99.9%): [42102.846, 92331.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 28.51% complete, ETA 01:35:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 167920.416 ops/s
[info] # Warmup Iteration   2: 192907.589 ops/s
[info] # Warmup Iteration   3: 193297.565 ops/s
[info] # Warmup Iteration   4: 191048.129 ops/s
[info] # Warmup Iteration   5: 187902.949 ops/s
[info] Iteration   1: 186800.151 ops/s
[info]                  ·gc.alloc.rate:                   1418.019 MB/sec
[info]                  ·gc.alloc.rate.norm:              11952.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.351 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11314.599 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 194854.381 ops/s
[info]                  ·gc.alloc.rate:                   1479.201 MB/sec
[info]                  ·gc.alloc.rate.norm:              11952.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.672 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.869 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10850.436 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 194661.545 ops/s
[info]                  ·gc.alloc.rate:                   1477.921 MB/sec
[info]                  ·gc.alloc.rate.norm:              11952.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.337 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.855 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10867.803 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 194709.992 ops/s
[info]                  ·gc.alloc.rate:                   1478.247 MB/sec
[info]                  ·gc.alloc.rate.norm:              11952.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.336 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.783 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10880.997 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 194267.889 ops/s
[info]                  ·gc.alloc.rate:                   1474.870 MB/sec
[info]                  ·gc.alloc.rate.norm:              11952.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.506 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021.422 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16381.133 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle":
[info]   193058.792 ±(99.9%) 13498.130 ops/s [Average]
[info]   (min, avg, max) = (186800.151, 193058.792, 194854.381), stdev = 3505.421
[info]   CI (99.9%): [179560.662, 206556.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1465.652 ±(99.9%) 102.723 MB/sec [Average]
[info]   (min, avg, max) = (1418.019, 1465.652, 1479.201), stdev = 26.677
[info]   CI (99.9%): [1362.929, 1568.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   11952.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11952.002, 11952.002, 11952.002), stdev = 0.001
[info]   CI (99.9%): [11952.002, 11952.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.054, 0.083), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0.440 ±(99.9%) 0.570 B/op [Average]
[info]   (min, avg, max) = (0.336, 0.440, 0.672), stdev = 0.148
[info]   CI (99.9%): [≈ 0, 1.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   1479.265 ±(99.9%) 1167.045 MB/sec [Average]
[info]   (min, avg, max) = (1342.396, 1479.265, 2021.422), stdev = 303.078
[info]   CI (99.9%): [312.220, 2646.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   12058.994 ±(99.9%) 9333.789 B/op [Average]
[info]   (min, avg, max) = (10850.436, 12058.994, 16381.133), stdev = 2423.955
[info]   CI (99.9%): [2725.205, 21392.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 28.71% complete, ETA 01:35:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 171671.504 ops/s
[info] # Warmup Iteration   2: 234288.114 ops/s
[info] # Warmup Iteration   3: 234826.901 ops/s
[info] # Warmup Iteration   4: 242615.056 ops/s
[info] # Warmup Iteration   5: 243326.180 ops/s
[info] Iteration   1: 242594.438 ops/s
[info]                  ·gc.alloc.rate:                   1441.082 MB/sec
[info]                  ·gc.alloc.rate.norm:              9352.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.135 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.078 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8703.023 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 243937.121 ops/s
[info]                  ·gc.alloc.rate:                   1448.934 MB/sec
[info]                  ·gc.alloc.rate.norm:              9352.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.413 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8658.014 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 239793.598 ops/s
[info]                  ·gc.alloc.rate:                   1425.053 MB/sec
[info]                  ·gc.alloc.rate.norm:              9352.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.273 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2012.842 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13209.399 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 243044.943 ops/s
[info]                  ·gc.alloc.rate:                   1443.798 MB/sec
[info]                  ·gc.alloc.rate.norm:              9352.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.270 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.459 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8708.551 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 237325.300 ops/s
[info]                  ·gc.alloc.rate:                   1409.905 MB/sec
[info]                  ·gc.alloc.rate.norm:              9352.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.276 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.866 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8927.228 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce":
[info]   241339.080 ±(99.9%) 10498.682 ops/s [Average]
[info]   (min, avg, max) = (237325.300, 241339.080, 243937.121), stdev = 2726.474
[info]   CI (99.9%): [230840.398, 251837.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1433.754 ±(99.9%) 61.775 MB/sec [Average]
[info]   (min, avg, max) = (1409.905, 1433.754, 1448.934), stdev = 16.043
[info]   CI (99.9%): [1371.979, 1495.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   9352.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9352.002, 9352.002, 9352.002), stdev = 0.001
[info]   CI (99.9%): [9352.001, 9352.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.191 ±(99.9%) 0.471 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.191, 0.276), stdev = 0.122
[info]   CI (99.9%): [≈ 0, 0.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1477.132 ±(99.9%) 1153.182 MB/sec [Average]
[info]   (min, avg, max) = (1341.078, 1477.132, 2012.842), stdev = 299.478
[info]   CI (99.9%): [323.949, 2630.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   9641.243 ±(99.9%) 7691.285 B/op [Average]
[info]   (min, avg, max) = (8658.014, 9641.243, 13209.399), stdev = 1997.402
[info]   CI (99.9%): [1949.958, 17332.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 28.92% complete, ETA 01:35:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 76925.951 ops/s
[info] # Warmup Iteration   2: 996226.442 ops/s
[info] # Warmup Iteration   3: 971256.661 ops/s
[info] # Warmup Iteration   4: 952644.901 ops/s
[info] # Warmup Iteration   5: 955168.228 ops/s
[info] Iteration   1: 945743.364 ops/s
[info]                  ·gc.alloc.rate:                   514.264 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.467 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 851.344 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 943550.407 ops/s
[info]                  ·gc.alloc.rate:                   513.157 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.571 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.289 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.426 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1123.347 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 977004.588 ops/s
[info]                  ·gc.alloc.rate:      531.241 MB/sec
[info]                  ·gc.alloc.rate.norm: 856.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 979954.419 ops/s
[info]                  ·gc.alloc.rate:                   532.854 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1081.540 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 961768.831 ops/s
[info]                  ·gc.alloc.rate:                   522.969 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.923 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1099.810 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava":
[info]   961604.322 ±(99.9%) 65331.572 ops/s [Average]
[info]   (min, avg, max) = (943550.407, 961604.322, 979954.419), stdev = 16966.402
[info]   CI (99.9%): [896272.750, 1026935.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   522.897 ±(99.9%) 35.405 MB/sec [Average]
[info]   (min, avg, max) = (513.157, 522.897, 532.854), stdev = 9.195
[info]   CI (99.9%): [487.492, 558.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   856.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (856.000, 856.000, 856.000), stdev = 0.001
[info]   CI (99.9%): [856.000, 856.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.514 ±(99.9%) 4.428 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.514, 2.571), stdev = 1.150
[info]   CI (99.9%): [≈ 0, 4.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0.858 ±(99.9%) 7.387 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.858, 4.289), stdev = 1.918
[info]   CI (99.9%): [≈ 0, 8.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   506.013 ±(99.9%) 1121.986 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506.013, 673.426), stdev = 291.376
[info]   CI (99.9%): [≈ 0, 1627.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   831.208 ±(99.9%) 1838.124 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 831.208, 1123.347), stdev = 477.355
[info]   CI (99.9%): [≈ 0, 2669.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.140
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 29.12% complete, ETA 01:35:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 571901.152 ops/s
[info] # Warmup Iteration   2: 821721.126 ops/s
[info] # Warmup Iteration   3: 836137.015 ops/s
[info] # Warmup Iteration   4: 818579.902 ops/s
[info] # Warmup Iteration   5: 838638.899 ops/s
[info] Iteration   1: 807728.100 ops/s
[info]                  ·gc.alloc.rate:                   636.148 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.203 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.474 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1312.756 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 813034.315 ops/s
[info]                  ·gc.alloc.rate:                   640.459 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.666 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1304.294 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 808815.691 ops/s
[info]                  ·gc.alloc.rate:                   637.061 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.081 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.881 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1313.615 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 811348.136 ops/s
[info]                  ·gc.alloc.rate:                   639.086 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.928 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1309.544 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 809309.945 ops/s
[info]                  ·gc.alloc.rate:                   637.444 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.539 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1314.106 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala":
[info]   810047.237 ±(99.9%) 8180.620 ops/s [Average]
[info]   (min, avg, max) = (807728.100, 810047.237, 813034.315), stdev = 2124.481
[info]   CI (99.9%): [801866.617, 818227.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   638.040 ±(99.9%) 6.625 MB/sec [Average]
[info]   (min, avg, max) = (636.148, 638.040, 640.459), stdev = 1.720
[info]   CI (99.9%): [631.415, 644.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1240.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1240.001, 1240.001, 1240.001), stdev = 0.001
[info]   CI (99.9%): [1240.000, 1240.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.065 ±(99.9%) 0.324 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.065, 0.203), stdev = 0.084
[info]   CI (99.9%): [≈ 0, 0.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   674.498 ±(99.9%) 3.420 MB/sec [Average]
[info]   (min, avg, max) = (673.474, 674.498, 675.539), stdev = 0.888
[info]   CI (99.9%): [671.077, 677.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1310.863 ±(99.9%) 15.709 B/op [Average]
[info]   (min, avg, max) = (1304.294, 1310.863, 1314.106), stdev = 4.079
[info]   CI (99.9%): [1295.154, 1326.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 29.32% complete, ETA 01:34:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 994993.518 ops/s
[info] # Warmup Iteration   2: 1065751.165 ops/s
[info] # Warmup Iteration   3: 1059697.505 ops/s
[info] # Warmup Iteration   4: 1077173.283 ops/s
[info] # Warmup Iteration   5: 1082068.995 ops/s
[info] Iteration   1: 1070214.341 ops/s
[info]                  ·gc.alloc.rate:                   581.891 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.031 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.386 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 752.283 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1082386.216 ops/s
[info]                  ·gc.alloc.rate:                   588.550 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.295 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.792 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.634 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 981.202 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1081369.258 ops/s
[info]                  ·gc.alloc.rate:                   587.944 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.516 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 982.042 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1085488.145 ops/s
[info]                  ·gc.alloc.rate:                   590.195 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.898 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 974.500 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1084125.944 ops/s
[info]                  ·gc.alloc.rate:                   589.494 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.121 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.909 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 975.675 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala":
[info]   1080716.781 ±(99.9%) 23414.820 ops/s [Average]
[info]   (min, avg, max) = (1070214.341, 1080716.781, 1085488.145), stdev = 6080.754
[info]   CI (99.9%): [1057301.961, 1104131.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   587.615 ±(99.9%) 12.761 MB/sec [Average]
[info]   (min, avg, max) = (581.891, 587.615, 590.195), stdev = 3.314
[info]   CI (99.9%): [574.854, 600.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   856.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (856.000, 856.000, 856.000), stdev = 0.001
[info]   CI (99.9%): [856.000, 856.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.690 ±(99.9%) 5.607 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.690, 3.295), stdev = 1.456
[info]   CI (99.9%): [≈ 0, 6.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.004 ±(99.9%) 8.155 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.004, 4.792), stdev = 2.118
[info]   CI (99.9%): [≈ 0, 9.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   640.869 ±(99.9%) 278.768 MB/sec [Average]
[info]   (min, avg, max) = (511.386, 640.869, 674.634), stdev = 72.395
[info]   CI (99.9%): [362.101, 919.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   933.140 ±(99.9%) 389.517 B/op [Average]
[info]   (min, avg, max) = (752.283, 933.140, 982.042), stdev = 101.156
[info]   CI (99.9%): [543.623, 1322.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.140
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 29.52% complete, ETA 01:34:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1029189.107 ops/s
[info] # Warmup Iteration   2: 1091302.385 ops/s
[info] # Warmup Iteration   3: 1093009.995 ops/s
[info] # Warmup Iteration   4: 1091918.959 ops/s
[info] # Warmup Iteration   5: 1090282.448 ops/s
[info] Iteration   1: 1090508.812 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1088400.063 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1089765.225 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1090030.587 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1088421.000 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   1089425.138 ±(99.9%) 3711.254 ops/s [Average]
[info]   (min, avg, max) = (1088400.063, 1089425.138, 1090508.812), stdev = 963.801
[info]   CI (99.9%): [1085713.884, 1093136.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 29.72% complete, ETA 01:34:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22860.595 ops/s
[info] # Warmup Iteration   2: 33093.957 ops/s
[info] # Warmup Iteration   3: 33507.122 ops/s
[info] # Warmup Iteration   4: 34092.626 ops/s
[info] # Warmup Iteration   5: 34200.860 ops/s
[info] Iteration   1: 33791.386 ops/s
[info]                  ·gc.alloc.rate:                   1827.425 MB/sec
[info]                  ·gc.alloc.rate.norm:              85128.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.847 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2009.604 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 93614.547 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 34063.193 ops/s
[info]                  ·gc.alloc.rate:                   1841.606 MB/sec
[info]                  ·gc.alloc.rate.norm:              85128.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.962 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61988.730 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 33286.311 ops/s
[info]                  ·gc.alloc.rate:                   1799.939 MB/sec
[info]                  ·gc.alloc.rate.norm:              85128.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.921 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2014.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 95254.944 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 34125.885 ops/s
[info]                  ·gc.alloc.rate:                   1845.301 MB/sec
[info]                  ·gc.alloc.rate.norm:              85128.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.880 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.453 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 93162.039 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 34071.826 ops/s
[info]                  ·gc.alloc.rate:                   1842.546 MB/sec
[info]                  ·gc.alloc.rate.norm:              85128.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.230 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62289.968 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson":
[info]   33867.720 ±(99.9%) 1348.249 ops/s [Average]
[info]   (min, avg, max) = (33286.311, 33867.720, 34125.885), stdev = 350.136
[info]   CI (99.9%): [32519.471, 35215.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1831.363 ±(99.9%) 72.736 MB/sec [Average]
[info]   (min, avg, max) = (1799.939, 1831.363, 1845.301), stdev = 18.889
[info]   CI (99.9%): [1758.627, 1904.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   85128.012 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (85128.012, 85128.012, 85128.013), stdev = 0.001
[info]   CI (99.9%): [85128.010, 85128.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.183 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.104), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.722 ±(99.9%) 8.586 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.722, 4.921), stdev = 2.230
[info]   CI (99.9%): [≈ 0, 11.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1746.475 ±(99.9%) 1412.647 MB/sec [Average]
[info]   (min, avg, max) = (1341.025, 1746.475, 2019.453), stdev = 366.860
[info]   CI (99.9%): [333.828, 3159.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   81262.046 ±(99.9%) 67287.063 B/op [Average]
[info]   (min, avg, max) = (61988.730, 81262.046, 95254.944), stdev = 17474.236
[info]   CI (99.9%): [13974.983, 148549.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 29.92% complete, ETA 01:33:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 117465.139 ops/s
[info] # Warmup Iteration   2: 129706.016 ops/s
[info] # Warmup Iteration   3: 133021.986 ops/s
[info] # Warmup Iteration   4: 132990.753 ops/s
[info] # Warmup Iteration   5: 134047.830 ops/s
[info] Iteration   1: 134003.711 ops/s
[info]                  ·gc.alloc.rate:                   1166.415 MB/sec
[info]                  ·gc.alloc.rate.norm:              13704.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.733 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.719 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15787.118 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 134246.659 ops/s
[info]                  ·gc.alloc.rate:                   1168.761 MB/sec
[info]                  ·gc.alloc.rate.norm:              13704.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.732 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.783 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15744.455 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 133473.501 ops/s
[info]                  ·gc.alloc.rate:                   1161.805 MB/sec
[info]                  ·gc.alloc.rate.norm:              13704.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.736 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.713 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15837.891 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 133902.547 ops/s
[info]                  ·gc.alloc.rate:                   1165.698 MB/sec
[info]                  ·gc.alloc.rate.norm:              13704.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.595 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7895.302 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 133812.220 ops/s
[info]                  ·gc.alloc.rate:                   1164.865 MB/sec
[info]                  ·gc.alloc.rate.norm:              13704.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.734 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.808 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15809.174 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle":
[info]   133887.727 ±(99.9%) 1088.766 ops/s [Average]
[info]   (min, avg, max) = (133473.501, 133887.727, 134246.659), stdev = 282.749
[info]   CI (99.9%): [132798.961, 134976.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1165.508 ±(99.9%) 9.735 MB/sec [Average]
[info]   (min, avg, max) = (1161.805, 1165.508, 1168.761), stdev = 2.528
[info]   CI (99.9%): [1155.773, 1175.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   13704.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13704.003, 13704.003, 13704.003), stdev = 0.001
[info]   CI (99.9%): [13704.003, 13704.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0.587 ±(99.9%) 1.264 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.587, 0.736), stdev = 0.328
[info]   CI (99.9%): [≈ 0, 1.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   1208.923 ±(99.9%) 1156.642 MB/sec [Average]
[info]   (min, avg, max) = (671.595, 1208.923, 1343.808), stdev = 300.376
[info]   CI (99.9%): [52.281, 2365.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   14214.788 ±(99.9%) 13603.804 B/op [Average]
[info]   (min, avg, max) = (7895.302, 14214.788, 15837.891), stdev = 3532.865
[info]   CI (99.9%): [610.984, 27818.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 30.12% complete, ETA 01:33:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 86253.733 ops/s
[info] # Warmup Iteration   2: 119402.984 ops/s
[info] # Warmup Iteration   3: 118844.904 ops/s
[info] # Warmup Iteration   4: 122437.522 ops/s
[info] # Warmup Iteration   5: 122180.346 ops/s
[info] Iteration   1: 122380.963 ops/s
[info]                  ·gc.alloc.rate:                   1509.878 MB/sec
[info]                  ·gc.alloc.rate.norm:              19424.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.107 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17252.825 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 122362.202 ops/s
[info]                  ·gc.alloc.rate:                   1509.642 MB/sec
[info]                  ·gc.alloc.rate.norm:              19424.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.536 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.848 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17265.059 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 119072.645 ops/s
[info]                  ·gc.alloc.rate:                   1469.358 MB/sec
[info]                  ·gc.alloc.rate.norm:              19424.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.825 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.620 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17748.600 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 118714.585 ops/s
[info]                  ·gc.alloc.rate:                   1464.815 MB/sec
[info]                  ·gc.alloc.rate.norm:              19424.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.828 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.524 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17828.900 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 118367.610 ops/s
[info]                  ·gc.alloc.rate:                   1460.528 MB/sec
[info]                  ·gc.alloc.rate.norm:              19424.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.554 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.474 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26857.610 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce":
[info]   120179.601 ±(99.9%) 7764.724 ops/s [Average]
[info]   (min, avg, max) = (118367.610, 120179.601, 122380.963), stdev = 2016.474
[info]   CI (99.9%): [112414.877, 127944.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   1482.844 ±(99.9%) 95.375 MB/sec [Average]
[info]   (min, avg, max) = (1460.528, 1482.844, 1509.878), stdev = 24.769
[info]   CI (99.9%): [1387.469, 1578.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   19424.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (19424.003, 19424.003, 19424.003), stdev = 0.001
[info]   CI (99.9%): [19424.003, 19424.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.062), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.548 ±(99.9%) 1.300 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.548, 0.828), stdev = 0.338
[info]   CI (99.9%): [≈ 0, 1.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1477.915 ±(99.9%) 1165.758 MB/sec [Average]
[info]   (min, avg, max) = (1341.107, 1477.915, 2019.474), stdev = 302.744
[info]   CI (99.9%): [312.156, 2643.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   19390.599 ±(99.9%) 16106.019 B/op [Average]
[info]   (min, avg, max) = (17252.825, 19390.599, 26857.610), stdev = 4182.682
[info]   CI (99.9%): [3284.580, 35496.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 30.32% complete, ETA 01:33:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 112475.906 ops/s
[info] # Warmup Iteration   2: 184751.645 ops/s
[info] # Warmup Iteration   3: 190776.605 ops/s
[info] # Warmup Iteration   4: 191195.113 ops/s
[info] # Warmup Iteration   5: 192257.790 ops/s
[info] Iteration   1: 192763.331 ops/s
[info]                  ·gc.alloc.rate:                   1024.816 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.686 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5509.061 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 192890.497 ops/s
[info]                  ·gc.alloc.rate:                   1025.438 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.340 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.662 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11021.967 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 192447.686 ops/s
[info]                  ·gc.alloc.rate:                   1022.990 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.974 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5529.430 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 192079.980 ops/s
[info]                  ·gc.alloc.rate:                   1021.101 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.512 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.681 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11085.328 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 192347.491 ops/s
[info]                  ·gc.alloc.rate:                   1022.389 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676.559 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5537.467 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala":
[info]   192505.797 ±(99.9%) 1253.791 ops/s [Average]
[info]   (min, avg, max) = (192079.980, 192505.797, 192890.497), stdev = 325.606
[info]   CI (99.9%): [191252.006, 193759.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1023.347 ±(99.9%) 6.840 MB/sec [Average]
[info]   (min, avg, max) = (1021.101, 1023.347, 1025.438), stdev = 1.776
[info]   CI (99.9%): [1016.507, 1030.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   8368.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8368.002, 8368.002, 8368.002), stdev = 0.001
[info]   CI (99.9%): [8368.002, 8368.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.170 ±(99.9%) 0.928 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.170, 0.512), stdev = 0.241
[info]   CI (99.9%): [≈ 0, 1.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   946.112 ±(99.9%) 1425.602 MB/sec [Average]
[info]   (min, avg, max) = (674.686, 946.112, 1352.681), stdev = 370.224
[info]   CI (99.9%): [≈ 0, 2371.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7736.650 ±(99.9%) 11660.099 B/op [Average]
[info]   (min, avg, max) = (5509.061, 7736.650, 11085.328), stdev = 3028.091
[info]   CI (99.9%): [≈ 0, 19396.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 30.52% complete, ETA 01:33:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 247353.434 ops/s
[info] # Warmup Iteration   2: 265715.002 ops/s
[info] # Warmup Iteration   3: 268242.594 ops/s
[info] # Warmup Iteration   4: 271887.069 ops/s
[info] # Warmup Iteration   5: 272550.247 ops/s
[info] Iteration   1: 272764.798 ops/s
[info]                  ·gc.alloc.rate:                   709.600 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.294 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.478 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3893.266 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 274988.509 ops/s
[info]                  ·gc.alloc.rate:                   715.531 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.238 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.674 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3862.123 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 273820.998 ops/s
[info]                  ·gc.alloc.rate:                   712.453 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.120 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.581 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3866.769 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 273479.061 ops/s
[info]                  ·gc.alloc.rate:                   711.448 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.501 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3871.774 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 274009.312 ops/s
[info]                  ·gc.alloc.rate:                   712.948 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.478 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.519 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7712.987 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala":
[info]   273812.536 ±(99.9%) 3122.743 ops/s [Average]
[info]   (min, avg, max) = (272764.798, 273812.536, 274988.509), stdev = 810.966
[info]   CI (99.9%): [270689.793, 276935.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   712.396 ±(99.9%) 8.359 MB/sec [Average]
[info]   (min, avg, max) = (709.600, 712.396, 715.531), stdev = 2.171
[info]   CI (99.9%): [704.038, 720.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.001, 4096.002, 4096.002), stdev = 0.001
[info]   CI (99.9%): [4096.001, 4096.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.688 ±(99.9%) 5.610 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.688, 3.294), stdev = 1.457
[info]   CI (99.9%): [≈ 0, 6.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3.969 ±(99.9%) 32.386 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.969, 19.011), stdev = 8.410
[info]   CI (99.9%): [≈ 0, 36.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   807.351 ±(99.9%) 1151.997 MB/sec [Average]
[info]   (min, avg, max) = (672.501, 807.351, 1342.519), stdev = 299.170
[info]   CI (99.9%): [≈ 0, 1959.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4641.384 ±(99.9%) 6612.017 B/op [Average]
[info]   (min, avg, max) = (3862.123, 4641.384, 7712.987), stdev = 1717.120
[info]   CI (99.9%): [≈ 0, 11253.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.140
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 30.72% complete, ETA 01:32:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32945.784 ops/s
[info] # Warmup Iteration   2: 70644.811 ops/s
[info] # Warmup Iteration   3: 69212.561 ops/s
[info] # Warmup Iteration   4: 71044.028 ops/s
[info] # Warmup Iteration   5: 71032.019 ops/s
[info] Iteration   1: 71069.637 ops/s
[info]                  ·gc.alloc.rate:                   2999.804 MB/sec
[info]                  ·gc.alloc.rate.norm:              66448.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.383 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2713.539 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60107.010 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 71453.445 ops/s
[info]                  ·gc.alloc.rate:                   3016.684 MB/sec
[info]                  ·gc.alloc.rate.norm:              66448.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.834 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2717.820 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59864.968 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 71131.586 ops/s
[info]                  ·gc.alloc.rate:                   3002.314 MB/sec
[info]                  ·gc.alloc.rate.norm:              66448.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.763 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3399.438 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75237.259 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 71156.661 ops/s
[info]                  ·gc.alloc.rate:                   3003.458 MB/sec
[info]                  ·gc.alloc.rate.norm:              66448.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.302 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2721.705 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60214.555 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 70934.324 ops/s
[info]                  ·gc.alloc.rate:                   2993.697 MB/sec
[info]                  ·gc.alloc.rate.norm:              66448.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.847 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3402.566 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75523.247 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson":
[info]   71149.131 ±(99.9%) 734.235 ops/s [Average]
[info]   (min, avg, max) = (70934.324, 71149.131, 71453.445), stdev = 190.678
[info]   CI (99.9%): [70414.896, 71883.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3003.191 ±(99.9%) 32.475 MB/sec [Average]
[info]   (min, avg, max) = (2993.697, 3003.191, 3016.684), stdev = 8.434
[info]   CI (99.9%): [2970.716, 3035.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66448.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (66448.006, 66448.006, 66448.006), stdev = 0.001
[info]   CI (99.9%): [66448.005, 66448.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.125), stdev = 0.024
[info]   CI (99.9%): [≈ 10⁻⁴, 0.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.026 ±(99.9%) 2.021 B/op [Average]
[info]   (min, avg, max) = (1.383, 2.026, 2.763), stdev = 0.525
[info]   CI (99.9%): [0.005, 4.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2991.013 ±(99.9%) 1441.217 MB/sec [Average]
[info]   (min, avg, max) = (2713.539, 2991.013, 3402.566), stdev = 374.279
[info]   CI (99.9%): [1549.797, 4432.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   66189.408 ±(99.9%) 32313.140 B/op [Average]
[info]   (min, avg, max) = (59864.968, 66189.408, 75523.247), stdev = 8391.620
[info]   CI (99.9%): [33876.268, 98502.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 30.92% complete, ETA 01:32:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 124355.649 ops/s
[info] # Warmup Iteration   2: 141384.739 ops/s
[info] # Warmup Iteration   3: 148118.880 ops/s
[info] # Warmup Iteration   4: 148683.282 ops/s
[info] # Warmup Iteration   5: 149179.039 ops/s
[info] Iteration   1: 148815.480 ops/s
[info]                  ·gc.alloc.rate:                   1677.852 MB/sec
[info]                  ·gc.alloc.rate.norm:              17752.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.660 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2013.456 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21302.755 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 148405.379 ops/s
[info]                  ·gc.alloc.rate:                   1673.688 MB/sec
[info]                  ·gc.alloc.rate.norm:              17752.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.883 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.048 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14255.672 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 145659.160 ops/s
[info]                  ·gc.alloc.rate:                   1642.603 MB/sec
[info]                  ·gc.alloc.rate.norm:              17752.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.450 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.243 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14538.365 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 144235.391 ops/s
[info]                  ·gc.alloc.rate:                   1626.501 MB/sec
[info]                  ·gc.alloc.rate.norm:              17752.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.454 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020.748 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22054.895 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 144334.897 ops/s
[info]                  ·gc.alloc.rate:                   1627.786 MB/sec
[info]                  ·gc.alloc.rate.norm:              17752.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.227 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.284 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14714.766 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle":
[info]   146290.062 ±(99.9%) 8457.114 ops/s [Average]
[info]   (min, avg, max) = (144235.391, 146290.062, 148815.480), stdev = 2196.286
[info]   CI (99.9%): [137832.948, 154747.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1649.686 ±(99.9%) 95.040 MB/sec [Average]
[info]   (min, avg, max) = (1626.501, 1649.686, 1677.852), stdev = 24.682
[info]   CI (99.9%): [1554.646, 1744.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   17752.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (17752.003, 17752.003, 17752.003), stdev = 0.001
[info]   CI (99.9%): [17752.002, 17752.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.050, 0.083), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0.535 ±(99.9%) 0.954 B/op [Average]
[info]   (min, avg, max) = (0.227, 0.535, 0.883), stdev = 0.248
[info]   CI (99.9%): [≈ 0, 1.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   1614.556 ±(99.9%) 1415.060 MB/sec [Average]
[info]   (min, avg, max) = (1344.048, 1614.556, 2020.748), stdev = 367.487
[info]   CI (99.9%): [199.496, 3029.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   17373.291 ±(99.9%) 15182.261 B/op [Average]
[info]   (min, avg, max) = (14255.672, 17373.291, 22054.895), stdev = 3942.785
[info]   CI (99.9%): [2191.029, 32555.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 31.12% complete, ETA 01:32:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 135354.993 ops/s
[info] # Warmup Iteration   2: 175264.393 ops/s
[info] # Warmup Iteration   3: 174887.421 ops/s
[info] # Warmup Iteration   4: 174086.233 ops/s
[info] # Warmup Iteration   5: 176347.122 ops/s
[info] Iteration   1: 176062.161 ops/s
[info]                  ·gc.alloc.rate:                   611.922 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.409 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4573.188 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 169297.467 ops/s
[info]                  ·gc.alloc.rate:                   588.683 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.560 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33.092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.197 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6266.884 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 176256.961 ops/s
[info]                  ·gc.alloc.rate:                   612.676 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.558 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.984 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6019.564 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 176493.006 ops/s
[info]                  ·gc.alloc.rate:                   613.469 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.282 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5987.688 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 176503.173 ops/s
[info]                  ·gc.alloc.rate:                   613.543 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.330 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5987.383 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce":
[info]   174922.553 ±(99.9%) 12128.860 ops/s [Average]
[info]   (min, avg, max) = (169297.467, 174922.553, 176503.173), stdev = 3149.826
[info]   CI (99.9%): [162793.694, 187051.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   608.058 ±(99.9%) 41.784 MB/sec [Average]
[info]   (min, avg, max) = (588.683, 608.058, 613.543), stdev = 10.851
[info]   CI (99.9%): [566.274, 649.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5472.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5472.002, 5472.002, 5472.002), stdev = 0.001
[info]   CI (99.9%): [5472.002, 5472.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.725 ±(99.9%) 6.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.725, 3.560), stdev = 1.585
[info]   CI (99.9%): [≈ 0, 6.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   6.730 ±(99.9%) 56.754 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.730, 33.092), stdev = 14.739
[info]   CI (99.9%): [≈ 0, 63.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   640.440 ±(99.9%) 277.801 MB/sec [Average]
[info]   (min, avg, max) = (511.409, 640.440, 674.197), stdev = 72.144
[info]   CI (99.9%): [362.639, 918.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5766.941 ±(99.9%) 2608.887 B/op [Average]
[info]   (min, avg, max) = (4573.188, 5766.941, 6266.884), stdev = 677.520
[info]   CI (99.9%): [3158.054, 8375.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 1.095
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 31.33% complete, ETA 01:32:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 336598.158 ops/s
[info] # Warmup Iteration   2: 522387.016 ops/s
[info] # Warmup Iteration   3: 547146.343 ops/s
[info] # Warmup Iteration   4: 546466.970 ops/s
[info] # Warmup Iteration   5: 545880.121 ops/s
[info] Iteration   1: 548124.550 ops/s
[info]                  ·gc.alloc.rate:      554.228 MB/sec
[info]                  ·gc.alloc.rate.norm: 1592.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 546698.760 ops/s
[info]                  ·gc.alloc.rate:                   552.841 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.599 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.539 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1939.574 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 549139.459 ops/s
[info]                  ·gc.alloc.rate:                   555.265 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.524 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1931.063 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 548572.339 ops/s
[info]                  ·gc.alloc.rate:                   554.739 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.576 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1935.911 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 548203.830 ops/s
[info]                  ·gc.alloc.rate:                   554.412 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.613 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1937.158 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala":
[info]   548147.788 ±(99.9%) 3479.998 ops/s [Average]
[info]   (min, avg, max) = (546698.760, 548147.788, 549139.459), stdev = 903.745
[info]   CI (99.9%): [544667.789, 551627.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   554.297 ±(99.9%) 3.482 MB/sec [Average]
[info]   (min, avg, max) = (552.841, 554.297, 555.265), stdev = 0.904
[info]   CI (99.9%): [550.815, 557.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1592.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1592.001, 1592.001, 1592.001), stdev = 0.001
[info]   CI (99.9%): [1592.001, 1592.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.343 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.208), stdev = 0.089
[info]   CI (99.9%): [≈ 0, 0.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.144 ±(99.9%) 0.987 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.144, 0.599), stdev = 0.256
[info]   CI (99.9%): [≈ 0, 1.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   539.250 ±(99.9%) 1160.779 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.250, 674.613), stdev = 301.451
[info]   CI (99.9%): [≈ 0, 1700.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1548.741 ±(99.9%) 3333.804 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1548.741, 1939.574), stdev = 865.778
[info]   CI (99.9%): [≈ 0, 4882.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   3.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 31.53% complete, ETA 01:31:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 460290.821 ops/s
[info] # Warmup Iteration   2: 479149.304 ops/s
[info] # Warmup Iteration   3: 490811.104 ops/s
[info] # Warmup Iteration   4: 492223.158 ops/s
[info] # Warmup Iteration   5: 490357.120 ops/s
[info] Iteration   1: 487872.430 ops/s
[info]                  ·gc.alloc.rate:                   374.312 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.022 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.371 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1650.326 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 490163.003 ops/s
[info]                  ·gc.alloc.rate:                   376.237 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.630 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1642.711 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 490744.852 ops/s
[info]                  ·gc.alloc.rate:      376.520 MB/sec
[info]                  ·gc.alloc.rate.norm: 1208.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 487966.247 ops/s
[info]                  ·gc.alloc.rate:                   374.400 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.392 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1650.005 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 488294.667 ops/s
[info]                  ·gc.alloc.rate:                   374.684 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.315 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.689 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.593 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2174.925 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala":
[info]   489008.240 ±(99.9%) 5178.471 ops/s [Average]
[info]   (min, avg, max) = (487872.430, 489008.240, 490744.852), stdev = 1344.832
[info]   CI (99.9%): [483829.769, 494186.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   375.231 ±(99.9%) 4.089 MB/sec [Average]
[info]   (min, avg, max) = (374.312, 375.231, 376.520), stdev = 1.062
[info]   CI (99.9%): [371.142, 379.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1208.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1208.001, 1208.001, 1208.001), stdev = 0.001
[info]   CI (99.9%): [1208.001, 1208.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.667 ±(99.9%) 5.700 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.667, 3.315), stdev = 1.480
[info]   CI (99.9%): [≈ 0, 6.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2.152 ±(99.9%) 18.377 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.152, 10.689), stdev = 4.772
[info]   CI (99.9%): [≈ 0, 20.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   441.797 ±(99.9%) 989.134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 441.797, 674.593), stdev = 256.875
[info]   CI (99.9%): [≈ 0, 1430.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1423.594 ±(99.9%) 3188.022 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1423.594, 2174.925), stdev = 827.919
[info]   CI (99.9%): [≈ 0, 4611.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.095
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 31.73% complete, ETA 01:31:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 501722.398 ops/s
[info] # Warmup Iteration   2: 532618.958 ops/s
[info] # Warmup Iteration   3: 535444.878 ops/s
[info] # Warmup Iteration   4: 536331.648 ops/s
[info] # Warmup Iteration   5: 536250.763 ops/s
[info] Iteration   1: 536201.997 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 535627.386 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 536053.737 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 535577.853 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 535443.495 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   535780.894 ±(99.9%) 1263.104 ops/s [Average]
[info]   (min, avg, max) = (535443.495, 535780.894, 536201.997), stdev = 328.024
[info]   CI (99.9%): [534517.789, 537043.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 31.93% complete, ETA 01:31:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 177744.718 ops/s
[info] # Warmup Iteration   2: 305327.228 ops/s
[info] # Warmup Iteration   3: 303309.178 ops/s
[info] # Warmup Iteration   4: 302898.031 ops/s
[info] # Warmup Iteration   5: 302571.134 ops/s
[info] Iteration   1: 296538.365 ops/s
[info]                  ·gc.alloc.rate:                   816.742 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3581.183 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 301305.104 ops/s
[info]                  ·gc.alloc.rate:                   829.850 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.326 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.489 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3524.233 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 296208.945 ops/s
[info]                  ·gc.alloc.rate:                   815.861 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.219 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3588.541 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 302444.140 ops/s
[info]                  ·gc.alloc.rate:                   833.046 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.325 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.264 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3514.745 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 301270.963 ops/s
[info]                  ·gc.alloc.rate:                   829.752 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.109 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.765 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7063.859 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson":
[info]   299553.504 ±(99.9%) 11333.375 ops/s [Average]
[info]   (min, avg, max) = (296208.945, 299553.504, 302444.140), stdev = 2943.241
[info]   CI (99.9%): [288220.129, 310886.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   825.050 ±(99.9%) 31.197 MB/sec [Average]
[info]   (min, avg, max) = (815.861, 825.050, 833.046), stdev = 8.102
[info]   CI (99.9%): [793.853, 856.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4336.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4336.001, 4336.001, 4336.001), stdev = 0.001
[info]   CI (99.9%): [4336.001, 4336.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.062), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.152 ±(99.9%) 0.634 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.152, 0.326), stdev = 0.165
[info]   CI (99.9%): [≈ 0, 0.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   810.260 ±(99.9%) 1165.631 MB/sec [Average]
[info]   (min, avg, max) = (674.489, 810.260, 1351.765), stdev = 302.711
[info]   CI (99.9%): [≈ 0, 1975.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4254.512 ±(99.9%) 6048.663 B/op [Average]
[info]   (min, avg, max) = (3514.745, 4254.512, 7063.859), stdev = 1570.819
[info]   CI (99.9%): [≈ 0, 10303.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 32.13% complete, ETA 01:31:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 40221.020 ops/s
[info] # Warmup Iteration   2: 43481.545 ops/s
[info] # Warmup Iteration   3: 42799.507 ops/s
[info] # Warmup Iteration   4: 43778.159 ops/s
[info] # Warmup Iteration   5: 43564.731 ops/s
[info] Iteration   1: 43490.962 ops/s
[info]                  ·gc.alloc.rate:      201.601 MB/sec
[info]                  ·gc.alloc.rate.norm: 7296.010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 43693.078 ops/s
[info]                  ·gc.alloc.rate:      202.504 MB/sec
[info]                  ·gc.alloc.rate.norm: 7296.009 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 43136.527 ops/s
[info]                  ·gc.alloc.rate:                   199.920 MB/sec
[info]                  ·gc.alloc.rate.norm:              7296.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.038 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.385 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.411 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18663.817 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 43486.766 ops/s
[info]                  ·gc.alloc.rate:      201.532 MB/sec
[info]                  ·gc.alloc.rate.norm: 7296.009 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 43291.514 ops/s
[info]                  ·gc.alloc.rate:                   200.628 MB/sec
[info]                  ·gc.alloc.rate.norm:              7296.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.386 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18597.011 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle":
[info]   43419.769 ±(99.9%) 818.952 ops/s [Average]
[info]   (min, avg, max) = (43136.527, 43419.769, 43693.078), stdev = 212.679
[info]   CI (99.9%): [42600.817, 44238.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   201.237 ±(99.9%) 3.818 MB/sec [Average]
[info]   (min, avg, max) = (199.920, 201.237, 202.504), stdev = 0.991
[info]   CI (99.9%): [197.419, 205.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   7296.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7296.009, 7296.010, 7296.010), stdev = 0.001
[info]   CI (99.9%): [7296.008, 7296.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0.008 ±(99.9%) 0.065 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.038), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0.277 ±(99.9%) 2.385 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.277, 1.385), stdev = 0.619
[info]   CI (99.9%): [≈ 0, 2.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   204.559 ±(99.9%) 1078.583 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.559, 511.411), stdev = 280.105
[info]   CI (99.9%): [≈ 0, 1283.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   7452.166 ±(99.9%) 39293.223 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7452.166, 18663.817), stdev = 10204.325
[info]   CI (99.9%): [≈ 0, 46745.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 3.000), stdev = 1.414
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 32.33% complete, ETA 01:30:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7401.349 ops/s
[info] # Warmup Iteration   2: 9854.551 ops/s
[info] # Warmup Iteration   3: 10260.240 ops/s
[info] # Warmup Iteration   4: 10317.351 ops/s
[info] # Warmup Iteration   5: 10068.932 ops/s
[info] Iteration   1: 10307.194 ops/s
[info]                  ·gc.alloc.rate:                   1317.797 MB/sec
[info]                  ·gc.alloc.rate.norm:              201280.040 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15.891 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.725 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 205240.191 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 10325.382 ops/s
[info]                  ·gc.alloc.rate:                   1320.092 MB/sec
[info]                  ·gc.alloc.rate.norm:              201280.040 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.173 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.719 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 204882.491 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 10158.013 ops/s
[info]                  ·gc.alloc.rate:                   1298.773 MB/sec
[info]                  ·gc.alloc.rate.norm:              201280.043 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.450 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.746 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 208249.815 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 10309.959 ops/s
[info]                  ·gc.alloc.rate:                   1318.275 MB/sec
[info]                  ·gc.alloc.rate.norm:              201280.043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.022 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 205363.925 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 10174.156 ops/s
[info]                  ·gc.alloc.rate:                   1300.918 MB/sec
[info]                  ·gc.alloc.rate.norm:              201280.040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.380 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 208314.077 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce":
[info]   10254.941 ±(99.9%) 314.250 ops/s [Average]
[info]   (min, avg, max) = (10158.013, 10254.941, 10325.382), stdev = 81.610
[info]   CI (99.9%): [9940.691, 10569.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1311.171 ±(99.9%) 40.054 MB/sec [Average]
[info]   (min, avg, max) = (1298.773, 1311.171, 1320.092), stdev = 10.402
[info]   CI (99.9%): [1271.117, 1351.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   201280.041 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (201280.040, 201280.041, 201280.043), stdev = 0.002
[info]   CI (99.9%): [201280.034, 201280.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5.103 ±(99.9%) 25.397 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.103, 15.891), stdev = 6.596
[info]   CI (99.9%): [≈ 0, 30.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1344.518 ±(99.9%) 4.551 MB/sec [Average]
[info]   (min, avg, max) = (1343.719, 1344.518, 1346.380), stdev = 1.182
[info]   CI (99.9%): [1339.968, 1349.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   206410.100 ±(99.9%) 6615.502 B/op [Average]
[info]   (min, avg, max) = (204882.491, 206410.100, 208314.077), stdev = 1718.025
[info]   CI (99.9%): [199794.598, 213025.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 32.53% complete, ETA 01:30:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5991.408 ops/s
[info] # Warmup Iteration   2: 11069.891 ops/s
[info] # Warmup Iteration   3: 11109.963 ops/s
[info] # Warmup Iteration   4: 10963.873 ops/s
[info] # Warmup Iteration   5: 11294.431 ops/s
[info] Iteration   1: 11170.436 ops/s
[info]                  ·gc.alloc.rate:                   1324.339 MB/sec
[info]                  ·gc.alloc.rate.norm:              186576.284 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.933 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.500 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 190402.784 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 11319.741 ops/s
[info]                  ·gc.alloc.rate:                   1341.658 MB/sec
[info]                  ·gc.alloc.rate.norm:              186577.174 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.894 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.602 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 188099.086 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 11293.303 ops/s
[info]                  ·gc.alloc.rate:                   1338.575 MB/sec
[info]                  ·gc.alloc.rate.norm:              186576.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.901 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.940 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 188717.688 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 11325.755 ops/s
[info]                  ·gc.alloc.rate:                   1342.670 MB/sec
[info]                  ·gc.alloc.rate.norm:              186576.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.785 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.578 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 188369.718 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 11325.865 ops/s
[info]                  ·gc.alloc.rate:                   1342.404 MB/sec
[info]                  ·gc.alloc.rate.norm:              186576.045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356.309 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 188508.565 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala":
[info]   11287.020 ±(99.9%) 256.229 ops/s [Average]
[info]   (min, avg, max) = (11170.436, 11287.020, 11325.865), stdev = 66.542
[info]   CI (99.9%): [11030.791, 11543.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1337.929 ±(99.9%) 29.921 MB/sec [Average]
[info]   (min, avg, max) = (1324.339, 1337.929, 1342.670), stdev = 7.770
[info]   CI (99.9%): [1308.009, 1367.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   186576.315 ±(99.9%) 1.894 B/op [Average]
[info]   (min, avg, max) = (186576.036, 186576.315, 186577.174), stdev = 0.492
[info]   CI (99.9%): [186574.421, 186578.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2.903 ±(99.9%) 7.876 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.903, 5.785), stdev = 2.045
[info]   CI (99.9%): [≈ 0, 10.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1353.986 ±(99.9%) 7.707 MB/sec [Average]
[info]   (min, avg, max) = (1351.500, 1353.986, 1356.309), stdev = 2.002
[info]   CI (99.9%): [1346.278, 1361.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   188819.568 ±(99.9%) 3516.090 B/op [Average]
[info]   (min, avg, max) = (188099.086, 188819.568, 190402.784), stdev = 913.117
[info]   CI (99.9%): [185303.478, 192335.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 32.73% complete, ETA 01:30:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 179535.978 ops/s
[info] # Warmup Iteration   2: 201214.622 ops/s
[info] # Warmup Iteration   3: 194261.417 ops/s
[info] # Warmup Iteration   4: 197110.342 ops/s
[info] # Warmup Iteration   5: 202116.415 ops/s
[info] Iteration   1: 201204.907 ops/s
[info]                  ·gc.alloc.rate:                   1308.635 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.361 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10535.206 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 201868.947 ops/s
[info]                  ·gc.alloc.rate:                   1313.181 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.974 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.622 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10500.769 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 199634.028 ops/s
[info]                  ·gc.alloc.rate:                   1298.533 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.821 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.540 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10618.571 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 202473.390 ops/s
[info]                  ·gc.alloc.rate:                   1317.051 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.647 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.861 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10479.547 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 202635.625 ops/s
[info]                  ·gc.alloc.rate:                   1318.160 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.643 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10476.809 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala":
[info]   201563.379 ±(99.9%) 4685.342 ops/s [Average]
[info]   (min, avg, max) = (199634.028, 201563.379, 202635.625), stdev = 1216.768
[info]   CI (99.9%): [196878.038, 206248.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1311.112 ±(99.9%) 30.660 MB/sec [Average]
[info]   (min, avg, max) = (1298.533, 1311.112, 1318.160), stdev = 7.962
[info]   CI (99.9%): [1280.453, 1341.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10240.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10240.002, 10240.002, 10240.002), stdev = 0.001
[info]   CI (99.9%): [10240.002, 10240.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.227 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.125), stdev = 0.059
[info]   CI (99.9%): [≈ 0, 0.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.488 ±(99.9%) 1.773 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.488, 0.974), stdev = 0.460
[info]   CI (99.9%): [≈ 0, 2.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1347.205 ±(99.9%) 3.847 MB/sec [Average]
[info]   (min, avg, max) = (1346.361, 1347.205, 1348.643), stdev = 0.999
[info]   CI (99.9%): [1343.358, 1351.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   10522.180 ±(99.9%) 226.136 B/op [Average]
[info]   (min, avg, max) = (10476.809, 10522.180, 10618.571), stdev = 58.727
[info]   CI (99.9%): [10296.044, 10748.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 32.93% complete, ETA 01:29:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4774.177 ops/s
[info] # Warmup Iteration   2: 8721.601 ops/s
[info] # Warmup Iteration   3: 8983.866 ops/s
[info] # Warmup Iteration   4: 8972.322 ops/s
[info] # Warmup Iteration   5: 8990.470 ops/s
[info] Iteration   1: 8971.130 ops/s
[info]                  ·gc.alloc.rate:                   1670.090 MB/sec
[info]                  ·gc.alloc.rate.norm:              293096.049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.572 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 237372.648 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 8817.335 ops/s
[info]                  ·gc.alloc.rate:                   1641.685 MB/sec
[info]                  ·gc.alloc.rate.norm:              293096.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.146 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 362602.812 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 8691.348 ops/s
[info]                  ·gc.alloc.rate:                   1618.149 MB/sec
[info]                  ·gc.alloc.rate.norm:              293096.146 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.709 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 245560.241 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 8693.030 ops/s
[info]                  ·gc.alloc.rate:                   1618.406 MB/sec
[info]                  ·gc.alloc.rate.norm:              293096.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.768 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034.750 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 368496.810 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 8703.975 ops/s
[info]                  ·gc.alloc.rate:                   1620.730 MB/sec
[info]                  ·gc.alloc.rate.norm:              293096.047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1357.686 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 245526.695 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson":
[info]   8775.363 ±(99.9%) 467.739 ops/s [Average]
[info]   (min, avg, max) = (8691.348, 8775.363, 8971.130), stdev = 121.470
[info]   CI (99.9%): [8307.625, 9243.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1633.812 ±(99.9%) 86.786 MB/sec [Average]
[info]   (min, avg, max) = (1618.149, 1633.812, 1670.090), stdev = 22.538
[info]   CI (99.9%): [1547.025, 1720.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   293096.067 ±(99.9%) 0.171 B/op [Average]
[info]   (min, avg, max) = (293096.046, 293096.067, 293096.146), stdev = 0.044
[info]   CI (99.9%): [293095.896, 293096.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.983 ±(99.9%) 18.661 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.983, 11.146), stdev = 4.846
[info]   CI (99.9%): [≈ 0, 21.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1626.345 ±(99.9%) 1429.048 MB/sec [Average]
[info]   (min, avg, max) = (1352.572, 1626.345, 2034.750), stdev = 371.119
[info]   CI (99.9%): [197.297, 3055.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   291911.841 ±(99.9%) 259290.529 B/op [Average]
[info]   (min, avg, max) = (237372.648, 291911.841, 368496.810), stdev = 67336.927
[info]   CI (99.9%): [32621.313, 551202.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 1.000
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 33.13% complete, ETA 01:29:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7665.254 ops/s
[info] # Warmup Iteration   2: 10229.088 ops/s
[info] # Warmup Iteration   3: 10335.400 ops/s
[info] # Warmup Iteration   4: 10150.880 ops/s
[info] # Warmup Iteration   5: 10311.499 ops/s
[info] Iteration   1: 10384.158 ops/s
[info]                  ·gc.alloc.rate:                   1226.439 MB/sec
[info]                  ·gc.alloc.rate.norm:              185944.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.105 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 102051.438 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 10400.139 ops/s
[info]                  ·gc.alloc.rate:                   1228.594 MB/sec
[info]                  ·gc.alloc.rate.norm:              185962.611 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.450 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.496 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 203808.581 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 10330.723 ops/s
[info]                  ·gc.alloc.rate:                   1220.698 MB/sec
[info]                  ·gc.alloc.rate.norm:              185968.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.736 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 205169.409 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 10349.293 ops/s
[info]                  ·gc.alloc.rate:                   1222.484 MB/sec
[info]                  ·gc.alloc.rate.norm:              185968.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.694 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 204863.308 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 10340.129 ops/s
[info]                  ·gc.alloc.rate:                   1221.533 MB/sec
[info]                  ·gc.alloc.rate.norm:              185968.043 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.503 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.686 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 205173.804 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle":
[info]   10360.888 ±(99.9%) 114.834 ops/s [Average]
[info]   (min, avg, max) = (10330.723, 10360.888, 10400.139), stdev = 29.822
[info]   CI (99.9%): [10246.054, 10475.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1223.950 ±(99.9%) 13.104 MB/sec [Average]
[info]   (min, avg, max) = (1220.698, 1223.950, 1228.594), stdev = 3.403
[info]   CI (99.9%): [1210.845, 1237.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   185962.154 ±(99.9%) 40.031 B/op [Average]
[info]   (min, avg, max) = (185944.039, 185962.154, 185968.043), stdev = 10.396
[info]   CI (99.9%): [185922.123, 186002.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   3.791 ±(99.9%) 19.987 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.791, 9.503), stdev = 5.191
[info]   CI (99.9%): [≈ 0, 23.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   1212.144 ±(99.9%) 1160.323 MB/sec [Average]
[info]   (min, avg, max) = (673.105, 1212.144, 1347.686), stdev = 301.332
[info]   CI (99.9%): [51.821, 2372.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   184213.308 ±(99.9%) 176872.767 B/op [Average]
[info]   (min, avg, max) = (102051.438, 184213.308, 205173.804), stdev = 45933.296
[info]   CI (99.9%): [7340.541, 361086.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 33.33% complete, ETA 01:29:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16203.589 ops/s
[info] # Warmup Iteration   2: 22597.197 ops/s
[info] # Warmup Iteration   3: 22703.420 ops/s
[info] # Warmup Iteration   4: 22988.986 ops/s
[info] # Warmup Iteration   5: 22724.775 ops/s
[info] Iteration   1: 22856.136 ops/s
[info]                  ·gc.alloc.rate:                   959.329 MB/sec
[info]                  ·gc.alloc.rate.norm:              66080.666 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.512 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 46324.108 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 22495.489 ops/s
[info]                  ·gc.alloc.rate:                   944.481 MB/sec
[info]                  ·gc.alloc.rate.norm:              66080.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.014 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 94033.079 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 22600.363 ops/s
[info]                  ·gc.alloc.rate:                   948.663 MB/sec
[info]                  ·gc.alloc.rate.norm:              66080.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.899 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.241 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 46755.932 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 22929.839 ops/s
[info]                  ·gc.alloc.rate:                   962.496 MB/sec
[info]                  ·gc.alloc.rate.norm:              66080.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.429 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.260 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 46085.224 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 22953.619 ops/s
[info]                  ·gc.alloc.rate:                   963.503 MB/sec
[info]                  ·gc.alloc.rate.norm:              66080.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.854 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.851 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 92096.934 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce":
[info]   22767.089 ±(99.9%) 795.637 ops/s [Average]
[info]   (min, avg, max) = (22495.489, 22767.089, 22953.619), stdev = 206.624
[info]   CI (99.9%): [21971.452, 23562.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   955.694 ±(99.9%) 33.103 MB/sec [Average]
[info]   (min, avg, max) = (944.481, 955.694, 963.503), stdev = 8.597
[info]   CI (99.9%): [922.592, 988.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   66080.148 ±(99.9%) 1.115 B/op [Average]
[info]   (min, avg, max) = (66080.018, 66080.148, 66080.666), stdev = 0.290
[info]   CI (99.9%): [66079.033, 66081.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.436 ±(99.9%) 5.539 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.436, 2.899), stdev = 1.438
[info]   CI (99.9%): [≈ 0, 6.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   940.376 ±(99.9%) 1416.804 MB/sec [Average]
[info]   (min, avg, max) = (671.241, 940.376, 1344.014), stdev = 367.940
[info]   CI (99.9%): [≈ 0, 2357.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   65059.055 ±(99.9%) 98484.495 B/op [Average]
[info]   (min, avg, max) = (46085.224, 65059.055, 94033.079), stdev = 25576.111
[info]   CI (99.9%): [≈ 0, 163543.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 33.53% complete, ETA 01:29:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15064.669 ops/s
[info] # Warmup Iteration   2: 25641.849 ops/s
[info] # Warmup Iteration   3: 25340.261 ops/s
[info] # Warmup Iteration   4: 25047.911 ops/s
[info] # Warmup Iteration   5: 25644.574 ops/s
[info] Iteration   1: 24944.083 ops/s
[info]                  ·gc.alloc.rate:                   959.642 MB/sec
[info]                  ·gc.alloc.rate.norm:              60552.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.627 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 85185.506 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 24851.446 ops/s
[info]                  ·gc.alloc.rate:                   955.997 MB/sec
[info]                  ·gc.alloc.rate.norm:              60552.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.637 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 42794.286 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 25746.572 ops/s
[info]                  ·gc.alloc.rate:                   990.345 MB/sec
[info]                  ·gc.alloc.rate.norm:              60552.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.544 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.351 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 82624.825 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 25752.897 ops/s
[info]                  ·gc.alloc.rate:                   990.559 MB/sec
[info]                  ·gc.alloc.rate.norm:              60552.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.910 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 41317.778 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 25667.349 ops/s
[info]                  ·gc.alloc.rate:                   987.265 MB/sec
[info]                  ·gc.alloc.rate.norm:              60552.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.553 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.116 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 82990.825 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala":
[info]   25392.469 ±(99.9%) 1748.349 ops/s [Average]
[info]   (min, avg, max) = (24851.446, 25392.469, 25752.897), stdev = 454.041
[info]   CI (99.9%): [23644.120, 27140.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   976.761 ±(99.9%) 66.957 MB/sec [Average]
[info]   (min, avg, max) = (955.997, 976.761, 990.559), stdev = 17.388
[info]   CI (99.9%): [909.805, 1043.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   60552.016 ±(99.9%) 0.003 B/op [Average]
[info]   (min, avg, max) = (60552.016, 60552.016, 60552.018), stdev = 0.001
[info]   CI (99.9%): [60552.013, 60552.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.545 ±(99.9%) 5.431 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.545, 2.627), stdev = 1.411
[info]   CI (99.9%): [≈ 0, 6.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1081.211 ±(99.9%) 1425.175 MB/sec [Average]
[info]   (min, avg, max) = (675.637, 1081.211, 1353.116), stdev = 370.113
[info]   CI (99.9%): [≈ 0, 2506.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   66982.644 ±(99.9%) 87724.689 B/op [Average]
[info]   (min, avg, max) = (41317.778, 66982.644, 85185.506), stdev = 22781.823
[info]   CI (99.9%): [≈ 0, 154707.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 33.73% complete, ETA 01:28:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 687628.191 ops/s
[info] # Warmup Iteration   2: 717979.070 ops/s
[info] # Warmup Iteration   3: 734067.778 ops/s
[info] # Warmup Iteration   4: 735629.159 ops/s
[info] # Warmup Iteration   5: 735492.465 ops/s
[info] Iteration   1: 734319.367 ops/s
[info]                  ·gc.alloc.rate:                   1324.600 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.376 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2886.688 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 736843.997 ops/s
[info]                  ·gc.alloc.rate:                   1329.420 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.178 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.731 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2876.982 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 735626.229 ops/s
[info]                  ·gc.alloc.rate:                   1327.031 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.075 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2882.896 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 738012.965 ops/s
[info]                  ·gc.alloc.rate:                   1331.358 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.178 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.109 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2875.732 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 737093.781 ops/s
[info]                  ·gc.alloc.rate:                   1329.767 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.133 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.153 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2881.403 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala":
[info]   736379.268 ±(99.9%) 5515.209 ops/s [Average]
[info]   (min, avg, max) = (734319.367, 736379.268, 738012.965), stdev = 1432.282
[info]   CI (99.9%): [730864.059, 741894.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1328.435 ±(99.9%) 10.182 MB/sec [Average]
[info]   (min, avg, max) = (1324.600, 1328.435, 1331.358), stdev = 2.644
[info]   CI (99.9%): [1318.254, 1338.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2840.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2840.001, 2840.001, 2840.001), stdev = 0.001
[info]   CI (99.9%): [2840.000, 2840.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.083), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.116 ±(99.9%) 0.286 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.116, 0.178), stdev = 0.074
[info]   CI (99.9%): [≈ 0, 0.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1347.489 ±(99.9%) 4.364 MB/sec [Average]
[info]   (min, avg, max) = (1346.376, 1347.489, 1349.153), stdev = 1.133
[info]   CI (99.9%): [1343.125, 1351.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2880.740 ±(99.9%) 17.186 B/op [Average]
[info]   (min, avg, max) = (2875.732, 2880.740, 2886.688), stdev = 4.463
[info]   CI (99.9%): [2863.554, 2897.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 33.94% complete, ETA 01:28:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 791088.099 ops/s
[info] # Warmup Iteration   2: 834624.084 ops/s
[info] # Warmup Iteration   3: 832955.056 ops/s
[info] # Warmup Iteration   4: 833180.124 ops/s
[info] # Warmup Iteration   5: 834856.580 ops/s
[info] Iteration   1: 834009.938 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 835078.810 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 834285.377 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 831951.075 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 832384.038 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   833541.848 ±(99.9%) 5095.844 ops/s [Average]
[info]   (min, avg, max) = (831951.075, 833541.848, 835078.810), stdev = 1323.375
[info]   CI (99.9%): [828446.004, 838637.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 34.14% complete, ETA 01:28:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17248.388 ops/s
[info] # Warmup Iteration   2: 23878.632 ops/s
[info] # Warmup Iteration   3: 24493.587 ops/s
[info] # Warmup Iteration   4: 24598.533 ops/s
[info] # Warmup Iteration   5: 24667.919 ops/s
[info] Iteration   1: 24789.740 ops/s
[info]                  ·gc.alloc.rate:                   1045.844 MB/sec
[info]                  ·gc.alloc.rate.norm:              66416.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.855 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 85087.111 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 24740.164 ops/s
[info]                  ·gc.alloc.rate:                   1043.660 MB/sec
[info]                  ·gc.alloc.rate.norm:              66416.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.973 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.213 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 42587.144 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 24707.375 ops/s
[info]                  ·gc.alloc.rate:                   1042.395 MB/sec
[info]                  ·gc.alloc.rate.norm:              66416.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.304 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.590 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 85288.028 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 24682.840 ops/s
[info]                  ·gc.alloc.rate:                   1041.434 MB/sec
[info]                  ·gc.alloc.rate.norm:              66416.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.656 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 85370.940 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 24572.174 ops/s
[info]                  ·gc.alloc.rate:                   1036.706 MB/sec
[info]                  ·gc.alloc.rate.norm:              66416.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.666 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.189 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 42871.278 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson":
[info]   24698.459 ±(99.9%) 312.489 ops/s [Average]
[info]   (min, avg, max) = (24572.174, 24698.459, 24789.740), stdev = 81.152
[info]   CI (99.9%): [24385.970, 25010.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1042.008 ±(99.9%) 13.063 MB/sec [Average]
[info]   (min, avg, max) = (1036.706, 1042.008, 1045.844), stdev = 3.393
[info]   CI (99.9%): [1028.944, 1055.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   66416.017 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (66416.016, 66416.017, 66416.018), stdev = 0.001
[info]   CI (99.9%): [66416.015, 66416.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.389 ±(99.9%) 9.132 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.389, 5.304), stdev = 2.372
[info]   CI (99.9%): [≈ 0, 11.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1071.101 ±(99.9%) 1412.734 MB/sec [Average]
[info]   (min, avg, max) = (669.189, 1071.101, 1339.855), stdev = 366.883
[info]   CI (99.9%): [≈ 0, 2483.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   68240.900 ±(99.9%) 89678.897 B/op [Average]
[info]   (min, avg, max) = (42587.144, 68240.900, 85370.940), stdev = 23289.325
[info]   CI (99.9%): [≈ 0, 157919.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 34.34% complete, ETA 01:28:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12332.472 ops/s
[info] # Warmup Iteration   2: 13591.120 ops/s
[info] # Warmup Iteration   3: 13117.272 ops/s
[info] # Warmup Iteration   4: 13464.032 ops/s
[info] # Warmup Iteration   5: 13493.246 ops/s
[info] Iteration   1: 13519.715 ops/s
[info]                  ·gc.alloc.rate:                   543.679 MB/sec
[info]                  ·gc.alloc.rate.norm:              63312.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.031 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.633 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.343 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59546.463 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 13564.482 ops/s
[info]                  ·gc.alloc.rate:                   545.565 MB/sec
[info]                  ·gc.alloc.rate.norm:              63312.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.693 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     312.473 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.993 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78448.046 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 13531.351 ops/s
[info]                  ·gc.alloc.rate:      544.185 MB/sec
[info]                  ·gc.alloc.rate.norm: 63312.038 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 13509.367 ops/s
[info]                  ·gc.alloc.rate:                   543.283 MB/sec
[info]                  ·gc.alloc.rate.norm:              63312.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.275 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.856 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78761.536 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 13501.677 ops/s
[info]                  ·gc.alloc.rate:                   542.971 MB/sec
[info]                  ·gc.alloc.rate.norm:              63312.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.870 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78575.262 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle":
[info]   13525.318 ±(99.9%) 94.615 ops/s [Average]
[info]   (min, avg, max) = (13501.677, 13525.318, 13564.482), stdev = 24.571
[info]   CI (99.9%): [13430.704, 13619.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   543.936 ±(99.9%) 3.917 MB/sec [Average]
[info]   (min, avg, max) = (542.971, 543.936, 545.565), stdev = 1.017
[info]   CI (99.9%): [540.020, 547.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   63312.033 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (63312.030, 63312.033, 63312.038), stdev = 0.003
[info]   CI (99.9%): [63312.021, 63312.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0.557 ±(99.9%) 4.598 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.557, 2.693), stdev = 1.194
[info]   CI (99.9%): [≈ 0, 5.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   64.676 ±(99.9%) 533.528 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 64.676, 312.473), stdev = 138.555
[info]   CI (99.9%): [≈ 0, 598.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   507.412 ±(99.9%) 1125.916 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 507.412, 675.993), stdev = 292.397
[info]   CI (99.9%): [≈ 0, 1633.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   59066.261 ±(99.9%) 131052.246 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 59066.261, 78761.536), stdev = 34033.852
[info]   CI (99.9%): [≈ 0, 190118.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.517
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 34.54% complete, ETA 01:27:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22482.298 ops/s
[info] # Warmup Iteration   2: 29903.012 ops/s
[info] # Warmup Iteration   3: 30200.478 ops/s
[info] # Warmup Iteration   4: 30837.633 ops/s
[info] # Warmup Iteration   5: 30814.341 ops/s
[info] Iteration   1: 30314.547 ops/s
[info]                  ·gc.alloc.rate:                   1507.272 MB/sec
[info]                  ·gc.alloc.rate.norm:              78272.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.161 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.842 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69785.185 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 30068.216 ops/s
[info]                  ·gc.alloc.rate:                   1495.067 MB/sec
[info]                  ·gc.alloc.rate.norm:              78272.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.179 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.529 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70390.841 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 30123.860 ops/s
[info]                  ·gc.alloc.rate:                   1498.242 MB/sec
[info]                  ·gc.alloc.rate.norm:              78272.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.547 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70294.820 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 30057.596 ops/s
[info]                  ·gc.alloc.rate:                   1494.489 MB/sec
[info]                  ·gc.alloc.rate.norm:              78272.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.180 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020.415 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 105816.717 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 30779.195 ops/s
[info]                  ·gc.alloc.rate:                   1530.830 MB/sec
[info]                  ·gc.alloc.rate.norm:              78272.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.894 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68969.578 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce":
[info]   30268.683 ±(99.9%) 1168.664 ops/s [Average]
[info]   (min, avg, max) = (30057.596, 30268.683, 30779.195), stdev = 303.498
[info]   CI (99.9%): [29100.018, 31437.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate":
[info]   1505.180 ±(99.9%) 58.619 MB/sec [Average]
[info]   (min, avg, max) = (1494.489, 1505.180, 1530.830), stdev = 15.223
[info]   CI (99.9%): [1446.560, 1563.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   78272.014 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (78272.013, 78272.014, 78272.015), stdev = 0.001
[info]   CI (99.9%): [78272.012, 78272.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.304 ±(99.9%) 4.584 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.304, 2.180), stdev = 1.190
[info]   CI (99.9%): [≈ 0, 5.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1480.645 ±(99.9%) 1161.918 MB/sec [Average]
[info]   (min, avg, max) = (1343.842, 1480.645, 2020.415), stdev = 301.746
[info]   CI (99.9%): [318.727, 2642.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   77051.428 ±(99.9%) 61957.435 B/op [Average]
[info]   (min, avg, max) = (68969.578, 77051.428, 105816.717), stdev = 16090.149
[info]   CI (99.9%): [15093.993, 139008.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 34.74% complete, ETA 01:27:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19480.184 ops/s
[info] # Warmup Iteration   2: 32288.646 ops/s
[info] # Warmup Iteration   3: 32500.678 ops/s
[info] # Warmup Iteration   4: 32337.778 ops/s
[info] # Warmup Iteration   5: 32625.848 ops/s
[info] Iteration   1: 31640.589 ops/s
[info]                  ·gc.alloc.rate:                   1341.381 MB/sec
[info]                  ·gc.alloc.rate.norm:              66736.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.182 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67223.631 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 32584.940 ops/s
[info]                  ·gc.alloc.rate:                   1381.377 MB/sec
[info]                  ·gc.alloc.rate.norm:              66736.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.501 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65340.958 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 32592.356 ops/s
[info]                  ·gc.alloc.rate:                   1381.684 MB/sec
[info]                  ·gc.alloc.rate.norm:              66736.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.885 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65393.264 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 32575.355 ops/s
[info]                  ·gc.alloc.rate:                   1380.914 MB/sec
[info]                  ·gc.alloc.rate.norm:              66736.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.834 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65475.657 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 32572.046 ops/s
[info]                  ·gc.alloc.rate:                   1380.812 MB/sec
[info]                  ·gc.alloc.rate.norm:              66736.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.858 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65529.965 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala":
[info]   32393.057 ±(99.9%) 1620.038 ops/s [Average]
[info]   (min, avg, max) = (31640.589, 32393.057, 32592.356), stdev = 420.719
[info]   CI (99.9%): [30773.019, 34013.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1373.233 ±(99.9%) 68.579 MB/sec [Average]
[info]   (min, avg, max) = (1341.381, 1373.233, 1381.684), stdev = 17.810
[info]   CI (99.9%): [1304.654, 1441.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   66736.013 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (66736.013, 66736.013, 66736.014), stdev = 0.001
[info]   CI (99.9%): [66736.011, 66736.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.408 ±(99.9%) 3.463 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.408, 2.012), stdev = 0.899
[info]   CI (99.9%): [≈ 0, 4.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1353.652 ±(99.9%) 7.138 MB/sec [Average]
[info]   (min, avg, max) = (1351.182, 1353.652, 1355.858), stdev = 1.854
[info]   CI (99.9%): [1346.514, 1360.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   65792.695 ±(99.9%) 3092.962 B/op [Average]
[info]   (min, avg, max) = (65340.958, 65792.695, 67223.631), stdev = 803.232
[info]   CI (99.9%): [62699.733, 68885.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 34.94% complete, ETA 01:27:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 342633.699 ops/s
[info] # Warmup Iteration   2: 364929.881 ops/s
[info] # Warmup Iteration   3: 370111.965 ops/s
[info] # Warmup Iteration   4: 371047.877 ops/s
[info] # Warmup Iteration   5: 367847.791 ops/s
[info] Iteration   1: 362505.886 ops/s
[info]                  ·gc.alloc.rate:                   943.241 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.938 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2926.560 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 365223.161 ops/s
[info]                  ·gc.alloc.rate:                   950.256 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.179 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.142 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5806.749 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 372071.804 ops/s
[info]                  ·gc.alloc.rate:                   968.092 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.245 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2848.503 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 371840.679 ops/s
[info]                  ·gc.alloc.rate:                   967.748 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.848 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5700.545 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 371889.562 ops/s
[info]                  ·gc.alloc.rate:                   967.524 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.194 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2849.958 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala":
[info]   368706.218 ±(99.9%) 17419.802 ops/s [Average]
[info]   (min, avg, max) = (362505.886, 368706.218, 372071.804), stdev = 4523.867
[info]   CI (99.9%): [351286.416, 386126.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   959.372 ±(99.9%) 45.397 MB/sec [Average]
[info]   (min, avg, max) = (943.241, 959.372, 968.092), stdev = 11.789
[info]   CI (99.9%): [913.975, 1004.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.001, 4096.001, 4096.001), stdev = 0.001
[info]   CI (99.9%): [4096.001, 4096.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.036 ±(99.9%) 0.309 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.036, 0.179), stdev = 0.080
[info]   CI (99.9%): [≈ 0, 0.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   942.874 ±(99.9%) 1420.545 MB/sec [Average]
[info]   (min, avg, max) = (673.194, 942.874, 1347.142), stdev = 368.911
[info]   CI (99.9%): [≈ 0, 2363.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4026.463 ±(99.9%) 6074.233 B/op [Average]
[info]   (min, avg, max) = (2848.503, 4026.463, 5806.749), stdev = 1577.459
[info]   CI (99.9%): [≈ 0, 10100.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 35.14% complete, ETA 01:27:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9631.893 ops/s
[info] # Warmup Iteration   2: 17775.098 ops/s
[info] # Warmup Iteration   3: 17799.341 ops/s
[info] # Warmup Iteration   4: 18159.064 ops/s
[info] # Warmup Iteration   5: 17922.434 ops/s
[info] Iteration   1: 17832.277 ops/s
[info]                  ·gc.alloc.rate:                   1835.313 MB/sec
[info]                  ·gc.alloc.rate.norm:              162024.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.837 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.329 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 179240.244 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 17549.192 ops/s
[info]                  ·gc.alloc.rate:                   1805.884 MB/sec
[info]                  ·gc.alloc.rate.norm:              162024.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.867 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.758 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 182379.225 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 17610.591 ops/s
[info]                  ·gc.alloc.rate:                   1813.143 MB/sec
[info]                  ·gc.alloc.rate.norm:              162024.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356.941 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 121257.412 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 17614.863 ops/s
[info]                  ·gc.alloc.rate:                   1813.187 MB/sec
[info]                  ·gc.alloc.rate.norm:              162024.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.579 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036.433 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 181972.953 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 17627.960 ops/s
[info]                  ·gc.alloc.rate:                   1814.331 MB/sec
[info]                  ·gc.alloc.rate.norm:              162024.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.717 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037.663 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 181968.046 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson":
[info]   17646.977 ±(99.9%) 415.687 ops/s [Average]
[info]   (min, avg, max) = (17549.192, 17646.977, 17832.277), stdev = 107.953
[info]   CI (99.9%): [17231.290, 18062.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1816.372 ±(99.9%) 42.771 MB/sec [Average]
[info]   (min, avg, max) = (1805.884, 1816.372, 1835.313), stdev = 11.108
[info]   CI (99.9%): [1773.601, 1859.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   162024.025 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (162024.023, 162024.025, 162024.029), stdev = 0.003
[info]   CI (99.9%): [162024.014, 162024.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.062), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.600 ±(99.9%) 8.168 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.600, 5.579), stdev = 2.121
[info]   CI (99.9%): [≈ 0, 10.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1898.825 ±(99.9%) 1166.499 MB/sec [Average]
[info]   (min, avg, max) = (1356.941, 1898.825, 2037.663), stdev = 302.936
[info]   CI (99.9%): [732.325, 3065.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   169363.576 ±(99.9%) 103664.379 B/op [Average]
[info]   (min, avg, max) = (121257.412, 169363.576, 182379.225), stdev = 26921.310
[info]   CI (99.9%): [65699.197, 273027.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 35.34% complete, ETA 01:26:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20509.385 ops/s
[info] # Warmup Iteration   2: 26939.426 ops/s
[info] # Warmup Iteration   3: 26871.192 ops/s
[info] # Warmup Iteration   4: 27076.087 ops/s
[info] # Warmup Iteration   5: 26434.016 ops/s
[info] Iteration   1: 26981.676 ops/s
[info]                  ·gc.alloc.rate:                   1394.492 MB/sec
[info]                  ·gc.alloc.rate.norm:              81368.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.214 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.395 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78561.608 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 27093.747 ops/s
[info]                  ·gc.alloc.rate:                   1400.293 MB/sec
[info]                  ·gc.alloc.rate.norm:              81368.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.459 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78239.812 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 26958.011 ops/s
[info]                  ·gc.alloc.rate:                   1393.522 MB/sec
[info]                  ·gc.alloc.rate.norm:              81368.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.430 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.939 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78648.061 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 27084.520 ops/s
[info]                  ·gc.alloc.rate:                   1399.878 MB/sec
[info]                  ·gc.alloc.rate.norm:              81368.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.210 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.789 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78340.328 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 26991.059 ops/s
[info]                  ·gc.alloc.rate:                   1395.125 MB/sec
[info]                  ·gc.alloc.rate.norm:              81368.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.839 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78668.445 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle":
[info]   27021.802 ±(99.9%) 241.504 ops/s [Average]
[info]   (min, avg, max) = (26958.011, 27021.802, 27093.747), stdev = 62.718
[info]   CI (99.9%): [26780.299, 27263.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1396.662 ±(99.9%) 12.246 MB/sec [Average]
[info]   (min, avg, max) = (1393.522, 1396.662, 1400.293), stdev = 3.180
[info]   CI (99.9%): [1384.416, 1408.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   81368.015 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (81368.015, 81368.015, 81368.016), stdev = 0.001
[info]   CI (99.9%): [81368.013, 81368.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0.971 ±(99.9%) 3.913 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.971, 2.430), stdev = 1.016
[info]   CI (99.9%): [≈ 0, 4.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   1347.284 ±(99.9%) 3.975 MB/sec [Average]
[info]   (min, avg, max) = (1346.395, 1347.284, 1348.839), stdev = 1.032
[info]   CI (99.9%): [1343.309, 1351.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   78491.651 ±(99.9%) 738.018 B/op [Average]
[info]   (min, avg, max) = (78239.812, 78491.651, 78668.445), stdev = 191.661
[info]   CI (99.9%): [77753.633, 79229.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 35.54% complete, ETA 01:26:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37819.223 ops/s
[info] # Warmup Iteration   2: 53716.340 ops/s
[info] # Warmup Iteration   3: 53194.888 ops/s
[info] # Warmup Iteration   4: 54602.161 ops/s
[info] # Warmup Iteration   5: 54309.026 ops/s
[info] Iteration   1: 54541.017 ops/s
[info]                  ·gc.alloc.rate:                   1322.522 MB/sec
[info]                  ·gc.alloc.rate.norm:              38176.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.601 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.358 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38748.588 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 54560.298 ops/s
[info]                  ·gc.alloc.rate:                   1323.430 MB/sec
[info]                  ·gc.alloc.rate.norm:              38176.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.402 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.861 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38736.517 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 54263.261 ops/s
[info]                  ·gc.alloc.rate:                   1315.861 MB/sec
[info]                  ·gc.alloc.rate.norm:              38176.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.207 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.128 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38967.090 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 54535.173 ops/s
[info]                  ·gc.alloc.rate:                   1322.503 MB/sec
[info]                  ·gc.alloc.rate.norm:              38176.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.201 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.842 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38792.006 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 54467.081 ops/s
[info]                  ·gc.alloc.rate:                   1320.894 MB/sec
[info]                  ·gc.alloc.rate.norm:              38176.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.804 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.881 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38898.166 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce":
[info]   54473.366 ±(99.9%) 472.146 ops/s [Average]
[info]   (min, avg, max) = (54263.261, 54473.366, 54560.298), stdev = 122.615
[info]   CI (99.9%): [54001.220, 54945.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1321.042 ±(99.9%) 11.694 MB/sec [Average]
[info]   (min, avg, max) = (1315.861, 1321.042, 1323.430), stdev = 3.037
[info]   CI (99.9%): [1309.348, 1332.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   38176.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (38176.007, 38176.008, 38176.008), stdev = 0.001
[info]   CI (99.9%): [38176.007, 38176.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.050, 0.083), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.443 ±(99.9%) 2.635 B/op [Average]
[info]   (min, avg, max) = (0.601, 1.443, 2.402), stdev = 0.684
[info]   CI (99.9%): [≈ 0, 4.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1343.614 ±(99.9%) 5.298 MB/sec [Average]
[info]   (min, avg, max) = (1342.358, 1343.614, 1345.881), stdev = 1.376
[info]   CI (99.9%): [1338.316, 1348.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   38828.474 ±(99.9%) 386.214 B/op [Average]
[info]   (min, avg, max) = (38736.517, 38828.474, 38967.090), stdev = 100.299
[info]   CI (99.9%): [38442.260, 39214.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 35.74% complete, ETA 01:26:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 105904.827 ops/s
[info] # Warmup Iteration   2: 164072.396 ops/s
[info] # Warmup Iteration   3: 163240.539 ops/s
[info] # Warmup Iteration   4: 169351.616 ops/s
[info] # Warmup Iteration   5: 169655.778 ops/s
[info] Iteration   1: 164155.285 ops/s
[info]                  ·gc.alloc.rate:                   1070.282 MB/sec
[info]                  ·gc.alloc.rate.norm:              10264.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.200 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.501 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12951.296 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 163809.243 ops/s
[info]                  ·gc.alloc.rate:                   1068.024 MB/sec
[info]                  ·gc.alloc.rate.norm:              10264.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.524 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6491.968 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 163971.086 ops/s
[info]                  ·gc.alloc.rate:                   1069.064 MB/sec
[info]                  ·gc.alloc.rate.norm:              10264.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.799 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.474 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12985.006 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 163336.816 ops/s
[info]                  ·gc.alloc.rate:                   1064.973 MB/sec
[info]                  ·gc.alloc.rate.norm:              10264.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.235 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13042.214 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 164506.743 ops/s
[info]                  ·gc.alloc.rate:                   1072.462 MB/sec
[info]                  ·gc.alloc.rate.norm:              10264.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.199 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      677.180 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6480.952 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala":
[info]   163955.834 ±(99.9%) 1665.360 ops/s [Average]
[info]   (min, avg, max) = (163336.816, 163955.834, 164506.743), stdev = 432.489
[info]   CI (99.9%): [162290.474, 165621.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1068.961 ±(99.9%) 10.684 MB/sec [Average]
[info]   (min, avg, max) = (1064.973, 1068.961, 1072.462), stdev = 2.775
[info]   CI (99.9%): [1058.277, 1079.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   10264.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10264.002, 10264.003, 10264.003), stdev = 0.001
[info]   CI (99.9%): [10264.002, 10264.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.083), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.240 ±(99.9%) 1.264 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.240, 0.799), stdev = 0.328
[info]   CI (99.9%): [≈ 0, 1.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1081.783 ±(99.9%) 1425.154 MB/sec [Average]
[info]   (min, avg, max) = (675.524, 1081.783, 1353.235), stdev = 370.108
[info]   CI (99.9%): [≈ 0, 2506.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   10390.287 ±(99.9%) 13723.081 B/op [Average]
[info]   (min, avg, max) = (6480.952, 10390.287, 13042.214), stdev = 3563.841
[info]   CI (99.9%): [≈ 0, 24113.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 35.94% complete, ETA 01:25:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 932606.683 ops/s
[info] # Warmup Iteration   2: 1005882.472 ops/s
[info] # Warmup Iteration   3: 1025085.787 ops/s
[info] # Warmup Iteration   4: 1029949.727 ops/s
[info] # Warmup Iteration   5: 1031078.005 ops/s
[info] Iteration   1: 1008548.343 ops/s
[info]                  ·gc.alloc.rate:                   1081.376 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.195 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.136 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2102.846 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 1013122.566 ops/s
[info]                  ·gc.alloc.rate:                   1086.436 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.367 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1046.213 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1007249.325 ops/s
[info]                  ·gc.alloc.rate:                   1079.931 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.432 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2104.559 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1025587.543 ops/s
[info]                  ·gc.alloc.rate:                   1099.888 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.780 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2066.907 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1029501.770 ops/s
[info]                  ·gc.alloc.rate:                   1103.913 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.910 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1030.480 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala":
[info]   1016801.909 ±(99.9%) 39050.571 ops/s [Average]
[info]   (min, avg, max) = (1007249.325, 1016801.909, 1029501.770), stdev = 10141.309
[info]   CI (99.9%): [977751.339, 1055852.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1090.309 ±(99.9%) 42.152 MB/sec [Average]
[info]   (min, avg, max) = (1079.931, 1090.309, 1103.913), stdev = 10.947
[info]   CI (99.9%): [1048.156, 1132.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1688.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1688.000, 1688.000, 1688.000), stdev = 0.001
[info]   CI (99.9%): [1688.000, 1688.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.125), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.078 ±(99.9%) 0.326 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.078, 0.195), stdev = 0.085
[info]   CI (99.9%): [≈ 0, 0.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1077.525 ±(99.9%) 1419.718 MB/sec [Average]
[info]   (min, avg, max) = (673.367, 1077.525, 1347.136), stdev = 368.696
[info]   CI (99.9%): [≈ 0, 2497.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1670.201 ±(99.9%) 2221.914 B/op [Average]
[info]   (min, avg, max) = (1030.480, 1670.201, 2104.559), stdev = 577.024
[info]   CI (99.9%): [≈ 0, 3892.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 36.14% complete, ETA 01:25:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 847482.310 ops/s
[info] # Warmup Iteration   2: 913332.873 ops/s
[info] # Warmup Iteration   3: 910681.478 ops/s
[info] # Warmup Iteration   4: 912464.306 ops/s
[info] # Warmup Iteration   5: 912826.876 ops/s
[info] Iteration   1: 912765.118 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 912589.624 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 914412.523 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 911952.584 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 911934.817 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc":
[info]   912730.933 ±(99.9%) 3893.013 ops/s [Average]
[info]   (min, avg, max) = (911934.817, 912730.933, 914412.523), stdev = 1011.003
[info]   CI (99.9%): [908837.920, 916623.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 36.35% complete, ETA 01:25:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 44837.214 ops/s
[info] # Warmup Iteration   2: 59413.277 ops/s
[info] # Warmup Iteration   3: 61021.923 ops/s
[info] # Warmup Iteration   4: 61783.969 ops/s
[info] # Warmup Iteration   5: 62034.323 ops/s
[info] Iteration   1: 60424.260 ops/s
[info]                  ·gc.alloc.rate:                   1406.274 MB/sec
[info]                  ·gc.alloc.rate.norm:              36624.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.542 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.118 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34875.033 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 61884.430 ops/s
[info]                  ·gc.alloc.rate:                   1439.621 MB/sec
[info]                  ·gc.alloc.rate.norm:              36624.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.529 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.868 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34060.847 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 61870.398 ops/s
[info]                  ·gc.alloc.rate:                   1439.349 MB/sec
[info]                  ·gc.alloc.rate.norm:              36624.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.118 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2010.241 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51150.255 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 62019.196 ops/s
[info]                  ·gc.alloc.rate:                   1442.750 MB/sec
[info]                  ·gc.alloc.rate.norm:              36624.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.056 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.790 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34061.140 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 60910.541 ops/s
[info]                  ·gc.alloc.rate:                   1416.980 MB/sec
[info]                  ·gc.alloc.rate.norm:              36624.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.538 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.144 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34715.588 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson":
[info]   61421.765 ±(99.9%) 2742.230 ops/s [Average]
[info]   (min, avg, max) = (60424.260, 61421.765, 62019.196), stdev = 712.148
[info]   CI (99.9%): [58679.535, 64163.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1428.995 ±(99.9%) 62.976 MB/sec [Average]
[info]   (min, avg, max) = (1406.274, 1428.995, 1442.750), stdev = 16.355
[info]   CI (99.9%): [1366.019, 1491.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   36624.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (36624.007, 36624.007, 36624.007), stdev = 0.001
[info]   CI (99.9%): [36624.006, 36624.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.037, 0.083), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.957 ±(99.9%) 2.646 B/op [Average]
[info]   (min, avg, max) = (0.529, 0.957, 2.118), stdev = 0.687
[info]   CI (99.9%): [≈ 0, 3.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1474.632 ±(99.9%) 1152.959 MB/sec [Average]
[info]   (min, avg, max) = (1338.868, 1474.632, 2010.241), stdev = 299.420
[info]   CI (99.9%): [321.673, 2627.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   37772.573 ±(99.9%) 28831.973 B/op [Average]
[info]   (min, avg, max) = (34060.847, 37772.573, 51150.255), stdev = 7487.572
[info]   CI (99.9%): [8940.600, 66604.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 36.55% complete, ETA 01:25:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21045.393 ops/s
[info] # Warmup Iteration   2: 22755.638 ops/s
[info] # Warmup Iteration   3: 23028.118 ops/s
[info] # Warmup Iteration   4: 22929.337 ops/s
[info] # Warmup Iteration   5: 22402.006 ops/s
[info] Iteration   1: 23063.737 ops/s
[info]                  ·gc.alloc.rate:      331.002 MB/sec
[info]                  ·gc.alloc.rate.norm: 22592.019 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 22649.474 ops/s
[info]                  ·gc.alloc.rate:                   325.030 MB/sec
[info]                  ·gc.alloc.rate.norm:              22592.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.383 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35544.949 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 22867.179 ops/s
[info]                  ·gc.alloc.rate:                   328.171 MB/sec
[info]                  ·gc.alloc.rate.norm:              22592.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.427 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35207.728 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 22931.023 ops/s
[info]                  ·gc.alloc.rate:      329.098 MB/sec
[info]                  ·gc.alloc.rate.norm: 22592.019 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 22853.720 ops/s
[info]                  ·gc.alloc.rate:                   327.987 MB/sec
[info]                  ·gc.alloc.rate.norm:              22592.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.430 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35227.750 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle":
[info]   22873.027 ±(99.9%) 577.971 ops/s [Average]
[info]   (min, avg, max) = (22649.474, 22873.027, 23063.737), stdev = 150.097
[info]   CI (99.9%): [22295.056, 23450.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   328.258 ±(99.9%) 8.334 MB/sec [Average]
[info]   (min, avg, max) = (325.030, 328.258, 331.002), stdev = 2.164
[info]   CI (99.9%): [319.924, 336.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   22592.018 ±(99.9%) 0.003 B/op [Average]
[info]   (min, avg, max) = (22592.018, 22592.018, 22592.019), stdev = 0.001
[info]   CI (99.9%): [22592.016, 22592.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   306.848 ±(99.9%) 1078.615 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.848, 511.430), stdev = 280.113
[info]   CI (99.9%): [≈ 0, 1385.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   21196.086 ±(99.9%) 74509.008 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21196.086, 35544.949), stdev = 19349.753
[info]   CI (99.9%): [≈ 0, 95705.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 36.75% complete, ETA 01:24:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12119.350 ops/s
[info] # Warmup Iteration   2: 15833.816 ops/s
[info] # Warmup Iteration   3: 15983.126 ops/s
[info] # Warmup Iteration   4: 16030.856 ops/s
[info] # Warmup Iteration   5: 16474.980 ops/s
[info] Iteration   1: 16592.051 ops/s
[info]                  ·gc.alloc.rate:                   1480.168 MB/sec
[info]                  ·gc.alloc.rate.norm:              140480.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.924 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.589 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 127517.559 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 16490.101 ops/s
[info]                  ·gc.alloc.rate:                   1471.662 MB/sec
[info]                  ·gc.alloc.rate.norm:              140480.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.961 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2016.861 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 192522.928 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 16467.623 ops/s
[info]                  ·gc.alloc.rate:                   1469.383 MB/sec
[info]                  ·gc.alloc.rate.norm:              140480.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.989 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.091 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 128597.142 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 16090.975 ops/s
[info]                  ·gc.alloc.rate:                   1436.000 MB/sec
[info]                  ·gc.alloc.rate.norm:              140480.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.489 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 131723.451 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 16076.385 ops/s
[info]                  ·gc.alloc.rate:                   1434.911 MB/sec
[info]                  ·gc.alloc.rate.norm:              140480.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.139 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 131984.939 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce":
[info]   16343.427 ±(99.9%) 930.938 ops/s [Average]
[info]   (min, avg, max) = (16076.385, 16343.427, 16592.051), stdev = 241.762
[info]   CI (99.9%): [15412.489, 17274.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1458.425 ±(99.9%) 82.224 MB/sec [Average]
[info]   (min, avg, max) = (1434.911, 1458.425, 1480.168), stdev = 21.353
[info]   CI (99.9%): [1376.201, 1540.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   140480.033 ±(99.9%) 0.048 B/op [Average]
[info]   (min, avg, max) = (140480.025, 140480.033, 140480.054), stdev = 0.012
[info]   CI (99.9%): [140479.985, 140480.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.037, 0.062), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3.590 ±(99.9%) 8.271 B/op [Average]
[info]   (min, avg, max) = (1.989, 3.590, 5.961), stdev = 2.148
[info]   CI (99.9%): [≈ 0, 11.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1480.034 ±(99.9%) 1155.579 MB/sec [Average]
[info]   (min, avg, max) = (1343.589, 1480.034, 2016.861), stdev = 300.100
[info]   CI (99.9%): [324.454, 2635.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   142469.204 ±(99.9%) 108002.705 B/op [Average]
[info]   (min, avg, max) = (127517.559, 142469.204, 192522.928), stdev = 28047.959
[info]   CI (99.9%): [34466.499, 250471.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 36.95% complete, ETA 01:24:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9743.328 ops/s
[info] # Warmup Iteration   2: 17049.371 ops/s
[info] # Warmup Iteration   3: 17317.360 ops/s
[info] # Warmup Iteration   4: 16957.431 ops/s
[info] # Warmup Iteration   5: 16923.658 ops/s
[info] Iteration   1: 17442.672 ops/s
[info]                  ·gc.alloc.rate:                   1409.129 MB/sec
[info]                  ·gc.alloc.rate.norm:              127184.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.878 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.153 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 121951.204 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 17403.081 ops/s
[info]                  ·gc.alloc.rate:                   1405.905 MB/sec
[info]                  ·gc.alloc.rate.norm:              127179.554 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.883 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.539 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 122351.939 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 16977.291 ops/s
[info]                  ·gc.alloc.rate:                   1371.279 MB/sec
[info]                  ·gc.alloc.rate.norm:              127152.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.789 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 125530.268 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 16926.666 ops/s
[info]                  ·gc.alloc.rate:                   1367.270 MB/sec
[info]                  ·gc.alloc.rate.norm:              127152.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.741 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.149 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 126024.815 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 17278.760 ops/s
[info]                  ·gc.alloc.rate:                   1395.550 MB/sec
[info]                  ·gc.alloc.rate.norm:              127152.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.896 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 123549.238 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala":
[info]   17205.694 ±(99.9%) 924.322 ops/s [Average]
[info]   (min, avg, max) = (16926.666, 17205.694, 17442.672), stdev = 240.044
[info]   CI (99.9%): [16281.372, 18130.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1389.827 ±(99.9%) 74.981 MB/sec [Average]
[info]   (min, avg, max) = (1367.270, 1389.827, 1409.129), stdev = 19.472
[info]   CI (99.9%): [1314.846, 1464.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   127163.931 ±(99.9%) 63.067 B/op [Average]
[info]   (min, avg, max) = (127152.025, 127163.931, 127184.023), stdev = 16.378
[info]   CI (99.9%): [127100.864, 127226.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.083), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2.680 ±(99.9%) 11.340 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.680, 7.741), stdev = 2.945
[info]   CI (99.9%): [≈ 0, 14.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1353.727 ±(99.9%) 7.523 MB/sec [Average]
[info]   (min, avg, max) = (1351.153, 1353.727, 1356.008), stdev = 1.954
[info]   CI (99.9%): [1346.204, 1361.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   123881.493 ±(99.9%) 7071.000 B/op [Average]
[info]   (min, avg, max) = (121951.204, 123881.493, 126024.815), stdev = 1836.316
[info]   CI (99.9%): [116810.493, 130952.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 37.15% complete, ETA 01:24:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 388596.302 ops/s
[info] # Warmup Iteration   2: 422371.033 ops/s
[info] # Warmup Iteration   3: 416624.526 ops/s
[info] # Warmup Iteration   4: 406016.602 ops/s
[info] # Warmup Iteration   5: 421551.873 ops/s
[info] Iteration   1: 421418.414 ops/s
[info]                  ·gc.alloc.rate:                   1096.769 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.233 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.608 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5032.787 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 421831.870 ops/s
[info]                  ·gc.alloc.rate:                   1097.543 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.283 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2512.675 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 422998.567 ops/s
[info]                  ·gc.alloc.rate:                   1100.564 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.310 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.447 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5011.110 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 422344.704 ops/s
[info]                  ·gc.alloc.rate:                   1098.802 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.398 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5018.963 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 421955.440 ops/s
[info]                  ·gc.alloc.rate:                   1098.178 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.080 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2514.195 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala":
[info]   422109.799 ±(99.9%) 2297.654 ops/s [Average]
[info]   (min, avg, max) = (421418.414, 422109.799, 422998.567), stdev = 596.693
[info]   CI (99.9%): [419812.145, 424407.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1098.371 ±(99.9%) 5.541 MB/sec [Average]
[info]   (min, avg, max) = (1096.769, 1098.371, 1100.564), stdev = 1.439
[info]   CI (99.9%): [1092.830, 1103.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.001, 4096.001, 4096.001), stdev = 0.001
[info]   CI (99.9%): [4096.001, 4096.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.083), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.109 ±(99.9%) 0.582 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.109, 0.310), stdev = 0.151
[info]   CI (99.9%): [≈ 0, 0.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1077.563 ±(99.9%) 1419.702 MB/sec [Average]
[info]   (min, avg, max) = (673.283, 1077.563, 1347.608), stdev = 368.692
[info]   CI (99.9%): [≈ 0, 2497.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4017.946 ±(99.9%) 5288.652 B/op [Average]
[info]   (min, avg, max) = (2512.675, 4017.946, 5032.787), stdev = 1373.446
[info]   CI (99.9%): [≈ 0, 9306.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 1.095
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 37.35% complete, ETA 01:24:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7040.988 ops/s
[info] # Warmup Iteration   2: 12521.836 ops/s
[info] # Warmup Iteration   3: 12518.730 ops/s
[info] # Warmup Iteration   4: 12708.228 ops/s
[info] # Warmup Iteration   5: 12591.752 ops/s
[info] Iteration   1: 12690.259 ops/s
[info]                  ·gc.alloc.rate:                   1751.846 MB/sec
[info]                  ·gc.alloc.rate.norm:              217320.035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.073 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 167851.460 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 12697.446 ops/s
[info]                  ·gc.alloc.rate:                   1752.722 MB/sec
[info]                  ·gc.alloc.rate.norm:              217320.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.739 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.848 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 251928.989 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 12670.769 ops/s
[info]                  ·gc.alloc.rate:                   1749.115 MB/sec
[info]                  ·gc.alloc.rate.norm:              217320.035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.985 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 168475.347 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 12345.582 ops/s
[info]                  ·gc.alloc.rate:                   1704.346 MB/sec
[info]                  ·gc.alloc.rate.norm:              217320.044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.307 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.404 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 259532.962 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 12501.735 ops/s
[info]                  ·gc.alloc.rate:                   1725.832 MB/sec
[info]                  ·gc.alloc.rate.norm:              217320.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.620 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1357.680 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 170961.656 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson":
[info]   12581.158 ±(99.9%) 594.235 ops/s [Average]
[info]   (min, avg, max) = (12345.582, 12581.158, 12697.446), stdev = 154.321
[info]   CI (99.9%): [11986.923, 13175.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1736.772 ±(99.9%) 81.800 MB/sec [Average]
[info]   (min, avg, max) = (1704.346, 1736.772, 1752.722), stdev = 21.243
[info]   CI (99.9%): [1654.973, 1818.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   217320.036 ±(99.9%) 0.019 B/op [Average]
[info]   (min, avg, max) = (217320.032, 217320.036, 217320.044), stdev = 0.005
[info]   CI (99.9%): [217320.017, 217320.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3.133 ±(99.9%) 13.034 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.133, 7.739), stdev = 3.385
[info]   CI (99.9%): [≈ 0, 16.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1626.798 ±(99.9%) 1430.079 MB/sec [Average]
[info]   (min, avg, max) = (1353.073, 1626.798, 2035.404), stdev = 371.387
[info]   CI (99.9%): [196.719, 3056.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   203750.083 ±(99.9%) 183068.008 B/op [Average]
[info]   (min, avg, max) = (167851.460, 203750.083, 259532.962), stdev = 47542.180
[info]   CI (99.9%): [20682.074, 386818.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 37.55% complete, ETA 01:23:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13197.589 ops/s
[info] # Warmup Iteration   2: 16176.749 ops/s
[info] # Warmup Iteration   3: 16058.775 ops/s
[info] # Warmup Iteration   4: 16602.718 ops/s
[info] # Warmup Iteration   5: 16671.581 ops/s
[info] Iteration   1: 16726.361 ops/s
[info]                  ·gc.alloc.rate:                   1397.197 MB/sec
[info]                  ·gc.alloc.rate.norm:              131504.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.411 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 126724.085 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 16671.865 ops/s
[info]                  ·gc.alloc.rate:                   1392.686 MB/sec
[info]                  ·gc.alloc.rate.norm:              131500.340 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.965 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.367 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 127126.794 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 16176.764 ops/s
[info]                  ·gc.alloc.rate:                   1351.124 MB/sec
[info]                  ·gc.alloc.rate.norm:              131480.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.847 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 131063.900 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 16386.383 ops/s
[info]                  ·gc.alloc.rate:                   1368.561 MB/sec
[info]                  ·gc.alloc.rate.norm:              131480.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.997 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.750 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 129480.680 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 16621.557 ops/s
[info]                  ·gc.alloc.rate:                   1388.693 MB/sec
[info]                  ·gc.alloc.rate.norm:              131480.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.578 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 127776.674 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle":
[info]   16516.586 ±(99.9%) 885.580 ops/s [Average]
[info]   (min, avg, max) = (16176.764, 16516.586, 16726.361), stdev = 229.982
[info]   CI (99.9%): [15631.006, 17402.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1379.652 ±(99.9%) 74.476 MB/sec [Average]
[info]   (min, avg, max) = (1351.124, 1379.652, 1397.197), stdev = 19.341
[info]   CI (99.9%): [1305.176, 1454.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   131488.888 ±(99.9%) 47.000 B/op [Average]
[info]   (min, avg, max) = (131480.025, 131488.888, 131504.024), stdev = 12.206
[info]   CI (99.9%): [131441.888, 131535.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   1.592 ±(99.9%) 10.032 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.592, 5.997), stdev = 2.605
[info]   CI (99.9%): [≈ 0, 11.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   1347.391 ±(99.9%) 5.172 MB/sec [Average]
[info]   (min, avg, max) = (1346.367, 1347.391, 1349.578), stdev = 1.343
[info]   CI (99.9%): [1342.219, 1352.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   128434.427 ±(99.9%) 6962.264 B/op [Average]
[info]   (min, avg, max) = (126724.085, 128434.427, 131063.900), stdev = 1808.078
[info]   CI (99.9%): [121472.162, 135396.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 37.75% complete, ETA 01:23:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27347.914 ops/s
[info] # Warmup Iteration   2: 37511.375 ops/s
[info] # Warmup Iteration   3: 37866.653 ops/s
[info] # Warmup Iteration   4: 38434.102 ops/s
[info] # Warmup Iteration   5: 39137.482 ops/s
[info] Iteration   1: 39276.924 ops/s
[info]                  ·gc.alloc.rate:                   1220.596 MB/sec
[info]                  ·gc.alloc.rate.norm:              48928.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.668 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.720 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53863.469 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 39085.641 ops/s
[info]                  ·gc.alloc.rate:                   1214.940 MB/sec
[info]                  ·gc.alloc.rate.norm:              48928.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.387 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54060.538 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 39277.988 ops/s
[info]                  ·gc.alloc.rate:                   1220.697 MB/sec
[info]                  ·gc.alloc.rate.norm:              48928.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.336 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.798 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53822.061 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 39139.704 ops/s
[info]                  ·gc.alloc.rate:                   1216.500 MB/sec
[info]                  ·gc.alloc.rate.norm:              48928.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.863 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54050.585 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 39167.562 ops/s
[info]                  ·gc.alloc.rate:                   1217.370 MB/sec
[info]                  ·gc.alloc.rate.norm:              48928.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.346 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.194 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54065.485 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce":
[info]   39189.564 ±(99.9%) 329.115 ops/s [Average]
[info]   (min, avg, max) = (39085.641, 39189.564, 39277.988), stdev = 85.470
[info]   CI (99.9%): [38860.449, 39518.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1218.021 ±(99.9%) 9.822 MB/sec [Average]
[info]   (min, avg, max) = (1214.940, 1218.021, 1220.697), stdev = 2.551
[info]   CI (99.9%): [1208.199, 1227.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   48928.011 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48928.010, 48928.011, 48928.011), stdev = 0.001
[info]   CI (99.9%): [48928.009, 48928.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.083), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.670 ±(99.9%) 6.433 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.670, 3.346), stdev = 1.671
[info]   CI (99.9%): [≈ 0, 8.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1343.592 ±(99.9%) 4.192 MB/sec [Average]
[info]   (min, avg, max) = (1342.387, 1343.592, 1345.194), stdev = 1.089
[info]   CI (99.9%): [1339.400, 1347.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   53972.428 ±(99.9%) 459.720 B/op [Average]
[info]   (min, avg, max) = (53822.061, 53972.428, 54065.485), stdev = 119.388
[info]   CI (99.9%): [53512.708, 54432.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 37.95% complete, ETA 01:23:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28983.580 ops/s
[info] # Warmup Iteration   2: 44751.448 ops/s
[info] # Warmup Iteration   3: 44592.573 ops/s
[info] # Warmup Iteration   4: 44054.758 ops/s
[info] # Warmup Iteration   5: 43980.285 ops/s
[info] Iteration   1: 45214.015 ops/s
[info]                  ·gc.alloc.rate:                   1199.120 MB/sec
[info]                  ·gc.alloc.rate.norm:              41752.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.174 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.164 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47045.988 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 45519.225 ops/s
[info]                  ·gc.alloc.rate:                   1207.285 MB/sec
[info]                  ·gc.alloc.rate.norm:              41752.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.439 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.493 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 46773.799 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 45421.309 ops/s
[info]                  ·gc.alloc.rate:                   1204.710 MB/sec
[info]                  ·gc.alloc.rate.norm:              41752.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676.593 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23448.886 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 45432.552 ops/s
[info]                  ·gc.alloc.rate:                   1204.912 MB/sec
[info]                  ·gc.alloc.rate.norm:              41752.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.605 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.810 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 46911.558 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 45368.264 ops/s
[info]                  ·gc.alloc.rate:                   1203.182 MB/sec
[info]                  ·gc.alloc.rate.norm:              41752.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.722 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.075 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47022.900 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala":
[info]   45391.073 ±(99.9%) 434.490 ops/s [Average]
[info]   (min, avg, max) = (45214.015, 45391.073, 45519.225), stdev = 112.836
[info]   CI (99.9%): [44956.583, 45825.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1203.842 ±(99.9%) 11.629 MB/sec [Average]
[info]   (min, avg, max) = (1199.120, 1203.842, 1207.285), stdev = 3.020
[info]   CI (99.9%): [1192.213, 1215.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   41752.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (41752.009, 41752.009, 41752.010), stdev = 0.001
[info]   CI (99.9%): [41752.008, 41752.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.104), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.588 ±(99.9%) 5.345 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.588, 3.605), stdev = 1.388
[info]   CI (99.9%): [≈ 0, 6.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1217.827 ±(99.9%) 1165.061 MB/sec [Average]
[info]   (min, avg, max) = (676.593, 1217.827, 1355.075), stdev = 302.563
[info]   CI (99.9%): [52.766, 2382.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   42240.626 ±(99.9%) 40452.770 B/op [Average]
[info]   (min, avg, max) = (23448.886, 42240.626, 47045.988), stdev = 10505.456
[info]   CI (99.9%): [1787.856, 82693.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 38.15% complete, ETA 01:22:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1111491.872 ops/s
[info] # Warmup Iteration   2: 1169910.818 ops/s
[info] # Warmup Iteration   3: 1189101.291 ops/s
[info] # Warmup Iteration   4: 1194762.985 ops/s
[info] # Warmup Iteration   5: 1194513.932 ops/s
[info] Iteration   1: 1195818.277 ops/s
[info]                  ·gc.alloc.rate:                   1087.687 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.150 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1773.598 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1220724.304 ops/s
[info]                  ·gc.alloc.rate:                   1110.515 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.342 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 868.269 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 1200374.466 ops/s
[info]                  ·gc.alloc.rate:                   1091.864 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.136 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.422 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1765.859 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1203384.883 ops/s
[info]                  ·gc.alloc.rate:                   1094.499 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.082 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.375 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1761.545 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1213183.994 ops/s
[info]                  ·gc.alloc.rate:                   1103.531 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.873 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 874.453 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala":
[info]   1206697.185 ±(99.9%) 38896.152 ops/s [Average]
[info]   (min, avg, max) = (1195818.277, 1206697.185, 1220724.304), stdev = 10101.207
[info]   CI (99.9%): [1167801.033, 1245593.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1097.619 ±(99.9%) 35.645 MB/sec [Average]
[info]   (min, avg, max) = (1087.687, 1097.619, 1110.515), stdev = 9.257
[info]   CI (99.9%): [1061.974, 1133.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1432.000, 1432.000, 1432.000), stdev = 0.001
[info]   CI (99.9%): [1432.000, 1432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.170 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.104), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.055 ±(99.9%) 0.223 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.055, 0.136), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1077.432 ±(99.9%) 1419.503 MB/sec [Average]
[info]   (min, avg, max) = (673.342, 1077.432, 1347.150), stdev = 368.640
[info]   CI (99.9%): [≈ 0, 2496.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1408.745 ±(99.9%) 1889.072 B/op [Average]
[info]   (min, avg, max) = (868.269, 1408.745, 1773.598), stdev = 490.586
[info]   CI (99.9%): [≈ 0, 3297.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 38.35% complete, ETA 01:22:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1350950.365 ops/s
[info] # Warmup Iteration   2: 1419554.660 ops/s
[info] # Warmup Iteration   3: 1419024.557 ops/s
[info] # Warmup Iteration   4: 1418054.118 ops/s
[info] # Warmup Iteration   5: 1420462.076 ops/s
[info] Iteration   1: 1420623.680 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1419290.289 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1414412.414 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1419564.259 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1416404.270 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   1418058.982 ±(99.9%) 9891.581 ops/s [Average]
[info]   (min, avg, max) = (1414412.414, 1418058.982, 1420623.680), stdev = 2568.812
[info]   CI (99.9%): [1408167.401, 1427950.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 38.55% complete, ETA 01:22:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26127.310 ops/s
[info] # Warmup Iteration   2: 34856.826 ops/s
[info] # Warmup Iteration   3: 34992.682 ops/s
[info] # Warmup Iteration   4: 34976.164 ops/s
[info] # Warmup Iteration   5: 35570.577 ops/s
[info] Iteration   1: 35300.642 ops/s
[info]                  ·gc.alloc.rate:                   1067.701 MB/sec
[info]                  ·gc.alloc.rate.norm:              47616.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.545 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29904.164 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 35383.575 ops/s
[info]                  ·gc.alloc.rate:                   1070.232 MB/sec
[info]                  ·gc.alloc.rate.norm:              47616.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.704 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.605 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59556.296 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 35327.501 ops/s
[info]                  ·gc.alloc.rate:                   1068.501 MB/sec
[info]                  ·gc.alloc.rate.norm:              47616.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.204 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29821.968 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 35431.075 ops/s
[info]                  ·gc.alloc.rate:                   1071.675 MB/sec
[info]                  ·gc.alloc.rate.norm:              47616.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.849 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.443 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59468.913 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 35444.404 ops/s
[info]                  ·gc.alloc.rate:                   1072.105 MB/sec
[info]                  ·gc.alloc.rate.norm:              47616.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.193 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59478.361 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson":
[info]   35377.439 ±(99.9%) 241.936 ops/s [Average]
[info]   (min, avg, max) = (35300.642, 35377.439, 35444.404), stdev = 62.830
[info]   CI (99.9%): [35135.503, 35619.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1070.043 ±(99.9%) 7.410 MB/sec [Average]
[info]   (min, avg, max) = (1067.701, 1070.043, 1072.105), stdev = 1.924
[info]   CI (99.9%): [1062.633, 1077.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   47616.012 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (47616.012, 47616.012, 47616.012), stdev = 0.001
[info]   CI (99.9%): [47616.010, 47616.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.111 ±(99.9%) 6.377 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.111, 3.704), stdev = 1.656
[info]   CI (99.9%): [≈ 0, 7.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1071.198 ±(99.9%) 1410.711 MB/sec [Average]
[info]   (min, avg, max) = (669.204, 1071.198, 1339.193), stdev = 366.357
[info]   CI (99.9%): [≈ 0, 2481.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   47645.940 ±(99.9%) 62509.546 B/op [Average]
[info]   (min, avg, max) = (29821.968, 47645.940, 59556.296), stdev = 16233.531
[info]   CI (99.9%): [≈ 0, 110155.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 38.76% complete, ETA 01:22:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26916.670 ops/s
[info] # Warmup Iteration   2: 28860.988 ops/s
[info] # Warmup Iteration   3: 29571.406 ops/s
[info] # Warmup Iteration   4: 29340.669 ops/s
[info] # Warmup Iteration   5: 29509.232 ops/s
[info] Iteration   1: 29620.616 ops/s
[info]                  ·gc.alloc.rate:      415.403 MB/sec
[info]                  ·gc.alloc.rate.norm: 22080.014 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 29447.211 ops/s
[info]                  ·gc.alloc.rate:                   412.997 MB/sec
[info]                  ·gc.alloc.rate.norm:              22080.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.405 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27341.155 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 28435.292 ops/s
[info]                  ·gc.alloc.rate:                   398.798 MB/sec
[info]                  ·gc.alloc.rate.norm:              22080.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.375 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28312.990 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 29451.879 ops/s
[info]                  ·gc.alloc.rate:                   413.045 MB/sec
[info]                  ·gc.alloc.rate.norm:              22080.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.744 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     146.687 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.843 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36128.336 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 29555.018 ops/s
[info]                  ·gc.alloc.rate:      414.537 MB/sec
[info]                  ·gc.alloc.rate.norm: 22080.015 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle":
[info]   29302.003 ±(99.9%) 1886.684 ops/s [Average]
[info]   (min, avg, max) = (28435.292, 29302.003, 29620.616), stdev = 489.966
[info]   CI (99.9%): [27415.319, 31188.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   410.956 ±(99.9%) 26.465 MB/sec [Average]
[info]   (min, avg, max) = (398.798, 410.956, 415.403), stdev = 6.873
[info]   CI (99.9%): [384.491, 437.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   22080.014 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (22080.014, 22080.014, 22080.015), stdev = 0.001
[info]   CI (99.9%): [22080.012, 22080.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0.549 ±(99.9%) 4.725 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.549, 2.744), stdev = 1.227
[info]   CI (99.9%): [≈ 0, 5.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   29.337 ±(99.9%) 252.604 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 29.337, 146.687), stdev = 65.600
[info]   CI (99.9%): [≈ 0, 281.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   339.725 ±(99.9%) 1221.843 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339.725, 675.843), stdev = 317.309
[info]   CI (99.9%): [≈ 0, 1561.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   18356.496 ±(99.9%) 65845.337 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18356.496, 36128.336), stdev = 17099.825
[info]   CI (99.9%): [≈ 0, 84201.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 38.96% complete, ETA 01:21:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63509.697 ops/s
[info] # Warmup Iteration   2: 75227.227 ops/s
[info] # Warmup Iteration   3: 76625.987 ops/s
[info] # Warmup Iteration   4: 78123.034 ops/s
[info] # Warmup Iteration   5: 77978.409 ops/s
[info] Iteration   1: 77928.121 ops/s
[info]                  ·gc.alloc.rate:                   1335.231 MB/sec
[info]                  ·gc.alloc.rate.norm:              26976.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.261 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.362 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27120.084 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 78025.377 ops/s
[info]                  ·gc.alloc.rate:                   1336.883 MB/sec
[info]                  ·gc.alloc.rate.norm:              26976.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.420 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.336 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27086.030 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 77514.808 ops/s
[info]                  ·gc.alloc.rate:                   1328.231 MB/sec
[info]                  ·gc.alloc.rate.norm:              26976.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.268 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27278.069 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 77972.692 ops/s
[info]                  ·gc.alloc.rate:                   1336.535 MB/sec
[info]                  ·gc.alloc.rate.norm:              26976.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.681 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.948 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27145.815 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 78241.695 ops/s
[info]                  ·gc.alloc.rate:                   1340.600 MB/sec
[info]                  ·gc.alloc.rate.norm:              26976.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.517 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13532.606 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce":
[info]   77936.539 ±(99.9%) 1019.235 ops/s [Average]
[info]   (min, avg, max) = (77514.808, 77936.539, 78241.695), stdev = 264.692
[info]   CI (99.9%): [76917.303, 78955.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate":
[info]   1335.496 ±(99.9%) 17.424 MB/sec [Average]
[info]   (min, avg, max) = (1328.231, 1335.496, 1340.600), stdev = 4.525
[info]   CI (99.9%): [1318.072, 1352.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   26976.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (26976.005, 26976.005, 26976.006), stdev = 0.001
[info]   CI (99.9%): [26976.005, 26976.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.083), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.926 ±(99.9%) 2.662 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.926, 1.681), stdev = 0.691
[info]   CI (99.9%): [≈ 0, 3.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1209.053 ±(99.9%) 1154.943 MB/sec [Average]
[info]   (min, avg, max) = (672.517, 1209.053, 1344.948), stdev = 299.935
[info]   CI (99.9%): [54.110, 2363.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   24432.521 ±(99.9%) 23464.561 B/op [Average]
[info]   (min, avg, max) = (13532.606, 24432.521, 27278.069), stdev = 6093.672
[info]   CI (99.9%): [967.960, 47897.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 39.16% complete, ETA 01:21:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42342.242 ops/s
[info] # Warmup Iteration   2: 329608.279 ops/s
[info] # Warmup Iteration   3: 334686.467 ops/s
[info] # Warmup Iteration   4: 319310.374 ops/s
[info] # Warmup Iteration   5: 329477.967 ops/s
[info] Iteration   1: 326120.912 ops/s
[info]                  ·gc.alloc.rate:                   653.020 MB/sec
[info]                  ·gc.alloc.rate.norm:              3152.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.514 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.134 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.360 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3250.177 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 335637.285 ops/s
[info]                  ·gc.alloc.rate:                   671.982 MB/sec
[info]                  ·gc.alloc.rate.norm:              3152.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.266 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3158.023 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 330218.621 ops/s
[info]                  ·gc.alloc.rate:                   661.204 MB/sec
[info]                  ·gc.alloc.rate.norm:              3152.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.099 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.939 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3203.179 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 333773.788 ops/s
[info]                  ·gc.alloc.rate:                   668.329 MB/sec
[info]                  ·gc.alloc.rate.norm:              3152.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.954 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3169.099 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 335371.887 ops/s
[info]                  ·gc.alloc.rate:                   671.511 MB/sec
[info]                  ·gc.alloc.rate.norm:              3152.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.933 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3153.983 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava":
[info]   332224.499 ±(99.9%) 15549.973 ops/s [Average]
[info]   (min, avg, max) = (326120.912, 332224.499, 335637.285), stdev = 4038.278
[info]   CI (99.9%): [316674.526, 347774.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   665.209 ±(99.9%) 31.041 MB/sec [Average]
[info]   (min, avg, max) = (653.020, 665.209, 671.982), stdev = 8.061
[info]   CI (99.9%): [634.168, 696.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   3152.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3152.001, 3152.001, 3152.001), stdev = 0.001
[info]   CI (99.9%): [3152.001, 3152.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.511 ±(99.9%) 4.311 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.511, 2.514), stdev = 1.120
[info]   CI (99.9%): [≈ 0, 4.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   2.466 ±(99.9%) 20.811 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.466, 12.134), stdev = 5.405
[info]   CI (99.9%): [≈ 0, 23.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   672.490 ±(99.9%) 2.895 MB/sec [Average]
[info]   (min, avg, max) = (671.933, 672.490, 673.360), stdev = 0.752
[info]   CI (99.9%): [669.596, 675.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   3186.892 ±(99.9%) 155.264 B/op [Average]
[info]   (min, avg, max) = (3153.983, 3186.892, 3250.177), stdev = 40.322
[info]   CI (99.9%): [3031.628, 3342.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 39.36% complete, ETA 01:21:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 164568.934 ops/s
[info] # Warmup Iteration   2: 260436.244 ops/s
[info] # Warmup Iteration   3: 250241.247 ops/s
[info] # Warmup Iteration   4: 254892.009 ops/s
[info] # Warmup Iteration   5: 253647.657 ops/s
[info] Iteration   1: 255218.923 ops/s
[info]                  ·gc.alloc.rate:      560.317 MB/sec
[info]                  ·gc.alloc.rate.norm: 3456.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 261243.582 ops/s
[info]                  ·gc.alloc.rate:                   573.532 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.627 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.589 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4058.929 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 261267.570 ops/s
[info]                  ·gc.alloc.rate:                   573.538 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.531 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4058.541 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 260108.523 ops/s
[info]                  ·gc.alloc.rate:                   571.043 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.126 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.590 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4082.681 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 259377.913 ops/s
[info]                  ·gc.alloc.rate:                   569.395 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.516 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4094.042 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala":
[info]   259443.302 ±(99.9%) 9599.836 ops/s [Average]
[info]   (min, avg, max) = (255218.923, 259443.302, 261267.570), stdev = 2493.047
[info]   CI (99.9%): [249843.466, 269043.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   569.565 ±(99.9%) 21.025 MB/sec [Average]
[info]   (min, avg, max) = (560.317, 569.565, 573.538), stdev = 5.460
[info]   CI (99.9%): [548.540, 590.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3456.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3456.002, 3456.002, 3456.002), stdev = 0.001
[info]   CI (99.9%): [3456.001, 3456.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.104), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.151 ±(99.9%) 1.047 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.151, 0.627), stdev = 0.272
[info]   CI (99.9%): [≈ 0, 1.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   539.245 ±(99.9%) 1160.768 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.245, 674.590), stdev = 301.448
[info]   CI (99.9%): [≈ 0, 1700.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3258.839 ±(99.9%) 7015.145 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3258.839, 4094.042), stdev = 1821.811
[info]   CI (99.9%): [≈ 0, 10273.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 39.56% complete, ETA 01:21:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 438328.797 ops/s
[info] # Warmup Iteration   2: 456660.788 ops/s
[info] # Warmup Iteration   3: 465991.886 ops/s
[info] # Warmup Iteration   4: 471189.296 ops/s
[info] # Warmup Iteration   5: 464190.814 ops/s
[info] Iteration   1: 461912.504 ops/s
[info]                  ·gc.alloc.rate:                   582.084 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.038 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.371 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1742.982 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 460560.354 ops/s
[info]                  ·gc.alloc.rate:                   580.544 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.297 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.268 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.659 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2305.638 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 467134.841 ops/s
[info]                  ·gc.alloc.rate:                   588.716 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.210 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.563 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2273.308 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 469873.347 ops/s
[info]                  ·gc.alloc.rate:                   592.319 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.069 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2251.125 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 471559.953 ops/s
[info]                  ·gc.alloc.rate:                   594.321 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.992 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2243.288 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala":
[info]   466208.200 ±(99.9%) 18595.500 ops/s [Average]
[info]   (min, avg, max) = (460560.354, 466208.200, 471559.953), stdev = 4829.192
[info]   CI (99.9%): [447612.699, 484803.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   587.597 ±(99.9%) 23.494 MB/sec [Average]
[info]   (min, avg, max) = (580.544, 587.597, 594.321), stdev = 6.101
[info]   CI (99.9%): [564.103, 611.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1984.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1984.001, 1984.001, 1984.001), stdev = 0.001
[info]   CI (99.9%): [1984.001, 1984.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.684 ±(99.9%) 5.626 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.684, 3.297), stdev = 1.461
[info]   CI (99.9%): [≈ 0, 6.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2.336 ±(99.9%) 19.230 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.336, 11.268), stdev = 4.994
[info]   CI (99.9%): [≈ 0, 21.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   640.931 ±(99.9%) 278.931 MB/sec [Average]
[info]   (min, avg, max) = (511.371, 640.931, 674.659), stdev = 72.437
[info]   CI (99.9%): [362.000, 919.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2163.268 ±(99.9%) 909.479 B/op [Average]
[info]   (min, avg, max) = (1742.982, 2163.268, 2305.638), stdev = 236.189
[info]   CI (99.9%): [1253.789, 3072.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.140
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 39.76% complete, ETA 01:20:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 43490.608 ops/s
[info] # Warmup Iteration   2: 68928.188 ops/s
[info] # Warmup Iteration   3: 68130.181 ops/s
[info] # Warmup Iteration   4: 70974.975 ops/s
[info] # Warmup Iteration   5: 70558.477 ops/s
[info] Iteration   1: 70588.454 ops/s
[info]                  ·gc.alloc.rate:                   3148.842 MB/sec
[info]                  ·gc.alloc.rate.norm:              70232.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.321 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3395.344 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75729.994 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 70968.493 ops/s
[info]                  ·gc.alloc.rate:                   3165.951 MB/sec
[info]                  ·gc.alloc.rate.norm:              70232.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.846 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2719.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60317.822 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 70862.502 ops/s
[info]                  ·gc.alloc.rate:                   3161.300 MB/sec
[info]                  ·gc.alloc.rate.norm:              70232.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.698 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3401.400 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75566.115 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 70562.892 ops/s
[info]                  ·gc.alloc.rate:                   3148.102 MB/sec
[info]                  ·gc.alloc.rate.norm:              70232.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.250 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3402.881 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75915.946 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 71009.689 ops/s
[info]                  ·gc.alloc.rate:                   3167.633 MB/sec
[info]                  ·gc.alloc.rate.norm:              70232.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.845 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2721.956 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60350.548 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson":
[info]   70798.406 ±(99.9%) 810.525 ops/s [Average]
[info]   (min, avg, max) = (70562.892, 70798.406, 71009.689), stdev = 210.491
[info]   CI (99.9%): [69987.881, 71608.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3158.366 ±(99.9%) 35.920 MB/sec [Average]
[info]   (min, avg, max) = (3148.102, 3158.366, 3167.633), stdev = 9.328
[info]   CI (99.9%): [3122.446, 3194.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   70232.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (70232.006, 70232.006, 70232.006), stdev = 0.001
[info]   CI (99.9%): [70232.005, 70232.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.117 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.117, 0.166), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.592 ±(99.9%) 3.247 B/op [Average]
[info]   (min, avg, max) = (1.845, 2.592, 3.698), stdev = 0.843
[info]   CI (99.9%): [≈ 0, 5.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3128.123 ±(99.9%) 1432.916 MB/sec [Average]
[info]   (min, avg, max) = (2719.034, 3128.123, 3402.881), stdev = 372.124
[info]   CI (99.9%): [1695.207, 4561.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   69576.085 ±(99.9%) 32490.107 B/op [Average]
[info]   (min, avg, max) = (60317.822, 69576.085, 75915.946), stdev = 8437.578
[info]   CI (99.9%): [37085.978, 102066.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 39.96% complete, ETA 01:20:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 97432.667 ops/s
[info] # Warmup Iteration   2: 131171.398 ops/s
[info] # Warmup Iteration   3: 131691.081 ops/s
[info] # Warmup Iteration   4: 129164.674 ops/s
[info] # Warmup Iteration   5: 131743.201 ops/s
[info] Iteration   1: 128341.212 ops/s
[info]                  ·gc.alloc.rate:                   905.225 MB/sec
[info]                  ·gc.alloc.rate.norm:              11104.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.255 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.884 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8241.711 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 132469.847 ops/s
[info]                  ·gc.alloc.rate:                   934.404 MB/sec
[info]                  ·gc.alloc.rate.norm:              11104.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.955 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7985.186 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 132028.405 ops/s
[info]                  ·gc.alloc.rate:                   931.564 MB/sec
[info]                  ·gc.alloc.rate.norm:              11104.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.993 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.594 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15991.459 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 126538.817 ops/s
[info]                  ·gc.alloc.rate:                   892.536 MB/sec
[info]                  ·gc.alloc.rate.norm:              11104.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.592 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8342.810 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 128210.014 ops/s
[info]                  ·gc.alloc.rate:                   904.571 MB/sec
[info]                  ·gc.alloc.rate.norm:              11104.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.773 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8234.034 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce":
[info]   129517.659 ±(99.9%) 10001.806 ops/s [Average]
[info]   (min, avg, max) = (126538.817, 129517.659, 132469.847), stdev = 2597.437
[info]   CI (99.9%): [119515.853, 139519.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate":
[info]   913.660 ±(99.9%) 70.764 MB/sec [Average]
[info]   (min, avg, max) = (892.536, 913.660, 934.404), stdev = 18.377
[info]   CI (99.9%): [842.896, 984.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   11104.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11104.003, 11104.003, 11104.003), stdev = 0.001
[info]   CI (99.9%): [11104.003, 11104.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.083), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.250 ±(99.9%) 1.655 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.250, 0.993), stdev = 0.430
[info]   CI (99.9%): [≈ 0, 1.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   805.360 ±(99.9%) 1154.288 MB/sec [Average]
[info]   (min, avg, max) = (670.592, 805.360, 1341.594), stdev = 299.765
[info]   CI (99.9%): [≈ 0, 1959.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   9759.040 ±(99.9%) 13425.341 B/op [Average]
[info]   (min, avg, max) = (7985.186, 9759.040, 15991.459), stdev = 3486.518
[info]   CI (99.9%): [≈ 0, 23184.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 40.16% complete, ETA 01:20:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 67745.382 ops/s
[info] # Warmup Iteration   2: 714231.454 ops/s
[info] # Warmup Iteration   3: 683192.336 ops/s
[info] # Warmup Iteration   4: 678961.074 ops/s
[info] # Warmup Iteration   5: 684822.235 ops/s
[info] Iteration   1: 683236.384 ops/s
[info]                  ·gc.alloc.rate:                   534.651 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.386 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1178.391 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 685449.722 ops/s
[info]                  ·gc.alloc.rate:                   536.420 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.526 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.802 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.290 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1546.351 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 687656.436 ops/s
[info]                  ·gc.alloc.rate:                   538.163 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.276 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1541.311 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 685517.434 ops/s
[info]                  ·gc.alloc.rate:      536.631 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 682880.384 ops/s
[info]                  ·gc.alloc.rate:                   534.428 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.929 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1548.977 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava":
[info]   684948.072 ±(99.9%) 7485.583 ops/s [Average]
[info]   (min, avg, max) = (682880.384, 684948.072, 687656.436), stdev = 1943.982
[info]   CI (99.9%): [677462.488, 692433.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   536.059 ±(99.9%) 5.942 MB/sec [Average]
[info]   (min, avg, max) = (534.428, 536.059, 538.163), stdev = 1.543
[info]   CI (99.9%): [530.116, 542.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   1232.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1232.001, 1232.001, 1232.001), stdev = 0.001
[info]   CI (99.9%): [1232.001, 1232.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.509 ±(99.9%) 4.341 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.509, 2.526), stdev = 1.127
[info]   CI (99.9%): [≈ 0, 4.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1.170 ±(99.9%) 9.970 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.170, 5.802), stdev = 2.589
[info]   CI (99.9%): [≈ 0, 11.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   505.976 ±(99.9%) 1121.926 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 505.976, 673.290), stdev = 291.361
[info]   CI (99.9%): [≈ 0, 1627.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   1163.006 ±(99.9%) 2577.244 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1163.006, 1548.977), stdev = 669.302
[info]   CI (99.9%): [≈ 0, 3740.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.140
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 40.36% complete, ETA 01:20:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 318724.120 ops/s
[info] # Warmup Iteration   2: 464224.006 ops/s
[info] # Warmup Iteration   3: 448068.827 ops/s
[info] # Warmup Iteration   4: 461859.803 ops/s
[info] # Warmup Iteration   5: 462289.302 ops/s
[info] Iteration   1: 461230.305 ops/s
[info]                  ·gc.alloc.rate:                   473.384 MB/sec
[info]                  ·gc.alloc.rate.norm:              1616.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.362 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1745.649 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 460255.249 ops/s
[info]                  ·gc.alloc.rate:      472.588 MB/sec
[info]                  ·gc.alloc.rate.norm: 1616.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 459248.883 ops/s
[info]                  ·gc.alloc.rate:                   471.404 MB/sec
[info]                  ·gc.alloc.rate.norm:              1616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.357 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.526 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2308.890 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 460007.496 ops/s
[info]                  ·gc.alloc.rate:                   472.219 MB/sec
[info]                  ·gc.alloc.rate.norm:              1616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.587 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2305.111 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 460646.568 ops/s
[info]                  ·gc.alloc.rate:                   472.843 MB/sec
[info]                  ·gc.alloc.rate.norm:              1616.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.880 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2306.491 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala":
[info]   460277.700 ±(99.9%) 2839.767 ops/s [Average]
[info]   (min, avg, max) = (459248.883, 460277.700, 461230.305), stdev = 737.479
[info]   CI (99.9%): [457437.933, 463117.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   472.487 ±(99.9%) 2.847 MB/sec [Average]
[info]   (min, avg, max) = (471.404, 472.487, 473.384), stdev = 0.739
[info]   CI (99.9%): [469.640, 475.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1616.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1616.001, 1616.001, 1616.001), stdev = 0.001
[info]   CI (99.9%): [1616.001, 1616.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.104), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.086 ±(99.9%) 0.595 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.086, 0.357), stdev = 0.155
[info]   CI (99.9%): [≈ 0, 0.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   506.671 ±(99.9%) 1123.856 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506.671, 674.880), stdev = 291.862
[info]   CI (99.9%): [≈ 0, 1630.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1733.228 ±(99.9%) 3846.454 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1733.228, 2308.890), stdev = 998.912
[info]   CI (99.9%): [≈ 0, 5579.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 40.56% complete, ETA 01:19:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 604250.584 ops/s
[info] # Warmup Iteration   2: 635759.845 ops/s
[info] # Warmup Iteration   3: 565331.764 ops/s
[info] # Warmup Iteration   4: 562278.674 ops/s
[info] # Warmup Iteration   5: 564161.748 ops/s
[info] Iteration   1: 570698.936 ops/s
[info]                  ·gc.alloc.rate:                   446.596 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.401 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1410.774 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 588810.150 ops/s
[info]                  ·gc.alloc.rate:                   460.822 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.007 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.479 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1367.431 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 588465.078 ops/s
[info]                  ·gc.alloc.rate:                   460.527 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.298 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.824 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.574 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1804.619 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 589075.462 ops/s
[info]                  ·gc.alloc.rate:      461.010 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 570240.762 ops/s
[info]                  ·gc.alloc.rate:                   446.400 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.115 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.774 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1862.280 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala":
[info]   581458.078 ±(99.9%) 38639.196 ops/s [Average]
[info]   (min, avg, max) = (570240.762, 581458.078, 589075.462), stdev = 10034.476
[info]   CI (99.9%): [542818.882, 620097.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   455.071 ±(99.9%) 30.144 MB/sec [Average]
[info]   (min, avg, max) = (446.400, 455.071, 461.010), stdev = 7.828
[info]   CI (99.9%): [424.928, 485.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1232.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1232.001, 1232.001, 1232.001), stdev = 0.001
[info]   CI (99.9%): [1232.001, 1232.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.669 ±(99.9%) 5.659 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.669, 3.298), stdev = 1.470
[info]   CI (99.9%): [≈ 0, 6.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.791 ±(99.9%) 15.139 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.791, 8.824), stdev = 3.931
[info]   CI (99.9%): [≈ 0, 16.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   474.446 ±(99.9%) 1068.543 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474.446, 674.774), stdev = 277.497
[info]   CI (99.9%): [≈ 0, 1542.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1289.021 ±(99.9%) 2905.268 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1289.021, 1862.280), stdev = 754.489
[info]   CI (99.9%): [≈ 0, 4194.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.140
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 40.76% complete, ETA 01:19:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 645879.619 ops/s
[info] # Warmup Iteration   2: 681682.794 ops/s
[info] # Warmup Iteration   3: 705480.733 ops/s
[info] # Warmup Iteration   4: 705468.628 ops/s
[info] # Warmup Iteration   5: 707074.930 ops/s
[info] Iteration   1: 706880.443 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 705538.769 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 707569.434 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 705649.325 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 705623.904 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc":
[info]   706252.375 ±(99.9%) 3548.548 ops/s [Average]
[info]   (min, avg, max) = (705538.769, 706252.375, 707569.434), stdev = 921.547
[info]   CI (99.9%): [702703.828, 709800.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 40.96% complete, ETA 01:19:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21016.806 ops/s
[info] # Warmup Iteration   2: 30042.494 ops/s
[info] # Warmup Iteration   3: 29633.897 ops/s
[info] # Warmup Iteration   4: 29623.435 ops/s
[info] # Warmup Iteration   5: 29775.304 ops/s
[info] Iteration   1: 29712.675 ops/s
[info]                  ·gc.alloc.rate:                   1523.367 MB/sec
[info]                  ·gc.alloc.rate.norm:              80688.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.883 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70916.479 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 30408.059 ops/s
[info]                  ·gc.alloc.rate:                   1558.662 MB/sec
[info]                  ·gc.alloc.rate.norm:              80688.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.311 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69332.753 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 30169.836 ops/s
[info]                  ·gc.alloc.rate:                   1546.234 MB/sec
[info]                  ·gc.alloc.rate.norm:              80688.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.257 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2011.196 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 104951.415 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 30342.832 ops/s
[info]                  ·gc.alloc.rate:                   1555.202 MB/sec
[info]                  ·gc.alloc.rate.norm:              80688.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.159 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.485 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69651.704 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 30273.866 ops/s
[info]                  ·gc.alloc.rate:                   1551.690 MB/sec
[info]                  ·gc.alloc.rate.norm:              80688.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.082 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.459 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69911.992 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson":
[info]   30181.454 ±(99.9%) 1064.725 ops/s [Average]
[info]   (min, avg, max) = (29712.675, 30181.454, 30408.059), stdev = 276.506
[info]   CI (99.9%): [29116.728, 31246.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1547.031 ±(99.9%) 53.922 MB/sec [Average]
[info]   (min, avg, max) = (1523.367, 1547.031, 1558.662), stdev = 14.003
[info]   CI (99.9%): [1493.109, 1600.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   80688.014 ±(99.9%) 0.003 B/op [Average]
[info]   (min, avg, max) = (80688.013, 80688.014, 80688.015), stdev = 0.001
[info]   CI (99.9%): [80688.011, 80688.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.062), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.515 ±(99.9%) 4.765 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.515, 3.257), stdev = 1.237
[info]   CI (99.9%): [≈ 0, 6.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1475.267 ±(99.9%) 1153.662 MB/sec [Average]
[info]   (min, avg, max) = (1338.883, 1475.267, 2011.196), stdev = 299.602
[info]   CI (99.9%): [321.605, 2628.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   76952.869 ±(99.9%) 60312.189 B/op [Average]
[info]   (min, avg, max) = (69332.753, 76952.869, 104951.415), stdev = 15662.884
[info]   CI (99.9%): [16640.680, 137265.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 41.16% complete, ETA 01:18:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5135.807 ops/s
[info] # Warmup Iteration   2: 7499.767 ops/s
[info] # Warmup Iteration   3: 7607.169 ops/s
[info] # Warmup Iteration   4: 7924.643 ops/s
[info] # Warmup Iteration   5: 7947.439 ops/s
[info] Iteration   1: 7944.697 ops/s
[info]                  ·gc.alloc.rate:                   1222.734 MB/sec
[info]                  ·gc.alloc.rate.norm:              242296.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.370 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.370 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 266399.263 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 7906.433 ops/s
[info]                  ·gc.alloc.rate:                   1216.815 MB/sec
[info]                  ·gc.alloc.rate.norm:              242296.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.144 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.793 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 267580.471 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 7945.498 ops/s
[info]                  ·gc.alloc.rate:                   1222.965 MB/sec
[info]                  ·gc.alloc.rate.norm:              242296.055 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.247 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.958 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 266267.317 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 7764.968 ops/s
[info]                  ·gc.alloc.rate:                   1195.198 MB/sec
[info]                  ·gc.alloc.rate.norm:              242296.094 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.438 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.548 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 272573.058 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 7686.618 ops/s
[info]                  ·gc.alloc.rate:                   1183.135 MB/sec
[info]                  ·gc.alloc.rate.norm:              242296.053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.485 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 137719.345 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce":
[info]   7849.643 ±(99.9%) 452.331 ops/s [Average]
[info]   (min, avg, max) = (7686.618, 7849.643, 7945.498), stdev = 117.469
[info]   CI (99.9%): [7397.312, 8301.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1208.169 ±(99.9%) 69.439 MB/sec [Average]
[info]   (min, avg, max) = (1183.135, 1208.169, 1222.965), stdev = 18.033
[info]   CI (99.9%): [1138.731, 1277.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   242296.061 ±(99.9%) 0.071 B/op [Average]
[info]   (min, avg, max) = (242296.051, 242296.061, 242296.094), stdev = 0.018
[info]   CI (99.9%): [242295.990, 242296.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.062), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   6.640 ±(99.9%) 18.160 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.640, 12.370), stdev = 4.716
[info]   CI (99.9%): [≈ 0, 24.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1209.831 ±(99.9%) 1156.677 MB/sec [Average]
[info]   (min, avg, max) = (672.485, 1209.831, 1344.548), stdev = 300.385
[info]   CI (99.9%): [53.154, 2366.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   242107.891 ±(99.9%) 224922.569 B/op [Average]
[info]   (min, avg, max) = (137719.345, 242107.891, 272573.058), stdev = 58411.677
[info]   CI (99.9%): [17185.322, 467030.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 41.37% complete, ETA 01:18:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4036.317 ops/s
[info] # Warmup Iteration   2: 7918.587 ops/s
[info] # Warmup Iteration   3: 8274.116 ops/s
[info] # Warmup Iteration   4: 8272.458 ops/s
[info] # Warmup Iteration   5: 8092.545 ops/s
[info] Iteration   1: 8348.253 ops/s
[info]                  ·gc.alloc.rate:                   1203.057 MB/sec
[info]                  ·gc.alloc.rate.norm:              226864.049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.261 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 127336.056 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 8083.640 ops/s
[info]                  ·gc.alloc.rate:                   1164.857 MB/sec
[info]                  ·gc.alloc.rate.norm:              226864.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.157 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.000 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 263116.585 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 8100.707 ops/s
[info]                  ·gc.alloc.rate:                   1167.284 MB/sec
[info]                  ·gc.alloc.rate.norm:              226864.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.044 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.305 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 262823.381 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 8269.203 ops/s
[info]                  ·gc.alloc.rate:                   1191.757 MB/sec
[info]                  ·gc.alloc.rate.norm:              226864.049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.782 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 257707.327 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 8078.480 ops/s
[info]                  ·gc.alloc.rate:                   1164.273 MB/sec
[info]                  ·gc.alloc.rate.norm:              226864.050 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      677.244 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 131964.088 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala":
[info]   8176.057 ±(99.9%) 479.662 ops/s [Average]
[info]   (min, avg, max) = (8078.480, 8176.057, 8348.253), stdev = 124.567
[info]   CI (99.9%): [7696.394, 8655.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1178.246 ±(99.9%) 69.226 MB/sec [Average]
[info]   (min, avg, max) = (1164.273, 1178.246, 1203.057), stdev = 17.978
[info]   CI (99.9%): [1109.020, 1247.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   226864.051 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (226864.049, 226864.051, 226864.054), stdev = 0.002
[info]   CI (99.9%): [226864.042, 226864.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3.240 ±(99.9%) 20.345 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.240, 12.157), stdev = 5.283
[info]   CI (99.9%): [≈ 0, 23.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1081.918 ±(99.9%) 1425.980 MB/sec [Average]
[info]   (min, avg, max) = (675.261, 1081.918, 1353.782), stdev = 370.323
[info]   CI (99.9%): [≈ 0, 2507.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   208589.487 ±(99.9%) 277678.246 B/op [Average]
[info]   (min, avg, max) = (127336.056, 208589.487, 263116.585), stdev = 72112.159
[info]   CI (99.9%): [≈ 0, 486267.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 41.57% complete, ETA 01:18:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 141972.296 ops/s
[info] # Warmup Iteration   2: 155198.349 ops/s
[info] # Warmup Iteration   3: 157530.984 ops/s
[info] # Warmup Iteration   4: 158647.503 ops/s
[info] # Warmup Iteration   5: 159695.439 ops/s
[info] Iteration   1: 157669.622 ops/s
[info]                  ·gc.alloc.rate:                   1527.045 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.416 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.367 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13443.879 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 158813.485 ops/s
[info]                  ·gc.alloc.rate:                   1538.788 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.413 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021.270 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20028.958 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 158692.727 ops/s
[info]                  ·gc.alloc.rate:                   1537.250 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13374.340 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 159017.825 ops/s
[info]                  ·gc.alloc.rate:                   1540.215 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.206 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.100 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13355.976 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 158221.337 ops/s
[info]                  ·gc.alloc.rate:                   1532.504 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.414 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026.027 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20158.425 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala":
[info]   158482.999 ±(99.9%) 2081.927 ops/s [Average]
[info]   (min, avg, max) = (157669.622, 158482.999, 159017.825), stdev = 540.670
[info]   CI (99.9%): [156401.072, 160564.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1535.160 ±(99.9%) 20.736 MB/sec [Average]
[info]   (min, avg, max) = (1527.045, 1535.160, 1540.215), stdev = 5.385
[info]   CI (99.9%): [1514.424, 1555.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   15248.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (15248.003, 15248.003, 15248.003), stdev = 0.001
[info]   CI (99.9%): [15248.002, 15248.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.290 ±(99.9%) 0.714 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.290, 0.416), stdev = 0.185
[info]   CI (99.9%): [≈ 0, 1.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1618.223 ±(99.9%) 1425.145 MB/sec [Average]
[info]   (min, avg, max) = (1346.367, 1618.223, 2026.027), stdev = 370.106
[info]   CI (99.9%): [193.078, 3043.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   16072.316 ±(99.9%) 14137.365 B/op [Average]
[info]   (min, avg, max) = (13355.976, 16072.316, 20158.425), stdev = 3671.429
[info]   CI (99.9%): [1934.951, 30209.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 41.77% complete, ETA 01:18:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3770.277 ops/s
[info] # Warmup Iteration   2: 7514.744 ops/s
[info] # Warmup Iteration   3: 7898.758 ops/s
[info] # Warmup Iteration   4: 7914.521 ops/s
[info] # Warmup Iteration   5: 7869.952 ops/s
[info] Iteration   1: 7864.134 ops/s
[info]                  ·gc.alloc.rate:                   1430.049 MB/sec
[info]                  ·gc.alloc.rate.norm:              286280.056 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.595 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 270574.460 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 7883.491 ops/s
[info]                  ·gc.alloc.rate:                   1433.554 MB/sec
[info]                  ·gc.alloc.rate.norm:              286280.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.466 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.796 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 405349.218 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 7878.579 ops/s
[info]                  ·gc.alloc.rate:                   1432.746 MB/sec
[info]                  ·gc.alloc.rate.norm:              286280.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.402 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 270626.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 7871.642 ops/s
[info]                  ·gc.alloc.rate:                   1431.464 MB/sec
[info]                  ·gc.alloc.rate.norm:              286281.807 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.323 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.716 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 271132.936 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 7886.337 ops/s
[info]                  ·gc.alloc.rate:                   1434.148 MB/sec
[info]                  ·gc.alloc.rate.norm:              286280.056 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.307 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356.350 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 270750.325 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson":
[info]   7876.837 ±(99.9%) 34.757 ops/s [Average]
[info]   (min, avg, max) = (7864.134, 7876.837, 7886.337), stdev = 9.026
[info]   CI (99.9%): [7842.079, 7911.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1432.392 ±(99.9%) 6.359 MB/sec [Average]
[info]   (min, avg, max) = (1430.049, 1432.392, 1434.148), stdev = 1.651
[info]   CI (99.9%): [1426.033, 1438.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   286280.405 ±(99.9%) 3.020 B/op [Average]
[info]   (min, avg, max) = (286280.052, 286280.405, 286281.807), stdev = 0.784
[info]   CI (99.9%): [286277.385, 286283.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.062), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   6.651 ±(99.9%) 18.245 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.651, 12.466), stdev = 4.738
[info]   CI (99.9%): [≈ 0, 24.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1489.572 ±(99.9%) 1162.893 MB/sec [Average]
[info]   (min, avg, max) = (1351.595, 1489.572, 2029.796), stdev = 302.000
[info]   CI (99.9%): [326.679, 2652.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   297686.590 ±(99.9%) 231753.453 B/op [Average]
[info]   (min, avg, max) = (270574.460, 297686.590, 405349.218), stdev = 60185.636
[info]   CI (99.9%): [65933.137, 529440.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 41.97% complete, ETA 01:17:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5109.978 ops/s
[info] # Warmup Iteration   2: 7564.524 ops/s
[info] # Warmup Iteration   3: 7588.899 ops/s
[info] # Warmup Iteration   4: 7929.701 ops/s
[info] # Warmup Iteration   5: 7918.550 ops/s
[info] Iteration   1: 7585.440 ops/s
[info]                  ·gc.alloc.rate:                   1139.788 MB/sec
[info]                  ·gc.alloc.rate.norm:              236504.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.955 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.268 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 279555.779 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 7672.458 ops/s
[info]                  ·gc.alloc.rate:                   1152.893 MB/sec
[info]                  ·gc.alloc.rate.norm:              236504.053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.820 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 276286.249 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 7647.084 ops/s
[info]                  ·gc.alloc.rate:                   1149.197 MB/sec
[info]                  ·gc.alloc.rate.norm:              236504.053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.269 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 138558.402 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 7876.896 ops/s
[info]                  ·gc.alloc.rate:                   1183.518 MB/sec
[info]                  ·gc.alloc.rate.norm:              236520.706 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.159 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.528 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 269097.687 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 7636.249 ops/s
[info]                  ·gc.alloc.rate:                   1147.410 MB/sec
[info]                  ·gc.alloc.rate.norm:              236528.053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.086 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 277689.390 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle":
[info]   7683.625 ±(99.9%) 433.512 ops/s [Average]
[info]   (min, avg, max) = (7585.440, 7683.625, 7876.896), stdev = 112.582
[info]   CI (99.9%): [7250.113, 8117.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1154.561 ±(99.9%) 64.989 MB/sec [Average]
[info]   (min, avg, max) = (1139.788, 1154.561, 1183.518), stdev = 16.878
[info]   CI (99.9%): [1089.572, 1219.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   236512.184 ±(99.9%) 44.021 B/op [Average]
[info]   (min, avg, max) = (236504.053, 236512.184, 236528.053), stdev = 11.432
[info]   CI (99.9%): [236468.163, 236556.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   3.423 ±(99.9%) 21.659 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.423, 12.955), stdev = 5.625
[info]   CI (99.9%): [≈ 0, 25.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   1212.194 ±(99.9%) 1160.077 MB/sec [Average]
[info]   (min, avg, max) = (673.269, 1212.194, 1347.268), stdev = 301.268
[info]   CI (99.9%): [52.117, 2372.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   248237.501 ±(99.9%) 236584.645 B/op [Average]
[info]   (min, avg, max) = (138558.402, 248237.501, 279555.779), stdev = 61440.281
[info]   CI (99.9%): [11652.856, 484822.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 42.17% complete, ETA 01:17:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11904.675 ops/s
[info] # Warmup Iteration   2: 18032.852 ops/s
[info] # Warmup Iteration   3: 18540.686 ops/s
[info] # Warmup Iteration   4: 18279.272 ops/s
[info] # Warmup Iteration   5: 18517.283 ops/s
[info] Iteration   1: 18439.495 ops/s
[info]                  ·gc.alloc.rate:                   836.546 MB/sec
[info]                  ·gc.alloc.rate.norm:              71432.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.777 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.452 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57590.950 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 18613.096 ops/s
[info]                  ·gc.alloc.rate:                   844.602 MB/sec
[info]                  ·gc.alloc.rate.norm:              71413.339 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.833 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56889.867 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 18650.381 ops/s
[info]                  ·gc.alloc.rate:                   846.080 MB/sec
[info]                  ·gc.alloc.rate.norm:              71408.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.270 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.972 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 113429.449 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 18582.235 ops/s
[info]                  ·gc.alloc.rate:                   842.950 MB/sec
[info]                  ·gc.alloc.rate.norm:              71408.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.283 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56865.799 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 18568.137 ops/s
[info]                  ·gc.alloc.rate:                   842.250 MB/sec
[info]                  ·gc.alloc.rate.norm:              71408.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.764 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.232 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56908.664 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce":
[info]   18570.669 ±(99.9%) 307.455 ops/s [Average]
[info]   (min, avg, max) = (18439.495, 18570.669, 18650.381), stdev = 79.845
[info]   CI (99.9%): [18263.214, 18878.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   842.486 ±(99.9%) 14.010 MB/sec [Average]
[info]   (min, avg, max) = (836.546, 842.486, 846.080), stdev = 3.638
[info]   CI (99.9%): [828.476, 856.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   71413.887 ±(99.9%) 40.043 B/op [Average]
[info]   (min, avg, max) = (71408.022, 71413.887, 71432.028), stdev = 10.399
[info]   CI (99.9%): [71373.844, 71453.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.762 ±(99.9%) 8.284 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.762, 5.270), stdev = 2.151
[info]   CI (99.9%): [≈ 0, 10.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   806.755 ±(99.9%) 1156.412 MB/sec [Average]
[info]   (min, avg, max) = (671.232, 806.755, 1343.972), stdev = 300.317
[info]   CI (99.9%): [≈ 0, 1963.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   68336.946 ±(99.9%) 97072.104 B/op [Average]
[info]   (min, avg, max) = (56865.799, 68336.946, 113429.449), stdev = 25209.317
[info]   CI (99.9%): [≈ 0, 165409.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 42.37% complete, ETA 01:17:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12139.838 ops/s
[info] # Warmup Iteration   2: 20789.219 ops/s
[info] # Warmup Iteration   3: 20557.741 ops/s
[info] # Warmup Iteration   4: 20798.558 ops/s
[info] # Warmup Iteration   5: 20704.445 ops/s
[info] Iteration   1: 20762.587 ops/s
[info]                  ·gc.alloc.rate:                   879.620 MB/sec
[info]                  ·gc.alloc.rate.norm:              66696.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.578 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.608 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51151.280 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 20749.688 ops/s
[info]                  ·gc.alloc.rate:                   879.106 MB/sec
[info]                  ·gc.alloc.rate.norm:              66696.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.604 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51180.856 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 20236.890 ops/s
[info]                  ·gc.alloc.rate:                   857.349 MB/sec
[info]                  ·gc.alloc.rate.norm:              66696.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.237 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.364 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 105049.258 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 20789.675 ops/s
[info]                  ·gc.alloc.rate:                   880.804 MB/sec
[info]                  ·gc.alloc.rate.norm:              66696.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.906 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51180.795 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 20791.215 ops/s
[info]                  ·gc.alloc.rate:                   880.764 MB/sec
[info]                  ·gc.alloc.rate.norm:              66696.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.576 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.810 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51175.873 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala":
[info]   20666.011 ±(99.9%) 926.242 ops/s [Average]
[info]   (min, avg, max) = (20236.890, 20666.011, 20791.215), stdev = 240.542
[info]   CI (99.9%): [19739.769, 21592.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   875.529 ±(99.9%) 39.234 MB/sec [Average]
[info]   (min, avg, max) = (857.349, 875.529, 880.804), stdev = 10.189
[info]   CI (99.9%): [836.295, 914.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   66696.021 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (66696.020, 66696.021, 66696.025), stdev = 0.002
[info]   CI (99.9%): [66696.013, 66696.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.278 ±(99.9%) 5.196 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.278, 3.237), stdev = 1.350
[info]   CI (99.9%): [≈ 0, 6.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   810.259 ±(99.9%) 1162.621 MB/sec [Average]
[info]   (min, avg, max) = (674.604, 810.259, 1350.364), stdev = 301.929
[info]   CI (99.9%): [≈ 0, 1972.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   61947.613 ±(99.9%) 92779.553 B/op [Average]
[info]   (min, avg, max) = (51151.280, 61947.613, 105049.258), stdev = 24094.555
[info]   CI (99.9%): [≈ 0, 154727.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 42.57% complete, ETA 01:17:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 436164.799 ops/s
[info] # Warmup Iteration   2: 471173.277 ops/s
[info] # Warmup Iteration   3: 471321.319 ops/s
[info] # Warmup Iteration   4: 473869.472 ops/s
[info] # Warmup Iteration   5: 462210.809 ops/s
[info] Iteration   1: 474590.990 ops/s
[info]                  ·gc.alloc.rate:                   1075.507 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.820 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2235.402 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 475329.472 ops/s
[info]                  ·gc.alloc.rate:                   1077.363 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.345 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.649 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4459.820 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 473940.381 ops/s
[info]                  ·gc.alloc.rate:                   1074.476 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.276 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.726 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4472.058 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 474938.524 ops/s
[info]                  ·gc.alloc.rate:                   1076.406 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.219 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2231.543 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 473418.120 ops/s
[info]                  ·gc.alloc.rate:                   1073.018 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.186 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4479.665 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala":
[info]   474443.497 ±(99.9%) 2955.404 ops/s [Average]
[info]   (min, avg, max) = (473418.120, 474443.497, 475329.472), stdev = 767.509
[info]   CI (99.9%): [471488.094, 477398.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1075.354 ±(99.9%) 6.499 MB/sec [Average]
[info]   (min, avg, max) = (1073.018, 1075.354, 1077.363), stdev = 1.688
[info]   CI (99.9%): [1068.855, 1081.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3568.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3568.001, 3568.001, 3568.001), stdev = 0.001
[info]   CI (99.9%): [3568.001, 3568.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.188 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.104), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.138 ±(99.9%) 0.623 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.138, 0.345), stdev = 0.162
[info]   CI (99.9%): [≈ 0, 0.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1077.520 ±(99.9%) 1420.119 MB/sec [Average]
[info]   (min, avg, max) = (673.219, 1077.520, 1347.186), stdev = 368.800
[info]   CI (99.9%): [≈ 0, 2497.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3575.698 ±(99.9%) 4718.191 B/op [Average]
[info]   (min, avg, max) = (2231.543, 3575.698, 4479.665), stdev = 1225.299
[info]   CI (99.9%): [≈ 0, 8293.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 42.77% complete, ETA 01:16:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 449261.977 ops/s
[info] # Warmup Iteration   2: 484561.193 ops/s
[info] # Warmup Iteration   3: 483911.290 ops/s
[info] # Warmup Iteration   4: 484260.826 ops/s
[info] # Warmup Iteration   5: 483707.511 ops/s
[info] Iteration   1: 484943.460 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 483728.301 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 483950.535 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 483966.214 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 484046.466 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   484126.995 ±(99.9%) 1815.371 ops/s [Average]
[info]   (min, avg, max) = (483728.301, 484126.995, 484943.460), stdev = 471.446
[info]   CI (99.9%): [482311.624, 485942.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 42.97% complete, ETA 01:16:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13861.323 ops/s
[info] # Warmup Iteration   2: 19590.884 ops/s
[info] # Warmup Iteration   3: 19746.211 ops/s
[info] # Warmup Iteration   4: 19593.509 ops/s
[info] # Warmup Iteration   5: 19812.833 ops/s
[info] Iteration   1: 19861.759 ops/s
[info]                  ·gc.alloc.rate:                   915.238 MB/sec
[info]                  ·gc.alloc.rate.norm:              72549.616 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.598 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.790 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 106520.331 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 19953.214 ops/s
[info]                  ·gc.alloc.rate:                   919.394 MB/sec
[info]                  ·gc.alloc.rate.norm:              72536.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.628 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52909.557 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 19801.595 ops/s
[info]                  ·gc.alloc.rate:                   912.195 MB/sec
[info]                  ·gc.alloc.rate.norm:              72536.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.617 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.170 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 106408.732 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 19901.564 ops/s
[info]                  ·gc.alloc.rate:                   916.986 MB/sec
[info]                  ·gc.alloc.rate.norm:              72536.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.186 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52934.442 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 19893.689 ops/s
[info]                  ·gc.alloc.rate:                   916.660 MB/sec
[info]                  ·gc.alloc.rate.norm:              72536.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.218 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52955.723 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson":
[info]   19882.364 ±(99.9%) 214.955 ops/s [Average]
[info]   (min, avg, max) = (19801.595, 19882.364, 19953.214), stdev = 55.823
[info]   CI (99.9%): [19667.409, 20097.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   916.095 ±(99.9%) 10.176 MB/sec [Average]
[info]   (min, avg, max) = (912.195, 916.095, 919.394), stdev = 2.643
[info]   CI (99.9%): [905.918, 926.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   72538.745 ±(99.9%) 23.400 B/op [Average]
[info]   (min, avg, max) = (72536.020, 72538.745, 72549.616), stdev = 6.077
[info]   CI (99.9%): [72515.345, 72562.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.083), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.643 ±(99.9%) 13.936 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.643, 6.617), stdev = 3.619
[info]   CI (99.9%): [≈ 0, 16.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   938.199 ±(99.9%) 1415.856 MB/sec [Average]
[info]   (min, avg, max) = (669.186, 938.199, 1343.790), stdev = 367.693
[info]   CI (99.9%): [≈ 0, 2354.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   74345.757 ±(99.9%) 112902.137 B/op [Average]
[info]   (min, avg, max) = (52909.557, 74345.757, 106520.331), stdev = 29320.327
[info]   CI (99.9%): [≈ 0, 187247.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.140
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 43.17% complete, ETA 01:16:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9322.238 ops/s
[info] # Warmup Iteration   2: 10431.215 ops/s
[info] # Warmup Iteration   3: 10431.992 ops/s
[info] # Warmup Iteration   4: 10225.306 ops/s
[info] # Warmup Iteration   5: 10408.889 ops/s
[info] Iteration   1: 10432.417 ops/s
[info]                  ·gc.alloc.rate:                   584.889 MB/sec
[info]                  ·gc.alloc.rate.norm:              88264.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.348 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77166.191 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 10422.857 ops/s
[info]                  ·gc.alloc.rate:                   584.320 MB/sec
[info]                  ·gc.alloc.rate.norm:              88267.240 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.743 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     414.429 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.706 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 102071.990 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 10450.331 ops/s
[info]                  ·gc.alloc.rate:                   585.932 MB/sec
[info]                  ·gc.alloc.rate.norm:              88264.042 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.270 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.909 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 101818.104 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 10416.233 ops/s
[info]                  ·gc.alloc.rate:                   583.987 MB/sec
[info]                  ·gc.alloc.rate.norm:              88264.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.801 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 101838.667 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 10434.032 ops/s
[info]                  ·gc.alloc.rate:                   585.034 MB/sec
[info]                  ·gc.alloc.rate.norm:              88264.049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.419 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.910 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 101672.790 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle":
[info]   10431.174 ±(99.9%) 49.802 ops/s [Average]
[info]   (min, avg, max) = (10416.233, 10431.174, 10450.331), stdev = 12.933
[info]   CI (99.9%): [10381.372, 10480.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   584.832 ±(99.9%) 2.876 MB/sec [Average]
[info]   (min, avg, max) = (583.987, 584.832, 585.932), stdev = 0.747
[info]   CI (99.9%): [581.957, 587.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   88264.682 ±(99.9%) 5.507 B/op [Average]
[info]   (min, avg, max) = (88264.039, 88264.682, 88267.240), stdev = 1.430
[info]   CI (99.9%): [88259.175, 88270.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0.570 ±(99.9%) 4.681 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.570, 2.743), stdev = 1.216
[info]   CI (99.9%): [≈ 0, 5.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   86.024 ±(99.9%) 707.093 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 86.024, 414.429), stdev = 183.630
[info]   CI (99.9%): [≈ 0, 793.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   642.135 ±(99.9%) 281.554 MB/sec [Average]
[info]   (min, avg, max) = (511.348, 642.135, 675.909), stdev = 73.119
[info]   CI (99.9%): [360.581, 923.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   96913.548 ±(99.9%) 42511.244 B/op [Average]
[info]   (min, avg, max) = (77166.191, 96913.548, 102071.990), stdev = 11040.035
[info]   CI (99.9%): [54402.305, 139424.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.140
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 43.37% complete, ETA 01:15:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9312.916 ops/s
[info] # Warmup Iteration   2: 12866.653 ops/s
[info] # Warmup Iteration   3: 12891.763 ops/s
[info] # Warmup Iteration   4: 12939.805 ops/s
[info] # Warmup Iteration   5: 12982.391 ops/s
[info] Iteration   1: 12919.536 ops/s
[info]                  ·gc.alloc.rate:                   1297.719 MB/sec
[info]                  ·gc.alloc.rate.norm:              158112.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.607 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.588 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 163578.830 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 12954.570 ops/s
[info]                  ·gc.alloc.rate:                   1300.722 MB/sec
[info]                  ·gc.alloc.rate.norm:              158112.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.529 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.061 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 163136.998 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 12846.935 ops/s
[info]                  ·gc.alloc.rate:                   1290.285 MB/sec
[info]                  ·gc.alloc.rate.norm:              158112.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.376 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 164495.309 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 12561.106 ops/s
[info]                  ·gc.alloc.rate:                   1261.528 MB/sec
[info]                  ·gc.alloc.rate.norm:              158112.080 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.608 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 168336.341 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 12893.094 ops/s
[info]                  ·gc.alloc.rate:                   1294.942 MB/sec
[info]                  ·gc.alloc.rate.norm:              158112.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.541 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.414 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 164152.512 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce":
[info]   12835.048 ±(99.9%) 608.774 ops/s [Average]
[info]   (min, avg, max) = (12561.106, 12835.048, 12954.570), stdev = 158.097
[info]   CI (99.9%): [12226.274, 13443.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1289.039 ±(99.9%) 61.039 MB/sec [Average]
[info]   (min, avg, max) = (1261.528, 1289.039, 1300.722), stdev = 15.852
[info]   CI (99.9%): [1228.001, 1350.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   158112.043 ±(99.9%) 0.079 B/op [Average]
[info]   (min, avg, max) = (158112.031, 158112.043, 158112.080), stdev = 0.020
[info]   CI (99.9%): [158111.965, 158112.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3.057 ±(99.9%) 10.684 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.057, 7.607), stdev = 2.775
[info]   CI (99.9%): [≈ 0, 13.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1342.909 ±(99.9%) 3.555 MB/sec [Average]
[info]   (min, avg, max) = (1342.061, 1342.909, 1344.414), stdev = 0.923
[info]   CI (99.9%): [1339.353, 1346.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   164739.998 ±(99.9%) 7997.997 B/op [Average]
[info]   (min, avg, max) = (163136.998, 164739.998, 168336.341), stdev = 2077.054
[info]   CI (99.9%): [156742.001, 172737.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 43.57% complete, ETA 01:15:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6717.278 ops/s
[info] # Warmup Iteration   2: 13114.704 ops/s
[info] # Warmup Iteration   3: 13163.553 ops/s
[info] # Warmup Iteration   4: 13376.382 ops/s
[info] # Warmup Iteration   5: 13650.054 ops/s
[info] Iteration   1: 13555.548 ops/s
[info]                  ·gc.alloc.rate:                   1240.634 MB/sec
[info]                  ·gc.alloc.rate.norm:              144084.825 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.417 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.410 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 156833.994 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 13587.756 ops/s
[info]                  ·gc.alloc.rate:                   1243.802 MB/sec
[info]                  ·gc.alloc.rate.norm:              144088.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.822 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.072 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 156630.558 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 13612.900 ops/s
[info]                  ·gc.alloc.rate:                   1246.030 MB/sec
[info]                  ·gc.alloc.rate.norm:              144088.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.240 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 156485.490 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 13601.897 ops/s
[info]                  ·gc.alloc.rate:                   1244.926 MB/sec
[info]                  ·gc.alloc.rate.norm:              144077.684 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.816 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      677.182 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78371.558 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 13640.627 ops/s
[info]                  ·gc.alloc.rate:                   1248.266 MB/sec
[info]                  ·gc.alloc.rate.norm:              144056.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.401 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.084 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 156383.449 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala":
[info]   13599.746 ±(99.9%) 120.946 ops/s [Average]
[info]   (min, avg, max) = (13555.548, 13599.746, 13640.627), stdev = 31.409
[info]   CI (99.9%): [13478.800, 13720.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1244.732 ±(99.9%) 10.868 MB/sec [Average]
[info]   (min, avg, max) = (1240.634, 1244.732, 1248.266), stdev = 2.822
[info]   CI (99.9%): [1233.863, 1255.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   144078.920 ±(99.9%) 51.889 B/op [Average]
[info]   (min, avg, max) = (144056.030, 144078.920, 144088.030), stdev = 13.475
[info]   CI (99.9%): [144027.031, 144130.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2.891 ±(99.9%) 7.764 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.891, 4.822), stdev = 2.016
[info]   CI (99.9%): [≈ 0, 10.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1217.598 ±(99.9%) 1163.304 MB/sec [Average]
[info]   (min, avg, max) = (677.182, 1217.598, 1355.084), stdev = 302.106
[info]   CI (99.9%): [54.294, 2380.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   140941.010 ±(99.9%) 134687.039 B/op [Average]
[info]   (min, avg, max) = (78371.558, 140941.010, 156833.994), stdev = 34977.796
[info]   CI (99.9%): [6253.971, 275628.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 43.78% complete, ETA 01:15:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 232181.025 ops/s
[info] # Warmup Iteration   2: 248730.830 ops/s
[info] # Warmup Iteration   3: 251513.053 ops/s
[info] # Warmup Iteration   4: 247491.477 ops/s
[info] # Warmup Iteration   5: 249643.757 ops/s
[info] Iteration   1: 253384.288 ops/s
[info]                  ·gc.alloc.rate:                   1465.189 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.129 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.415 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8341.143 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 253374.945 ops/s
[info]                  ·gc.alloc.rate:                   1465.656 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.388 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.642 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8346.104 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 252387.624 ops/s
[info]                  ·gc.alloc.rate:                   1459.786 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.930 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8381.464 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 251923.917 ops/s
[info]                  ·gc.alloc.rate:                   1456.772 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.390 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.100 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8406.119 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 247426.614 ops/s
[info]                  ·gc.alloc.rate:                   1430.824 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.163 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8571.685 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala":
[info]   251699.477 ±(99.9%) 9515.661 ops/s [Average]
[info]   (min, avg, max) = (247426.614, 251699.477, 253384.288), stdev = 2471.187
[info]   CI (99.9%): [242183.816, 261215.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1455.645 ±(99.9%) 55.327 MB/sec [Average]
[info]   (min, avg, max) = (1430.824, 1455.645, 1465.656), stdev = 14.368
[info]   CI (99.9%): [1400.319, 1510.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   9104.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9104.002, 9104.002, 9104.002), stdev = 0.001
[info]   CI (99.9%): [9104.001, 9104.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.062), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.181 ±(99.9%) 0.757 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.181, 0.390), stdev = 0.197
[info]   CI (99.9%): [≈ 0, 0.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1344.450 ±(99.9%) 6.902 MB/sec [Average]
[info]   (min, avg, max) = (1342.415, 1344.450, 1347.163), stdev = 1.792
[info]   CI (99.9%): [1337.549, 1351.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   8409.303 ±(99.9%) 364.253 B/op [Average]
[info]   (min, avg, max) = (8341.143, 8409.303, 8571.685), stdev = 94.595
[info]   CI (99.9%): [8045.050, 8773.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 43.98% complete, ETA 01:15:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4761.848 ops/s
[info] # Warmup Iteration   2: 11795.132 ops/s
[info] # Warmup Iteration   3: 12188.870 ops/s
[info] # Warmup Iteration   4: 12223.521 ops/s
[info] # Warmup Iteration   5: 12189.870 ops/s
[info] Iteration   1: 12199.147 ops/s
[info]                  ·gc.alloc.rate:                   1526.748 MB/sec
[info]                  ·gc.alloc.rate.norm:              197016.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.685 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.191 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 174361.638 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 11943.463 ops/s
[info]                  ·gc.alloc.rate:                   1494.635 MB/sec
[info]                  ·gc.alloc.rate.norm:              197016.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.743 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.449 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 178273.720 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 12255.386 ops/s
[info]                  ·gc.alloc.rate:                   1533.962 MB/sec
[info]                  ·gc.alloc.rate.norm:              197016.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.673 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.038 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 173907.245 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 11910.208 ops/s
[info]                  ·gc.alloc.rate:                   1491.128 MB/sec
[info]                  ·gc.alloc.rate.norm:              197016.043 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.252 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.184 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 268635.436 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 11881.841 ops/s
[info]                  ·gc.alloc.rate:                   1487.219 MB/sec
[info]                  ·gc.alloc.rate.norm:              197016.034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356.308 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 179673.961 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson":
[info]   12038.009 ±(99.9%) 674.903 ops/s [Average]
[info]   (min, avg, max) = (11881.841, 12038.009, 12255.386), stdev = 175.270
[info]   CI (99.9%): [11363.106, 12712.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1506.738 ±(99.9%) 84.202 MB/sec [Average]
[info]   (min, avg, max) = (1487.219, 1506.738, 1533.962), stdev = 21.867
[info]   CI (99.9%): [1422.536, 1590.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   197016.036 ±(99.9%) 0.016 B/op [Average]
[info]   (min, avg, max) = (197016.033, 197016.036, 197016.043), stdev = 0.004
[info]   CI (99.9%): [197016.021, 197016.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3.271 ±(99.9%) 11.630 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.271, 8.252), stdev = 3.020
[info]   CI (99.9%): [≈ 0, 14.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1489.434 ±(99.9%) 1170.486 MB/sec [Average]
[info]   (min, avg, max) = (1351.191, 1489.434, 2033.184), stdev = 303.971
[info]   CI (99.9%): [318.948, 2659.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   194970.400 ±(99.9%) 158855.693 B/op [Average]
[info]   (min, avg, max) = (173907.245, 194970.400, 268635.436), stdev = 41254.319
[info]   CI (99.9%): [36114.707, 353826.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 44.18% complete, ETA 01:14:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9817.597 ops/s
[info] # Warmup Iteration   2: 12922.518 ops/s
[info] # Warmup Iteration   3: 12908.950 ops/s
[info] # Warmup Iteration   4: 12980.582 ops/s
[info] # Warmup Iteration   5: 13026.331 ops/s
[info] Iteration   1: 13072.812 ops/s
[info]                  ·gc.alloc.rate:                   1233.434 MB/sec
[info]                  ·gc.alloc.rate.norm:              148536.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.517 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.352 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 161652.460 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 12975.527 ops/s
[info]                  ·gc.alloc.rate:                   1224.660 MB/sec
[info]                  ·gc.alloc.rate.norm:              148536.034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.433 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 81436.521 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 12935.984 ops/s
[info]                  ·gc.alloc.rate:                   1220.641 MB/sec
[info]                  ·gc.alloc.rate.norm:              148536.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.597 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.494 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 163363.927 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 13194.682 ops/s
[info]                  ·gc.alloc.rate:                   1244.899 MB/sec
[info]                  ·gc.alloc.rate.norm:              148528.227 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.043 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 160237.730 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 13292.080 ops/s
[info]                  ·gc.alloc.rate:                   1253.899 MB/sec
[info]                  ·gc.alloc.rate.norm:              148512.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.394 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.463 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 159238.431 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle":
[info]   13094.217 ±(99.9%) 573.818 ops/s [Average]
[info]   (min, avg, max) = (12935.984, 13094.217, 13292.080), stdev = 149.019
[info]   CI (99.9%): [12520.399, 13668.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1235.506 ±(99.9%) 53.405 MB/sec [Average]
[info]   (min, avg, max) = (1220.641, 1235.506, 1253.899), stdev = 13.869
[info]   CI (99.9%): [1182.101, 1288.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   148529.671 ±(99.9%) 40.140 B/op [Average]
[info]   (min, avg, max) = (148512.031, 148529.671, 148536.034), stdev = 10.424
[info]   CI (99.9%): [148489.531, 148569.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.062), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   4.502 ±(99.9%) 15.826 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.502, 7.597), stdev = 4.110
[info]   CI (99.9%): [≈ 0, 20.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   1208.757 ±(99.9%) 1156.634 MB/sec [Average]
[info]   (min, avg, max) = (671.433, 1208.757, 1344.463), stdev = 300.374
[info]   CI (99.9%): [52.123, 2365.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   145185.814 ±(99.9%) 137355.264 B/op [Average]
[info]   (min, avg, max) = (81436.521, 145185.814, 163363.927), stdev = 35670.726
[info]   CI (99.9%): [7830.549, 282541.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 44.38% complete, ETA 01:14:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21119.175 ops/s
[info] # Warmup Iteration   2: 29113.442 ops/s
[info] # Warmup Iteration   3: 29613.101 ops/s
[info] # Warmup Iteration   4: 29619.136 ops/s
[info] # Warmup Iteration   5: 29587.793 ops/s
[info] Iteration   1: 29687.629 ops/s
[info]                  ·gc.alloc.rate:                   1024.402 MB/sec
[info]                  ·gc.alloc.rate.norm:              54312.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.310 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.618 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71183.258 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 29809.240 ops/s
[info]                  ·gc.alloc.rate:                   1028.538 MB/sec
[info]                  ·gc.alloc.rate.norm:              54312.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.686 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35415.597 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 28577.800 ops/s
[info]                  ·gc.alloc.rate:                   985.946 MB/sec
[info]                  ·gc.alloc.rate.norm:              54312.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.154 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73879.030 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 29594.491 ops/s
[info]                  ·gc.alloc.rate:                   1021.055 MB/sec
[info]                  ·gc.alloc.rate.norm:              54312.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.321 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.597 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35670.429 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 29761.201 ops/s
[info]                  ·gc.alloc.rate:                   1026.696 MB/sec
[info]                  ·gc.alloc.rate.norm:              54312.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.202 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.128 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70945.411 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce":
[info]   29486.072 ±(99.9%) 1979.875 ops/s [Average]
[info]   (min, avg, max) = (28577.800, 29486.072, 29809.240), stdev = 514.167
[info]   CI (99.9%): [27506.197, 31465.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1017.328 ±(99.9%) 68.401 MB/sec [Average]
[info]   (min, avg, max) = (985.946, 1017.328, 1028.538), stdev = 17.763
[info]   CI (99.9%): [948.927, 1085.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   54312.014 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (54312.014, 54312.014, 54312.015), stdev = 0.001
[info]   CI (99.9%): [54312.012, 54312.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.062), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.767 ±(99.9%) 6.452 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.767, 3.321), stdev = 1.676
[info]   CI (99.9%): [≈ 0, 8.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1073.237 ±(99.9%) 1415.181 MB/sec [Average]
[info]   (min, avg, max) = (670.597, 1073.237, 1342.618), stdev = 367.518
[info]   CI (99.9%): [≈ 0, 2488.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   57418.745 ±(99.9%) 77024.941 B/op [Average]
[info]   (min, avg, max) = (35415.597, 57418.745, 73879.030), stdev = 20003.133
[info]   CI (99.9%): [≈ 0, 134443.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 44.58% complete, ETA 01:14:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51919.052 ops/s
[info] # Warmup Iteration   2: 80303.340 ops/s
[info] # Warmup Iteration   3: 80409.892 ops/s
[info] # Warmup Iteration   4: 78392.938 ops/s
[info] # Warmup Iteration   5: 78743.027 ops/s
[info] Iteration   1: 78796.416 ops/s
[info]                  ·gc.alloc.rate:                   1407.894 MB/sec
[info]                  ·gc.alloc.rate.norm:              28128.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.832 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.903 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27009.381 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 78773.368 ops/s
[info]                  ·gc.alloc.rate:                   1407.340 MB/sec
[info]                  ·gc.alloc.rate.norm:              28128.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.098 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27043.883 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 80429.212 ops/s
[info]                  ·gc.alloc.rate:                   1437.012 MB/sec
[info]                  ·gc.alloc.rate.norm:              28128.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.222 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.482 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26512.569 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 79225.868 ops/s
[info]                  ·gc.alloc.rate:                   1415.586 MB/sec
[info]                  ·gc.alloc.rate.norm:              28128.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.240 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.772 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26939.490 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 80610.265 ops/s
[info]                  ·gc.alloc.rate:                   1440.196 MB/sec
[info]                  ·gc.alloc.rate.norm:              28128.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.406 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356.417 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26491.737 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala":
[info]   79567.026 ±(99.9%) 3428.929 ops/s [Average]
[info]   (min, avg, max) = (78773.368, 79567.026, 80610.265), stdev = 890.482
[info]   CI (99.9%): [76138.097, 82995.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1421.606 ±(99.9%) 61.209 MB/sec [Average]
[info]   (min, avg, max) = (1407.340, 1421.606, 1440.196), stdev = 15.896
[info]   CI (99.9%): [1360.396, 1482.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   28128.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (28128.005, 28128.005, 28128.006), stdev = 0.001
[info]   CI (99.9%): [28128.004, 28128.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.740 ±(99.9%) 2.065 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.740, 1.240), stdev = 0.536
[info]   CI (99.9%): [≈ 0, 2.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1354.334 ±(99.9%) 7.169 MB/sec [Average]
[info]   (min, avg, max) = (1351.903, 1354.334, 1356.417), stdev = 1.862
[info]   CI (99.9%): [1347.166, 1361.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   26799.412 ±(99.9%) 1055.276 B/op [Average]
[info]   (min, avg, max) = (26491.737, 26799.412, 27043.883), stdev = 274.052
[info]   CI (99.9%): [25744.136, 27854.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 44.78% complete, ETA 01:14:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 674430.614 ops/s
[info] # Warmup Iteration   2: 740372.657 ops/s
[info] # Warmup Iteration   3: 733024.822 ops/s
[info] # Warmup Iteration   4: 739223.535 ops/s
[info] # Warmup Iteration   5: 744135.809 ops/s
[info] Iteration   1: 741201.801 ops/s
[info]                  ·gc.alloc.rate:                   1016.902 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.133 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.709 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2854.172 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 744011.587 ops/s
[info]                  ·gc.alloc.rate:                   1020.872 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.132 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.623 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2840.776 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 743568.100 ops/s
[info]                  ·gc.alloc.rate:                   1020.242 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.248 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1421.129 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 740990.745 ops/s
[info]                  ·gc.alloc.rate:                   1016.669 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.221 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.780 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2852.851 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 726519.424 ops/s
[info]                  ·gc.alloc.rate:                   997.234 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.846 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1455.213 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala":
[info]   739258.331 ±(99.9%) 27915.551 ops/s [Average]
[info]   (min, avg, max) = (726519.424, 739258.331, 744011.587), stdev = 7249.580
[info]   CI (99.9%): [711342.781, 767173.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1014.384 ±(99.9%) 37.635 MB/sec [Average]
[info]   (min, avg, max) = (997.234, 1014.384, 1020.872), stdev = 9.774
[info]   CI (99.9%): [976.749, 1052.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2160.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2160.001, 2160.001, 2160.001), stdev = 0.001
[info]   CI (99.9%): [2160.000, 2160.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.104), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.097 ±(99.9%) 0.369 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.097, 0.221), stdev = 0.096
[info]   CI (99.9%): [≈ 0, 0.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1074.441 ±(99.9%) 1416.232 MB/sec [Average]
[info]   (min, avg, max) = (671.248, 1074.441, 1343.709), stdev = 367.791
[info]   CI (99.9%): [≈ 0, 2490.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2284.828 ±(99.9%) 2976.549 B/op [Average]
[info]   (min, avg, max) = (1421.129, 2284.828, 2854.172), stdev = 773.000
[info]   CI (99.9%): [≈ 0, 5261.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 44.98% complete, ETA 01:13:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 770169.740 ops/s
[info] # Warmup Iteration   2: 809202.227 ops/s
[info] # Warmup Iteration   3: 809203.355 ops/s
[info] # Warmup Iteration   4: 808962.988 ops/s
[info] # Warmup Iteration   5: 809796.703 ops/s
[info] Iteration   1: 809611.977 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 810276.277 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 809661.462 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 799490.447 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 802454.787 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   806298.990 ±(99.9%) 19179.441 ops/s [Average]
[info]   (min, avg, max) = (799490.447, 806298.990, 810276.277), stdev = 4980.840
[info]   CI (99.9%): [787119.549, 825478.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻³, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 45.18% complete, ETA 01:13:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37378.947 ops/s
[info] # Warmup Iteration   2: 67531.452 ops/s
[info] # Warmup Iteration   3: 67491.356 ops/s
[info] # Warmup Iteration   4: 67651.126 ops/s
[info] # Warmup Iteration   5: 67673.131 ops/s
[info] Iteration   1: 67633.651 ops/s
[info]                  ·gc.alloc.rate:                   1326.274 MB/sec
[info]                  ·gc.alloc.rate.norm:              30872.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.453 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.692 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31440.386 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 67641.299 ops/s
[info]                  ·gc.alloc.rate:                   1326.279 MB/sec
[info]                  ·gc.alloc.rate.norm:              30872.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.696 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31463.635 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 67836.144 ops/s
[info]                  ·gc.alloc.rate:                   1330.284 MB/sec
[info]                  ·gc.alloc.rate.norm:              30872.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.483 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.113 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31401.801 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 66212.567 ops/s
[info]                  ·gc.alloc.rate:                   1298.544 MB/sec
[info]                  ·gc.alloc.rate.norm:              30872.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.495 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.216 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32195.553 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 66067.161 ops/s
[info]                  ·gc.alloc.rate:                   1295.338 MB/sec
[info]                  ·gc.alloc.rate.norm:              30872.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.992 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.855 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32290.486 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson":
[info]   67078.164 ±(99.9%) 3318.936 ops/s [Average]
[info]   (min, avg, max) = (66067.161, 67078.164, 67836.144), stdev = 861.917
[info]   CI (99.9%): [63759.228, 70397.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1315.344 ±(99.9%) 65.140 MB/sec [Average]
[info]   (min, avg, max) = (1295.338, 1315.344, 1330.284), stdev = 16.917
[info]   CI (99.9%): [1250.204, 1380.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   30872.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (30872.006, 30872.006, 30872.007), stdev = 0.001
[info]   CI (99.9%): [30872.005, 30872.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.062), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.684 ±(99.9%) 2.135 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.684, 1.453), stdev = 0.555
[info]   CI (99.9%): [≈ 0, 2.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1352.914 ±(99.9%) 6.648 MB/sec [Average]
[info]   (min, avg, max) = (1350.692, 1352.914, 1354.855), stdev = 1.726
[info]   CI (99.9%): [1346.266, 1359.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   31758.372 ±(99.9%) 1710.614 B/op [Average]
[info]   (min, avg, max) = (31401.801, 31758.372, 32290.486), stdev = 444.241
[info]   CI (99.9%): [30047.758, 33468.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 45.38% complete, ETA 01:13:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18541.532 ops/s
[info] # Warmup Iteration   2: 20161.829 ops/s
[info] # Warmup Iteration   3: 19876.231 ops/s
[info] # Warmup Iteration   4: 20337.644 ops/s
[info] # Warmup Iteration   5: 20338.171 ops/s
[info] Iteration   1: 20379.632 ops/s
[info]                  ·gc.alloc.rate:      410.707 MB/sec
[info]                  ·gc.alloc.rate.norm: 31728.025 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 20097.198 ops/s
[info]                  ·gc.alloc.rate:                   405.080 MB/sec
[info]                  ·gc.alloc.rate.norm:              31728.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.028 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.173 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.494 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 40063.000 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 20362.908 ops/s
[info]                  ·gc.alloc.rate:                   410.537 MB/sec
[info]                  ·gc.alloc.rate.norm:              31728.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.615 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39539.764 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 20402.442 ops/s
[info]                  ·gc.alloc.rate:      411.223 MB/sec
[info]                  ·gc.alloc.rate.norm: 31728.020 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 20391.574 ops/s
[info]                  ·gc.alloc.rate:                   411.038 MB/sec
[info]                  ·gc.alloc.rate.norm:              31728.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.423 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     264.223 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.689 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52079.206 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle":
[info]   20326.751 ±(99.9%) 497.349 ops/s [Average]
[info]   (min, avg, max) = (20097.198, 20326.751, 20402.442), stdev = 129.160
[info]   CI (99.9%): [19829.402, 20824.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   409.717 ±(99.9%) 10.036 MB/sec [Average]
[info]   (min, avg, max) = (405.080, 409.717, 411.223), stdev = 2.606
[info]   CI (99.9%): [399.681, 419.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   31728.021 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (31728.020, 31728.021, 31728.025), stdev = 0.002
[info]   CI (99.9%): [31728.012, 31728.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0.690 ±(99.9%) 5.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.690, 3.423), stdev = 1.528
[info]   CI (99.9%): [≈ 0, 6.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   53.279 ±(99.9%) 454.086 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 53.279, 264.223), stdev = 117.925
[info]   CI (99.9%): [≈ 0, 507.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   339.560 ±(99.9%) 1220.839 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339.560, 674.689), stdev = 317.048
[info]   CI (99.9%): [≈ 0, 1560.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   26336.394 ±(99.9%) 94569.423 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 26336.394, 52079.206), stdev = 24559.379
[info]   CI (99.9%): [≈ 0, 120905.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 45.58% complete, ETA 01:13:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9221.229 ops/s
[info] # Warmup Iteration   2: 19697.344 ops/s
[info] # Warmup Iteration   3: 20172.874 ops/s
[info] # Warmup Iteration   4: 20145.905 ops/s
[info] # Warmup Iteration   5: 20272.311 ops/s
[info] Iteration   1: 19669.675 ops/s
[info]                  ·gc.alloc.rate:                   736.733 MB/sec
[info]                  ·gc.alloc.rate.norm:              58968.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.130 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     250.507 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.510 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53987.674 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 20347.712 ops/s
[info]                  ·gc.alloc.rate:                   762.229 MB/sec
[info]                  ·gc.alloc.rate.norm:              58968.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.639 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52191.799 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 20390.458 ops/s
[info]                  ·gc.alloc.rate:                   763.736 MB/sec
[info]                  ·gc.alloc.rate.norm:              58968.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.820 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.516 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51924.974 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 20279.944 ops/s
[info]                  ·gc.alloc.rate:                   759.678 MB/sec
[info]                  ·gc.alloc.rate.norm:              58968.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.231 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.541 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 104366.524 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 20369.168 ops/s
[info]                  ·gc.alloc.rate:                   763.190 MB/sec
[info]                  ·gc.alloc.rate.norm:              58968.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.825 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.095 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51929.576 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce":
[info]   20211.391 ±(99.9%) 1176.965 ops/s [Average]
[info]   (min, avg, max) = (19669.675, 20211.391, 20390.458), stdev = 305.654
[info]   CI (99.9%): [19034.426, 21388.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate":
[info]   757.113 ±(99.9%) 44.277 MB/sec [Average]
[info]   (min, avg, max) = (736.733, 757.113, 763.736), stdev = 11.499
[info]   CI (99.9%): [712.836, 801.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   58968.022 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (58968.020, 58968.022, 58968.028), stdev = 0.003
[info]   CI (99.9%): [58968.009, 58968.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.659 ±(99.9%) 5.319 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.659, 3.130), stdev = 1.381
[info]   CI (99.9%): [≈ 0, 5.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   52.677 ±(99.9%) 425.913 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 52.677, 250.507), stdev = 110.608
[info]   CI (99.9%): [≈ 0, 478.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   807.660 ±(99.9%) 1155.684 MB/sec [Average]
[info]   (min, avg, max) = (672.095, 807.660, 1344.541), stdev = 300.128
[info]   CI (99.9%): [≈ 0, 1963.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   62880.109 ±(99.9%) 89364.129 B/op [Average]
[info]   (min, avg, max) = (51924.974, 62880.109, 104366.524), stdev = 23207.581
[info]   CI (99.9%): [≈ 0, 152244.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.140
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 45.78% complete, ETA 01:12:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5983.372 ops/s
[info] # Warmup Iteration   2: 15949.780 ops/s
[info] # Warmup Iteration   3: 16112.563 ops/s
[info] # Warmup Iteration   4: 16381.774 ops/s
[info] # Warmup Iteration   5: 16450.932 ops/s
[info] Iteration   1: 16520.882 ops/s
[info]                  ·gc.alloc.rate:      462.626 MB/sec
[info]                  ·gc.alloc.rate.norm: 44088.025 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 16476.453 ops/s
[info]                  ·gc.alloc.rate:                   461.443 MB/sec
[info]                  ·gc.alloc.rate.norm:              44088.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.977 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.448 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48865.678 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 16444.231 ops/s
[info]                  ·gc.alloc.rate:                   460.598 MB/sec
[info]                  ·gc.alloc.rate.norm:              44088.870 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.961 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.668 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64484.109 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 16480.264 ops/s
[info]                  ·gc.alloc.rate:                   461.571 MB/sec
[info]                  ·gc.alloc.rate.norm:              44088.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.588 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64339.377 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 16453.108 ops/s
[info]                  ·gc.alloc.rate:      460.841 MB/sec
[info]                  ·gc.alloc.rate.norm: 44088.027 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala":
[info]   16474.988 ±(99.9%) 114.892 ops/s [Average]
[info]   (min, avg, max) = (16444.231, 16474.988, 16520.882), stdev = 29.837
[info]   CI (99.9%): [16360.096, 16589.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   461.416 ±(99.9%) 3.038 MB/sec [Average]
[info]   (min, avg, max) = (460.598, 461.416, 462.626), stdev = 0.789
[info]   CI (99.9%): [458.378, 464.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   44088.196 ±(99.9%) 1.450 B/op [Average]
[info]   (min, avg, max) = (44088.025, 44088.196, 44088.870), stdev = 0.377
[info]   CI (99.9%): [44086.746, 44089.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.104), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2.788 ±(99.9%) 16.805 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.788, 9.961), stdev = 4.364
[info]   CI (99.9%): [≈ 0, 19.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   371.741 ±(99.9%) 1331.360 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 371.741, 673.668), stdev = 345.750
[info]   CI (99.9%): [≈ 0, 1703.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   35537.833 ±(99.9%) 127288.718 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 35537.833, 64484.109), stdev = 33056.476
[info]   CI (99.9%): [≈ 0, 162826.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 0.837
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 45.98% complete, ETA 01:12:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 89102.149 ops/s
[info] # Warmup Iteration   2: 93590.429 ops/s
[info] # Warmup Iteration   3: 91804.221 ops/s
[info] # Warmup Iteration   4: 94291.384 ops/s
[info] # Warmup Iteration   5: 90063.417 ops/s
[info] Iteration   1: 94270.104 ops/s
[info]                  ·gc.alloc.rate:      236.645 MB/sec
[info]                  ·gc.alloc.rate.norm: 3952.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 93629.777 ops/s
[info]                  ·gc.alloc.rate:                   235.045 MB/sec
[info]                  ·gc.alloc.rate.norm:              3952.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.424 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8599.015 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 94039.133 ops/s
[info]                  ·gc.alloc.rate:      236.070 MB/sec
[info]                  ·gc.alloc.rate.norm: 3952.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 93994.557 ops/s
[info]                  ·gc.alloc.rate:                   235.949 MB/sec
[info]                  ·gc.alloc.rate.norm:              3952.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.017 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.287 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.399 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8565.631 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 94191.617 ops/s
[info]                  ·gc.alloc.rate:      236.452 MB/sec
[info]                  ·gc.alloc.rate.norm: 3952.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala":
[info]   94025.038 ±(99.9%) 953.306 ops/s [Average]
[info]   (min, avg, max) = (93629.777, 94025.038, 94270.104), stdev = 247.571
[info]   CI (99.9%): [93071.732, 94978.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   236.032 ±(99.9%) 2.386 MB/sec [Average]
[info]   (min, avg, max) = (235.045, 236.032, 236.645), stdev = 0.620
[info]   CI (99.9%): [233.646, 238.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3952.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3952.004, 3952.004, 3952.005), stdev = 0.001
[info]   CI (99.9%): [3952.004, 3952.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.003 ±(99.9%) 0.030 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.017), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.057 ±(99.9%) 0.494 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.057, 0.287), stdev = 0.128
[info]   CI (99.9%): [≈ 0, 0.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   204.565 ±(99.9%) 1078.611 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.565, 511.424), stdev = 280.112
[info]   CI (99.9%): [≈ 0, 1283.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3432.929 ±(99.9%) 18100.902 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3432.929, 8599.015), stdev = 4700.747
[info]   CI (99.9%): [≈ 0, 21533.831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 1.095
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 46.18% complete, ETA 01:12:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3447.885 ops/s
[info] # Warmup Iteration   2: 14244.541 ops/s
[info] # Warmup Iteration   3: 14673.997 ops/s
[info] # Warmup Iteration   4: 14771.776 ops/s
[info] # Warmup Iteration   5: 15089.486 ops/s
[info] Iteration   1: 15136.573 ops/s
[info]                  ·gc.alloc.rate:                   955.579 MB/sec
[info]                  ·gc.alloc.rate.norm:              99393.899 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.164 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.801 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70189.008 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 15192.101 ops/s
[info]                  ·gc.alloc.rate:                   959.322 MB/sec
[info]                  ·gc.alloc.rate.norm:              99392.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.961 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69930.366 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 15099.206 ops/s
[info]                  ·gc.alloc.rate:                   953.596 MB/sec
[info]                  ·gc.alloc.rate.norm:              99392.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.169 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.459 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 140860.746 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 15130.357 ops/s
[info]                  ·gc.alloc.rate:                   955.284 MB/sec
[info]                  ·gc.alloc.rate.norm:              99392.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70360.045 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 15138.960 ops/s
[info]                  ·gc.alloc.rate:                   955.692 MB/sec
[info]                  ·gc.alloc.rate.norm:              99392.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.328 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.605 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 140671.079 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson":
[info]   15139.439 ±(99.9%) 128.909 ops/s [Average]
[info]   (min, avg, max) = (15099.206, 15139.439, 15192.101), stdev = 33.477
[info]   CI (99.9%): [15010.530, 15268.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   955.894 ±(99.9%) 8.064 MB/sec [Average]
[info]   (min, avg, max) = (953.596, 955.894, 959.322), stdev = 2.094
[info]   CI (99.9%): [947.831, 963.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   99392.404 ±(99.9%) 3.219 B/op [Average]
[info]   (min, avg, max) = (99392.027, 99392.404, 99393.899), stdev = 0.836
[info]   CI (99.9%): [99389.185, 99395.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.165 ±(99.9%) 5.892 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.165, 4.328), stdev = 1.530
[info]   CI (99.9%): [≈ 0, 8.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   946.015 ±(99.9%) 1427.209 MB/sec [Average]
[info]   (min, avg, max) = (674.801, 946.015, 1352.605), stdev = 370.642
[info]   CI (99.9%): [≈ 0, 2373.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   98402.249 ±(99.9%) 148915.634 B/op [Average]
[info]   (min, avg, max) = (69930.366, 98402.249, 140860.746), stdev = 38672.917
[info]   CI (99.9%): [≈ 0, 247317.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 46.39% complete, ETA 01:11:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8336.085 ops/s
[info] # Warmup Iteration   2: 17705.513 ops/s
[info] # Warmup Iteration   3: 17843.063 ops/s
[info] # Warmup Iteration   4: 17671.607 ops/s
[info] # Warmup Iteration   5: 17941.335 ops/s
[info] Iteration   1: 17616.617 ops/s
[info]                  ·gc.alloc.rate:                   601.441 MB/sec
[info]                  ·gc.alloc.rate.norm:              53752.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.929 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.362 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45701.513 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 17907.457 ops/s
[info]                  ·gc.alloc.rate:                   611.546 MB/sec
[info]                  ·gc.alloc.rate.norm:              53744.690 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.745 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     241.263 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676.145 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59421.844 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 18000.581 ops/s
[info]                  ·gc.alloc.rate:                   614.304 MB/sec
[info]                  ·gc.alloc.rate.norm:              53728.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.640 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.858 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59111.616 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 17966.832 ops/s
[info]                  ·gc.alloc.rate:                   613.168 MB/sec
[info]                  ·gc.alloc.rate.norm:              53728.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.850 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59045.121 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 17998.861 ops/s
[info]                  ·gc.alloc.rate:                   614.402 MB/sec
[info]                  ·gc.alloc.rate.norm:              53728.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58943.449 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle":
[info]   17898.070 ±(99.9%) 622.982 ops/s [Average]
[info]   (min, avg, max) = (17616.617, 17898.070, 18000.581), stdev = 161.786
[info]   CI (99.9%): [17275.088, 18521.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.alloc.rate":
[info]   610.972 ±(99.9%) 20.990 MB/sec [Average]
[info]   (min, avg, max) = (601.441, 610.972, 614.402), stdev = 5.451
[info]   CI (99.9%): [589.982, 631.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   53736.157 ±(99.9%) 44.031 B/op [Average]
[info]   (min, avg, max) = (53728.023, 53736.157, 53752.023), stdev = 11.435
[info]   CI (99.9%): [53692.125, 53780.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0.559 ±(99.9%) 4.706 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.559, 2.745), stdev = 1.222
[info]   CI (99.9%): [≈ 0, 5.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   49.166 ±(99.9%) 413.542 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 49.166, 241.263), stdev = 107.396
[info]   CI (99.9%): [≈ 0, 462.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   642.251 ±(99.9%) 281.777 MB/sec [Average]
[info]   (min, avg, max) = (511.362, 642.251, 676.145), stdev = 73.176
[info]   CI (99.9%): [360.475, 924.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   56444.708 ±(99.9%) 23135.755 B/op [Average]
[info]   (min, avg, max) = (45701.513, 56444.708, 59421.844), stdev = 6008.282
[info]   CI (99.9%): [33308.953, 79580.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.140
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 46.59% complete, ETA 01:11:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 43133.789 ops/s
[info] # Warmup Iteration   2: 58935.266 ops/s
[info] # Warmup Iteration   3: 59176.677 ops/s
[info] # Warmup Iteration   4: 58766.092 ops/s
[info] # Warmup Iteration   5: 59677.326 ops/s
[info] Iteration   1: 59883.929 ops/s
[info]                  ·gc.alloc.rate:                   1067.737 MB/sec
[info]                  ·gc.alloc.rate.norm:              28072.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.556 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17682.268 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 59827.340 ops/s
[info]                  ·gc.alloc.rate:                   1066.915 MB/sec
[info]                  ·gc.alloc.rate.norm:              28072.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.548 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.738 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35329.309 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 59790.197 ops/s
[info]                  ·gc.alloc.rate:                   1066.239 MB/sec
[info]                  ·gc.alloc.rate.norm:              28072.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.337 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17674.993 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 59693.150 ops/s
[info]                  ·gc.alloc.rate:                   1064.565 MB/sec
[info]                  ·gc.alloc.rate.norm:              28072.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.549 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.054 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35415.609 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 59575.454 ops/s
[info]                  ·gc.alloc.rate:                   1062.399 MB/sec
[info]                  ·gc.alloc.rate.norm:              28072.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.598 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17745.782 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce":
[info]   59754.014 ±(99.9%) 468.260 ops/s [Average]
[info]   (min, avg, max) = (59575.454, 59754.014, 59883.929), stdev = 121.606
[info]   CI (99.9%): [59285.754, 60222.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1065.571 ±(99.9%) 8.171 MB/sec [Average]
[info]   (min, avg, max) = (1062.399, 1065.571, 1067.737), stdev = 2.122
[info]   CI (99.9%): [1057.400, 1073.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   28072.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (28072.007, 28072.007, 28072.007), stdev = 0.001
[info]   CI (99.9%): [28072.006, 28072.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.219 ±(99.9%) 1.156 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.219, 0.549), stdev = 0.300
[info]   CI (99.9%): [≈ 0, 1.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   940.257 ±(99.9%) 1415.336 MB/sec [Average]
[info]   (min, avg, max) = (671.337, 940.257, 1343.054), stdev = 367.558
[info]   CI (99.9%): [≈ 0, 2355.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   24769.592 ±(99.9%) 37270.906 B/op [Average]
[info]   (min, avg, max) = (17674.993, 24769.592, 35415.609), stdev = 9679.136
[info]   CI (99.9%): [≈ 0, 62040.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 46.79% complete, ETA 01:11:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 53381.357 ops/s
[info] # Warmup Iteration   2: 78551.926 ops/s
[info] # Warmup Iteration   3: 81833.903 ops/s
[info] # Warmup Iteration   4: 81782.359 ops/s
[info] # Warmup Iteration   5: 81834.475 ops/s
[info] Iteration   1: 81920.547 ops/s
[info]                  ·gc.alloc.rate:                   1323.681 MB/sec
[info]                  ·gc.alloc.rate.norm:              25440.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.200 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.356 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25971.893 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 79788.328 ops/s
[info]                  ·gc.alloc.rate:                   1289.479 MB/sec
[info]                  ·gc.alloc.rate.norm:              25440.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.642 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.640 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26686.104 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 79715.035 ops/s
[info]                  ·gc.alloc.rate:                   1288.095 MB/sec
[info]                  ·gc.alloc.rate.norm:              25440.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.411 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.672 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26735.164 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 81208.291 ops/s
[info]                  ·gc.alloc.rate:                   1312.328 MB/sec
[info]                  ·gc.alloc.rate.norm:              25440.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.210 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.138 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26269.909 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 81724.957 ops/s
[info]                  ·gc.alloc.rate:                   1320.612 MB/sec
[info]                  ·gc.alloc.rate.norm:              25440.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.802 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356.067 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26123.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala":
[info]   80871.432 ±(99.9%) 4062.834 ops/s [Average]
[info]   (min, avg, max) = (79715.035, 80871.432, 81920.547), stdev = 1055.105
[info]   CI (99.9%): [76808.597, 84934.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1306.839 ±(99.9%) 65.466 MB/sec [Average]
[info]   (min, avg, max) = (1288.095, 1306.839, 1323.681), stdev = 17.001
[info]   CI (99.9%): [1241.373, 1372.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   25440.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (25440.005, 25440.005, 25440.005), stdev = 0.001
[info]   CI (99.9%): [25440.004, 25440.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.054, 0.083), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.053 ±(99.9%) 1.795 B/op [Average]
[info]   (min, avg, max) = (0.411, 1.053, 1.642), stdev = 0.466
[info]   CI (99.9%): [≈ 0, 2.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1353.775 ±(99.9%) 7.271 MB/sec [Average]
[info]   (min, avg, max) = (1351.356, 1353.775, 1356.067), stdev = 1.888
[info]   CI (99.9%): [1346.503, 1361.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   26357.215 ±(99.9%) 1308.600 B/op [Average]
[info]   (min, avg, max) = (25971.893, 26357.215, 26735.164), stdev = 339.839
[info]   CI (99.9%): [25048.615, 27665.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 46.99% complete, ETA 01:11:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 232663.291 ops/s
[info] # Warmup Iteration   2: 239461.281 ops/s
[info] # Warmup Iteration   3: 230188.817 ops/s
[info] # Warmup Iteration   4: 241276.795 ops/s
[info] # Warmup Iteration   5: 239825.029 ops/s
[info] Iteration   1: 242209.390 ops/s
[info]                  ·gc.alloc.rate:                   463.990 MB/sec
[info]                  ·gc.alloc.rate.norm:              3016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.031 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.203 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.372 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3323.990 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 241241.170 ops/s
[info]                  ·gc.alloc.rate:                   462.225 MB/sec
[info]                  ·gc.alloc.rate.norm:              3016.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.527 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3337.698 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 242037.671 ops/s
[info]                  ·gc.alloc.rate:      463.743 MB/sec
[info]                  ·gc.alloc.rate.norm: 3016.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 241233.703 ops/s
[info]                  ·gc.alloc.rate:                   462.158 MB/sec
[info]                  ·gc.alloc.rate.norm:              3016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.682 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17.502 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.930 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4411.059 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 241509.017 ops/s
[info]                  ·gc.alloc.rate:                   462.684 MB/sec
[info]                  ·gc.alloc.rate.norm:              3016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.407 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.901 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4405.854 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala":
[info]   241646.190 ±(99.9%) 1747.123 ops/s [Average]
[info]   (min, avg, max) = (241233.703, 241646.190, 242209.390), stdev = 453.722
[info]   CI (99.9%): [239899.068, 243393.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   462.960 ±(99.9%) 3.298 MB/sec [Average]
[info]   (min, avg, max) = (462.158, 462.960, 463.990), stdev = 0.856
[info]   CI (99.9%): [459.662, 466.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3016.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3016.002, 3016.002, 3016.002), stdev = 0.001
[info]   CI (99.9%): [3016.001, 3016.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.555 ±(99.9%) 4.579 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.555, 2.682), stdev = 1.189
[info]   CI (99.9%): [≈ 0, 5.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3.622 ±(99.9%) 29.884 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.622, 17.502), stdev = 7.761
[info]   CI (99.9%): [≈ 0, 33.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   474.946 ±(99.9%) 1070.272 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474.946, 675.930), stdev = 277.946
[info]   CI (99.9%): [≈ 0, 1545.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3095.720 ±(99.9%) 6979.315 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3095.720, 4411.059), stdev = 1812.506
[info]   CI (99.9%): [≈ 0, 10075.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.140
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 47.19% complete, ETA 01:10:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 290010.118 ops/s
[info] # Warmup Iteration   2: 309871.487 ops/s
[info] # Warmup Iteration   3: 315549.244 ops/s
[info] # Warmup Iteration   4: 315335.563 ops/s
[info] # Warmup Iteration   5: 315693.518 ops/s
[info] Iteration   1: 315492.310 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 315588.625 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 314570.801 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 314601.763 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 315329.410 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc":
[info]   315116.582 ±(99.9%) 1898.379 ops/s [Average]
[info]   (min, avg, max) = (314570.801, 315116.582, 315588.625), stdev = 493.003
[info]   CI (99.9%): [313218.202, 317014.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 47.39% complete, ETA 01:10:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51979.525 ops/s
[info] # Warmup Iteration   2: 68048.039 ops/s
[info] # Warmup Iteration   3: 69610.413 ops/s
[info] # Warmup Iteration   4: 69903.884 ops/s
[info] # Warmup Iteration   5: 70043.537 ops/s
[info] Iteration   1: 70279.536 ops/s
[info]                  ·gc.alloc.rate:                   1260.973 MB/sec
[info]                  ·gc.alloc.rate.norm:              28248.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.398 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.373 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29981.902 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 70158.468 ops/s
[info]                  ·gc.alloc.rate:                   1259.012 MB/sec
[info]                  ·gc.alloc.rate.norm:              28248.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.934 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.691 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30035.738 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 70432.547 ops/s
[info]                  ·gc.alloc.rate:                   1263.773 MB/sec
[info]                  ·gc.alloc.rate.norm:              28248.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.412 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29916.364 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 70415.836 ops/s
[info]                  ·gc.alloc.rate:                   1263.590 MB/sec
[info]                  ·gc.alloc.rate.norm:              28248.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.966 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14977.318 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 70190.980 ops/s
[info]                  ·gc.alloc.rate:                   1259.523 MB/sec
[info]                  ·gc.alloc.rate.norm:              28248.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.933 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1340.859 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30072.182 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson":
[info]   70295.473 ±(99.9%) 484.093 ops/s [Average]
[info]   (min, avg, max) = (70158.468, 70295.473, 70432.547), stdev = 125.717
[info]   CI (99.9%): [69811.380, 70779.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1261.374 ±(99.9%) 8.574 MB/sec [Average]
[info]   (min, avg, max) = (1259.012, 1261.374, 1263.773), stdev = 2.227
[info]   CI (99.9%): [1252.800, 1269.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   28248.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (28248.006, 28248.006, 28248.006), stdev = 0.001
[info]   CI (99.9%): [28248.006, 28248.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.653 ±(99.9%) 2.409 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.653, 1.398), stdev = 0.626
[info]   CI (99.9%): [≈ 0, 3.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1205.260 ±(99.9%) 1152.269 MB/sec [Average]
[info]   (min, avg, max) = (669.966, 1205.260, 1340.859), stdev = 299.241
[info]   CI (99.9%): [52.991, 2357.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   26996.701 ±(99.9%) 25873.617 B/op [Average]
[info]   (min, avg, max) = (14977.318, 26996.701, 30072.182), stdev = 6719.296
[info]   CI (99.9%): [1123.084, 52870.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 47.59% complete, ETA 01:10:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14231.557 ops/s
[info] # Warmup Iteration   2: 15421.273 ops/s
[info] # Warmup Iteration   3: 15530.538 ops/s
[info] # Warmup Iteration   4: 15743.151 ops/s
[info] # Warmup Iteration   5: 15633.981 ops/s
[info] Iteration   1: 15522.444 ops/s
[info]                  ·gc.alloc.rate:                   340.451 MB/sec
[info]                  ·gc.alloc.rate.norm:              34520.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.513 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51864.904 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 15676.362 ops/s
[info]                  ·gc.alloc.rate:      343.734 MB/sec
[info]                  ·gc.alloc.rate.norm: 34520.033 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 15454.143 ops/s
[info]                  ·gc.alloc.rate:                   338.865 MB/sec
[info]                  ·gc.alloc.rate.norm:              34520.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.403 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52096.414 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 15639.239 ops/s
[info]                  ·gc.alloc.rate:                   342.920 MB/sec
[info]                  ·gc.alloc.rate.norm:              34520.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.094 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.425 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.403 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51480.302 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 15701.247 ops/s
[info]                  ·gc.alloc.rate:      344.285 MB/sec
[info]                  ·gc.alloc.rate.norm: 34520.028 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle":
[info]   15598.687 ±(99.9%) 407.980 ops/s [Average]
[info]   (min, avg, max) = (15454.143, 15598.687, 15701.247), stdev = 105.951
[info]   CI (99.9%): [15190.707, 16006.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   342.051 ±(99.9%) 8.884 MB/sec [Average]
[info]   (min, avg, max) = (338.865, 342.051, 344.285), stdev = 2.307
[info]   CI (99.9%): [333.167, 350.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   34520.028 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (34520.026, 34520.028, 34520.033), stdev = 0.003
[info]   CI (99.9%): [34520.018, 34520.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0.023 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.094), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   2.310 ±(99.9%) 15.721 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.310, 9.425), stdev = 4.083
[info]   CI (99.9%): [≈ 0, 18.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   306.864 ±(99.9%) 1078.669 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.864, 511.513), stdev = 280.127
[info]   CI (99.9%): [≈ 0, 1385.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   31088.324 ±(99.9%) 109283.125 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 31088.324, 52096.414), stdev = 28380.480
[info]   CI (99.9%): [≈ 0, 140371.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 47.79% complete, ETA 01:10:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 101645.298 ops/s
[info] # Warmup Iteration   2: 122487.191 ops/s
[info] # Warmup Iteration   3: 123299.438 ops/s
[info] # Warmup Iteration   4: 126212.773 ops/s
[info] # Warmup Iteration   5: 125991.750 ops/s
[info] Iteration   1: 124978.099 ops/s
[info]                  ·gc.alloc.rate:                   1809.841 MB/sec
[info]                  ·gc.alloc.rate.norm:              22800.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.524 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2014.805 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25382.100 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 126507.872 ops/s
[info]                  ·gc.alloc.rate:                   1832.398 MB/sec
[info]                  ·gc.alloc.rate.norm:              22800.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.259 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.749 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16732.331 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 126567.818 ops/s
[info]                  ·gc.alloc.rate:                   1833.335 MB/sec
[info]                  ·gc.alloc.rate.norm:              22800.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020.117 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25122.884 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 124044.257 ops/s
[info]                  ·gc.alloc.rate:                   1796.577 MB/sec
[info]                  ·gc.alloc.rate.norm:              22800.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.528 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.435 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25679.016 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 124857.565 ops/s
[info]                  ·gc.alloc.rate:                   1808.334 MB/sec
[info]                  ·gc.alloc.rate.norm:              22800.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.262 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.488 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17027.354 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce":
[info]   125391.122 ±(99.9%) 4262.343 ops/s [Average]
[info]   (min, avg, max) = (124044.257, 125391.122, 126567.818), stdev = 1106.917
[info]   CI (99.9%): [121128.779, 129653.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate":
[info]   1816.097 ±(99.9%) 62.188 MB/sec [Average]
[info]   (min, avg, max) = (1796.577, 1816.097, 1833.335), stdev = 16.150
[info]   CI (99.9%): [1753.909, 1878.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   22800.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (22800.003, 22800.003, 22800.004), stdev = 0.001
[info]   CI (99.9%): [22800.003, 22800.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.042, 0.083), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.522 ±(99.9%) 1.218 B/op [Average]
[info]   (min, avg, max) = (0.259, 0.522, 1.035), stdev = 0.316
[info]   CI (99.9%): [≈ 0, 1.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1750.719 ±(99.9%) 1417.025 MB/sec [Average]
[info]   (min, avg, max) = (1344.749, 1750.719, 2023.435), stdev = 367.997
[info]   CI (99.9%): [333.694, 3167.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   21988.737 ±(99.9%) 17978.948 B/op [Average]
[info]   (min, avg, max) = (16732.331, 21988.737, 25679.016), stdev = 4669.076
[info]   CI (99.9%): [4009.789, 39967.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 47.99% complete, ETA 01:09:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 60991.036 ops/s
[info] # Warmup Iteration   2: 687778.096 ops/s
[info] # Warmup Iteration   3: 685656.669 ops/s
[info] # Warmup Iteration   4: 665771.438 ops/s
[info] # Warmup Iteration   5: 686424.551 ops/s
[info] Iteration   1: 687708.759 ops/s
[info]                  ·gc.alloc.rate:      380.898 MB/sec
[info]                  ·gc.alloc.rate.norm: 872.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 683091.308 ops/s
[info]                  ·gc.alloc.rate:                   378.452 MB/sec
[info]                  ·gc.alloc.rate.norm:              872.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.018 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.042 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.530 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1178.629 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 673063.238 ops/s
[info]                  ·gc.alloc.rate:                   372.832 MB/sec
[info]                  ·gc.alloc.rate.norm:              872.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.447 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1196.201 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 688128.834 ops/s
[info]                  ·gc.alloc.rate:      381.180 MB/sec
[info]                  ·gc.alloc.rate.norm: 872.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 685248.678 ops/s
[info]                  ·gc.alloc.rate:                   379.563 MB/sec
[info]                  ·gc.alloc.rate.norm:              872.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.534 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.823 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.234 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1546.674 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava":
[info]   683448.163 ±(99.9%) 23680.460 ops/s [Average]
[info]   (min, avg, max) = (673063.238, 683448.163, 688128.834), stdev = 6149.740
[info]   CI (99.9%): [659767.703, 707128.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   378.585 ±(99.9%) 13.081 MB/sec [Average]
[info]   (min, avg, max) = (372.832, 378.585, 381.180), stdev = 3.397
[info]   CI (99.9%): [365.505, 391.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   872.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (872.001, 872.001, 872.001), stdev = 0.001
[info]   CI (99.9%): [872.001, 872.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.510 ±(99.9%) 4.357 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.510, 2.534), stdev = 1.131
[info]   CI (99.9%): [≈ 0, 4.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1.173 ±(99.9%) 10.009 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.173, 5.823), stdev = 2.599
[info]   CI (99.9%): [≈ 0, 11.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   339.242 ±(99.9%) 1219.291 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339.242, 673.234), stdev = 316.646
[info]   CI (99.9%): [≈ 0, 1558.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   784.301 ±(99.9%) 2814.281 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 784.301, 1546.674), stdev = 730.860
[info]   CI (99.9%): [≈ 0, 3598.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 48.19% complete, ETA 01:09:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 225843.353 ops/s
[info] # Warmup Iteration   2: 359207.256 ops/s
[info] # Warmup Iteration   3: 366834.708 ops/s
[info] # Warmup Iteration   4: 366440.348 ops/s
[info] # Warmup Iteration   5: 366821.296 ops/s
[info] Iteration   1: 366108.559 ops/s
[info]                  ·gc.alloc.rate:                   373.883 MB/sec
[info]                  ·gc.alloc.rate.norm:              1608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.322 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2199.101 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 368456.289 ops/s
[info]                  ·gc.alloc.rate:      376.411 MB/sec
[info]                  ·gc.alloc.rate.norm: 1608.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 365598.059 ops/s
[info]                  ·gc.alloc.rate:                   373.470 MB/sec
[info]                  ·gc.alloc.rate.norm:              1608.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.467 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2202.156 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 362141.419 ops/s
[info]                  ·gc.alloc.rate:                   369.894 MB/sec
[info]                  ·gc.alloc.rate.norm:              1608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.633 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.573 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2928.150 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 366592.360 ops/s
[info]                  ·gc.alloc.rate:      374.437 MB/sec
[info]                  ·gc.alloc.rate.norm: 1608.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala":
[info]   365779.337 ±(99.9%) 8865.429 ops/s [Average]
[info]   (min, avg, max) = (362141.419, 365779.337, 368456.289), stdev = 2302.324
[info]   CI (99.9%): [356913.909, 374644.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   373.619 ±(99.9%) 9.118 MB/sec [Average]
[info]   (min, avg, max) = (369.894, 373.619, 376.411), stdev = 2.368
[info]   CI (99.9%): [364.501, 382.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1608.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1608.001, 1608.001, 1608.001), stdev = 0.001
[info]   CI (99.9%): [1608.001, 1608.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.244 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.146), stdev = 0.063
[info]   CI (99.9%): [≈ 0, 0.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.145 ±(99.9%) 1.063 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.145, 0.633), stdev = 0.276
[info]   CI (99.9%): [≈ 0, 1.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   339.272 ±(99.9%) 1219.536 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339.272, 673.573), stdev = 316.710
[info]   CI (99.9%): [≈ 0, 1558.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1465.881 ±(99.9%) 5278.177 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1465.881, 2928.150), stdev = 1370.726
[info]   CI (99.9%): [≈ 0, 6744.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 0.837
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 48.39% complete, ETA 01:09:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 739116.581 ops/s
[info] # Warmup Iteration   2: 768080.088 ops/s
[info] # Warmup Iteration   3: 747909.533 ops/s
[info] # Warmup Iteration   4: 755356.349 ops/s
[info] # Warmup Iteration   5: 784818.163 ops/s
[info] Iteration   1: 763531.588 ops/s
[info]                  ·gc.alloc.rate:                   263.889 MB/sec
[info]                  ·gc.alloc.rate.norm:              544.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.043 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.503 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1054.451 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 745944.498 ops/s
[info]                  ·gc.alloc.rate:      257.877 MB/sec
[info]                  ·gc.alloc.rate.norm: 544.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 742720.467 ops/s
[info]                  ·gc.alloc.rate:                   256.682 MB/sec
[info]                  ·gc.alloc.rate.norm:              544.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.020 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.524 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1084.100 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 763538.387 ops/s
[info]                  ·gc.alloc.rate:      263.820 MB/sec
[info]                  ·gc.alloc.rate.norm: 544.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 763011.328 ops/s
[info]                  ·gc.alloc.rate:                   263.716 MB/sec
[info]                  ·gc.alloc.rate.norm:              544.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.522 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1055.182 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala":
[info]   755749.254 ±(99.9%) 40379.265 ops/s [Average]
[info]   (min, avg, max) = (742720.467, 755749.254, 763538.387), stdev = 10486.367
[info]   CI (99.9%): [715369.988, 796128.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   261.197 ±(99.9%) 13.867 MB/sec [Average]
[info]   (min, avg, max) = (256.682, 261.197, 263.889), stdev = 3.601
[info]   CI (99.9%): [247.329, 275.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   544.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (544.001, 544.001, 544.001), stdev = 0.001
[info]   CI (99.9%): [544.000, 544.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.013 ±(99.9%) 0.074 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.043), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.027 ±(99.9%) 0.153 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.089), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   306.910 ±(99.9%) 1078.831 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.910, 511.524), stdev = 280.169
[info]   CI (99.9%): [≈ 0, 1385.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   638.747 ±(99.9%) 2245.756 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 638.747, 1084.100), stdev = 583.216
[info]   CI (99.9%): [≈ 0, 2884.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 48.59% complete, ETA 01:08:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 46681.187 ops/s
[info] # Warmup Iteration   2: 78918.755 ops/s
[info] # Warmup Iteration   3: 79014.973 ops/s
[info] # Warmup Iteration   4: 79856.535 ops/s
[info] # Warmup Iteration   5: 79252.609 ops/s
[info] Iteration   1: 80786.447 ops/s
[info]                  ·gc.alloc.rate:                   3462.166 MB/sec
[info]                  ·gc.alloc.rate.norm:              67472.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.839 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3397.157 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66205.091 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 80971.799 ops/s
[info]                  ·gc.alloc.rate:                   3469.935 MB/sec
[info]                  ·gc.alloc.rate.norm:              67472.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.214 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3399.751 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66107.286 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 81173.254 ops/s
[info]                  ·gc.alloc.rate:                   3479.219 MB/sec
[info]                  ·gc.alloc.rate.norm:              67472.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.421 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3402.946 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65992.849 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 80840.834 ops/s
[info]                  ·gc.alloc.rate:                   3465.087 MB/sec
[info]                  ·gc.alloc.rate.norm:              67472.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.621 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3403.081 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66264.619 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 79883.860 ops/s
[info]                  ·gc.alloc.rate:                   3423.982 MB/sec
[info]                  ·gc.alloc.rate.norm:              67472.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.640 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3405.564 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67109.074 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson":
[info]   80731.239 ±(99.9%) 1912.143 ops/s [Average]
[info]   (min, avg, max) = (79883.860, 80731.239, 81173.254), stdev = 496.577
[info]   CI (99.9%): [78819.096, 82643.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3460.078 ±(99.9%) 81.592 MB/sec [Average]
[info]   (min, avg, max) = (3423.982, 3460.078, 3479.219), stdev = 21.189
[info]   CI (99.9%): [3378.486, 3541.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   67472.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (67472.005, 67472.005, 67472.005), stdev = 0.001
[info]   CI (99.9%): [67472.004, 67472.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.146), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.947 ±(99.9%) 2.553 B/op [Average]
[info]   (min, avg, max) = (1.214, 1.947, 2.839), stdev = 0.663
[info]   CI (99.9%): [≈ 0, 4.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3401.700 ±(99.9%) 12.601 MB/sec [Average]
[info]   (min, avg, max) = (3397.157, 3401.700, 3405.564), stdev = 3.272
[info]   CI (99.9%): [3389.099, 3414.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   66335.784 ±(99.9%) 1711.197 B/op [Average]
[info]   (min, avg, max) = (65992.849, 66335.784, 67109.074), stdev = 444.392
[info]   CI (99.9%): [64624.586, 68046.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 48.80% complete, ETA 01:08:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 194546.531 ops/s
[info] # Warmup Iteration   2: 220388.607 ops/s
[info] # Warmup Iteration   3: 221707.222 ops/s
[info] # Warmup Iteration   4: 223986.813 ops/s
[info] # Warmup Iteration   5: 223990.957 ops/s
[info] Iteration   1: 223990.225 ops/s
[info]                  ·gc.alloc.rate:                   1414.789 MB/sec
[info]                  ·gc.alloc.rate.norm:              9944.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.439 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.507 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9435.962 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 224368.757 ops/s
[info]                  ·gc.alloc.rate:                   1417.199 MB/sec
[info]                  ·gc.alloc.rate.norm:              9944.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.934 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9422.908 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 223269.164 ops/s
[info]                  ·gc.alloc.rate:                   1410.357 MB/sec
[info]                  ·gc.alloc.rate.norm:              9944.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.440 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2015.627 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14211.573 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 223844.859 ops/s
[info]                  ·gc.alloc.rate:                   1413.924 MB/sec
[info]                  ·gc.alloc.rate.norm:              9944.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.213 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9460.766 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 223043.124 ops/s
[info]                  ·gc.alloc.rate:                   1408.917 MB/sec
[info]                  ·gc.alloc.rate.norm:              9944.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.147 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.170 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9508.197 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle":
[info]   223703.226 ±(99.9%) 2082.113 ops/s [Average]
[info]   (min, avg, max) = (223043.124, 223703.226, 224368.757), stdev = 540.718
[info]   CI (99.9%): [221621.113, 225785.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1413.037 ±(99.9%) 12.963 MB/sec [Average]
[info]   (min, avg, max) = (1408.917, 1413.037, 1417.199), stdev = 3.366
[info]   CI (99.9%): [1400.074, 1426.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   9944.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9944.002, 9944.002, 9944.002), stdev = 0.001
[info]   CI (99.9%): [9944.002, 9944.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.062), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0.205 ±(99.9%) 0.855 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.205, 0.440), stdev = 0.222
[info]   CI (99.9%): [≈ 0, 1.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   1478.690 ±(99.9%) 1155.819 MB/sec [Average]
[info]   (min, avg, max) = (1342.507, 1478.690, 2015.627), stdev = 300.162
[info]   CI (99.9%): [322.872, 2634.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   10407.881 ±(99.9%) 8188.693 B/op [Average]
[info]   (min, avg, max) = (9422.908, 10407.881, 14211.573), stdev = 2126.577
[info]   CI (99.9%): [2219.189, 18596.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 49.00% complete, ETA 01:08:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 209560.851 ops/s
[info] # Warmup Iteration   2: 276638.578 ops/s
[info] # Warmup Iteration   3: 275373.452 ops/s
[info] # Warmup Iteration   4: 284906.881 ops/s
[info] # Warmup Iteration   5: 285147.369 ops/s
[info] Iteration   1: 283439.080 ops/s
[info]                  ·gc.alloc.rate:                   1476.242 MB/sec
[info]                  ·gc.alloc.rate.norm:              8200.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.347 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2012.300 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11177.610 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 285262.069 ops/s
[info]                  ·gc.alloc.rate:                   1485.752 MB/sec
[info]                  ·gc.alloc.rate.norm:              8200.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.230 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.850 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7405.795 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 285889.281 ops/s
[info]                  ·gc.alloc.rate:                   1489.521 MB/sec
[info]                  ·gc.alloc.rate.norm:              8200.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.344 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7396.476 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 284392.841 ops/s
[info]                  ·gc.alloc.rate:                   1481.181 MB/sec
[info]                  ·gc.alloc.rate.norm:              8200.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.397 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7442.749 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 277883.442 ops/s
[info]                  ·gc.alloc.rate:                   1447.455 MB/sec
[info]                  ·gc.alloc.rate.norm:              8200.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.236 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.865 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7624.485 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce":
[info]   283373.343 ±(99.9%) 12340.088 ops/s [Average]
[info]   (min, avg, max) = (277883.442, 283373.343, 285889.281), stdev = 3204.682
[info]   CI (99.9%): [271033.255, 295713.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1476.030 ±(99.9%) 64.424 MB/sec [Average]
[info]   (min, avg, max) = (1447.455, 1476.030, 1489.521), stdev = 16.731
[info]   CI (99.9%): [1411.606, 1540.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   8200.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8200.001, 8200.001, 8200.001), stdev = 0.001
[info]   CI (99.9%): [8200.001, 8200.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.062), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.231 ±(99.9%) 0.543 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.231, 0.347), stdev = 0.141
[info]   CI (99.9%): [≈ 0, 0.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1477.595 ±(99.9%) 1151.006 MB/sec [Average]
[info]   (min, avg, max) = (1341.850, 1477.595, 2012.300), stdev = 298.913
[info]   CI (99.9%): [326.589, 2628.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   8209.423 ±(99.9%) 6399.135 B/op [Average]
[info]   (min, avg, max) = (7396.476, 8209.423, 11177.610), stdev = 1661.835
[info]   CI (99.9%): [1810.288, 14608.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 49.20% complete, ETA 01:08:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 93569.239 ops/s
[info] # Warmup Iteration   2: 1412373.630 ops/s
[info] # Warmup Iteration   3: 1429897.042 ops/s
[info] # Warmup Iteration   4: 1394205.301 ops/s
[info] # Warmup Iteration   5: 1438211.311 ops/s
[info] Iteration   1: 1399666.151 ops/s
[info]                  ·gc.alloc.rate:      476.554 MB/sec
[info]                  ·gc.alloc.rate.norm: 536.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1431659.680 ops/s
[info]                  ·gc.alloc.rate:                   487.470 MB/sec
[info]                  ·gc.alloc.rate.norm:              536.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.452 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 562.370 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1390077.151 ops/s
[info]                  ·gc.alloc.rate:                   473.315 MB/sec
[info]                  ·gc.alloc.rate.norm:              536.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.542 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.878 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.258 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 762.424 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1367770.816 ops/s
[info]                  ·gc.alloc.rate:                   465.860 MB/sec
[info]                  ·gc.alloc.rate.norm:              536.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.503 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 774.906 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1363600.150 ops/s
[info]                  ·gc.alloc.rate:      464.442 MB/sec
[info]                  ·gc.alloc.rate.norm: 536.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava":
[info]   1390554.790 ±(99.9%) 105779.214 ops/s [Average]
[info]   (min, avg, max) = (1363600.150, 1390554.790, 1431659.680), stdev = 27470.526
[info]   CI (99.9%): [1284775.576, 1496334.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   473.528 ±(99.9%) 35.757 MB/sec [Average]
[info]   (min, avg, max) = (464.442, 473.528, 487.470), stdev = 9.286
[info]   CI (99.9%): [437.771, 509.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   536.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (536.000, 536.000, 536.000), stdev = 0.001
[info]   CI (99.9%): [536.000, 536.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.508 ±(99.9%) 4.377 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.508, 2.542), stdev = 1.137
[info]   CI (99.9%): [≈ 0, 4.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0.576 ±(99.9%) 4.956 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.576, 2.878), stdev = 1.287
[info]   CI (99.9%): [≈ 0, 5.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   371.643 ±(99.9%) 1330.946 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 371.643, 673.503), stdev = 345.642
[info]   CI (99.9%): [≈ 0, 1702.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   419.940 ±(99.9%) 1511.447 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 419.940, 774.906), stdev = 392.518
[info]   CI (99.9%): [≈ 0, 1931.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 49.40% complete, ETA 01:07:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 917246.784 ops/s
[info] # Warmup Iteration   2: 1350094.598 ops/s
[info] # Warmup Iteration   3: 1350005.139 ops/s
[info] # Warmup Iteration   4: 1326383.698 ops/s
[info] # Warmup Iteration   5: 1289565.945 ops/s
[info] Iteration   1: 1301475.494 ops/s
[info]                  ·gc.alloc.rate:                   760.550 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.536 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 814.744 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 1349315.250 ops/s
[info]                  ·gc.alloc.rate:                   788.737 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.097 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.142 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1574.835 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1305611.703 ops/s
[info]                  ·gc.alloc.rate:                   762.958 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.527 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 814.573 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1307789.483 ops/s
[info]                  ·gc.alloc.rate:                   764.222 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.511 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 813.206 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1301364.593 ops/s
[info]                  ·gc.alloc.rate:                   760.427 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.852 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 817.677 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala":
[info]   1313111.305 ±(99.9%) 78648.136 ops/s [Average]
[info]   (min, avg, max) = (1301364.593, 1313111.305, 1349315.250), stdev = 20424.671
[info]   CI (99.9%): [1234463.168, 1391759.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   767.379 ±(99.9%) 46.394 MB/sec [Average]
[info]   (min, avg, max) = (760.427, 767.379, 788.737), stdev = 12.048
[info]   CI (99.9%): [720.985, 813.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   920.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (920.000, 920.000, 920.000), stdev = 0.001
[info]   CI (99.9%): [920.000, 920.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.083), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.035 ±(99.9%) 0.184 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.035, 0.097), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   810.113 ±(99.9%) 1162.457 MB/sec [Average]
[info]   (min, avg, max) = (673.536, 810.113, 1350.142), stdev = 301.886
[info]   CI (99.9%): [≈ 0, 1972.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   967.007 ±(99.9%) 1308.411 B/op [Average]
[info]   (min, avg, max) = (813.206, 967.007, 1574.835), stdev = 339.790
[info]   CI (99.9%): [≈ 0, 2275.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 49.60% complete, ETA 01:07:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1260151.608 ops/s
[info] # Warmup Iteration   2: 1300950.840 ops/s
[info] # Warmup Iteration   3: 1298980.915 ops/s
[info] # Warmup Iteration   4: 1312063.475 ops/s
[info] # Warmup Iteration   5: 1289994.876 ops/s
[info] Iteration   1: 1293400.329 ops/s
[info]                  ·gc.alloc.rate:                   440.340 MB/sec
[info]                  ·gc.alloc.rate.norm:              536.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.025 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.389 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 622.485 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1313971.724 ops/s
[info]                  ·gc.alloc.rate:                   447.412 MB/sec
[info]                  ·gc.alloc.rate.norm:              536.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.502 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 612.781 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1314271.122 ops/s
[info]                  ·gc.alloc.rate:      447.499 MB/sec
[info]                  ·gc.alloc.rate.norm: 536.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1314700.342 ops/s
[info]                  ·gc.alloc.rate:                   447.631 MB/sec
[info]                  ·gc.alloc.rate.norm:              536.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.294 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.945 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.622 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 807.803 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1302661.219 ops/s
[info]                  ·gc.alloc.rate:                   443.530 MB/sec
[info]                  ·gc.alloc.rate.norm:              536.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.558 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 815.195 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala":
[info]   1307800.947 ±(99.9%) 36598.235 ops/s [Average]
[info]   (min, avg, max) = (1293400.329, 1307800.947, 1314700.342), stdev = 9504.445
[info]   CI (99.9%): [1271202.712, 1344399.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   445.282 ±(99.9%) 12.546 MB/sec [Average]
[info]   (min, avg, max) = (440.340, 445.282, 447.631), stdev = 3.258
[info]   CI (99.9%): [432.736, 457.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   536.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (536.000, 536.000, 536.000), stdev = 0.001
[info]   CI (99.9%): [536.000, 536.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.664 ±(99.9%) 5.662 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.664, 3.294), stdev = 1.470
[info]   CI (99.9%): [≈ 0, 6.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.795 ±(99.9%) 6.780 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.795, 3.945), stdev = 1.761
[info]   CI (99.9%): [≈ 0, 7.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   474.414 ±(99.9%) 1068.427 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474.414, 674.622), stdev = 277.467
[info]   CI (99.9%): [≈ 0, 1542.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   571.653 ±(99.9%) 1285.997 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 571.653, 815.195), stdev = 333.969
[info]   CI (99.9%): [≈ 0, 1857.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 49.80% complete, ETA 01:07:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1321868.357 ops/s
[info] # Warmup Iteration   2: 1392954.366 ops/s
[info] # Warmup Iteration   3: 1405217.015 ops/s
[info] # Warmup Iteration   4: 1400977.463 ops/s
[info] # Warmup Iteration   5: 1401545.719 ops/s
[info] Iteration   1: 1404794.179 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1407509.916 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1405727.281 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1399118.503 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1401731.706 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc":
[info]   1403776.317 ±(99.9%) 12866.242 ops/s [Average]
[info]   (min, avg, max) = (1399118.503, 1403776.317, 1407509.916), stdev = 3341.322
[info]   CI (99.9%): [1390910.075, 1416642.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 50.00% complete, ETA 01:07:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26836.890 ops/s
[info] # Warmup Iteration   2: 39302.444 ops/s
[info] # Warmup Iteration   3: 39269.255 ops/s
[info] # Warmup Iteration   4: 39636.245 ops/s
[info] # Warmup Iteration   5: 39332.498 ops/s
[info] Iteration   1: 39489.137 ops/s
[info]                  ·gc.alloc.rate:                   1899.180 MB/sec
[info]                  ·gc.alloc.rate.norm:              75712.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.659 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2008.586 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80073.559 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 39875.776 ops/s
[info]                  ·gc.alloc.rate:                   1917.888 MB/sec
[info]                  ·gc.alloc.rate.norm:              75712.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.108 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2011.969 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79426.024 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 39590.756 ops/s
[info]                  ·gc.alloc.rate:                   1904.119 MB/sec
[info]                  ·gc.alloc.rate.norm:              75712.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.482 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2015.795 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80152.514 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 39734.166 ops/s
[info]                  ·gc.alloc.rate:                   1911.458 MB/sec
[info]                  ·gc.alloc.rate.norm:              75712.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.649 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020.179 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80018.392 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 39711.987 ops/s
[info]                  ·gc.alloc.rate:                   1909.940 MB/sec
[info]                  ·gc.alloc.rate.norm:              75712.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.650 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024.404 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80249.510 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson":
[info]   39680.365 ±(99.9%) 566.836 ops/s [Average]
[info]   (min, avg, max) = (39489.137, 39680.365, 39875.776), stdev = 147.205
[info]   CI (99.9%): [39113.529, 40247.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1908.517 ±(99.9%) 27.567 MB/sec [Average]
[info]   (min, avg, max) = (1899.180, 1908.517, 1917.888), stdev = 7.159
[info]   CI (99.9%): [1880.949, 1936.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   75712.010 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (75712.010, 75712.010, 75712.011), stdev = 0.001
[info]   CI (99.9%): [75712.009, 75712.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.058, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.310 ±(99.9%) 4.111 B/op [Average]
[info]   (min, avg, max) = (1.649, 2.310, 4.108), stdev = 1.068
[info]   CI (99.9%): [≈ 0, 6.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   2016.187 ±(99.9%) 24.292 MB/sec [Average]
[info]   (min, avg, max) = (2008.586, 2016.187, 2024.404), stdev = 6.308
[info]   CI (99.9%): [1991.895, 2040.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   79984.000 ±(99.9%) 1246.910 B/op [Average]
[info]   (min, avg, max) = (79426.024, 79984.000, 80249.510), stdev = 323.819
[info]   CI (99.9%): [78737.090, 81230.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 50.20% complete, ETA 01:06:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 126535.284 ops/s
[info] # Warmup Iteration   2: 140390.912 ops/s
[info] # Warmup Iteration   3: 139569.900 ops/s
[info] # Warmup Iteration   4: 140837.887 ops/s
[info] # Warmup Iteration   5: 141423.778 ops/s
[info] Iteration   1: 141458.562 ops/s
[info]                  ·gc.alloc.rate:                   954.563 MB/sec
[info]                  ·gc.alloc.rate.norm:              10624.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.908 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7478.129 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 141482.264 ops/s
[info]                  ·gc.alloc.rate:                   954.870 MB/sec
[info]                  ·gc.alloc.rate.norm:              10624.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.695 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.353 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14946.311 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 141505.360 ops/s
[info]                  ·gc.alloc.rate:                   954.988 MB/sec
[info]                  ·gc.alloc.rate.norm:              10624.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.317 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7468.237 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 138294.934 ops/s
[info]                  ·gc.alloc.rate:                   933.591 MB/sec
[info]                  ·gc.alloc.rate.norm:              10624.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.711 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.023 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15283.221 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 141229.882 ops/s
[info]                  ·gc.alloc.rate:                   953.559 MB/sec
[info]                  ·gc.alloc.rate.norm:              10624.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.955 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7486.541 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle":
[info]   140794.200 ±(99.9%) 5396.643 ops/s [Average]
[info]   (min, avg, max) = (138294.934, 140794.200, 141505.360), stdev = 1401.491
[info]   CI (99.9%): [135397.557, 146190.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   950.314 ±(99.9%) 36.062 MB/sec [Average]
[info]   (min, avg, max) = (933.591, 950.314, 954.988), stdev = 9.365
[info]   CI (99.9%): [914.252, 986.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   10624.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10624.003, 10624.003, 10624.003), stdev = 0.001
[info]   CI (99.9%): [10624.003, 10624.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0.281 ±(99.9%) 1.482 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.281, 0.711), stdev = 0.385
[info]   CI (99.9%): [≈ 0, 1.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   940.311 ±(99.9%) 1416.169 MB/sec [Average]
[info]   (min, avg, max) = (671.317, 940.311, 1343.353), stdev = 367.775
[info]   CI (99.9%): [≈ 0, 2356.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   10532.488 ±(99.9%) 16113.902 B/op [Average]
[info]   (min, avg, max) = (7468.237, 10532.488, 15283.221), stdev = 4184.729
[info]   CI (99.9%): [≈ 0, 26646.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 50.40% complete, ETA 01:06:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30751.361 ops/s
[info] # Warmup Iteration   2: 36163.320 ops/s
[info] # Warmup Iteration   3: 35852.615 ops/s
[info] # Warmup Iteration   4: 36188.968 ops/s
[info] # Warmup Iteration   5: 36239.120 ops/s
[info] Iteration   1: 36084.311 ops/s
[info]                  ·gc.alloc.rate:                   720.202 MB/sec
[info]                  ·gc.alloc.rate.norm:              31424.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.394 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     148.073 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.515 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29430.552 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 36175.846 ops/s
[info]                  ·gc.alloc.rate:                   722.132 MB/sec
[info]                  ·gc.alloc.rate.norm:              31424.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.621 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29356.535 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 36467.958 ops/s
[info]                  ·gc.alloc.rate:                   727.880 MB/sec
[info]                  ·gc.alloc.rate.norm:              31424.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.767 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58013.060 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 36388.593 ops/s
[info]                  ·gc.alloc.rate:                   726.358 MB/sec
[info]                  ·gc.alloc.rate.norm:              31424.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.701 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.268 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29040.681 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 36353.679 ops/s
[info]                  ·gc.alloc.rate:                   725.662 MB/sec
[info]                  ·gc.alloc.rate.norm:              31424.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.270 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29068.634 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce":
[info]   36294.077 ±(99.9%) 610.969 ops/s [Average]
[info]   (min, avg, max) = (36084.311, 36294.077, 36467.958), stdev = 158.667
[info]   CI (99.9%): [35683.108, 36905.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate":
[info]   724.447 ±(99.9%) 12.221 MB/sec [Average]
[info]   (min, avg, max) = (720.202, 724.447, 727.880), stdev = 3.174
[info]   CI (99.9%): [712.226, 736.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   31424.011 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (31424.011, 31424.011, 31424.011), stdev = 0.001
[info]   CI (99.9%): [31424.011, 31424.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.691 ±(99.9%) 5.818 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.691, 3.394), stdev = 1.511
[info]   CI (99.9%): [≈ 0, 6.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   30.155 ±(99.9%) 253.868 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 30.155, 148.073), stdev = 65.929
[info]   CI (99.9%): [≈ 0, 284.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   807.088 ±(99.9%) 1155.259 MB/sec [Average]
[info]   (min, avg, max) = (671.268, 807.088, 1343.767), stdev = 300.017
[info]   CI (99.9%): [≈ 0, 1962.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   34981.892 ±(99.9%) 49580.735 B/op [Average]
[info]   (min, avg, max) = (29040.681, 34981.892, 58013.060), stdev = 12875.960
[info]   CI (99.9%): [≈ 0, 84562.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 50.60% complete, ETA 01:06:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 53922.189 ops/s
[info] # Warmup Iteration   2: 83855.210 ops/s
[info] # Warmup Iteration   3: 83938.589 ops/s
[info] # Warmup Iteration   4: 84099.272 ops/s
[info] # Warmup Iteration   5: 84404.539 ops/s
[info] Iteration   1: 84510.176 ops/s
[info]                  ·gc.alloc.rate:                   888.808 MB/sec
[info]                  ·gc.alloc.rate.norm:              16560.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.801 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12572.690 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 84284.305 ops/s
[info]                  ·gc.alloc.rate:                   886.523 MB/sec
[info]                  ·gc.alloc.rate.norm:              16560.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.944 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.155 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25220.507 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 84209.369 ops/s
[info]                  ·gc.alloc.rate:                   885.740 MB/sec
[info]                  ·gc.alloc.rate.norm:              16560.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.200 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12623.696 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 84272.076 ops/s
[info]                  ·gc.alloc.rate:                   886.402 MB/sec
[info]                  ·gc.alloc.rate.norm:              16560.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.778 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.865 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12626.701 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 84088.618 ops/s
[info]                  ·gc.alloc.rate:                   884.541 MB/sec
[info]                  ·gc.alloc.rate.norm:              16560.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.779 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.873 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12653.422 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala":
[info]   84272.909 ±(99.9%) 591.632 ops/s [Average]
[info]   (min, avg, max) = (84088.618, 84272.909, 84510.176), stdev = 153.645
[info]   CI (99.9%): [83681.277, 84864.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   886.403 ±(99.9%) 5.998 MB/sec [Average]
[info]   (min, avg, max) = (884.541, 886.403, 888.808), stdev = 1.558
[info]   CI (99.9%): [880.405, 892.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   16560.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16560.005, 16560.005, 16560.005), stdev = 0.001
[info]   CI (99.9%): [16560.004, 16560.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.164 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.700 ±(99.9%) 3.068 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.700, 1.944), stdev = 0.797
[info]   CI (99.9%): [≈ 0, 3.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   810.379 ±(99.9%) 1161.909 MB/sec [Average]
[info]   (min, avg, max) = (674.801, 810.379, 1350.155), stdev = 301.744
[info]   CI (99.9%): [≈ 0, 1972.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   15139.403 ±(99.9%) 21700.627 B/op [Average]
[info]   (min, avg, max) = (12572.690, 15139.403, 25220.507), stdev = 5635.584
[info]   CI (99.9%): [≈ 0, 36840.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 50.80% complete, ETA 01:06:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 243268.754 ops/s
[info] # Warmup Iteration   2: 261248.243 ops/s
[info] # Warmup Iteration   3: 264125.362 ops/s
[info] # Warmup Iteration   4: 266788.115 ops/s
[info] # Warmup Iteration   5: 266670.280 ops/s
[info] Iteration   1: 265136.470 ops/s
[info]                  ·gc.alloc.rate:                   862.140 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.371 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.218 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7994.799 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 265926.891 ops/s
[info]                  ·gc.alloc.rate:                   864.982 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.056 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3978.032 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 265565.049 ops/s
[info]                  ·gc.alloc.rate:                   863.650 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.247 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.241 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3979.341 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 266464.481 ops/s
[info]                  ·gc.alloc.rate:                   866.660 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.492 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.518 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7931.240 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 266404.665 ops/s
[info]                  ·gc.alloc.rate:                   866.568 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.316 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3966.379 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala":
[info]   265899.511 ±(99.9%) 2169.059 ops/s [Average]
[info]   (min, avg, max) = (265136.470, 265899.511, 266464.481), stdev = 563.298
[info]   CI (99.9%): [263730.453, 268068.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   864.800 ±(99.9%) 7.461 MB/sec [Average]
[info]   (min, avg, max) = (862.140, 864.800, 866.660), stdev = 1.938
[info]   CI (99.9%): [857.339, 872.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5120.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5120.002, 5120.002, 5120.002), stdev = 0.001
[info]   CI (99.9%): [5120.001, 5120.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.222 ±(99.9%) 0.848 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.222, 0.492), stdev = 0.220
[info]   CI (99.9%): [≈ 0, 1.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   940.670 ±(99.9%) 1419.065 MB/sec [Average]
[info]   (min, avg, max) = (671.241, 940.670, 1346.218), stdev = 368.527
[info]   CI (99.9%): [≈ 0, 2359.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5569.958 ±(99.9%) 8412.416 B/op [Average]
[info]   (min, avg, max) = (3966.379, 5569.958, 7994.799), stdev = 2184.678
[info]   CI (99.9%): [≈ 0, 13982.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 51.00% complete, ETA 01:05:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13884.428 ops/s
[info] # Warmup Iteration   2: 23678.798 ops/s
[info] # Warmup Iteration   3: 23823.090 ops/s
[info] # Warmup Iteration   4: 24494.342 ops/s
[info] # Warmup Iteration   5: 24696.945 ops/s
[info] Iteration   1: 24042.986 ops/s
[info]                  ·gc.alloc.rate:                   1098.009 MB/sec
[info]                  ·gc.alloc.rate.norm:              71896.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.725 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.373 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 88420.463 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 23939.887 ops/s
[info]                  ·gc.alloc.rate:                   1093.362 MB/sec
[info]                  ·gc.alloc.rate.norm:              71896.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.736 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.604 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 88877.214 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 23966.225 ops/s
[info]                  ·gc.alloc.rate:                   1094.656 MB/sec
[info]                  ·gc.alloc.rate.norm:              71896.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676.286 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44417.842 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 23831.895 ops/s
[info]                  ·gc.alloc.rate:                   1088.717 MB/sec
[info]                  ·gc.alloc.rate.norm:              71896.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.749 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.518 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 89382.768 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 23980.805 ops/s
[info]                  ·gc.alloc.rate:                   1095.444 MB/sec
[info]                  ·gc.alloc.rate.norm:              71896.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.732 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      677.348 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44455.636 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson":
[info]   23952.360 ±(99.9%) 297.535 ops/s [Average]
[info]   (min, avg, max) = (23831.895, 23952.360, 24042.986), stdev = 77.269
[info]   CI (99.9%): [23654.825, 24249.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1094.038 ±(99.9%) 13.185 MB/sec [Average]
[info]   (min, avg, max) = (1088.717, 1094.038, 1098.009), stdev = 3.424
[info]   CI (99.9%): [1080.853, 1107.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   71896.018 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (71896.017, 71896.018, 71896.020), stdev = 0.001
[info]   CI (99.9%): [71896.013, 71896.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.189 ±(99.9%) 4.711 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.189, 2.749), stdev = 1.223
[info]   CI (99.9%): [≈ 0, 6.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1081.826 ±(99.9%) 1423.670 MB/sec [Average]
[info]   (min, avg, max) = (676.286, 1081.826, 1353.518), stdev = 369.723
[info]   CI (99.9%): [≈ 0, 2505.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   71110.785 ±(99.9%) 93772.203 B/op [Average]
[info]   (min, avg, max) = (44417.842, 71110.785, 89382.768), stdev = 24352.343
[info]   CI (99.9%): [≈ 0, 164882.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 51.20% complete, ETA 01:05:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28314.735 ops/s
[info] # Warmup Iteration   2: 31899.113 ops/s
[info] # Warmup Iteration   3: 31529.395 ops/s
[info] # Warmup Iteration   4: 31735.306 ops/s
[info] # Warmup Iteration   5: 32072.109 ops/s
[info] Iteration   1: 31992.197 ops/s
[info]                  ·gc.alloc.rate:                   533.701 MB/sec
[info]                  ·gc.alloc.rate.norm:              26264.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.402 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25166.610 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 32101.111 ops/s
[info]                  ·gc.alloc.rate:                   535.748 MB/sec
[info]                  ·gc.alloc.rate.norm:              26264.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.352 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     164.307 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.832 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33082.331 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 32001.274 ops/s
[info]                  ·gc.alloc.rate:      533.878 MB/sec
[info]                  ·gc.alloc.rate.norm: 26264.014 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 31933.308 ops/s
[info]                  ·gc.alloc.rate:                   532.727 MB/sec
[info]                  ·gc.alloc.rate.norm:              26264.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.535 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33255.298 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 31924.004 ops/s
[info]                  ·gc.alloc.rate:                   532.626 MB/sec
[info]                  ·gc.alloc.rate.norm:              26264.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.912 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33132.283 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle":
[info]   31990.379 ±(99.9%) 272.596 ops/s [Average]
[info]   (min, avg, max) = (31924.004, 31990.379, 32101.111), stdev = 70.792
[info]   CI (99.9%): [31717.782, 32262.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.alloc.rate":
[info]   533.736 ±(99.9%) 4.841 MB/sec [Average]
[info]   (min, avg, max) = (532.626, 533.736, 535.748), stdev = 1.257
[info]   CI (99.9%): [528.895, 538.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   26264.013 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (26264.013, 26264.013, 26264.014), stdev = 0.001
[info]   CI (99.9%): [26264.011, 26264.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0.683 ±(99.9%) 5.746 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.683, 3.352), stdev = 1.492
[info]   CI (99.9%): [≈ 0, 6.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   33.477 ±(99.9%) 281.669 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 33.477, 164.307), stdev = 73.149
[info]   CI (99.9%): [≈ 0, 315.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   506.536 ±(99.9%) 1123.469 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506.536, 674.832), stdev = 291.761
[info]   CI (99.9%): [≈ 0, 1630.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   24927.305 ±(99.9%) 55287.570 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 24927.305, 33255.298), stdev = 14358.006
[info]   CI (99.9%): [≈ 0, 80214.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.517
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 51.41% complete, ETA 01:05:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 44466.207 ops/s
[info] # Warmup Iteration   2: 57975.357 ops/s
[info] # Warmup Iteration   3: 59370.516 ops/s
[info] # Warmup Iteration   4: 59598.487 ops/s
[info] # Warmup Iteration   5: 58647.331 ops/s
[info] Iteration   1: 59557.024 ops/s
[info]                  ·gc.alloc.rate:                   883.339 MB/sec
[info]                  ·gc.alloc.rate.norm:              23352.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.650 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.634 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35573.291 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 59934.327 ops/s
[info]                  ·gc.alloc.rate:                   889.130 MB/sec
[info]                  ·gc.alloc.rate.norm:              23352.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.015 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17649.732 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 59854.185 ops/s
[info]                  ·gc.alloc.rate:                   887.864 MB/sec
[info]                  ·gc.alloc.rate.norm:              23352.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.578 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17637.108 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 59650.732 ops/s
[info]                  ·gc.alloc.rate:                   884.819 MB/sec
[info]                  ·gc.alloc.rate.norm:              23352.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.746 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35394.229 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 59596.435 ops/s
[info]                  ·gc.alloc.rate:                   884.087 MB/sec
[info]                  ·gc.alloc.rate.norm:              23352.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.605 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17713.146 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce":
[info]   59718.541 ±(99.9%) 640.176 ops/s [Average]
[info]   (min, avg, max) = (59557.024, 59718.541, 59934.327), stdev = 166.252
[info]   CI (99.9%): [59078.364, 60358.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate":
[info]   885.848 ±(99.9%) 9.682 MB/sec [Average]
[info]   (min, avg, max) = (883.339, 885.848, 889.130), stdev = 2.514
[info]   CI (99.9%): [876.165, 895.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   23352.007 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (23352.007, 23352.007, 23352.008), stdev = 0.001
[info]   CI (99.9%): [23352.005, 23352.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.184 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.104), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.879 ±(99.9%) 4.870 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.879, 2.746), stdev = 1.265
[info]   CI (99.9%): [≈ 0, 5.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   939.987 ±(99.9%) 1417.959 MB/sec [Average]
[info]   (min, avg, max) = (670.578, 939.987, 1345.634), stdev = 368.239
[info]   CI (99.9%): [≈ 0, 2357.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   24793.501 ±(99.9%) 37578.721 B/op [Average]
[info]   (min, avg, max) = (17637.108, 24793.501, 35573.291), stdev = 9759.074
[info]   CI (99.9%): [≈ 0, 62372.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 51.61% complete, ETA 01:04:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 60665.987 ops/s
[info] # Warmup Iteration   2: 95699.634 ops/s
[info] # Warmup Iteration   3: 95100.711 ops/s
[info] # Warmup Iteration   4: 95725.164 ops/s
[info] # Warmup Iteration   5: 95545.531 ops/s
[info] Iteration   1: 95480.819 ops/s
[info]                  ·gc.alloc.rate:                   1307.470 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.947 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22276.956 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 93465.877 ops/s
[info]                  ·gc.alloc.rate:                   1280.480 MB/sec
[info]                  ·gc.alloc.rate.norm:              21559.983 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.751 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.144 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22766.619 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 95689.480 ops/s
[info]                  ·gc.alloc.rate:                   1310.516 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.369 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.554 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22268.052 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 95553.727 ops/s
[info]                  ·gc.alloc.rate:                   1308.766 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.698 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22316.664 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 95665.535 ops/s
[info]                  ·gc.alloc.rate:                   1310.251 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      677.657 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11150.750 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala":
[info]   95171.087 ±(99.9%) 3685.016 ops/s [Average]
[info]   (min, avg, max) = (93465.877, 95171.087, 95689.480), stdev = 956.987
[info]   CI (99.9%): [91486.071, 98856.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1303.497 ±(99.9%) 49.768 MB/sec [Average]
[info]   (min, avg, max) = (1280.480, 1303.497, 1310.516), stdev = 12.925
[info]   CI (99.9%): [1253.728, 1353.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   21560.004 ±(99.9%) 0.058 B/op [Average]
[info]   (min, avg, max) = (21559.983, 21560.004, 21560.026), stdev = 0.015
[info]   CI (99.9%): [21559.946, 21560.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.104), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.036 ±(99.9%) 2.508 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.036, 1.751), stdev = 0.651
[info]   CI (99.9%): [≈ 0, 3.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1217.800 ±(99.9%) 1162.711 MB/sec [Average]
[info]   (min, avg, max) = (677.657, 1217.800, 1354.698), stdev = 301.952
[info]   CI (99.9%): [55.089, 2380.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   20155.808 ±(99.9%) 19400.668 B/op [Average]
[info]   (min, avg, max) = (11150.750, 20155.808, 22766.619), stdev = 5038.292
[info]   CI (99.9%): [755.140, 39556.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 51.81% complete, ETA 01:04:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 271442.503 ops/s
[info] # Warmup Iteration   2: 286986.084 ops/s
[info] # Warmup Iteration   3: 278413.499 ops/s
[info] # Warmup Iteration   4: 279836.964 ops/s
[info] # Warmup Iteration   5: 280253.554 ops/s
[info] Iteration   1: 279894.930 ops/s
[info]                  ·gc.alloc.rate:                   891.692 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.831 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3779.226 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 280473.376 ops/s
[info]                  ·gc.alloc.rate:                   893.706 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.887 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3771.023 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 279573.003 ops/s
[info]                  ·gc.alloc.rate:                   890.677 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.352 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.313 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7559.467 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 280153.643 ops/s
[info]                  ·gc.alloc.rate:                   892.600 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.238 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3772.045 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 280392.065 ops/s
[info]                  ·gc.alloc.rate:                   893.305 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.200 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3768.857 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala":
[info]   280097.403 ±(99.9%) 1424.393 ops/s [Average]
[info]   (min, avg, max) = (279573.003, 280097.403, 280473.376), stdev = 369.910
[info]   CI (99.9%): [278673.011, 281521.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   892.396 ±(99.9%) 4.730 MB/sec [Average]
[info]   (min, avg, max) = (890.677, 892.396, 893.706), stdev = 1.228
[info]   CI (99.9%): [887.666, 897.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5016.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5016.001, 5016.001, 5016.002), stdev = 0.001
[info]   CI (99.9%): [5016.001, 5016.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.094 ±(99.9%) 0.588 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.094, 0.352), stdev = 0.153
[info]   CI (99.9%): [≈ 0, 0.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   805.694 ±(99.9%) 1155.114 MB/sec [Average]
[info]   (min, avg, max) = (671.200, 805.694, 1342.313), stdev = 299.979
[info]   CI (99.9%): [≈ 0, 1960.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4530.123 ±(99.9%) 6520.907 B/op [Average]
[info]   (min, avg, max) = (3768.857, 4530.123, 7559.467), stdev = 1693.459
[info]   CI (99.9%): [≈ 0, 11051.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 52.01% complete, ETA 01:04:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 311320.760 ops/s
[info] # Warmup Iteration   2: 324576.271 ops/s
[info] # Warmup Iteration   3: 326255.105 ops/s
[info] # Warmup Iteration   4: 325771.206 ops/s
[info] # Warmup Iteration   5: 323810.598 ops/s
[info] Iteration   1: 325744.030 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 325027.981 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 325633.042 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 324963.111 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 326014.109 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc":
[info]   325476.455 ±(99.9%) 1774.892 ops/s [Average]
[info]   (min, avg, max) = (324963.111, 325476.455, 326014.109), stdev = 460.934
[info]   CI (99.9%): [323701.563, 327251.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 52.21% complete, ETA 01:04:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 53567.533 ops/s
[info] # Warmup Iteration   2: 71267.522 ops/s
[info] # Warmup Iteration   3: 70061.057 ops/s
[info] # Warmup Iteration   4: 71924.964 ops/s
[info] # Warmup Iteration   5: 72259.389 ops/s
[info] Iteration   1: 72250.835 ops/s
[info]                  ·gc.alloc.rate:                   1071.283 MB/sec
[info]                  ·gc.alloc.rate.norm:              23344.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.837 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14596.201 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 72180.824 ops/s
[info]                  ·gc.alloc.rate:                   1070.474 MB/sec
[info]                  ·gc.alloc.rate.norm:              23344.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.908 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.644 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29192.063 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 70257.416 ops/s
[info]                  ·gc.alloc.rate:                   1041.942 MB/sec
[info]                  ·gc.alloc.rate.norm:              23344.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.310 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14995.431 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 72205.142 ops/s
[info]                  ·gc.alloc.rate:                   1070.662 MB/sec
[info]                  ·gc.alloc.rate.norm:              23344.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.907 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.417 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29181.958 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 72101.315 ops/s
[info]                  ·gc.alloc.rate:                   1069.179 MB/sec
[info]                  ·gc.alloc.rate.norm:              23343.978 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.454 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.176 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29238.985 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson":
[info]   71799.106 ±(99.9%) 3325.166 ops/s [Average]
[info]   (min, avg, max) = (70257.416, 71799.106, 72250.835), stdev = 863.535
[info]   CI (99.9%): [68473.940, 75124.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1064.708 ±(99.9%) 49.095 MB/sec [Average]
[info]   (min, avg, max) = (1041.942, 1064.708, 1071.283), stdev = 12.750
[info]   CI (99.9%): [1015.613, 1113.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   23344.006 ±(99.9%) 0.076 B/op [Average]
[info]   (min, avg, max) = (23343.978, 23344.006, 23344.034), stdev = 0.020
[info]   CI (99.9%): [23343.930, 23344.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.454 ±(99.9%) 1.747 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.454, 0.908), stdev = 0.454
[info]   CI (99.9%): [≈ 0, 2.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1071.077 ±(99.9%) 1411.342 MB/sec [Average]
[info]   (min, avg, max) = (669.310, 1071.077, 1339.176), stdev = 366.521
[info]   CI (99.9%): [≈ 0, 2482.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   23440.928 ±(99.9%) 30393.759 B/op [Average]
[info]   (min, avg, max) = (14596.201, 23440.928, 29238.985), stdev = 7893.163
[info]   CI (99.9%): [≈ 0, 53834.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 52.41% complete, ETA 01:03:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10009.323 ops/s
[info] # Warmup Iteration   2: 10341.006 ops/s
[info] # Warmup Iteration   3: 10512.452 ops/s
[info] # Warmup Iteration   4: 10448.805 ops/s
[info] # Warmup Iteration   5: 10509.622 ops/s
[info] Iteration   1: 10476.574 ops/s
[info]                  ·gc.alloc.rate:                   259.622 MB/sec
[info]                  ·gc.alloc.rate.norm:              39008.042 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.432 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76842.211 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 10544.523 ops/s
[info]                  ·gc.alloc.rate:      261.298 MB/sec
[info]                  ·gc.alloc.rate.norm: 39008.039 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 10456.486 ops/s
[info]                  ·gc.alloc.rate:                   259.095 MB/sec
[info]                  ·gc.alloc.rate.norm:              39008.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.370 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76989.137 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 10529.245 ops/s
[info]                  ·gc.alloc.rate:      260.914 MB/sec
[info]                  ·gc.alloc.rate.norm: 39008.039 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 10436.970 ops/s
[info]                  ·gc.alloc.rate:                   258.627 MB/sec
[info]                  ·gc.alloc.rate.norm:              39008.049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.031 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.737 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.423 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77136.625 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle":
[info]   10488.759 ±(99.9%) 178.763 ops/s [Average]
[info]   (min, avg, max) = (10436.970, 10488.759, 10544.523), stdev = 46.424
[info]   CI (99.9%): [10309.996, 10667.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   259.911 ±(99.9%) 4.443 MB/sec [Average]
[info]   (min, avg, max) = (258.627, 259.911, 261.298), stdev = 1.154
[info]   CI (99.9%): [255.468, 264.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   39008.041 ±(99.9%) 0.017 B/op [Average]
[info]   (min, avg, max) = (39008.039, 39008.041, 39008.049), stdev = 0.004
[info]   CI (99.9%): [39008.024, 39008.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0.006 ±(99.9%) 0.054 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.031), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0.947 ±(99.9%) 8.158 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.947, 4.737), stdev = 2.119
[info]   CI (99.9%): [≈ 0, 9.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   306.845 ±(99.9%) 1078.603 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.845, 511.432), stdev = 280.110
[info]   CI (99.9%): [≈ 0, 1385.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   46193.594 ±(99.9%) 162377.488 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 46193.594, 77136.625), stdev = 42168.918
[info]   CI (99.9%): [≈ 0, 208571.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 52.61% complete, ETA 01:03:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19031.406 ops/s
[info] # Warmup Iteration   2: 25941.100 ops/s
[info] # Warmup Iteration   3: 25655.326 ops/s
[info] # Warmup Iteration   4: 25604.852 ops/s
[info] # Warmup Iteration   5: 25960.528 ops/s
[info] Iteration   1: 26130.438 ops/s
[info]                  ·gc.alloc.rate:                   1360.671 MB/sec
[info]                  ·gc.alloc.rate.norm:              81984.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.254 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.379 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80881.895 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 26271.282 ops/s
[info]                  ·gc.alloc.rate:                   1368.533 MB/sec
[info]                  ·gc.alloc.rate.norm:              81984.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.494 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.738 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80438.707 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 26135.175 ops/s
[info]                  ·gc.alloc.rate:                   1361.017 MB/sec
[info]                  ·gc.alloc.rate.norm:              81984.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.129 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80906.537 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 26281.674 ops/s
[info]                  ·gc.alloc.rate:                   1368.846 MB/sec
[info]                  ·gc.alloc.rate.norm:              81984.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.493 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.301 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80513.948 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 26009.952 ops/s
[info]                  ·gc.alloc.rate:                   1354.558 MB/sec
[info]                  ·gc.alloc.rate.norm:              81984.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 81433.209 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce":
[info]   26165.704 ±(99.9%) 434.927 ops/s [Average]
[info]   (min, avg, max) = (26009.952, 26165.704, 26281.674), stdev = 112.949
[info]   CI (99.9%): [25730.778, 26600.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate":
[info]   1362.725 ±(99.9%) 23.187 MB/sec [Average]
[info]   (min, avg, max) = (1354.558, 1362.725, 1368.846), stdev = 6.021
[info]   CI (99.9%): [1339.538, 1385.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   81984.016 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (81984.016, 81984.016, 81984.017), stdev = 0.001
[info]   CI (99.9%): [81984.014, 81984.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.248 ±(99.9%) 4.801 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.248, 2.494), stdev = 1.247
[info]   CI (99.9%): [≈ 0, 6.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1343.601 ±(99.9%) 4.869 MB/sec [Average]
[info]   (min, avg, max) = (1342.379, 1343.601, 1345.458), stdev = 1.265
[info]   CI (99.9%): [1338.731, 1348.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   80834.859 ±(99.9%) 1522.459 B/op [Average]
[info]   (min, avg, max) = (80438.707, 80834.859, 81433.209), stdev = 395.378
[info]   CI (99.9%): [79312.401, 82357.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 52.81% complete, ETA 01:03:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17574.412 ops/s
[info] # Warmup Iteration   2: 28679.175 ops/s
[info] # Warmup Iteration   3: 28592.164 ops/s
[info] # Warmup Iteration   4: 29049.313 ops/s
[info] # Warmup Iteration   5: 29468.609 ops/s
[info] Iteration   1: 29485.292 ops/s
[info]                  ·gc.alloc.rate:                   1154.703 MB/sec
[info]                  ·gc.alloc.rate.norm:              61648.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.282 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36052.355 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 29526.353 ops/s
[info]                  ·gc.alloc.rate:                   1156.082 MB/sec
[info]                  ·gc.alloc.rate.norm:              61648.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.438 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.964 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72040.115 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 29462.885 ops/s
[info]                  ·gc.alloc.rate:                   1153.793 MB/sec
[info]                  ·gc.alloc.rate.norm:              61648.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.112 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72262.830 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 28955.872 ops/s
[info]                  ·gc.alloc.rate:                   1133.971 MB/sec
[info]                  ·gc.alloc.rate.norm:              61648.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676.601 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36783.248 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 28797.043 ops/s
[info]                  ·gc.alloc.rate:                   1127.648 MB/sec
[info]                  ·gc.alloc.rate.norm:              61648.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.688 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.370 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 74042.825 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala":
[info]   29245.489 ±(99.9%) 1318.012 ops/s [Average]
[info]   (min, avg, max) = (28797.043, 29245.489, 29526.353), stdev = 342.284
[info]   CI (99.9%): [27927.477, 30563.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1145.239 ±(99.9%) 51.544 MB/sec [Average]
[info]   (min, avg, max) = (1127.648, 1145.239, 1156.082), stdev = 13.386
[info]   CI (99.9%): [1093.695, 1196.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   61648.014 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (61648.014, 61648.014, 61648.015), stdev = 0.001
[info]   CI (99.9%): [61648.012, 61648.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.188 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.104), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2.248 ±(99.9%) 10.193 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.248, 5.688), stdev = 2.647
[info]   CI (99.9%): [≈ 0, 12.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1081.935 ±(99.9%) 1427.134 MB/sec [Average]
[info]   (min, avg, max) = (675.282, 1081.935, 1354.370), stdev = 370.622
[info]   CI (99.9%): [≈ 0, 2509.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   58236.275 ±(99.9%) 76759.665 B/op [Average]
[info]   (min, avg, max) = (36052.355, 58236.275, 74042.825), stdev = 19934.241
[info]   CI (99.9%): [≈ 0, 134995.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 53.01% complete, ETA 01:03:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 458447.758 ops/s
[info] # Warmup Iteration   2: 499582.957 ops/s
[info] # Warmup Iteration   3: 501957.839 ops/s
[info] # Warmup Iteration   4: 501546.639 ops/s
[info] # Warmup Iteration   5: 496637.799 ops/s
[info] Iteration   1: 507531.417 ops/s
[info]                  ·gc.alloc.rate:                   1320.379 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.194 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.476 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4164.549 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 505690.198 ops/s
[info]                  ·gc.alloc.rate:                   1315.715 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.324 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.913 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4180.670 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 505225.976 ops/s
[info]                  ·gc.alloc.rate:                   1314.705 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.657 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2092.566 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 504905.515 ops/s
[info]                  ·gc.alloc.rate:                   1313.629 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.733 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4189.869 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 491137.905 ops/s
[info]                  ·gc.alloc.rate:                   1277.844 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.164 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4311.790 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala":
[info]   502898.202 ±(99.9%) 25615.782 ops/s [Average]
[info]   (min, avg, max) = (491137.905, 502898.202, 507531.417), stdev = 6652.337
[info]   CI (99.9%): [477282.421, 528513.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1308.454 ±(99.9%) 66.633 MB/sec [Average]
[info]   (min, avg, max) = (1277.844, 1308.454, 1320.379), stdev = 17.304
[info]   CI (99.9%): [1241.821, 1375.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.001, 4096.001, 4096.001), stdev = 0.001
[info]   CI (99.9%): [4096.001, 4096.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.104), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.143 ±(99.9%) 0.478 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.143, 0.324), stdev = 0.124
[info]   CI (99.9%): [≈ 0, 0.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1209.189 ±(99.9%) 1157.084 MB/sec [Average]
[info]   (min, avg, max) = (671.657, 1209.189, 1345.164), stdev = 300.491
[info]   CI (99.9%): [52.104, 2366.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3787.889 ±(99.9%) 3656.251 B/op [Average]
[info]   (min, avg, max) = (2092.566, 3787.889, 4311.790), stdev = 949.517
[info]   CI (99.9%): [131.638, 7444.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 53.21% complete, ETA 01:02:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9492.892 ops/s
[info] # Warmup Iteration   2: 21842.022 ops/s
[info] # Warmup Iteration   3: 21600.900 ops/s
[info] # Warmup Iteration   4: 21972.207 ops/s
[info] # Warmup Iteration   5: 22252.067 ops/s
[info] Iteration   1: 21729.310 ops/s
[info]                  ·gc.alloc.rate:                   1651.971 MB/sec
[info]                  ·gc.alloc.rate.norm:              119680.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.876 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 97939.141 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 22283.763 ops/s
[info]                  ·gc.alloc.rate:                   1694.076 MB/sec
[info]                  ·gc.alloc.rate.norm:              119680.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.411 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.142 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 143421.749 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 22308.079 ops/s
[info]                  ·gc.alloc.rate:                   1696.207 MB/sec
[info]                  ·gc.alloc.rate.norm:              119680.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.937 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.783 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 95589.978 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 22290.234 ops/s
[info]                  ·gc.alloc.rate:                   1694.600 MB/sec
[info]                  ·gc.alloc.rate.norm:              119680.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.470 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034.127 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 143658.910 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 22240.626 ops/s
[info]                  ·gc.alloc.rate:                   1690.785 MB/sec
[info]                  ·gc.alloc.rate.norm:              119680.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.946 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356.789 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 96038.551 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson":
[info]   22170.402 ±(99.9%) 954.266 ops/s [Average]
[info]   (min, avg, max) = (21729.310, 22170.402, 22308.079), stdev = 247.820
[info]   CI (99.9%): [21216.136, 23124.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1685.528 ±(99.9%) 72.632 MB/sec [Average]
[info]   (min, avg, max) = (1651.971, 1685.528, 1696.207), stdev = 18.862
[info]   CI (99.9%): [1612.896, 1758.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   119680.020 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (119680.018, 119680.020, 119680.025), stdev = 0.003
[info]   CI (99.9%): [119680.009, 119680.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.062), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.353 ±(99.9%) 6.456 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.353, 4.411), stdev = 1.677
[info]   CI (99.9%): [≈ 0, 8.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1625.543 ±(99.9%) 1429.251 MB/sec [Average]
[info]   (min, avg, max) = (1351.876, 1625.543, 2034.127), stdev = 371.172
[info]   CI (99.9%): [196.292, 3054.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   115329.665 ±(99.9%) 99223.106 B/op [Average]
[info]   (min, avg, max) = (95589.978, 115329.665, 143658.910), stdev = 25767.926
[info]   CI (99.9%): [16106.559, 214552.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 53.41% complete, ETA 01:02:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22189.811 ops/s
[info] # Warmup Iteration   2: 28196.069 ops/s
[info] # Warmup Iteration   3: 28176.637 ops/s
[info] # Warmup Iteration   4: 28426.370 ops/s
[info] # Warmup Iteration   5: 28397.364 ops/s
[info] Iteration   1: 28802.201 ops/s
[info]                  ·gc.alloc.rate:                   1299.928 MB/sec
[info]                  ·gc.alloc.rate.norm:              71032.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.897 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73379.937 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 28809.938 ops/s
[info]                  ·gc.alloc.rate:                   1300.055 MB/sec
[info]                  ·gc.alloc.rate.norm:              71032.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.137 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.701 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73362.111 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 28752.998 ops/s
[info]                  ·gc.alloc.rate:                   1297.409 MB/sec
[info]                  ·gc.alloc.rate.norm:              71032.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.418 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.485 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73499.851 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 28727.065 ops/s
[info]                  ·gc.alloc.rate:                   1296.227 MB/sec
[info]                  ·gc.alloc.rate.norm:              71032.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.421 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.807 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73639.338 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 28791.350 ops/s
[info]                  ·gc.alloc.rate:                   1299.061 MB/sec
[info]                  ·gc.alloc.rate.norm:              71032.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.414 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.177 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73553.617 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle":
[info]   28776.710 ±(99.9%) 136.075 ops/s [Average]
[info]   (min, avg, max) = (28727.065, 28776.710, 28809.938), stdev = 35.338
[info]   CI (99.9%): [28640.636, 28912.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1298.536 ±(99.9%) 6.421 MB/sec [Average]
[info]   (min, avg, max) = (1296.227, 1298.536, 1300.055), stdev = 1.668
[info]   CI (99.9%): [1292.115, 1304.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   71032.014 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (71032.014, 71032.014, 71032.015), stdev = 0.001
[info]   CI (99.9%): [71032.013, 71032.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.062), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   2.278 ±(99.9%) 6.205 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.278, 3.421), stdev = 1.611
[info]   CI (99.9%): [≈ 0, 8.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   1343.413 ±(99.9%) 4.263 MB/sec [Average]
[info]   (min, avg, max) = (1342.485, 1343.413, 1345.177), stdev = 1.107
[info]   CI (99.9%): [1339.150, 1347.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   73486.971 ±(99.9%) 450.993 B/op [Average]
[info]   (min, avg, max) = (73362.111, 73486.971, 73639.338), stdev = 117.121
[info]   CI (99.9%): [73035.978, 73937.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 53.61% complete, ETA 01:02:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51193.535 ops/s
[info] # Warmup Iteration   2: 70978.427 ops/s
[info] # Warmup Iteration   3: 70099.943 ops/s
[info] # Warmup Iteration   4: 72195.347 ops/s
[info] # Warmup Iteration   5: 72207.755 ops/s
[info] Iteration   1: 72104.348 ops/s
[info]                  ·gc.alloc.rate:                   1525.641 MB/sec
[info]                  ·gc.alloc.rate.norm:              33312.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.045 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29281.385 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 71983.564 ops/s
[info]                  ·gc.alloc.rate:                   1523.337 MB/sec
[info]                  ·gc.alloc.rate.norm:              33312.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.275 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.693 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29339.859 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 70317.625 ops/s
[info]                  ·gc.alloc.rate:                   1488.036 MB/sec
[info]                  ·gc.alloc.rate.norm:              33312.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.864 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.554 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30055.153 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 70590.755 ops/s
[info]                  ·gc.alloc.rate:                   1493.760 MB/sec
[info]                  ·gc.alloc.rate.norm:              33312.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.928 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2016.843 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44977.160 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 70492.220 ops/s
[info]                  ·gc.alloc.rate:                   1491.666 MB/sec
[info]                  ·gc.alloc.rate.norm:              33312.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.522 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30070.640 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce":
[info]   71097.702 ±(99.9%) 3351.504 ops/s [Average]
[info]   (min, avg, max) = (70317.625, 71097.702, 72104.348), stdev = 870.375
[info]   CI (99.9%): [67746.198, 74449.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1504.488 ±(99.9%) 70.816 MB/sec [Average]
[info]   (min, avg, max) = (1488.036, 1504.488, 1525.641), stdev = 18.391
[info]   CI (99.9%): [1433.672, 1575.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   33312.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (33312.006, 33312.006, 33312.006), stdev = 0.001
[info]   CI (99.9%): [33312.005, 33312.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.183 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.104), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.013 ±(99.9%) 4.028 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.013, 2.275), stdev = 1.046
[info]   CI (99.9%): [≈ 0, 5.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1477.731 ±(99.9%) 1160.507 MB/sec [Average]
[info]   (min, avg, max) = (1341.045, 1477.731, 2016.843), stdev = 301.380
[info]   CI (99.9%): [317.224, 2638.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   32744.840 ±(99.9%) 26370.926 B/op [Average]
[info]   (min, avg, max) = (29281.385, 32744.840, 44977.160), stdev = 6848.446
[info]   CI (99.9%): [6373.914, 59115.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 53.82% complete, ETA 01:01:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 109590.134 ops/s
[info] # Warmup Iteration   2: 167849.494 ops/s
[info] # Warmup Iteration   3: 163437.521 ops/s
[info] # Warmup Iteration   4: 168487.569 ops/s
[info] # Warmup Iteration   5: 168136.241 ops/s
[info] Iteration   1: 162733.899 ops/s
[info]                  ·gc.alloc.rate:                   1232.923 MB/sec
[info]                  ·gc.alloc.rate.norm:              11928.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.528 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6535.442 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 162597.083 ops/s
[info]                  ·gc.alloc.rate:                   1231.860 MB/sec
[info]                  ·gc.alloc.rate.norm:              11928.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.403 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.628 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13087.697 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 161921.788 ops/s
[info]                  ·gc.alloc.rate:                   1226.895 MB/sec
[info]                  ·gc.alloc.rate.norm:              11928.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.155 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13155.513 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 162666.857 ops/s
[info]                  ·gc.alloc.rate:                   1232.548 MB/sec
[info]                  ·gc.alloc.rate.norm:              11928.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.604 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.506 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13108.247 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 162678.202 ops/s
[info]                  ·gc.alloc.rate:                   1232.532 MB/sec
[info]                  ·gc.alloc.rate.norm:              11928.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.711 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13120.088 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala":
[info]   162519.566 ±(99.9%) 1300.334 ops/s [Average]
[info]   (min, avg, max) = (161921.788, 162519.566, 162733.899), stdev = 337.693
[info]   CI (99.9%): [161219.231, 163819.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1231.352 ±(99.9%) 9.706 MB/sec [Average]
[info]   (min, avg, max) = (1226.895, 1231.352, 1232.923), stdev = 2.520
[info]   CI (99.9%): [1221.646, 1241.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   11928.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11928.003, 11928.003, 11928.003), stdev = 0.001
[info]   CI (99.9%): [11928.002, 11928.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.201 ±(99.9%) 1.097 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.201, 0.604), stdev = 0.285
[info]   CI (99.9%): [≈ 0, 1.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1218.105 ±(99.9%) 1167.954 MB/sec [Average]
[info]   (min, avg, max) = (675.528, 1218.105, 1355.711), stdev = 303.314
[info]   CI (99.9%): [50.151, 2386.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   11801.398 ±(99.9%) 11335.764 B/op [Average]
[info]   (min, avg, max) = (6535.442, 11801.398, 13155.513), stdev = 2943.862
[info]   CI (99.9%): [465.634, 23137.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 54.02% complete, ETA 01:01:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1215145.681 ops/s
[info] # Warmup Iteration   2: 1314013.087 ops/s
[info] # Warmup Iteration   3: 1314414.319 ops/s
[info] # Warmup Iteration   4: 1311979.368 ops/s
[info] # Warmup Iteration   5: 1319442.503 ops/s
[info] Iteration   1: 1320051.797 ops/s
[info]                  ·gc.alloc.rate:                   1093.589 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.149 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.126 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1602.742 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1322212.803 ops/s
[info]                  ·gc.alloc.rate:                   1095.257 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.304 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 799.247 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 1319677.590 ops/s
[info]                  ·gc.alloc.rate:                   1093.307 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.124 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.735 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1601.495 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1321235.382 ops/s
[info]                  ·gc.alloc.rate:                   1094.442 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.175 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1600.360 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1323032.386 ops/s
[info]                  ·gc.alloc.rate:                   1096.043 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.979 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 799.477 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala":
[info]   1321241.992 ±(99.9%) 5449.697 ops/s [Average]
[info]   (min, avg, max) = (1319677.590, 1321241.992, 1323032.386), stdev = 1415.269
[info]   CI (99.9%): [1315792.295, 1326691.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1094.527 ±(99.9%) 4.393 MB/sec [Average]
[info]   (min, avg, max) = (1093.307, 1094.527, 1096.043), stdev = 1.141
[info]   CI (99.9%): [1090.134, 1098.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1304.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1304.000, 1304.000, 1304.000), stdev = 0.001
[info]   CI (99.9%): [1304.000, 1304.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.222 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.125), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.069 ±(99.9%) 0.265 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.069, 0.149), stdev = 0.069
[info]   CI (99.9%): [≈ 0, 0.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1074.664 ±(99.9%) 1416.681 MB/sec [Average]
[info]   (min, avg, max) = (671.304, 1074.664, 1344.126), stdev = 367.908
[info]   CI (99.9%): [≈ 0, 2491.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1280.664 ±(99.9%) 1691.848 B/op [Average]
[info]   (min, avg, max) = (799.247, 1280.664, 1602.742), stdev = 439.368
[info]   CI (99.9%): [≈ 0, 2972.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 54.22% complete, ETA 01:01:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1407526.269 ops/s
[info] # Warmup Iteration   2: 1484777.834 ops/s
[info] # Warmup Iteration   3: 1471553.359 ops/s
[info] # Warmup Iteration   4: 1471120.397 ops/s
[info] # Warmup Iteration   5: 1466542.914 ops/s
[info] Iteration   1: 1474666.126 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1472271.679 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1473972.064 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1467163.341 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1472745.788 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc":
[info]   1472163.799 ±(99.9%) 11371.857 ops/s [Average]
[info]   (min, avg, max) = (1467163.341, 1472163.799, 1474666.126), stdev = 2953.235
[info]   CI (99.9%): [1460791.942, 1483535.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 54.42% complete, ETA 01:01:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 69521.716 ops/s
[info] # Warmup Iteration   2: 119527.113 ops/s
[info] # Warmup Iteration   3: 123910.146 ops/s
[info] # Warmup Iteration   4: 123767.170 ops/s
[info] # Warmup Iteration   5: 123747.145 ops/s
[info] Iteration   1: 123933.462 ops/s
[info]                  ·gc.alloc.rate:                   1396.823 MB/sec
[info]                  ·gc.alloc.rate.norm:              17744.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.786 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17159.193 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 124209.087 ops/s
[info]                  ·gc.alloc.rate:                   1399.901 MB/sec
[info]                  ·gc.alloc.rate.norm:              17744.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.264 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.722 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17133.319 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 123982.878 ops/s
[info]                  ·gc.alloc.rate:                   1397.411 MB/sec
[info]                  ·gc.alloc.rate.norm:              17744.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.793 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.108 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17181.454 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 123056.940 ops/s
[info]                  ·gc.alloc.rate:                   1387.094 MB/sec
[info]                  ·gc.alloc.rate.norm:              17744.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.199 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17323.210 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 121401.328 ops/s
[info]                  ·gc.alloc.rate:                   1368.840 MB/sec
[info]                  ·gc.alloc.rate.norm:              17744.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.227 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26330.399 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson":
[info]   123316.739 ±(99.9%) 4456.058 ops/s [Average]
[info]   (min, avg, max) = (121401.328, 123316.739, 124209.087), stdev = 1157.224
[info]   CI (99.9%): [118860.682, 127772.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1390.014 ±(99.9%) 49.301 MB/sec [Average]
[info]   (min, avg, max) = (1368.840, 1390.014, 1399.901), stdev = 12.803
[info]   CI (99.9%): [1340.713, 1439.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   17744.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (17744.003, 17744.003, 17744.004), stdev = 0.001
[info]   CI (99.9%): [17744.003, 17744.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.083), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.640 ±(99.9%) 1.873 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.640, 1.078), stdev = 0.487
[info]   CI (99.9%): [≈ 0, 2.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1488.208 ±(99.9%) 1168.900 MB/sec [Average]
[info]   (min, avg, max) = (1350.786, 1488.208, 2031.227), stdev = 303.560
[info]   CI (99.9%): [319.309, 2657.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   19025.515 ±(99.9%) 15726.863 B/op [Average]
[info]   (min, avg, max) = (17133.319, 19025.515, 26330.399), stdev = 4084.216
[info]   CI (99.9%): [3298.652, 34752.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 54.62% complete, ETA 01:00:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32028.079 ops/s
[info] # Warmup Iteration   2: 33915.409 ops/s
[info] # Warmup Iteration   3: 34516.703 ops/s
[info] # Warmup Iteration   4: 34300.161 ops/s
[info] # Warmup Iteration   5: 34588.944 ops/s
[info] Iteration   1: 34431.389 ops/s
[info]                  ·gc.alloc.rate:                   454.874 MB/sec
[info]                  ·gc.alloc.rate.norm:              20800.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.003 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.124 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.359 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23382.879 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 34441.338 ops/s
[info]                  ·gc.alloc.rate:                   455.107 MB/sec
[info]                  ·gc.alloc.rate.norm:              20800.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.028 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.259 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.502 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23377.449 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 34433.451 ops/s
[info]                  ·gc.alloc.rate:      454.950 MB/sec
[info]                  ·gc.alloc.rate.norm: 20800.013 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 34415.196 ops/s
[info]                  ·gc.alloc.rate:                   454.728 MB/sec
[info]                  ·gc.alloc.rate.norm:              20800.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.423 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     156.594 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.585 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30856.597 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 33845.312 ops/s
[info]                  ·gc.alloc.rate:                   447.170 MB/sec
[info]                  ·gc.alloc.rate.norm:              20800.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.582 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31377.983 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle":
[info]   34313.337 ±(99.9%) 1008.124 ops/s [Average]
[info]   (min, avg, max) = (33845.312, 34313.337, 34441.338), stdev = 261.806
[info]   CI (99.9%): [33305.214, 35321.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   453.366 ±(99.9%) 13.347 MB/sec [Average]
[info]   (min, avg, max) = (447.170, 453.366, 455.107), stdev = 3.466
[info]   CI (99.9%): [440.019, 466.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   20800.012 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (20800.012, 20800.012, 20800.013), stdev = 0.001
[info]   CI (99.9%): [20800.011, 20800.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0.691 ±(99.9%) 5.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.691, 3.423), stdev = 1.528
[info]   CI (99.9%): [≈ 0, 6.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   31.595 ±(99.9%) 269.076 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 31.595, 156.594), stdev = 69.878
[info]   CI (99.9%): [≈ 0, 300.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   474.405 ±(99.9%) 1068.414 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474.405, 674.585), stdev = 277.464
[info]   CI (99.9%): [≈ 0, 1542.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   21798.982 ±(99.9%) 49236.832 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21798.982, 31377.983), stdev = 12786.649
[info]   CI (99.9%): [≈ 0, 71035.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 54.82% complete, ETA 01:00:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21886.666 ops/s
[info] # Warmup Iteration   2: 36773.460 ops/s
[info] # Warmup Iteration   3: 36930.078 ops/s
[info] # Warmup Iteration   4: 36087.666 ops/s
[info] # Warmup Iteration   5: 36448.121 ops/s
[info] Iteration   1: 36378.916 ops/s
[info]                  ·gc.alloc.rate:                   1305.415 MB/sec
[info]                  ·gc.alloc.rate.norm:              56496.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.901 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.071 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58471.959 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 36472.698 ops/s
[info]                  ·gc.alloc.rate:                   1309.046 MB/sec
[info]                  ·gc.alloc.rate.norm:              56496.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.796 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.597 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58375.579 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 37097.372 ops/s
[info]                  ·gc.alloc.rate:                   1331.453 MB/sec
[info]                  ·gc.alloc.rate.norm:              56496.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.415 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.909 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57448.864 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 37189.572 ops/s
[info]                  ·gc.alloc.rate:                   1334.995 MB/sec
[info]                  ·gc.alloc.rate.norm:              56496.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.153 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57349.065 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 37084.382 ops/s
[info]                  ·gc.alloc.rate:                   1330.881 MB/sec
[info]                  ·gc.alloc.rate.norm:              56496.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.767 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.800 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57553.802 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala":
[info]   36844.588 ±(99.9%) 1485.828 ops/s [Average]
[info]   (min, avg, max) = (36378.916, 36844.588, 37189.572), stdev = 385.865
[info]   CI (99.9%): [35358.760, 38330.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1322.358 ±(99.9%) 53.749 MB/sec [Average]
[info]   (min, avg, max) = (1305.415, 1322.358, 1334.995), stdev = 13.958
[info]   CI (99.9%): [1268.609, 1376.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   56496.011 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (56496.011, 56496.011, 56496.012), stdev = 0.001
[info]   CI (99.9%): [56496.009, 56496.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.104), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.776 ±(99.9%) 6.353 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.776, 4.415), stdev = 1.650
[info]   CI (99.9%): [≈ 0, 8.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1353.706 ±(99.9%) 7.379 MB/sec [Average]
[info]   (min, avg, max) = (1351.071, 1353.706, 1355.800), stdev = 1.916
[info]   CI (99.9%): [1346.327, 1361.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   57839.854 ±(99.9%) 2075.538 B/op [Average]
[info]   (min, avg, max) = (57349.065, 57839.854, 58471.959), stdev = 539.011
[info]   CI (99.9%): [55764.316, 59915.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55.02% complete, ETA 01:00:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 655928.056 ops/s
[info] # Warmup Iteration   2: 728201.348 ops/s
[info] # Warmup Iteration   3: 735645.948 ops/s
[info] # Warmup Iteration   4: 740382.367 ops/s
[info] # Warmup Iteration   5: 742465.738 ops/s
[info] Iteration   1: 745923.529 ops/s
[info]                  ·gc.alloc.rate:                   1455.563 MB/sec
[info]                  ·gc.alloc.rate.norm:              3072.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.132 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.451 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2833.275 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 742697.475 ops/s
[info]                  ·gc.alloc.rate:                   1449.861 MB/sec
[info]                  ·gc.alloc.rate.norm:              3072.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.088 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.815 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2847.308 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 742081.242 ops/s
[info]                  ·gc.alloc.rate:                   1448.076 MB/sec
[info]                  ·gc.alloc.rate.norm:              3072.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.890 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2850.977 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 746722.500 ops/s
[info]                  ·gc.alloc.rate:                   1457.074 MB/sec
[info]                  ·gc.alloc.rate.norm:              3072.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.044 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.091 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2835.902 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 745541.020 ops/s
[info]                  ·gc.alloc.rate:                   1454.863 MB/sec
[info]                  ·gc.alloc.rate.norm:              3072.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.132 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.165 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2844.592 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala":
[info]   744593.153 ±(99.9%) 7962.961 ops/s [Average]
[info]   (min, avg, max) = (742081.242, 744593.153, 746722.500), stdev = 2067.956
[info]   CI (99.9%): [736630.192, 752556.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1453.087 ±(99.9%) 15.001 MB/sec [Average]
[info]   (min, avg, max) = (1448.076, 1453.087, 1457.074), stdev = 3.896
[info]   CI (99.9%): [1438.086, 1468.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3072.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3072.001, 3072.001, 3072.001), stdev = 0.001
[info]   CI (99.9%): [3072.000, 3072.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.079 ±(99.9%) 0.221 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.079, 0.132), stdev = 0.057
[info]   CI (99.9%): [≈ 0, 0.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1344.482 ±(99.9%) 6.804 MB/sec [Average]
[info]   (min, avg, max) = (1342.451, 1344.482, 1347.165), stdev = 1.767
[info]   CI (99.9%): [1337.678, 1351.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2842.411 ±(99.9%) 29.069 B/op [Average]
[info]   (min, avg, max) = (2833.275, 2842.411, 2850.977), stdev = 7.549
[info]   CI (99.9%): [2813.342, 2871.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 55.22% complete, ETA 01:00:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11332.100 ops/s
[info] # Warmup Iteration   2: 26316.079 ops/s
[info] # Warmup Iteration   3: 26579.176 ops/s
[info] # Warmup Iteration   4: 26635.795 ops/s
[info] # Warmup Iteration   5: 27174.730 ops/s
[info] Iteration   1: 27371.463 ops/s
[info]                  ·gc.alloc.rate:                   1992.080 MB/sec
[info]                  ·gc.alloc.rate.norm:              114576.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.984 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.006 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 116757.394 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 26999.617 ops/s
[info]                  ·gc.alloc.rate:                   1965.140 MB/sec
[info]                  ·gc.alloc.rate.norm:              114576.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.636 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78981.024 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 26962.847 ops/s
[info]                  ·gc.alloc.rate:                   1962.409 MB/sec
[info]                  ·gc.alloc.rate.norm:              114576.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.860 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034.094 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 118761.370 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 26892.605 ops/s
[info]                  ·gc.alloc.rate:                   1957.328 MB/sec
[info]                  ·gc.alloc.rate.norm:              114576.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.655 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.439 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 119148.390 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 26882.746 ops/s
[info]                  ·gc.alloc.rate:                   1956.580 MB/sec
[info]                  ·gc.alloc.rate.norm:              114576.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.874 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037.673 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 119324.751 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson":
[info]   27021.856 ±(99.9%) 775.547 ops/s [Average]
[info]   (min, avg, max) = (26882.746, 27021.856, 27371.463), stdev = 201.407
[info]   CI (99.9%): [26246.309, 27797.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1966.708 ±(99.9%) 56.304 MB/sec [Average]
[info]   (min, avg, max) = (1956.580, 1966.708, 1992.080), stdev = 14.622
[info]   CI (99.9%): [1910.403, 2023.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   114576.015 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (114576.015, 114576.015, 114576.016), stdev = 0.001
[info]   CI (99.9%): [114576.013, 114576.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.104), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3.875 ±(99.9%) 8.924 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.875, 5.984), stdev = 2.317
[info]   CI (99.9%): [≈ 0, 12.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1898.370 ±(99.9%) 1170.477 MB/sec [Average]
[info]   (min, avg, max) = (1354.636, 1898.370, 2037.673), stdev = 303.969
[info]   CI (99.9%): [727.892, 3068.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   110594.586 ±(99.9%) 68165.023 B/op [Average]
[info]   (min, avg, max) = (78981.024, 110594.586, 119324.751), stdev = 17702.240
[info]   CI (99.9%): [42429.563, 178759.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 55.42% complete, ETA 00:59:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28369.981 ops/s
[info] # Warmup Iteration   2: 36506.088 ops/s
[info] # Warmup Iteration   3: 36959.852 ops/s
[info] # Warmup Iteration   4: 37480.427 ops/s
[info] # Warmup Iteration   5: 37722.827 ops/s
[info] Iteration   1: 37624.344 ops/s
[info]                  ·gc.alloc.rate:                   1570.603 MB/sec
[info]                  ·gc.alloc.rate.norm:              65720.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.871 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.391 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56170.729 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 37606.339 ops/s
[info]                  ·gc.alloc.rate:                   1570.034 MB/sec
[info]                  ·gc.alloc.rate.norm:              65720.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.742 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2014.485 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 84324.288 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 37770.782 ops/s
[info]                  ·gc.alloc.rate:                   1576.684 MB/sec
[info]                  ·gc.alloc.rate.norm:              65720.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.449 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56039.889 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 37823.464 ops/s
[info]                  ·gc.alloc.rate:                   1579.130 MB/sec
[info]                  ·gc.alloc.rate.norm:              65720.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.732 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.980 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56016.814 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 37756.707 ops/s
[info]                  ·gc.alloc.rate:                   1576.214 MB/sec
[info]                  ·gc.alloc.rate.norm:              65720.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.868 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021.148 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 84271.480 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle":
[info]   37716.327 ±(99.9%) 368.498 ops/s [Average]
[info]   (min, avg, max) = (37606.339, 37716.327, 37823.464), stdev = 95.698
[info]   CI (99.9%): [37347.829, 38084.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1574.533 ±(99.9%) 15.435 MB/sec [Average]
[info]   (min, avg, max) = (1570.034, 1574.533, 1579.130), stdev = 4.008
[info]   CI (99.9%): [1559.098, 1589.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   65720.011 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (65720.011, 65720.011, 65720.012), stdev = 0.001
[info]   CI (99.9%): [65720.010, 65720.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   1.043 ±(99.9%) 2.798 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.043, 1.742), stdev = 0.727
[info]   CI (99.9%): [≈ 0, 3.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   1613.691 ±(99.9%) 1420.597 MB/sec [Average]
[info]   (min, avg, max) = (1342.391, 1613.691, 2021.148), stdev = 368.925
[info]   CI (99.9%): [193.093, 3034.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   67364.640 ±(99.9%) 59523.210 B/op [Average]
[info]   (min, avg, max) = (56016.814, 67364.640, 84324.288), stdev = 15457.989
[info]   CI (99.9%): [7841.430, 126887.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55.62% complete, ETA 00:59:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 242189.322 ops/s
[info] # Warmup Iteration   2: 352395.753 ops/s
[info] # Warmup Iteration   3: 355840.735 ops/s
[info] # Warmup Iteration   4: 349766.520 ops/s
[info] # Warmup Iteration   5: 358631.624 ops/s
[info] Iteration   1: 359490.720 ops/s
[info]                  ·gc.alloc.rate:                   999.389 MB/sec
[info]                  ·gc.alloc.rate.norm:              4376.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.971 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2955.481 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 360309.534 ops/s
[info]                  ·gc.alloc.rate:                   1001.517 MB/sec
[info]                  ·gc.alloc.rate.norm:              4376.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.273 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.071 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5903.332 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 359757.833 ops/s
[info]                  ·gc.alloc.rate:                   1000.240 MB/sec
[info]                  ·gc.alloc.rate.norm:              4376.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676.040 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2957.642 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 351152.117 ops/s
[info]                  ·gc.alloc.rate:                   976.423 MB/sec
[info]                  ·gc.alloc.rate.norm:              4376.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.280 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.933 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6063.394 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 349784.510 ops/s
[info]                  ·gc.alloc.rate:                   972.314 MB/sec
[info]                  ·gc.alloc.rate.norm:              4376.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676.628 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3045.232 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala":
[info]   356098.943 ±(99.9%) 19912.321 ops/s [Average]
[info]   (min, avg, max) = (349784.510, 356098.943, 360309.534), stdev = 5171.166
[info]   CI (99.9%): [336186.622, 376011.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   989.977 ±(99.9%) 55.226 MB/sec [Average]
[info]   (min, avg, max) = (972.314, 989.977, 1001.517), stdev = 14.342
[info]   CI (99.9%): [934.751, 1045.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   4376.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4376.001, 4376.001, 4376.001), stdev = 0.001
[info]   CI (99.9%): [4376.001, 4376.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.111 ±(99.9%) 0.583 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.111, 0.280), stdev = 0.151
[info]   CI (99.9%): [≈ 0, 0.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   946.329 ±(99.9%) 1426.003 MB/sec [Average]
[info]   (min, avg, max) = (674.971, 946.329, 1352.933), stdev = 370.328
[info]   CI (99.9%): [≈ 0, 2372.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4185.016 ±(99.9%) 6326.732 B/op [Average]
[info]   (min, avg, max) = (2955.481, 4185.016, 6063.394), stdev = 1643.032
[info]   CI (99.9%): [≈ 0, 10511.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55.82% complete, ETA 00:59:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1483497.209 ops/s
[info] # Warmup Iteration   2: 1578596.287 ops/s
[info] # Warmup Iteration   3: 1601197.233 ops/s
[info] # Warmup Iteration   4: 1585094.729 ops/s
[info] # Warmup Iteration   5: 1569087.048 ops/s
[info] Iteration   1: 1581051.649 ops/s
[info]                  ·gc.alloc.rate:                   924.010 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.976 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 669.060 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 1551967.294 ops/s
[info]                  ·gc.alloc.rate:                   907.201 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.084 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.636 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1362.592 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 1564744.697 ops/s
[info]                  ·gc.alloc.rate:                   914.469 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.244 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 675.305 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1591408.699 ops/s
[info]                  ·gc.alloc.rate:                   929.978 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.239 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 664.038 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1585614.833 ops/s
[info]                  ·gc.alloc.rate:                   926.788 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.038 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1333.201 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala":
[info]   1574957.434 ±(99.9%) 62512.517 ops/s [Average]
[info]   (min, avg, max) = (1551967.294, 1574957.434, 1591408.699), stdev = 16234.302
[info]   CI (99.9%): [1512444.918, 1637469.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   920.489 ±(99.9%) 36.273 MB/sec [Average]
[info]   (min, avg, max) = (907.201, 920.489, 929.978), stdev = 9.420
[info]   CI (99.9%): [884.217, 956.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   920.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (920.000, 920.000, 920.000), stdev = 0.001
[info]   CI (99.9%): [920.000, 920.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.083), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.033 ±(99.9%) 0.176 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.084), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   940.227 ±(99.9%) 1416.989 MB/sec [Average]
[info]   (min, avg, max) = (671.239, 940.227, 1343.636), stdev = 367.988
[info]   CI (99.9%): [≈ 0, 2357.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   940.839 ±(99.9%) 1431.506 B/op [Average]
[info]   (min, avg, max) = (664.038, 940.839, 1362.592), stdev = 371.758
[info]   CI (99.9%): [≈ 0, 2372.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 56.02% complete, ETA 00:59:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1777324.288 ops/s
[info] # Warmup Iteration   2: 1876601.523 ops/s
[info] # Warmup Iteration   3: 1872080.507 ops/s
[info] # Warmup Iteration   4: 1871293.799 ops/s
[info] # Warmup Iteration   5: 1871609.072 ops/s
[info] Iteration   1: 1868295.145 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1864457.730 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1869641.535 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1864627.722 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1864175.300 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc":
[info]   1866239.486 ±(99.9%) 9785.670 ops/s [Average]
[info]   (min, avg, max) = (1864175.300, 1866239.486, 1869641.535), stdev = 2541.307
[info]   CI (99.9%): [1856453.817, 1876025.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 56.22% complete, ETA 00:58:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 134612.142 ops/s
[info] # Warmup Iteration   2: 238766.341 ops/s
[info] # Warmup Iteration   3: 240099.243 ops/s
[info] # Warmup Iteration   4: 237468.217 ops/s
[info] # Warmup Iteration   5: 237743.138 ops/s
[info] Iteration   1: 242590.133 ops/s
[info]                  ·gc.alloc.rate:                   1570.576 MB/sec
[info]                  ·gc.alloc.rate.norm:              10192.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.405 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13160.785 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 242845.796 ops/s
[info]                  ·gc.alloc.rate:                   1572.105 MB/sec
[info]                  ·gc.alloc.rate.norm:              10192.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.540 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.030 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8771.732 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 243023.456 ops/s
[info]                  ·gc.alloc.rate:                   1573.351 MB/sec
[info]                  ·gc.alloc.rate.norm:              10192.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.088 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8771.635 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 243640.281 ops/s
[info]                  ·gc.alloc.rate:                   1577.388 MB/sec
[info]                  ·gc.alloc.rate.norm:              10192.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.672 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.060 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13136.243 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 243451.451 ops/s
[info]                  ·gc.alloc.rate:                   1576.198 MB/sec
[info]                  ·gc.alloc.rate.norm:              10192.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.135 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1357.173 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8775.740 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson":
[info]   243110.224 ±(99.9%) 1662.192 ops/s [Average]
[info]   (min, avg, max) = (242590.133, 243110.224, 243640.281), stdev = 431.666
[info]   CI (99.9%): [241448.032, 244772.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1573.924 ±(99.9%) 10.894 MB/sec [Average]
[info]   (min, avg, max) = (1570.576, 1573.924, 1577.388), stdev = 2.829
[info]   CI (99.9%): [1563.029, 1584.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   10192.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10192.002, 10192.002, 10192.002), stdev = 0.001
[info]   CI (99.9%): [10192.001, 10192.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.350 ±(99.9%) 1.075 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.350, 0.672), stdev = 0.279
[info]   CI (99.9%): [≈ 0, 1.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1625.083 ±(99.9%) 1425.342 MB/sec [Average]
[info]   (min, avg, max) = (1353.030, 1625.083, 2033.060), stdev = 370.157
[info]   CI (99.9%): [199.740, 3050.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   10523.227 ±(99.9%) 9228.317 B/op [Average]
[info]   (min, avg, max) = (8771.635, 10523.227, 13160.785), stdev = 2396.565
[info]   CI (99.9%): [1294.910, 19751.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 56.43% complete, ETA 00:58:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 49699.987 ops/s
[info] # Warmup Iteration   2: 52642.065 ops/s
[info] # Warmup Iteration   3: 52542.911 ops/s
[info] # Warmup Iteration   4: 54891.797 ops/s
[info] # Warmup Iteration   5: 53891.428 ops/s
[info] Iteration   1: 54845.206 ops/s
[info]                  ·gc.alloc.rate:                   367.305 MB/sec
[info]                  ·gc.alloc.rate.norm:              10544.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.369 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14679.567 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 54677.484 ops/s
[info]                  ·gc.alloc.rate:                   366.252 MB/sec
[info]                  ·gc.alloc.rate.norm:              10544.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.004 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.113 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.470 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14724.660 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 54806.656 ops/s
[info]                  ·gc.alloc.rate:      367.065 MB/sec
[info]                  ·gc.alloc.rate.norm: 10544.007 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 54720.378 ops/s
[info]                  ·gc.alloc.rate:                   366.494 MB/sec
[info]                  ·gc.alloc.rate.norm:              10544.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.004 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.405 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14713.092 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 54900.931 ops/s
[info]                  ·gc.alloc.rate:      367.727 MB/sec
[info]                  ·gc.alloc.rate.norm: 10544.008 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle":
[info]   54790.131 ±(99.9%) 350.481 ops/s [Average]
[info]   (min, avg, max) = (54677.484, 54790.131, 54900.931), stdev = 91.019
[info]   CI (99.9%): [54439.650, 55140.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   366.968 ±(99.9%) 2.307 MB/sec [Average]
[info]   (min, avg, max) = (366.252, 366.968, 367.727), stdev = 0.599
[info]   CI (99.9%): [364.662, 369.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   10544.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10544.007, 10544.008, 10544.008), stdev = 0.001
[info]   CI (99.9%): [10544.006, 10544.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0.002 ±(99.9%) 0.008 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0.044 ±(99.9%) 0.231 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.044, 0.113), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   306.849 ±(99.9%) 1078.616 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.849, 511.470), stdev = 280.113
[info]   CI (99.9%): [≈ 0, 1385.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   8823.464 ±(99.9%) 31015.784 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8823.464, 14724.660), stdev = 8054.701
[info]   CI (99.9%): [≈ 0, 39839.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 56.63% complete, ETA 00:58:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 58972.785 ops/s
[info] # Warmup Iteration   2: 79603.045 ops/s
[info] # Warmup Iteration   3: 79822.566 ops/s
[info] # Warmup Iteration   4: 80244.914 ops/s
[info] # Warmup Iteration   5: 80571.262 ops/s
[info] Iteration   1: 79665.481 ops/s
[info]                  ·gc.alloc.rate:                   1522.152 MB/sec
[info]                  ·gc.alloc.rate.norm:              30080.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.234 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.442 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26449.617 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 79496.331 ops/s
[info]                  ·gc.alloc.rate:                   1519.158 MB/sec
[info]                  ·gc.alloc.rate.norm:              30080.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.412 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.800 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26508.833 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 79446.494 ops/s
[info]                  ·gc.alloc.rate:                   1518.061 MB/sec
[info]                  ·gc.alloc.rate.norm:              30080.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2010.601 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39839.554 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 79564.225 ops/s
[info]                  ·gc.alloc.rate:                   1520.389 MB/sec
[info]                  ·gc.alloc.rate.norm:              30080.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.352 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26557.653 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 79427.857 ops/s
[info]                  ·gc.alloc.rate:                   1517.735 MB/sec
[info]                  ·gc.alloc.rate.norm:              30080.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.412 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.985 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26636.452 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce":
[info]   79520.078 ±(99.9%) 373.207 ops/s [Average]
[info]   (min, avg, max) = (79427.857, 79520.078, 79665.481), stdev = 96.921
[info]   CI (99.9%): [79146.871, 79893.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate":
[info]   1519.499 ±(99.9%) 6.976 MB/sec [Average]
[info]   (min, avg, max) = (1517.735, 1519.499, 1522.152), stdev = 1.812
[info]   CI (99.9%): [1512.523, 1526.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   30080.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (30080.005, 30080.005, 30080.006), stdev = 0.001
[info]   CI (99.9%): [30080.004, 30080.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.104), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.236 ±(99.9%) 3.173 B/op [Average]
[info]   (min, avg, max) = (0.412, 1.236, 2.062), stdev = 0.824
[info]   CI (99.9%): [≈ 0, 4.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1474.836 ±(99.9%) 1153.309 MB/sec [Average]
[info]   (min, avg, max) = (1338.442, 1474.836, 2010.601), stdev = 299.511
[info]   CI (99.9%): [321.526, 2628.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   29198.422 ±(99.9%) 22907.355 B/op [Average]
[info]   (min, avg, max) = (26449.617, 29198.422, 39839.554), stdev = 5948.967
[info]   CI (99.9%): [6291.066, 52105.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 56.83% complete, ETA 00:57:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 49932.190 ops/s
[info] # Warmup Iteration   2: 85169.822 ops/s
[info] # Warmup Iteration   3: 85989.091 ops/s
[info] # Warmup Iteration   4: 85381.428 ops/s
[info] # Warmup Iteration   5: 86475.221 ops/s
[info] Iteration   1: 86072.564 ops/s
[info]                  ·gc.alloc.rate:                   971.890 MB/sec
[info]                  ·gc.alloc.rate.norm:              17776.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.142 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.088 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24638.418 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 86152.567 ops/s
[info]                  ·gc.alloc.rate:                   972.946 MB/sec
[info]                  ·gc.alloc.rate.norm:              17776.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.625 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12325.595 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 86252.499 ops/s
[info]                  ·gc.alloc.rate:                   973.876 MB/sec
[info]                  ·gc.alloc.rate.norm:              17776.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.760 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.751 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24636.772 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 86042.817 ops/s
[info]                  ·gc.alloc.rate:                   971.558 MB/sec
[info]                  ·gc.alloc.rate.norm:              17776.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.761 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12354.249 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 86201.421 ops/s
[info]                  ·gc.alloc.rate:                   973.294 MB/sec
[info]                  ·gc.alloc.rate.norm:              17776.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.739 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24687.829 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala":
[info]   86144.373 ±(99.9%) 336.150 ops/s [Average]
[info]   (min, avg, max) = (86042.817, 86144.373, 86252.499), stdev = 87.297
[info]   CI (99.9%): [85808.224, 86480.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   972.713 ±(99.9%) 3.732 MB/sec [Average]
[info]   (min, avg, max) = (971.558, 972.713, 973.876), stdev = 0.969
[info]   CI (99.9%): [968.981, 976.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   17776.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (17776.005, 17776.005, 17776.005), stdev = 0.001
[info]   CI (99.9%): [17776.004, 17776.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.533 ±(99.9%) 1.966 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.533, 1.142), stdev = 0.510
[info]   CI (99.9%): [≈ 0, 2.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1079.686 ±(99.9%) 1422.801 MB/sec [Average]
[info]   (min, avg, max) = (674.625, 1079.686, 1351.739), stdev = 369.497
[info]   CI (99.9%): [≈ 0, 2502.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   19728.573 ±(99.9%) 25972.297 B/op [Average]
[info]   (min, avg, max) = (12325.595, 19728.573, 24687.829), stdev = 6744.923
[info]   CI (99.9%): [≈ 0, 45700.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 57.03% complete, ETA 00:57:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 92780.588 ops/s
[info] # Warmup Iteration   2: 107774.347 ops/s
[info] # Warmup Iteration   3: 110340.209 ops/s
[info] # Warmup Iteration   4: 106681.619 ops/s
[info] # Warmup Iteration   5: 108165.206 ops/s
[info] Iteration   1: 107598.445 ops/s
[info]                  ·gc.alloc.rate:                   1132.872 MB/sec
[info]                  ·gc.alloc.rate.norm:              16576.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.609 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.787 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19603.558 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 108173.330 ops/s
[info]                  ·gc.alloc.rate:                   1139.048 MB/sec
[info]                  ·gc.alloc.rate.norm:              16576.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.650 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19480.712 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 108168.585 ops/s
[info]                  ·gc.alloc.rate:                   1138.902 MB/sec
[info]                  ·gc.alloc.rate.norm:              16576.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.303 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.245 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9740.446 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 108084.253 ops/s
[info]                  ·gc.alloc.rate:                   1138.097 MB/sec
[info]                  ·gc.alloc.rate.norm:              16576.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.606 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.188 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19504.827 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 109985.886 ops/s
[info]                  ·gc.alloc.rate:                   1158.117 MB/sec
[info]                  ·gc.alloc.rate.norm:              16576.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.191 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1340.517 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19186.673 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala":
[info]   108402.100 ±(99.9%) 3530.293 ops/s [Average]
[info]   (min, avg, max) = (107598.445, 108402.100, 109985.886), stdev = 916.806
[info]   CI (99.9%): [104871.807, 111932.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1141.407 ±(99.9%) 37.277 MB/sec [Average]
[info]   (min, avg, max) = (1132.872, 1141.407, 1158.117), stdev = 9.681
[info]   CI (99.9%): [1104.130, 1178.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   16576.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16576.004, 16576.004, 16576.004), stdev = 0.001
[info]   CI (99.9%): [16576.003, 16576.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.083), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.542 ±(99.9%) 1.702 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.542, 1.191), stdev = 0.442
[info]   CI (99.9%): [≈ 0, 2.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1205.477 ±(99.9%) 1154.284 MB/sec [Average]
[info]   (min, avg, max) = (669.245, 1205.477, 1340.517), stdev = 299.764
[info]   CI (99.9%): [51.194, 2359.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   17503.243 ±(99.9%) 16720.731 B/op [Average]
[info]   (min, avg, max) = (9740.446, 17503.243, 19603.558), stdev = 4342.321
[info]   CI (99.9%): [782.512, 34223.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 57.23% complete, ETA 00:57:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26118.346 ops/s
[info] # Warmup Iteration   2: 46816.275 ops/s
[info] # Warmup Iteration   3: 47460.860 ops/s
[info] # Warmup Iteration   4: 47953.819 ops/s
[info] # Warmup Iteration   5: 47965.067 ops/s
[info] Iteration   1: 47885.017 ops/s
[info]                  ·gc.alloc.rate:                   2286.913 MB/sec
[info]                  ·gc.alloc.rate.norm:              75192.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.737 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2708.635 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 89057.919 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 47986.718 ops/s
[info]                  ·gc.alloc.rate:                   2291.988 MB/sec
[info]                  ·gc.alloc.rate.norm:              75192.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.365 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034.491 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66744.446 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 47832.835 ops/s
[info]                  ·gc.alloc.rate:                   2284.785 MB/sec
[info]                  ·gc.alloc.rate.norm:              75192.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.685 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036.454 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67019.446 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 47936.912 ops/s
[info]                  ·gc.alloc.rate:                   2289.925 MB/sec
[info]                  ·gc.alloc.rate.norm:              75192.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.417 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2718.090 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 89251.213 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 48063.946 ops/s
[info]                  ·gc.alloc.rate:                   2295.813 MB/sec
[info]                  ·gc.alloc.rate.norm:              75192.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.726 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2039.781 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66806.479 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson":
[info]   47941.085 ±(99.9%) 344.715 ops/s [Average]
[info]   (min, avg, max) = (47832.835, 47941.085, 48063.946), stdev = 89.521
[info]   CI (99.9%): [47596.371, 48285.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2289.885 ±(99.9%) 16.608 MB/sec [Average]
[info]   (min, avg, max) = (2284.785, 2289.885, 2295.813), stdev = 4.313
[info]   CI (99.9%): [2273.277, 2306.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   75192.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (75192.008, 75192.009, 75192.009), stdev = 0.001
[info]   CI (99.9%): [75192.007, 75192.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.104), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.186 ±(99.9%) 4.321 B/op [Average]
[info]   (min, avg, max) = (0.685, 2.186, 3.417), stdev = 1.122
[info]   CI (99.9%): [≈ 0, 6.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2307.490 ±(99.9%) 1426.774 MB/sec [Average]
[info]   (min, avg, max) = (2034.491, 2307.490, 2718.090), stdev = 370.529
[info]   CI (99.9%): [880.716, 3734.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   75775.901 ±(99.9%) 47030.270 B/op [Average]
[info]   (min, avg, max) = (66744.446, 75775.901, 89251.213), stdev = 12213.612
[info]   CI (99.9%): [28745.630, 122806.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 57.43% complete, ETA 00:57:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 60206.372 ops/s
[info] # Warmup Iteration   2: 74534.334 ops/s
[info] # Warmup Iteration   3: 73449.529 ops/s
[info] # Warmup Iteration   4: 76403.137 ops/s
[info] # Warmup Iteration   5: 74800.048 ops/s
[info] Iteration   1: 76161.393 ops/s
[info]                  ·gc.alloc.rate:                   1321.630 MB/sec
[info]                  ·gc.alloc.rate.norm:              27320.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.860 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.377 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27666.187 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 76268.820 ops/s
[info]                  ·gc.alloc.rate:                   1323.687 MB/sec
[info]                  ·gc.alloc.rate.norm:              27320.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.430 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.650 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27628.831 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 74874.535 ops/s
[info]                  ·gc.alloc.rate:                   1299.298 MB/sec
[info]                  ·gc.alloc.rate.norm:              27320.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.875 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.390 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28141.986 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 74793.090 ops/s
[info]                  ·gc.alloc.rate:                   1298.133 MB/sec
[info]                  ·gc.alloc.rate.norm:              27320.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.438 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1340.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28201.996 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 75412.053 ops/s
[info]                  ·gc.alloc.rate:                   1308.728 MB/sec
[info]                  ·gc.alloc.rate.norm:              27320.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.434 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.836 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28011.145 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle":
[info]   75501.978 ±(99.9%) 2672.780 ops/s [Average]
[info]   (min, avg, max) = (74793.090, 75501.978, 76268.820), stdev = 694.112
[info]   CI (99.9%): [72829.198, 78174.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1310.295 ±(99.9%) 46.333 MB/sec [Average]
[info]   (min, avg, max) = (1298.133, 1310.295, 1323.687), stdev = 12.032
[info]   CI (99.9%): [1263.962, 1356.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   27320.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (27320.005, 27320.006, 27320.006), stdev = 0.001
[info]   CI (99.9%): [27320.005, 27320.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.029, 0.042), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0.607 ±(99.9%) 0.915 B/op [Average]
[info]   (min, avg, max) = (0.430, 0.607, 0.875), stdev = 0.238
[info]   CI (99.9%): [≈ 0, 1.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   1339.459 ±(99.9%) 5.762 MB/sec [Average]
[info]   (min, avg, max) = (1338.377, 1339.459, 1341.836), stdev = 1.496
[info]   CI (99.9%): [1333.696, 1345.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   27930.029 ±(99.9%) 1029.290 B/op [Average]
[info]   (min, avg, max) = (27628.831, 27930.029, 28201.996), stdev = 267.303
[info]   CI (99.9%): [26900.739, 28959.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 57.63% complete, ETA 00:56:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 103712.512 ops/s
[info] # Warmup Iteration   2: 132951.563 ops/s
[info] # Warmup Iteration   3: 135768.054 ops/s
[info] # Warmup Iteration   4: 134664.518 ops/s
[info] # Warmup Iteration   5: 135345.632 ops/s
[info] Iteration   1: 135102.375 ops/s
[info]                  ·gc.alloc.rate:                   599.363 MB/sec
[info]                  ·gc.alloc.rate.norm:              6984.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.467 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5959.802 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 135049.507 ops/s
[info]                  ·gc.alloc.rate:                   599.096 MB/sec
[info]                  ·gc.alloc.rate.norm:              6984.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4.305 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50.183 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.606 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7840.952 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 135662.195 ops/s
[info]                  ·gc.alloc.rate:                   601.951 MB/sec
[info]                  ·gc.alloc.rate.norm:              6984.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.725 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.743 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7805.355 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 135542.326 ops/s
[info]                  ·gc.alloc.rate:                   601.251 MB/sec
[info]                  ·gc.alloc.rate.norm:              6984.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.201 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7773.303 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 134951.739 ops/s
[info]                  ·gc.alloc.rate:                   598.663 MB/sec
[info]                  ·gc.alloc.rate.norm:              6984.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.243 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.219 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7807.107 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce":
[info]   135261.628 ±(99.9%) 1226.225 ops/s [Average]
[info]   (min, avg, max) = (134951.739, 135261.628, 135662.195), stdev = 318.447
[info]   CI (99.9%): [134035.403, 136487.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate":
[info]   600.065 ±(99.9%) 5.567 MB/sec [Average]
[info]   (min, avg, max) = (598.663, 600.065, 601.951), stdev = 1.446
[info]   CI (99.9%): [594.497, 605.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   6984.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6984.003, 6984.003, 6984.003), stdev = 0.001
[info]   CI (99.9%): [6984.003, 6984.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.878 ±(99.9%) 7.378 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.878, 4.305), stdev = 1.916
[info]   CI (99.9%): [≈ 0, 8.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10.230 ±(99.9%) 86.009 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.230, 50.183), stdev = 22.336
[info]   CI (99.9%): [≈ 0, 96.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   639.047 ±(99.9%) 274.708 MB/sec [Average]
[info]   (min, avg, max) = (511.467, 639.047, 672.743), stdev = 71.341
[info]   CI (99.9%): [364.340, 913.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   7437.304 ±(99.9%) 3181.768 B/op [Average]
[info]   (min, avg, max) = (5959.802, 7437.304, 7840.952), stdev = 826.295
[info]   CI (99.9%): [4255.536, 10619.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.140
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 57.83% complete, ETA 00:56:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 120925.833 ops/s
[info] # Warmup Iteration   2: 168692.441 ops/s
[info] # Warmup Iteration   3: 167213.522 ops/s
[info] # Warmup Iteration   4: 167868.615 ops/s
[info] # Warmup Iteration   5: 168131.048 ops/s
[info] Iteration   1: 169114.783 ops/s
[info]                  ·gc.alloc.rate:      250.922 MB/sec
[info]                  ·gc.alloc.rate.norm: 2336.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 167805.176 ops/s
[info]                  ·gc.alloc.rate:                   249.002 MB/sec
[info]                  ·gc.alloc.rate.norm:              2336.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.195 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.461 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4798.260 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 168163.248 ops/s
[info]                  ·gc.alloc.rate:      249.520 MB/sec
[info]                  ·gc.alloc.rate.norm: 2336.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 167727.959 ops/s
[info]                  ·gc.alloc.rate:                   248.881 MB/sec
[info]                  ·gc.alloc.rate.norm:              2336.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.431 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4800.291 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 168045.711 ops/s
[info]                  ·gc.alloc.rate:      249.344 MB/sec
[info]                  ·gc.alloc.rate.norm: 2336.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala":
[info]   168171.375 ±(99.9%) 2141.002 ops/s [Average]
[info]   (min, avg, max) = (167727.959, 168171.375, 169114.783), stdev = 556.011
[info]   CI (99.9%): [166030.374, 170312.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   249.534 ±(99.9%) 3.147 MB/sec [Average]
[info]   (min, avg, max) = (248.881, 249.534, 250.922), stdev = 0.817
[info]   CI (99.9%): [246.387, 252.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   2336.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2336.002, 2336.003, 2336.003), stdev = 0.001
[info]   CI (99.9%): [2336.002, 2336.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.039 ±(99.9%) 0.336 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.039, 0.195), stdev = 0.087
[info]   CI (99.9%): [≈ 0, 0.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   204.578 ±(99.9%) 1078.683 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.578, 511.461), stdev = 280.130
[info]   CI (99.9%): [≈ 0, 1283.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1919.710 ±(99.9%) 10122.078 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1919.710, 4800.291), stdev = 2628.671
[info]   CI (99.9%): [≈ 0, 12041.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time":
[info]   2.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 58.03% complete, ETA 00:56:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 582278.085 ops/s
[info] # Warmup Iteration   2: 648123.077 ops/s
[info] # Warmup Iteration   3: 692528.798 ops/s
[info] # Warmup Iteration   4: 687761.523 ops/s
[info] # Warmup Iteration   5: 689522.804 ops/s
[info] Iteration   1: 695029.778 ops/s
[info]                  ·gc.alloc.rate:                   861.674 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.136 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1524.895 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 695109.793 ops/s
[info]                  ·gc.alloc.rate:                   861.968 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.094 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.717 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3033.905 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 693233.151 ops/s
[info]                  ·gc.alloc.rate:                   859.598 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.266 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1519.789 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 683271.659 ops/s
[info]                  ·gc.alloc.rate:                   847.300 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.144 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.298 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1541.922 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 690544.684 ops/s
[info]                  ·gc.alloc.rate:                   856.250 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.095 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.494 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3051.377 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala":
[info]   691437.813 ±(99.9%) 18971.274 ops/s [Average]
[info]   (min, avg, max) = (683271.659, 691437.813, 695109.793), stdev = 4926.780
[info]   CI (99.9%): [672466.539, 710409.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   857.358 ±(99.9%) 23.366 MB/sec [Average]
[info]   (min, avg, max) = (847.300, 857.358, 861.968), stdev = 6.068
[info]   CI (99.9%): [833.992, 880.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1952.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1952.001, 1952.001, 1952.001), stdev = 0.001
[info]   CI (99.9%): [1952.001, 1952.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.067 ±(99.9%) 0.247 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.144), stdev = 0.064
[info]   CI (99.9%): [≈ 0, 0.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   937.982 ±(99.9%) 1410.019 MB/sec [Average]
[info]   (min, avg, max) = (669.266, 937.982, 1339.717), stdev = 366.177
[info]   CI (99.9%): [≈ 0, 2348.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2134.378 ±(99.9%) 3192.917 B/op [Average]
[info]   (min, avg, max) = (1519.789, 2134.378, 3051.377), stdev = 829.190
[info]   CI (99.9%): [≈ 0, 5327.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 58.23% complete, ETA 00:56:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 667915.843 ops/s
[info] # Warmup Iteration   2: 703455.388 ops/s
[info] # Warmup Iteration   3: 713662.974 ops/s
[info] # Warmup Iteration   4: 702717.949 ops/s
[info] # Warmup Iteration   5: 714250.895 ops/s
[info] Iteration   1: 713503.105 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 713062.433 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 711063.658 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 710756.712 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 713121.385 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc":
[info]   712301.458 ±(99.9%) 4951.375 ops/s [Average]
[info]   (min, avg, max) = (710756.712, 712301.458, 713503.105), stdev = 1285.856
[info]   CI (99.9%): [707350.083, 717252.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 58.43% complete, ETA 00:55:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 158378.217 ops/s
[info] # Warmup Iteration   2: 203549.279 ops/s
[info] # Warmup Iteration   3: 202323.715 ops/s
[info] # Warmup Iteration   4: 201434.961 ops/s
[info] # Warmup Iteration   5: 200852.032 ops/s
[info] Iteration   1: 202380.228 ops/s
[info]                  ·gc.alloc.rate:                   661.269 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37.381 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.256 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5221.693 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 206156.416 ops/s
[info]                  ·gc.alloc.rate:                   673.607 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5126.168 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 202164.679 ops/s
[info]                  ·gc.alloc.rate:                   660.669 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      668.656 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5206.193 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 200608.507 ops/s
[info]                  ·gc.alloc.rate:                   655.513 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.490 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      668.579 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5246.538 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 200353.810 ops/s
[info]                  ·gc.alloc.rate:                   654.929 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      667.521 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5242.906 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson":
[info]   202332.728 ±(99.9%) 8935.680 ops/s [Average]
[info]   (min, avg, max) = (200353.810, 202332.728, 206156.416), stdev = 2320.568
[info]   CI (99.9%): [193397.047, 211268.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   661.197 ±(99.9%) 28.936 MB/sec [Average]
[info]   (min, avg, max) = (654.929, 661.197, 673.607), stdev = 7.515
[info]   CI (99.9%): [632.261, 690.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5144.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5144.002, 5144.002, 5144.002), stdev = 0.001
[info]   CI (99.9%): [5144.002, 5144.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.974 ±(99.9%) 8.249 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.974, 4.805), stdev = 2.142
[info]   CI (99.9%): [≈ 0, 9.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   7.574 ±(99.9%) 64.167 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.574, 37.381), stdev = 16.664
[info]   CI (99.9%): [≈ 0, 71.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   669.457 ±(99.9%) 6.582 MB/sec [Average]
[info]   (min, avg, max) = (667.521, 669.457, 671.271), stdev = 1.709
[info]   CI (99.9%): [662.875, 676.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5208.700 ±(99.9%) 188.528 B/op [Average]
[info]   (min, avg, max) = (5126.168, 5208.700, 5246.538), stdev = 48.960
[info]   CI (99.9%): [5020.172, 5397.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 58.63% complete, ETA 00:55:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25306.197 ops/s
[info] # Warmup Iteration   2: 27292.742 ops/s
[info] # Warmup Iteration   3: 27284.353 ops/s
[info] # Warmup Iteration   4: 26777.615 ops/s
[info] # Warmup Iteration   5: 27251.459 ops/s
[info] Iteration   1: 27102.604 ops/s
[info]                  ·gc.alloc.rate:      151.240 MB/sec
[info]                  ·gc.alloc.rate.norm: 8784.015 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 27089.592 ops/s
[info]                  ·gc.alloc.rate:                   151.159 MB/sec
[info]                  ·gc.alloc.rate.norm:              8784.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.425 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29719.392 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 27102.944 ops/s
[info]                  ·gc.alloc.rate:      151.239 MB/sec
[info]                  ·gc.alloc.rate.norm: 8784.015 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 26985.695 ops/s
[info]                  ·gc.alloc.rate:      150.581 MB/sec
[info]                  ·gc.alloc.rate.norm: 8784.015 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 26715.356 ops/s
[info]                  ·gc.alloc.rate:                   149.069 MB/sec
[info]                  ·gc.alloc.rate.norm:              8784.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.016 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.939 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.432 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30136.456 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle":
[info]   26999.238 ±(99.9%) 639.647 ops/s [Average]
[info]   (min, avg, max) = (26715.356, 26999.238, 27102.944), stdev = 166.114
[info]   CI (99.9%): [26359.592, 27638.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   150.658 ±(99.9%) 3.580 MB/sec [Average]
[info]   (min, avg, max) = (149.069, 150.658, 151.240), stdev = 0.930
[info]   CI (99.9%): [147.078, 154.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   8784.015 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (8784.015, 8784.015, 8784.016), stdev = 0.001
[info]   CI (99.9%): [8784.013, 8784.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0.003 ±(99.9%) 0.027 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.016), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0.188 ±(99.9%) 1.617 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.188, 0.939), stdev = 0.420
[info]   CI (99.9%): [≈ 0, 1.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   204.571 ±(99.9%) 1078.645 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.571, 511.432), stdev = 280.121
[info]   CI (99.9%): [≈ 0, 1283.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   11971.170 ±(99.9%) 63123.075 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11971.170, 30136.456), stdev = 16392.862
[info]   CI (99.9%): [≈ 0, 75094.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.643
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 58.84% complete, ETA 00:55:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 88502.853 ops/s
[info] # Warmup Iteration   2: 124165.070 ops/s
[info] # Warmup Iteration   3: 126467.035 ops/s
[info] # Warmup Iteration   4: 128735.280 ops/s
[info] # Warmup Iteration   5: 128148.257 ops/s
[info] Iteration   1: 128420.238 ops/s
[info]                  ·gc.alloc.rate:                   1748.160 MB/sec
[info]                  ·gc.alloc.rate.norm:              21432.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.786 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2012.078 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24667.575 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 128685.800 ops/s
[info]                  ·gc.alloc.rate:                   1751.743 MB/sec
[info]                  ·gc.alloc.rate.norm:              21432.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.273 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.255 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16422.056 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 128918.242 ops/s
[info]                  ·gc.alloc.rate:                   1755.250 MB/sec
[info]                  ·gc.alloc.rate.norm:              21432.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2016.937 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24627.269 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 129000.000 ops/s
[info]                  ·gc.alloc.rate:                   1756.498 MB/sec
[info]                  ·gc.alloc.rate.norm:              21432.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.254 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020.387 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24651.869 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 128261.053 ops/s
[info]                  ·gc.alloc.rate:                   1746.067 MB/sec
[info]                  ·gc.alloc.rate.norm:              21432.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.060 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16558.958 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce":
[info]   128657.067 ±(99.9%) 1217.005 ops/s [Average]
[info]   (min, avg, max) = (128261.053, 128657.067, 129000.000), stdev = 316.052
[info]   CI (99.9%): [127440.062, 129874.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate":
[info]   1751.543 ±(99.9%) 17.194 MB/sec [Average]
[info]   (min, avg, max) = (1746.067, 1751.543, 1756.498), stdev = 4.465
[info]   CI (99.9%): [1734.349, 1768.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   21432.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (21432.003, 21432.003, 21432.003), stdev = 0.001
[info]   CI (99.9%): [21432.003, 21432.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.231 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.146), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.866 ±(99.9%) 2.829 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.866, 1.786), stdev = 0.735
[info]   CI (99.9%): [≈ 0, 3.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1748.144 ±(99.9%) 1414.871 MB/sec [Average]
[info]   (min, avg, max) = (1342.255, 1748.144, 2020.387), stdev = 367.437
[info]   CI (99.9%): [333.273, 3163.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   21385.545 ±(99.9%) 17207.847 B/op [Average]
[info]   (min, avg, max) = (16422.056, 21385.545, 24667.575), stdev = 4468.823
[info]   CI (99.9%): [4177.698, 38593.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 1.000
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 59.04% complete, ETA 00:54:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 117365.231 ops/s
[info] # Warmup Iteration   2: 178089.544 ops/s
[info] # Warmup Iteration   3: 182967.258 ops/s
[info] # Warmup Iteration   4: 177243.878 ops/s
[info] # Warmup Iteration   5: 178485.230 ops/s
[info] Iteration   1: 176787.410 ops/s
[info]                  ·gc.alloc.rate:                   939.629 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.556 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.011 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12013.815 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 178755.644 ops/s
[info]                  ·gc.alloc.rate:                   949.939 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.067 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5946.656 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 182579.729 ops/s
[info]                  ·gc.alloc.rate:                   970.437 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.897 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.037 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11649.887 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 184204.044 ops/s
[info]                  ·gc.alloc.rate:                   978.970 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.851 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5777.012 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 182664.701 ops/s
[info]                  ·gc.alloc.rate:                   971.251 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.517 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11661.493 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala":
[info]   180998.306 ±(99.9%) 11917.682 ops/s [Average]
[info]   (min, avg, max) = (176787.410, 180998.306, 184204.044), stdev = 3094.984
[info]   CI (99.9%): [169080.624, 192915.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   962.045 ±(99.9%) 63.585 MB/sec [Average]
[info]   (min, avg, max) = (939.629, 962.045, 978.970), stdev = 16.513
[info]   CI (99.9%): [898.460, 1025.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   8368.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8368.002, 8368.002, 8368.002), stdev = 0.001
[info]   CI (99.9%): [8368.002, 8368.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.184 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.104), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.291 ±(99.9%) 1.601 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.291, 0.897), stdev = 0.416
[info]   CI (99.9%): [≈ 0, 1.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1080.896 ±(99.9%) 1425.184 MB/sec [Average]
[info]   (min, avg, max) = (675.067, 1080.896, 1353.517), stdev = 370.116
[info]   CI (99.9%): [≈ 0, 2506.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   9409.773 ±(99.9%) 12486.352 B/op [Average]
[info]   (min, avg, max) = (5777.012, 9409.773, 12013.815), stdev = 3242.666
[info]   CI (99.9%): [≈ 0, 21896.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 59.24% complete, ETA 00:54:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 448467.428 ops/s
[info] # Warmup Iteration   2: 482066.588 ops/s
[info] # Warmup Iteration   3: 483148.293 ops/s
[info] # Warmup Iteration   4: 484861.586 ops/s
[info] # Warmup Iteration   5: 484138.099 ops/s
[info] Iteration   1: 486529.679 ops/s
[info]                  ·gc.alloc.rate:                   944.307 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.825 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2174.186 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 487137.381 ops/s
[info]                  ·gc.alloc.rate:                   945.747 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.202 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.440 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4341.070 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 484850.242 ops/s
[info]                  ·gc.alloc.rate:                   941.149 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.195 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2179.434 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 485370.761 ops/s
[info]                  ·gc.alloc.rate:                   942.224 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.135 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.539 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4354.379 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 485471.130 ops/s
[info]                  ·gc.alloc.rate:                   942.603 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.708 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2177.736 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala":
[info]   485871.839 ±(99.9%) 3596.622 ops/s [Average]
[info]   (min, avg, max) = (484850.242, 485871.839, 487137.381), stdev = 934.031
[info]   CI (99.9%): [482275.216, 489468.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   943.206 ±(99.9%) 7.002 MB/sec [Average]
[info]   (min, avg, max) = (941.149, 943.206, 945.747), stdev = 1.818
[info]   CI (99.9%): [936.204, 950.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3056.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3056.001, 3056.001, 3056.001), stdev = 0.001
[info]   CI (99.9%): [3056.001, 3056.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.067 ±(99.9%) 0.367 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.202), stdev = 0.095
[info]   CI (99.9%): [≈ 0, 0.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   940.141 ±(99.9%) 1416.068 MB/sec [Average]
[info]   (min, avg, max) = (671.195, 940.141, 1343.440), stdev = 367.748
[info]   CI (99.9%): [≈ 0, 2356.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3045.361 ±(99.9%) 4578.033 B/op [Average]
[info]   (min, avg, max) = (2174.186, 3045.361, 4354.379), stdev = 1188.901
[info]   CI (99.9%): [≈ 0, 7623.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 59.44% complete, ETA 00:54:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32173.040 ops/s
[info] # Warmup Iteration   2: 68714.325 ops/s
[info] # Warmup Iteration   3: 68799.088 ops/s
[info] # Warmup Iteration   4: 69433.687 ops/s
[info] # Warmup Iteration   5: 70040.407 ops/s
[info] Iteration   1: 69638.162 ops/s
[info]                  ·gc.alloc.rate:                   2939.286 MB/sec
[info]                  ·gc.alloc.rate.norm:              66448.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.352 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3391.320 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76667.062 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 70234.445 ops/s
[info]                  ·gc.alloc.rate:                   2964.622 MB/sec
[info]                  ·gc.alloc.rate.norm:              66448.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.399 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2717.226 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60902.971 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 69846.317 ops/s
[info]                  ·gc.alloc.rate:                   2948.229 MB/sec
[info]                  ·gc.alloc.rate.norm:              66448.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.876 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2719.601 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61295.132 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 69893.356 ops/s
[info]                  ·gc.alloc.rate:                   2950.268 MB/sec
[info]                  ·gc.alloc.rate.norm:              66448.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.406 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3401.710 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76615.689 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 69389.968 ops/s
[info]                  ·gc.alloc.rate:                   2928.731 MB/sec
[info]                  ·gc.alloc.rate.norm:              66448.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.472 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2722.106 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61760.034 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson":
[info]   69800.450 ±(99.9%) 1208.390 ops/s [Average]
[info]   (min, avg, max) = (69389.968, 69800.450, 70234.445), stdev = 313.815
[info]   CI (99.9%): [68592.059, 71008.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2946.227 ±(99.9%) 51.410 MB/sec [Average]
[info]   (min, avg, max) = (2928.731, 2946.227, 2964.622), stdev = 13.351
[info]   CI (99.9%): [2894.817, 2997.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66448.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (66448.006, 66448.006, 66448.006), stdev = 0.001
[info]   CI (99.9%): [66448.006, 66448.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.104), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.501 ±(99.9%) 2.684 B/op [Average]
[info]   (min, avg, max) = (0.472, 1.501, 2.352), stdev = 0.697
[info]   CI (99.9%): [≈ 0, 4.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2990.393 ±(99.9%) 1427.662 MB/sec [Average]
[info]   (min, avg, max) = (2717.226, 2990.393, 3401.710), stdev = 370.759
[info]   CI (99.9%): [1562.730, 4418.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   67448.178 ±(99.9%) 32336.571 B/op [Average]
[info]   (min, avg, max) = (60902.971, 67448.178, 76667.062), stdev = 8397.705
[info]   CI (99.9%): [35111.606, 99784.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 59.64% complete, ETA 00:54:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 102207.476 ops/s
[info] # Warmup Iteration   2: 119886.652 ops/s
[info] # Warmup Iteration   3: 121278.325 ops/s
[info] # Warmup Iteration   4: 118736.092 ops/s
[info] # Warmup Iteration   5: 119976.236 ops/s
[info] Iteration   1: 118705.785 ops/s
[info]                  ·gc.alloc.rate:                   1336.113 MB/sec
[info]                  ·gc.alloc.rate.norm:              17720.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.828 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.417 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17803.608 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 120546.670 ops/s
[info]                  ·gc.alloc.rate:                   1357.180 MB/sec
[info]                  ·gc.alloc.rate.norm:              17720.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.087 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.697 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17530.906 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 122612.924 ops/s
[info]                  ·gc.alloc.rate:                   1380.107 MB/sec
[info]                  ·gc.alloc.rate.norm:              17720.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.133 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17245.275 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 123382.326 ops/s
[info]                  ·gc.alloc.rate:                   1388.852 MB/sec
[info]                  ·gc.alloc.rate.norm:              17720.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.531 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.641 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17155.921 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 123476.009 ops/s
[info]                  ·gc.alloc.rate:                   1389.914 MB/sec
[info]                  ·gc.alloc.rate.norm:              17720.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.265 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.933 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17159.288 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle":
[info]   121744.743 ±(99.9%) 7962.398 ops/s [Average]
[info]   (min, avg, max) = (118705.785, 121744.743, 123476.009), stdev = 2067.809
[info]   CI (99.9%): [113782.345, 129707.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1370.433 ±(99.9%) 89.602 MB/sec [Average]
[info]   (min, avg, max) = (1336.113, 1370.433, 1389.914), stdev = 23.269
[info]   CI (99.9%): [1280.831, 1460.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   17720.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (17720.003, 17720.003, 17720.004), stdev = 0.001
[info]   CI (99.9%): [17720.003, 17720.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.083), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0.542 ±(99.9%) 1.666 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.542, 1.087), stdev = 0.433
[info]   CI (99.9%): [≈ 0, 2.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   1343.764 ±(99.9%) 5.720 MB/sec [Average]
[info]   (min, avg, max) = (1342.417, 1343.764, 1345.933), stdev = 1.485
[info]   CI (99.9%): [1338.045, 1349.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   17379.000 ±(99.9%) 1087.913 B/op [Average]
[info]   (min, avg, max) = (17155.921, 17379.000, 17803.608), stdev = 282.528
[info]   CI (99.9%): [16291.086, 18466.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 59.84% complete, ETA 00:53:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 135289.191 ops/s
[info] # Warmup Iteration   2: 179769.070 ops/s
[info] # Warmup Iteration   3: 176174.288 ops/s
[info] # Warmup Iteration   4: 178996.132 ops/s
[info] # Warmup Iteration   5: 179537.657 ops/s
[info] Iteration   1: 176737.353 ops/s
[info]                  ·gc.alloc.rate:                   605.178 MB/sec
[info]                  ·gc.alloc.rate.norm:              5392.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.329 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4555.828 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 176927.558 ops/s
[info]                  ·gc.alloc.rate:                   606.122 MB/sec
[info]                  ·gc.alloc.rate.norm:              5392.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.545 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31.538 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.109 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5996.807 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 177169.783 ops/s
[info]                  ·gc.alloc.rate:                   606.715 MB/sec
[info]                  ·gc.alloc.rate.norm:              5392.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.370 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.839 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5988.549 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 177044.309 ops/s
[info]                  ·gc.alloc.rate:                   606.360 MB/sec
[info]                  ·gc.alloc.rate.norm:              5392.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.900 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5974.809 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 177302.650 ops/s
[info]                  ·gc.alloc.rate:                   607.433 MB/sec
[info]                  ·gc.alloc.rate.norm:              5392.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.109 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5966.116 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce":
[info]   177036.331 ±(99.9%) 839.270 ops/s [Average]
[info]   (min, avg, max) = (176737.353, 177036.331, 177302.650), stdev = 217.956
[info]   CI (99.9%): [176197.061, 177875.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate":
[info]   606.362 ±(99.9%) 3.182 MB/sec [Average]
[info]   (min, avg, max) = (605.178, 606.362, 607.433), stdev = 0.826
[info]   CI (99.9%): [603.180, 609.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5392.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5392.002, 5392.002, 5392.002), stdev = 0.001
[info]   CI (99.9%): [5392.002, 5392.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.717 ±(99.9%) 6.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.717, 3.545), stdev = 1.581
[info]   CI (99.9%): [≈ 0, 6.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   6.382 ±(99.9%) 54.154 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.382, 31.538), stdev = 14.064
[info]   CI (99.9%): [≈ 0, 60.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   640.657 ±(99.9%) 278.415 MB/sec [Average]
[info]   (min, avg, max) = (511.329, 640.657, 674.109), stdev = 72.304
[info]   CI (99.9%): [362.242, 919.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5696.422 ±(99.9%) 2455.641 B/op [Average]
[info]   (min, avg, max) = (4555.828, 5696.422, 5996.807), stdev = 637.722
[info]   CI (99.9%): [3240.781, 8152.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 1.095
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 60.04% complete, ETA 00:53:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 198238.283 ops/s
[info] # Warmup Iteration   2: 293050.105 ops/s
[info] # Warmup Iteration   3: 294532.777 ops/s
[info] # Warmup Iteration   4: 288220.318 ops/s
[info] # Warmup Iteration   5: 292689.590 ops/s
[info] Iteration   1: 292534.868 ops/s
[info]                  ·gc.alloc.rate:                   288.480 MB/sec
[info]                  ·gc.alloc.rate.norm:              1552.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.602 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2752.384 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 293102.636 ops/s
[info]                  ·gc.alloc.rate:      288.933 MB/sec
[info]                  ·gc.alloc.rate.norm: 1552.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 293949.341 ops/s
[info]                  ·gc.alloc.rate:                   289.800 MB/sec
[info]                  ·gc.alloc.rate.norm:              1552.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.471 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2739.147 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 293636.239 ops/s
[info]                  ·gc.alloc.rate:                   289.510 MB/sec
[info]                  ·gc.alloc.rate.norm:              1552.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.511 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2742.103 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 292603.490 ops/s
[info]                  ·gc.alloc.rate:      288.461 MB/sec
[info]                  ·gc.alloc.rate.norm: 1552.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala":
[info]   293165.315 ±(99.9%) 2399.716 ops/s [Average]
[info]   (min, avg, max) = (292534.868, 293165.315, 293949.341), stdev = 623.199
[info]   CI (99.9%): [290765.599, 295565.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   289.037 ±(99.9%) 2.325 MB/sec [Average]
[info]   (min, avg, max) = (288.461, 289.037, 289.800), stdev = 0.604
[info]   CI (99.9%): [286.712, 291.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1552.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1552.001, 1552.001, 1552.001), stdev = 0.001
[info]   CI (99.9%): [1552.001, 1552.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   306.917 ±(99.9%) 1078.856 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.917, 511.602), stdev = 280.175
[info]   CI (99.9%): [≈ 0, 1385.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1646.727 ±(99.9%) 5788.508 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1646.727, 2752.384), stdev = 1503.257
[info]   CI (99.9%): [≈ 0, 7435.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 0.837
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 60.24% complete, ETA 00:53:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1061846.806 ops/s
[info] # Warmup Iteration   2: 1141833.912 ops/s
[info] # Warmup Iteration   3: 1146584.704 ops/s
[info] # Warmup Iteration   4: 1145430.103 ops/s
[info] # Warmup Iteration   5: 1126216.966 ops/s
[info] Iteration   1: 1125193.779 ops/s
[info]                  ·gc.alloc.rate:                   834.742 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.385 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1883.909 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1165639.313 ops/s
[info]                  ·gc.alloc.rate:                   864.863 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.989 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 907.524 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 1152829.500 ops/s
[info]                  ·gc.alloc.rate:                   855.414 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.308 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 916.618 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1151714.571 ops/s
[info]                  ·gc.alloc.rate:                   854.524 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.258 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 917.505 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1164269.382 ops/s
[info]                  ·gc.alloc.rate:                   863.815 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.113 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.548 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1815.315 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala":
[info]   1151929.309 ±(99.9%) 62562.199 ops/s [Average]
[info]   (min, avg, max) = (1125193.779, 1151929.309, 1165639.313), stdev = 16247.204
[info]   CI (99.9%): [1089367.110, 1214491.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   854.672 ±(99.9%) 46.576 MB/sec [Average]
[info]   (min, avg, max) = (834.742, 854.672, 864.863), stdev = 12.096
[info]   CI (99.9%): [808.095, 901.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1168.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1168.000, 1168.000, 1168.000), stdev = 0.001
[info]   CI (99.9%): [1168.000, 1168.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.083), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.051 ±(99.9%) 0.161 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.051, 0.113), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   940.698 ±(99.9%) 1419.314 MB/sec [Average]
[info]   (min, avg, max) = (671.258, 940.698, 1346.385), stdev = 368.591
[info]   CI (99.9%): [≈ 0, 2360.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1288.174 ±(99.9%) 1975.798 B/op [Average]
[info]   (min, avg, max) = (907.524, 1288.174, 1883.909), stdev = 513.109
[info]   CI (99.9%): [≈ 0, 3263.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 60.44% complete, ETA 00:53:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1117926.717 ops/s
[info] # Warmup Iteration   2: 1190620.431 ops/s
[info] # Warmup Iteration   3: 1177815.001 ops/s
[info] # Warmup Iteration   4: 1183909.683 ops/s
[info] # Warmup Iteration   5: 1183896.368 ops/s
[info] Iteration   1: 1185323.290 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1185345.882 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1186225.385 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1187504.775 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1185371.859 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc":
[info]   1185954.239 ±(99.9%) 3645.445 ops/s [Average]
[info]   (min, avg, max) = (1185323.290, 1185954.239, 1187504.775), stdev = 946.711
[info]   CI (99.9%): [1182308.793, 1189599.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 60.64% complete, ETA 00:52:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 176445.521 ops/s
[info] # Warmup Iteration   2: 304427.649 ops/s
[info] # Warmup Iteration   3: 303502.545 ops/s
[info] # Warmup Iteration   4: 308879.631 ops/s
[info] # Warmup Iteration   5: 310005.913 ops/s
[info] Iteration   1: 309479.288 ops/s
[info]                  ·gc.alloc.rate:                   844.541 MB/sec
[info]                  ·gc.alloc.rate.norm:              4296.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.318 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.569 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3431.390 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 310306.303 ops/s
[info]                  ·gc.alloc.rate:                   846.719 MB/sec
[info]                  ·gc.alloc.rate.norm:              4296.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.509 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3422.259 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 309189.485 ops/s
[info]                  ·gc.alloc.rate:                   843.775 MB/sec
[info]                  ·gc.alloc.rate.norm:              4296.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.251 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3437.976 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 303851.095 ops/s
[info]                  ·gc.alloc.rate:                   829.218 MB/sec
[info]                  ·gc.alloc.rate.norm:              4296.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.431 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.872 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6998.580 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 302758.297 ops/s
[info]                  ·gc.alloc.rate:                   826.157 MB/sec
[info]                  ·gc.alloc.rate.norm:              4296.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.527 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3512.728 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson":
[info]   307116.894 ±(99.9%) 13574.773 ops/s [Average]
[info]   (min, avg, max) = (302758.297, 307116.894, 310306.303), stdev = 3525.325
[info]   CI (99.9%): [293542.121, 320691.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   838.082 ±(99.9%) 37.009 MB/sec [Average]
[info]   (min, avg, max) = (826.157, 838.082, 846.719), stdev = 9.611
[info]   CI (99.9%): [801.073, 875.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4296.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4296.001, 4296.001, 4296.001), stdev = 0.001
[info]   CI (99.9%): [4296.001, 4296.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.083), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.171 ±(99.9%) 0.750 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.171, 0.431), stdev = 0.195
[info]   CI (99.9%): [≈ 0, 0.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   810.146 ±(99.9%) 1163.956 MB/sec [Average]
[info]   (min, avg, max) = (674.509, 810.146, 1350.872), stdev = 302.276
[info]   CI (99.9%): [≈ 0, 1974.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4160.587 ±(99.9%) 6110.569 B/op [Average]
[info]   (min, avg, max) = (3422.259, 4160.587, 6998.580), stdev = 1586.895
[info]   CI (99.9%): [≈ 0, 10271.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 0.837
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 60.84% complete, ETA 00:52:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 40937.271 ops/s
[info] # Warmup Iteration   2: 44697.232 ops/s
[info] # Warmup Iteration   3: 44865.296 ops/s
[info] # Warmup Iteration   4: 42979.896 ops/s
[info] # Warmup Iteration   5: 44720.523 ops/s
[info] Iteration   1: 44859.020 ops/s
[info]                  ·gc.alloc.rate:      139.495 MB/sec
[info]                  ·gc.alloc.rate.norm: 4896.009 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 44721.867 ops/s
[info]                  ·gc.alloc.rate:      139.085 MB/sec
[info]                  ·gc.alloc.rate.norm: 4896.009 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 44622.972 ops/s
[info]                  ·gc.alloc.rate:                   138.782 MB/sec
[info]                  ·gc.alloc.rate.norm:              4896.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.431 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18042.442 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 44788.926 ops/s
[info]                  ·gc.alloc.rate:      139.293 MB/sec
[info]                  ·gc.alloc.rate.norm: 4896.009 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 44729.891 ops/s
[info]                  ·gc.alloc.rate:      139.116 MB/sec
[info]                  ·gc.alloc.rate.norm: 4896.010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle":
[info]   44744.535 ±(99.9%) 336.701 ops/s [Average]
[info]   (min, avg, max) = (44622.972, 44744.535, 44859.020), stdev = 87.440
[info]   CI (99.9%): [44407.834, 45081.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   139.154 ±(99.9%) 1.019 MB/sec [Average]
[info]   (min, avg, max) = (138.782, 139.154, 139.495), stdev = 0.265
[info]   CI (99.9%): [138.135, 140.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   4896.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4896.009, 4896.009, 4896.010), stdev = 0.001
[info]   CI (99.9%): [4896.008, 4896.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   102.286 ±(99.9%) 880.715 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102.286, 511.431), stdev = 228.719
[info]   CI (99.9%): [≈ 0, 983.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   3608.488 ±(99.9%) 31070.174 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3608.488, 18042.442), stdev = 8068.825
[info]   CI (99.9%): [≈ 0, 34678.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.time":
[info]   2.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 61.04% complete, ETA 00:52:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3088.056 ops/s
[info] # Warmup Iteration   2: 5046.493 ops/s
[info] # Warmup Iteration   3: 5212.189 ops/s
[info] # Warmup Iteration   4: 5200.659 ops/s
[info] # Warmup Iteration   5: 5241.319 ops/s
[info] Iteration   1: 5221.290 ops/s
[info]                  ·gc.alloc.rate:                   1028.249 MB/sec
[info]                  ·gc.alloc.rate.norm:              310024.084 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18.821 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1331.719 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 401522.497 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 5248.056 ops/s
[info]                  ·gc.alloc.rate:                   1033.527 MB/sec
[info]                  ·gc.alloc.rate.norm:              310024.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      664.631 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 199367.279 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 5237.129 ops/s
[info]                  ·gc.alloc.rate:                   1031.458 MB/sec
[info]                  ·gc.alloc.rate.norm:              310024.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1328.466 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 399295.499 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 5241.234 ops/s
[info]                  ·gc.alloc.rate:                   1032.274 MB/sec
[info]                  ·gc.alloc.rate.norm:              310024.084 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      663.918 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 199395.436 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 5229.635 ops/s
[info]                  ·gc.alloc.rate:                   1030.361 MB/sec
[info]                  ·gc.alloc.rate.norm:              310024.078 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.264 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1329.749 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 400106.614 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce":
[info]   5235.469 ±(99.9%) 39.901 ops/s [Average]
[info]   (min, avg, max) = (5221.290, 5235.469, 5248.056), stdev = 10.362
[info]   CI (99.9%): [5195.568, 5275.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1031.174 ±(99.9%) 7.713 MB/sec [Average]
[info]   (min, avg, max) = (1028.249, 1031.174, 1033.527), stdev = 2.003
[info]   CI (99.9%): [1023.461, 1038.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   310024.080 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (310024.078, 310024.080, 310024.084), stdev = 0.003
[info]   CI (99.9%): [310024.067, 310024.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5.017 ±(99.9%) 31.497 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.017, 18.821), stdev = 8.180
[info]   CI (99.9%): [≈ 0, 36.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1063.697 ±(99.9%) 1404.032 MB/sec [Average]
[info]   (min, avg, max) = (663.918, 1063.697, 1331.719), stdev = 364.623
[info]   CI (99.9%): [≈ 0, 2467.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   319937.465 ±(99.9%) 423782.817 B/op [Average]
[info]   (min, avg, max) = (199367.279, 319937.465, 401522.497), stdev = 110055.052
[info]   CI (99.9%): [≈ 0, 743720.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 61.24% complete, ETA 00:52:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2421.701 ops/s
[info] # Warmup Iteration   2: 4982.306 ops/s
[info] # Warmup Iteration   3: 5256.637 ops/s
[info] # Warmup Iteration   4: 5278.314 ops/s
[info] # Warmup Iteration   5: 5264.649 ops/s
[info] Iteration   1: 5245.152 ops/s
[info]                  ·gc.alloc.rate:                   974.365 MB/sec
[info]                  ·gc.alloc.rate.norm:              292456.084 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18.735 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.605 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 402683.560 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 5244.645 ops/s
[info]                  ·gc.alloc.rate:                   974.442 MB/sec
[info]                  ·gc.alloc.rate.norm:              292456.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 201741.466 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 5247.690 ops/s
[info]                  ·gc.alloc.rate:                   974.893 MB/sec
[info]                  ·gc.alloc.rate.norm:              292456.084 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.227 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 403551.963 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 5260.951 ops/s
[info]                  ·gc.alloc.rate:                   977.455 MB/sec
[info]                  ·gc.alloc.rate.norm:              292456.084 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.452 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.215 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 201427.007 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 5265.341 ops/s
[info]                  ·gc.alloc.rate:                   978.232 MB/sec
[info]                  ·gc.alloc.rate.norm:              292456.077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.237 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 201572.660 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala":
[info]   5252.756 ±(99.9%) 37.274 ops/s [Average]
[info]   (min, avg, max) = (5244.645, 5252.756, 5265.341), stdev = 9.680
[info]   CI (99.9%): [5215.482, 5290.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   975.877 ±(99.9%) 7.035 MB/sec [Average]
[info]   (min, avg, max) = (974.365, 975.877, 978.232), stdev = 1.827
[info]   CI (99.9%): [968.842, 982.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   292456.081 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (292456.077, 292456.081, 292456.084), stdev = 0.003
[info]   CI (99.9%): [292456.068, 292456.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   6.237 ±(99.9%) 33.983 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.237, 18.735), stdev = 8.825
[info]   CI (99.9%): [≈ 0, 40.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   941.294 ±(99.9%) 1413.526 MB/sec [Average]
[info]   (min, avg, max) = (672.187, 941.294, 1345.227), stdev = 367.088
[info]   CI (99.9%): [≈ 0, 2354.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   282195.331 ±(99.9%) 425061.242 B/op [Average]
[info]   (min, avg, max) = (201427.007, 282195.331, 403551.963), stdev = 110387.055
[info]   CI (99.9%): [≈ 0, 707256.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 61.45% complete, ETA 00:51:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30854.756 ops/s
[info] # Warmup Iteration   2: 38865.332 ops/s
[info] # Warmup Iteration   3: 38909.002 ops/s
[info] # Warmup Iteration   4: 37941.261 ops/s
[info] # Warmup Iteration   5: 38873.354 ops/s
[info] Iteration   1: 38987.206 ops/s
[info]                  ·gc.alloc.rate:                   640.028 MB/sec
[info]                  ·gc.alloc.rate.norm:              25840.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          5.551 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     224.112 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.049 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27052.045 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 38690.568 ops/s
[info]                  ·gc.alloc.rate:                   634.917 MB/sec
[info]                  ·gc.alloc.rate.norm:              25840.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.847 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.747 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27257.557 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 39115.734 ops/s
[info]                  ·gc.alloc.rate:      641.956 MB/sec
[info]                  ·gc.alloc.rate.norm: 25840.010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 39307.954 ops/s
[info]                  ·gc.alloc.rate:                   645.056 MB/sec
[info]                  ·gc.alloc.rate.norm:              25840.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      665.787 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26670.465 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 39221.288 ops/s
[info]                  ·gc.alloc.rate:                   643.793 MB/sec
[info]                  ·gc.alloc.rate.norm:              25840.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      665.957 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26729.613 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala":
[info]   39064.550 ±(99.9%) 927.911 ops/s [Average]
[info]   (min, avg, max) = (38690.568, 39064.550, 39307.954), stdev = 240.975
[info]   CI (99.9%): [38136.639, 39992.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   641.150 ±(99.9%) 15.282 MB/sec [Average]
[info]   (min, avg, max) = (634.917, 641.150, 645.056), stdev = 3.969
[info]   CI (99.9%): [625.868, 656.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   25840.011 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (25840.010, 25840.011, 25840.011), stdev = 0.001
[info]   CI (99.9%): [25840.009, 25840.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1.114 ±(99.9%) 9.550 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.114, 5.551), stdev = 2.480
[info]   CI (99.9%): [≈ 0, 10.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   44.992 ±(99.9%) 385.573 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 44.992, 224.112), stdev = 100.132
[info]   CI (99.9%): [≈ 0, 430.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   534.308 ±(99.9%) 1150.165 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 534.308, 670.049), stdev = 298.694
[info]   CI (99.9%): [≈ 0, 1684.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   21541.936 ±(99.9%) 46379.821 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21541.936, 27257.557), stdev = 12044.692
[info]   CI (99.9%): [≈ 0, 67921.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.095
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 61.65% complete, ETA 00:51:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2043.831 ops/s
[info] # Warmup Iteration   2: 4552.355 ops/s
[info] # Warmup Iteration   3: 4596.618 ops/s
[info] # Warmup Iteration   4: 4644.558 ops/s
[info] # Warmup Iteration   5: 4582.754 ops/s
[info] Iteration   1: 4551.552 ops/s
[info]                  ·gc.alloc.rate:                   1159.358 MB/sec
[info]                  ·gc.alloc.rate.norm:              401024.090 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.134 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 232492.307 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 4644.594 ops/s
[info]                  ·gc.alloc.rate:                   1183.048 MB/sec
[info]                  ·gc.alloc.rate.norm:              401024.088 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.276 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 456015.456 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 4595.503 ops/s
[info]                  ·gc.alloc.rate:                   1171.026 MB/sec
[info]                  ·gc.alloc.rate.norm:              401024.103 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.798 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 461560.482 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 4640.674 ops/s
[info]                  ·gc.alloc.rate:                   1182.247 MB/sec
[info]                  ·gc.alloc.rate.norm:              401024.088 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.186 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 457650.792 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 4644.134 ops/s
[info]                  ·gc.alloc.rate:                   1183.172 MB/sec
[info]                  ·gc.alloc.rate.norm:              401024.088 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.873 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 228741.235 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson":
[info]   4615.291 ±(99.9%) 158.639 ops/s [Average]
[info]   (min, avg, max) = (4551.552, 4615.291, 4644.594), stdev = 41.198
[info]   CI (99.9%): [4456.652, 4773.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1175.770 ±(99.9%) 40.458 MB/sec [Average]
[info]   (min, avg, max) = (1159.358, 1175.770, 1183.172), stdev = 10.507
[info]   CI (99.9%): [1135.312, 1216.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   401024.091 ±(99.9%) 0.025 B/op [Average]
[info]   (min, avg, max) = (401024.088, 401024.091, 401024.103), stdev = 0.006
[info]   CI (99.9%): [401024.066, 401024.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.411 ±(99.9%) 12.146 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.411, 7.053), stdev = 3.154
[info]   CI (99.9%): [≈ 0, 13.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1077.853 ±(99.9%) 1421.363 MB/sec [Average]
[info]   (min, avg, max) = (672.134, 1077.853, 1349.186), stdev = 369.123
[info]   CI (99.9%): [≈ 0, 2499.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   367292.054 ±(99.9%) 480522.647 B/op [Average]
[info]   (min, avg, max) = (228741.235, 367292.054, 461560.482), stdev = 124790.205
[info]   CI (99.9%): [≈ 0, 847814.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 61.85% complete, ETA 00:51:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3158.143 ops/s
[info] # Warmup Iteration   2: 4915.752 ops/s
[info] # Warmup Iteration   3: 5090.991 ops/s
[info] # Warmup Iteration   4: 5087.805 ops/s
[info] # Warmup Iteration   5: 5018.006 ops/s
[info] Iteration   1: 5021.613 ops/s
[info]                  ·gc.alloc.rate:                   963.727 MB/sec
[info]                  ·gc.alloc.rate.norm:              302160.081 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19.571 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      665.815 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 208754.927 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 5031.694 ops/s
[info]                  ·gc.alloc.rate:                   965.697 MB/sec
[info]                  ·gc.alloc.rate.norm:              302160.081 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.509 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1330.105 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 416180.939 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 5009.417 ops/s
[info]                  ·gc.alloc.rate:                   961.489 MB/sec
[info]                  ·gc.alloc.rate.norm:              302160.088 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      664.528 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 208836.330 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 4993.156 ops/s
[info]                  ·gc.alloc.rate:                   958.562 MB/sec
[info]                  ·gc.alloc.rate.norm:              302160.082 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1329.254 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 419010.550 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 4976.074 ops/s
[info]                  ·gc.alloc.rate:                   955.342 MB/sec
[info]                  ·gc.alloc.rate.norm:              302160.082 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.583 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      664.656 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 210220.741 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle":
[info]   5006.391 ±(99.9%) 85.572 ops/s [Average]
[info]   (min, avg, max) = (4976.074, 5006.391, 5031.694), stdev = 22.223
[info]   CI (99.9%): [4920.819, 5091.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.alloc.rate":
[info]   960.963 ±(99.9%) 15.841 MB/sec [Average]
[info]   (min, avg, max) = (955.342, 960.963, 965.697), stdev = 4.114
[info]   CI (99.9%): [945.123, 976.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   302160.083 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (302160.081, 302160.083, 302160.088), stdev = 0.003
[info]   CI (99.9%): [302160.072, 302160.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   6.533 ±(99.9%) 30.766 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.533, 19.571), stdev = 7.990
[info]   CI (99.9%): [≈ 0, 37.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   930.872 ±(99.9%) 1401.867 MB/sec [Average]
[info]   (min, avg, max) = (664.528, 930.872, 1330.105), stdev = 364.060
[info]   CI (99.9%): [≈ 0, 2332.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   292600.697 ±(99.9%) 439397.815 B/op [Average]
[info]   (min, avg, max) = (208754.927, 292600.697, 419010.550), stdev = 114110.217
[info]   CI (99.9%): [≈ 0, 731998.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 62.05% complete, ETA 00:50:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10096.659 ops/s
[info] # Warmup Iteration   2: 14588.100 ops/s
[info] # Warmup Iteration   3: 14556.792 ops/s
[info] # Warmup Iteration   4: 14543.870 ops/s
[info] # Warmup Iteration   5: 14586.721 ops/s
[info] Iteration   1: 14624.340 ops/s
[info]                  ·gc.alloc.rate:                   819.520 MB/sec
[info]                  ·gc.alloc.rate.norm:              88208.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      665.367 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71616.013 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 14368.242 ops/s
[info]                  ·gc.alloc.rate:                   804.983 MB/sec
[info]                  ·gc.alloc.rate.norm:              88208.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      665.161 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72886.684 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 14416.376 ops/s
[info]                  ·gc.alloc.rate:                   807.741 MB/sec
[info]                  ·gc.alloc.rate.norm:              88201.480 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      663.936 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72498.632 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 14603.017 ops/s
[info]                  ·gc.alloc.rate:                   818.010 MB/sec
[info]                  ·gc.alloc.rate.norm:              88184.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.730 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      663.900 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71570.499 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 14620.899 ops/s
[info]                  ·gc.alloc.rate:                   819.055 MB/sec
[info]                  ·gc.alloc.rate.norm:              88184.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1327.861 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 142964.824 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce":
[info]   14526.575 ±(99.9%) 477.509 ops/s [Average]
[info]   (min, avg, max) = (14368.242, 14526.575, 14624.340), stdev = 124.008
[info]   CI (99.9%): [14049.065, 15004.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   813.862 ±(99.9%) 26.711 MB/sec [Average]
[info]   (min, avg, max) = (804.983, 813.862, 819.520), stdev = 6.937
[info]   CI (99.9%): [787.151, 840.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   88197.119 ±(99.9%) 47.152 B/op [Average]
[info]   (min, avg, max) = (88184.028, 88197.119, 88208.030), stdev = 12.245
[info]   CI (99.9%): [88149.967, 88244.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.012 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.346 ±(99.9%) 11.589 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.346, 6.730), stdev = 3.010
[info]   CI (99.9%): [≈ 0, 12.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   797.245 ±(99.9%) 1142.193 MB/sec [Average]
[info]   (min, avg, max) = (663.900, 797.245, 1327.861), stdev = 296.624
[info]   CI (99.9%): [≈ 0, 1939.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   86307.330 ±(99.9%) 121979.053 B/op [Average]
[info]   (min, avg, max) = (71570.499, 86307.330, 142964.824), stdev = 31677.573
[info]   CI (99.9%): [≈ 0, 208286.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 62.25% complete, ETA 00:50:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9680.009 ops/s
[info] # Warmup Iteration   2: 16496.724 ops/s
[info] # Warmup Iteration   3: 16776.881 ops/s
[info] # Warmup Iteration   4: 16841.709 ops/s
[info] # Warmup Iteration   5: 16819.046 ops/s
[info] Iteration   1: 16709.546 ops/s
[info]                  ·gc.alloc.rate:                   869.714 MB/sec
[info]                  ·gc.alloc.rate.norm:              81944.042 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.921 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.513 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63269.648 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 16769.816 ops/s
[info]                  ·gc.alloc.rate:                   872.863 MB/sec
[info]                  ·gc.alloc.rate.norm:              81943.914 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.535 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63043.335 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 16459.545 ops/s
[info]                  ·gc.alloc.rate:                   856.569 MB/sec
[info]                  ·gc.alloc.rate.norm:              81944.127 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.953 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.305 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 128603.751 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 16854.481 ops/s
[info]                  ·gc.alloc.rate:                   877.317 MB/sec
[info]                  ·gc.alloc.rate.norm:              81944.040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.262 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62884.704 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 16806.308 ops/s
[info]                  ·gc.alloc.rate:                   874.880 MB/sec
[info]                  ·gc.alloc.rate.norm:              81944.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.949 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.269 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63060.516 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala":
[info]   16719.939 ±(99.9%) 596.420 ops/s [Average]
[info]   (min, avg, max) = (16459.545, 16719.939, 16854.481), stdev = 154.888
[info]   CI (99.9%): [16123.519, 17316.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   870.269 ±(99.9%) 31.382 MB/sec [Average]
[info]   (min, avg, max) = (856.569, 870.269, 877.317), stdev = 8.150
[info]   CI (99.9%): [838.887, 901.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   81944.026 ±(99.9%) 0.295 B/op [Average]
[info]   (min, avg, max) = (81943.914, 81944.026, 81944.127), stdev = 0.077
[info]   CI (99.9%): [81943.731, 81944.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3.165 ±(99.9%) 15.895 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.165, 9.953), stdev = 4.128
[info]   CI (99.9%): [≈ 0, 19.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   806.777 ±(99.9%) 1157.075 MB/sec [Average]
[info]   (min, avg, max) = (671.513, 806.777, 1344.305), stdev = 300.489
[info]   CI (99.9%): [≈ 0, 1963.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   76172.391 ±(99.9%) 112863.685 B/op [Average]
[info]   (min, avg, max) = (62884.704, 76172.391, 128603.751), stdev = 29310.341
[info]   CI (99.9%): [≈ 0, 189036.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 62.45% complete, ETA 00:50:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 243792.436 ops/s
[info] # Warmup Iteration   2: 260091.148 ops/s
[info] # Warmup Iteration   3: 259425.046 ops/s
[info] # Warmup Iteration   4: 260085.107 ops/s
[info] # Warmup Iteration   5: 259573.596 ops/s
[info] Iteration   1: 258978.652 ops/s
[info]                  ·gc.alloc.rate:                   938.319 MB/sec
[info]                  ·gc.alloc.rate.norm:              5704.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      665.897 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4047.962 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 257931.330 ops/s
[info]                  ·gc.alloc.rate:                   934.775 MB/sec
[info]                  ·gc.alloc.rate.norm:              5704.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.254 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1330.915 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8121.249 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 256358.691 ops/s
[info]                  ·gc.alloc.rate:                   928.847 MB/sec
[info]                  ·gc.alloc.rate.norm:              5704.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      664.568 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4081.081 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 256082.170 ops/s
[info]                  ·gc.alloc.rate:                   927.854 MB/sec
[info]                  ·gc.alloc.rate.norm:              5704.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.640 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1329.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8170.956 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 248086.996 ops/s
[info]                  ·gc.alloc.rate:                   899.156 MB/sec
[info]                  ·gc.alloc.rate.norm:              5704.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      665.112 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4219.286 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala":
[info]   255487.568 ±(99.9%) 16566.779 ops/s [Average]
[info]   (min, avg, max) = (248086.996, 255487.568, 258978.652), stdev = 4302.340
[info]   CI (99.9%): [238920.789, 272054.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   925.790 ±(99.9%) 59.674 MB/sec [Average]
[info]   (min, avg, max) = (899.156, 925.790, 938.319), stdev = 15.497
[info]   CI (99.9%): [866.116, 985.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5704.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5704.002, 5704.002, 5704.002), stdev = 0.001
[info]   CI (99.9%): [5704.001, 5704.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.164 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.229 ±(99.9%) 1.009 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.229, 0.640), stdev = 0.262
[info]   CI (99.9%): [≈ 0, 1.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   931.128 ±(99.9%) 1402.203 MB/sec [Average]
[info]   (min, avg, max) = (664.568, 931.128, 1330.915), stdev = 364.148
[info]   CI (99.9%): [≈ 0, 2333.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5728.107 ±(99.9%) 8503.466 B/op [Average]
[info]   (min, avg, max) = (4047.962, 5728.107, 8170.956), stdev = 2208.323
[info]   CI (99.9%): [≈ 0, 14231.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 1.000
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 62.65% complete, ETA 00:50:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 280808.563 ops/s
[info] # Warmup Iteration   2: 298081.594 ops/s
[info] # Warmup Iteration   3: 300317.154 ops/s
[info] # Warmup Iteration   4: 298636.441 ops/s
[info] # Warmup Iteration   5: 298494.752 ops/s
[info] Iteration   1: 299925.573 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 300401.210 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 300207.823 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 300545.290 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 301113.212 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   300438.622 ±(99.9%) 1705.119 ops/s [Average]
[info]   (min, avg, max) = (299925.573, 300438.622, 301113.212), stdev = 442.814
[info]   CI (99.9%): [298733.503, 302143.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 62.85% complete, ETA 00:49:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10711.171 ops/s
[info] # Warmup Iteration   2: 14806.544 ops/s
[info] # Warmup Iteration   3: 15354.001 ops/s
[info] # Warmup Iteration   4: 15017.421 ops/s
[info] # Warmup Iteration   5: 15034.843 ops/s
[info] Iteration   1: 15326.529 ops/s
[info]                  ·gc.alloc.rate:                   874.654 MB/sec
[info]                  ·gc.alloc.rate.norm:              89847.901 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.137 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      663.824 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68190.612 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 15516.840 ops/s
[info]                  ·gc.alloc.rate:                   885.602 MB/sec
[info]                  ·gc.alloc.rate.norm:              89848.144 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.111 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1328.891 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 134821.740 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 15528.361 ops/s
[info]                  ·gc.alloc.rate:                   886.292 MB/sec
[info]                  ·gc.alloc.rate.norm:              89839.927 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      664.967 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67405.082 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 15522.882 ops/s
[info]                  ·gc.alloc.rate:                   885.790 MB/sec
[info]                  ·gc.alloc.rate.norm:              89832.154 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      666.236 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67566.194 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 15500.741 ops/s
[info]                  ·gc.alloc.rate:                   884.403 MB/sec
[info]                  ·gc.alloc.rate.norm:              89832.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1333.522 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 135450.647 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson":
[info]   15479.071 ±(99.9%) 330.764 ops/s [Average]
[info]   (min, avg, max) = (15326.529, 15479.071, 15528.361), stdev = 85.898
[info]   CI (99.9%): [15148.307, 15809.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   883.348 ±(99.9%) 18.904 MB/sec [Average]
[info]   (min, avg, max) = (874.654, 883.348, 886.292), stdev = 4.909
[info]   CI (99.9%): [864.444, 902.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   89840.027 ±(99.9%) 30.695 B/op [Average]
[info]   (min, avg, max) = (89832.009, 89840.027, 89848.144), stdev = 7.971
[info]   CI (99.9%): [89809.333, 89870.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.272 ±(99.9%) 4.470 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.272, 2.137), stdev = 1.161
[info]   CI (99.9%): [≈ 0, 5.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   931.488 ±(99.9%) 1405.084 MB/sec [Average]
[info]   (min, avg, max) = (663.824, 931.488, 1333.522), stdev = 364.896
[info]   CI (99.9%): [≈ 0, 2336.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   94686.855 ±(99.9%) 142192.190 B/op [Average]
[info]   (min, avg, max) = (67405.082, 94686.855, 135450.647), stdev = 36926.860
[info]   CI (99.9%): [≈ 0, 236879.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 63.05% complete, ETA 00:49:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6812.169 ops/s
[info] # Warmup Iteration   2: 7183.516 ops/s
[info] # Warmup Iteration   3: 7614.744 ops/s
[info] # Warmup Iteration   4: 7583.909 ops/s
[info] # Warmup Iteration   5: 7516.892 ops/s
[info] Iteration   1: 7292.798 ops/s
[info]                  ·gc.alloc.rate:                   464.751 MB/sec
[info]                  ·gc.alloc.rate.norm:              100336.056 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.328 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 110391.551 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 7608.352 ops/s
[info]                  ·gc.alloc.rate:                   484.986 MB/sec
[info]                  ·gc.alloc.rate.norm:              100336.058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.504 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 105822.125 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 7668.450 ops/s
[info]                  ·gc.alloc.rate:                   488.788 MB/sec
[info]                  ·gc.alloc.rate.norm:              100336.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          5.624 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1154.558 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.899 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 137513.682 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 7694.728 ops/s
[info]                  ·gc.alloc.rate:      490.478 MB/sec
[info]                  ·gc.alloc.rate.norm: 100340.406 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 7694.620 ops/s
[info]                  ·gc.alloc.rate:                   490.456 MB/sec
[info]                  ·gc.alloc.rate.norm:              100336.053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.002 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 137066.977 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle":
[info]   7591.790 ±(99.9%) 657.766 ops/s [Average]
[info]   (min, avg, max) = (7292.798, 7591.790, 7694.728), stdev = 170.820
[info]   CI (99.9%): [6934.024, 8249.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   483.892 ±(99.9%) 42.093 MB/sec [Average]
[info]   (min, avg, max) = (464.751, 483.892, 490.478), stdev = 10.931
[info]   CI (99.9%): [441.799, 525.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   100336.925 ±(99.9%) 7.493 B/op [Average]
[info]   (min, avg, max) = (100336.053, 100336.925, 100340.406), stdev = 1.946
[info]   CI (99.9%): [100329.432, 100344.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   1.125 ±(99.9%) 9.686 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.125, 5.624), stdev = 2.515
[info]   CI (99.9%): [≈ 0, 10.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   230.912 ±(99.9%) 1988.219 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 230.912, 1154.558), stdev = 516.334
[info]   CI (99.9%): [≈ 0, 2219.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   472.546 ±(99.9%) 1062.000 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 472.546, 670.002), stdev = 275.798
[info]   CI (99.9%): [≈ 0, 1534.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   98158.867 ±(99.9%) 218726.827 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 98158.867, 137513.682), stdev = 56802.662
[info]   CI (99.9%): [≈ 0, 316885.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 4.000), stdev = 1.643
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63.25% complete, ETA 00:49:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 895913.148 ops/s
[info] # Warmup Iteration   2: 939894.926 ops/s
[info] # Warmup Iteration   3: 940092.541 ops/s
[info] # Warmup Iteration   4: 939395.205 ops/s
[info] # Warmup Iteration   5: 941171.844 ops/s
[info] Iteration   1: 938823.256 ops/s
[info]                  ·gc.alloc.rate:      38.170 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 940135.029 ops/s
[info]                  ·gc.alloc.rate:      38.215 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 942241.516 ops/s
[info]                  ·gc.alloc.rate:      38.314 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 939636.437 ops/s
[info]                  ·gc.alloc.rate:      38.205 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 937224.401 ops/s
[info]                  ·gc.alloc.rate:      38.102 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala":
[info]   939612.128 ±(99.9%) 7077.033 ops/s [Average]
[info]   (min, avg, max) = (937224.401, 939612.128, 942241.516), stdev = 1837.883
[info]   CI (99.9%): [932535.095, 946689.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   38.201 ±(99.9%) 0.298 MB/sec [Average]
[info]   (min, avg, max) = (38.102, 38.201, 38.314), stdev = 0.077
[info]   CI (99.9%): [37.903, 38.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   64.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (64.000, 64.000, 64.000), stdev = 0.001
[info]   CI (99.9%): [64.000, 64.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 63.45% complete, ETA 00:49:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35961.739 ops/s
[info] # Warmup Iteration   2: 73037.776 ops/s
[info] # Warmup Iteration   3: 72693.274 ops/s
[info] # Warmup Iteration   4: 73090.764 ops/s
[info] # Warmup Iteration   5: 73758.990 ops/s
[info] Iteration   1: 73977.906 ops/s
[info]                  ·gc.alloc.rate:                   3336.975 MB/sec
[info]                  ·gc.alloc.rate.norm:              71008.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.329 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3395.117 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72245.218 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 73920.147 ops/s
[info]                  ·gc.alloc.rate:                   3333.920 MB/sec
[info]                  ·gc.alloc.rate.norm:              71008.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.216 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3398.803 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72389.925 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 73555.894 ops/s
[info]                  ·gc.alloc.rate:                   3319.152 MB/sec
[info]                  ·gc.alloc.rate.norm:              71008.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.780 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3400.658 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72751.707 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 73603.542 ops/s
[info]                  ·gc.alloc.rate:                   3320.188 MB/sec
[info]                  ·gc.alloc.rate.norm:              71008.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.335 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2722.441 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58224.154 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 73755.264 ops/s
[info]                  ·gc.alloc.rate:                   3326.788 MB/sec
[info]                  ·gc.alloc.rate.norm:              71008.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.888 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3403.549 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72646.423 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson":
[info]   73762.551 ±(99.9%) 718.478 ops/s [Average]
[info]   (min, avg, max) = (73555.894, 73762.551, 73977.906), stdev = 186.586
[info]   CI (99.9%): [73044.073, 74481.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3327.404 ±(99.9%) 30.722 MB/sec [Average]
[info]   (min, avg, max) = (3319.152, 3327.404, 3336.975), stdev = 7.978
[info]   CI (99.9%): [3296.683, 3358.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   71008.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (71008.006, 71008.006, 71008.006), stdev = 0.001
[info]   CI (99.9%): [71008.005, 71008.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.510 ±(99.9%) 1.946 B/op [Average]
[info]   (min, avg, max) = (0.888, 1.510, 2.216), stdev = 0.505
[info]   CI (99.9%): [≈ 0, 3.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3264.114 ±(99.9%) 1166.051 MB/sec [Average]
[info]   (min, avg, max) = (2722.441, 3264.114, 3403.549), stdev = 302.820
[info]   CI (99.9%): [2098.063, 4430.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   69651.486 ±(99.9%) 24610.362 B/op [Average]
[info]   (min, avg, max) = (58224.154, 69651.486, 72751.707), stdev = 6391.233
[info]   CI (99.9%): [45041.124, 94261.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63.65% complete, ETA 00:48:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 701676.868 ops/s
[info] # Warmup Iteration   2: 1056098.567 ops/s
[info] # Warmup Iteration   3: 1065850.243 ops/s
[info] # Warmup Iteration   4: 1054834.822 ops/s
[info] # Warmup Iteration   5: 1056227.977 ops/s
[info] Iteration   1: 1061616.129 ops/s
[info]                  ·gc.alloc.rate:                   609.518 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.278 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.457 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 998.831 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 1061697.962 ops/s
[info]                  ·gc.alloc.rate:                   609.675 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.639 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 998.843 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 1054845.273 ops/s
[info]                  ·gc.alloc.rate:                   605.729 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.580 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1006.755 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 1039159.600 ops/s
[info]                  ·gc.alloc.rate:                   596.835 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.706 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1021.948 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1060363.551 ops/s
[info]                  ·gc.alloc.rate:                   608.886 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.262 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1002.547 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala":
[info]   1055536.503 ±(99.9%) 36879.168 ops/s [Average]
[info]   (min, avg, max) = (1039159.600, 1055536.503, 1061697.962), stdev = 9577.403
[info]   CI (99.9%): [1018657.335, 1092415.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   606.129 ±(99.9%) 20.933 MB/sec [Average]
[info]   (min, avg, max) = (596.835, 606.129, 609.675), stdev = 5.436
[info]   CI (99.9%): [585.196, 627.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   904.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (904.000, 904.000, 904.000), stdev = 0.001
[info]   CI (99.9%): [904.000, 904.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.292 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.187), stdev = 0.076
[info]   CI (99.9%): [≈ 0, 0.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.080 ±(99.9%) 0.433 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.080, 0.278), stdev = 0.113
[info]   CI (99.9%): [≈ 0, 0.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   674.329 ±(99.9%) 2.927 MB/sec [Average]
[info]   (min, avg, max) = (673.457, 674.329, 675.262), stdev = 0.760
[info]   CI (99.9%): [671.402, 677.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1005.785 ±(99.9%) 36.995 B/op [Average]
[info]   (min, avg, max) = (998.831, 1005.785, 1021.948), stdev = 9.607
[info]   CI (99.9%): [968.790, 1042.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63.86% complete, ETA 00:48:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 674432.424 ops/s
[info] # Warmup Iteration   2: 672264.175 ops/s
[info] # Warmup Iteration   3: 670806.893 ops/s
[info] # Warmup Iteration   4: 673429.601 ops/s
[info] # Warmup Iteration   5: 671947.552 ops/s
[info] Iteration   1: 670292.728 ops/s
[info]                  ·gc.alloc.rate:                   180.495 MB/sec
[info]                  ·gc.alloc.rate.norm:              424.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.326 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1201.152 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 672710.469 ops/s
[info]                  ·gc.alloc.rate:      181.202 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 670998.584 ops/s
[info]                  ·gc.alloc.rate:      180.742 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 668757.679 ops/s
[info]                  ·gc.alloc.rate:                   180.131 MB/sec
[info]                  ·gc.alloc.rate.norm:              424.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.455 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1203.885 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 671923.987 ops/s
[info]                  ·gc.alloc.rate:      180.966 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala":
[info]   670936.689 ±(99.9%) 5867.544 ops/s [Average]
[info]   (min, avg, max) = (668757.679, 670936.689, 672710.469), stdev = 1523.783
[info]   CI (99.9%): [665069.145, 676804.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   180.707 ±(99.9%) 1.599 MB/sec [Average]
[info]   (min, avg, max) = (180.131, 180.707, 181.202), stdev = 0.415
[info]   CI (99.9%): [179.108, 182.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   424.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (424.001, 424.001, 424.001), stdev = 0.001
[info]   CI (99.9%): [424.001, 424.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   204.556 ±(99.9%) 1078.566 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.556, 511.455), stdev = 280.100
[info]   CI (99.9%): [≈ 0, 1283.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   481.007 ±(99.9%) 2536.216 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 481.007, 1203.885), stdev = 658.647
[info]   CI (99.9%): [≈ 0, 3017.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 1.095
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 64.06% complete, ETA 00:48:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1317594.607 ops/s
[info] # Warmup Iteration   2: 1399740.349 ops/s
[info] # Warmup Iteration   3: 1435928.643 ops/s
[info] # Warmup Iteration   4: 1436731.351 ops/s
[info] # Warmup Iteration   5: 1431152.980 ops/s
[info] Iteration   1: 1442910.162 ops/s
[info]                  ·gc.alloc.rate:      14.665 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1435083.958 ops/s
[info]                  ·gc.alloc.rate:      14.584 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1437929.385 ops/s
[info]                  ·gc.alloc.rate:      14.614 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1436532.313 ops/s
[info]                  ·gc.alloc.rate:      14.600 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1436300.245 ops/s
[info]                  ·gc.alloc.rate:      14.598 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc":
[info]   1437751.213 ±(99.9%) 11766.816 ops/s [Average]
[info]   (min, avg, max) = (1435083.958, 1437751.213, 1442910.162), stdev = 3055.805
[info]   CI (99.9%): [1425984.397, 1449518.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   14.612 ±(99.9%) 0.120 MB/sec [Average]
[info]   (min, avg, max) = (14.584, 14.612, 14.665), stdev = 0.031
[info]   CI (99.9%): [14.492, 14.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.000, 16.000, 16.000), stdev = 0.001
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 64.26% complete, ETA 00:47:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23477.593 ops/s
[info] # Warmup Iteration   2: 44549.709 ops/s
[info] # Warmup Iteration   3: 45089.274 ops/s
[info] # Warmup Iteration   4: 45239.820 ops/s
[info] # Warmup Iteration   5: 45211.283 ops/s
[info] Iteration   1: 45525.526 ops/s
[info]                  ·gc.alloc.rate:                   1926.821 MB/sec
[info]                  ·gc.alloc.rate.norm:              66616.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.439 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.357 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 46789.636 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 45633.916 ops/s
[info]                  ·gc.alloc.rate:                   1930.901 MB/sec
[info]                  ·gc.alloc.rate.norm:              66616.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.154 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.186 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70075.825 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 45416.840 ops/s
[info]                  ·gc.alloc.rate:                   1921.906 MB/sec
[info]                  ·gc.alloc.rate.norm:              66616.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.443 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034.134 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70505.985 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 45479.090 ops/s
[info]                  ·gc.alloc.rate:                   1924.576 MB/sec
[info]                  ·gc.alloc.rate.norm:              66616.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.881 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.470 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70454.442 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 45487.636 ops/s
[info]                  ·gc.alloc.rate:                   1924.798 MB/sec
[info]                  ·gc.alloc.rate.norm:              66616.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.321 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037.678 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70522.717 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson":
[info]   45508.602 ±(99.9%) 308.778 ops/s [Average]
[info]   (min, avg, max) = (45416.840, 45508.602, 45633.916), stdev = 80.189
[info]   CI (99.9%): [45199.823, 45817.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1925.800 ±(99.9%) 12.876 MB/sec [Average]
[info]   (min, avg, max) = (1921.906, 1925.800, 1930.901), stdev = 3.344
[info]   CI (99.9%): [1912.924, 1938.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   66616.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (66616.009, 66616.009, 66616.010), stdev = 0.001
[info]   CI (99.9%): [66616.008, 66616.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.125), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.448 ±(99.9%) 4.642 B/op [Average]
[info]   (min, avg, max) = (1.439, 2.448, 4.321), stdev = 1.205
[info]   CI (99.9%): [≈ 0, 7.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1898.365 ±(99.9%) 1173.206 MB/sec [Average]
[info]   (min, avg, max) = (1353.357, 1898.365, 2037.678), stdev = 304.678
[info]   CI (99.9%): [725.159, 3071.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   65669.721 ±(99.9%) 40646.914 B/op [Average]
[info]   (min, avg, max) = (46789.636, 65669.721, 70522.717), stdev = 10555.874
[info]   CI (99.9%): [25022.807, 106316.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce
[info] # Run progress: 64.46% complete, ETA 00:47:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 435774.777 ops/s
[info] # Warmup Iteration   2: 754860.640 ops/s
[info] # Warmup Iteration   3: 774250.862 ops/s
[info] # Warmup Iteration   4: 764913.548 ops/s
[info] # Warmup Iteration   5: 764558.215 ops/s
[info] Iteration   1: 779047.791 ops/s
[info]                  ·gc.alloc.rate:                   2473.878 MB/sec
[info]                  ·gc.alloc.rate.norm:              5000.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.126 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2017.386 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4077.376 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 782207.919 ops/s
[info]                  ·gc.alloc.rate:                   2484.645 MB/sec
[info]                  ·gc.alloc.rate.norm:              5000.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.126 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2696.476 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5426.283 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 774113.043 ops/s
[info]                  ·gc.alloc.rate:                   2458.779 MB/sec
[info]                  ·gc.alloc.rate.norm:              5000.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.042 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2702.353 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5495.315 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 773508.297 ops/s
[info]                  ·gc.alloc.rate:                   2456.631 MB/sec
[info]                  ·gc.alloc.rate.norm:              5000.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.085 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.967 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4131.608 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 770304.164 ops/s
[info]                  ·gc.alloc.rate:                   2446.518 MB/sec
[info]                  ·gc.alloc.rate.norm:              5000.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.085 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2711.080 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5540.690 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce":
[info]   775836.243 ±(99.9%) 18255.559 ops/s [Average]
[info]   (min, avg, max) = (770304.164, 775836.243, 782207.919), stdev = 4740.911
[info]   CI (99.9%): [757580.684, 794091.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate":
[info]   2464.090 ±(99.9%) 58.108 MB/sec [Average]
[info]   (min, avg, max) = (2446.518, 2464.090, 2484.645), stdev = 15.091
[info]   CI (99.9%): [2405.982, 2522.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5000.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5000.001, 5000.001, 5000.001), stdev = 0.001
[info]   CI (99.9%): [5000.000, 5000.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.046, 0.062), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.093 ±(99.9%) 0.134 B/op [Average]
[info]   (min, avg, max) = (0.042, 0.093, 0.126), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2431.452 ±(99.9%) 1433.632 MB/sec [Average]
[info]   (min, avg, max) = (2017.386, 2431.452, 2711.080), stdev = 372.310
[info]   CI (99.9%): [997.821, 3865.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4934.254 ±(99.9%) 2921.879 B/op [Average]
[info]   (min, avg, max) = (4077.376, 4934.254, 5540.690), stdev = 758.803
[info]   CI (99.9%): [2012.375, 7856.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 1.095
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava
[info] # Run progress: 64.66% complete, ETA 00:47:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.958 ops/s
[info] # Warmup Iteration   2: 5065951.496 ops/s
[info] # Warmup Iteration   3: 5187394.016 ops/s
[info] # Warmup Iteration   4: 5357250.686 ops/s
[info] # Warmup Iteration   5: 5370118.751 ops/s
[info] Iteration   1: 5368219.424 ops/s
[info]                  ·gc.alloc.rate:                   327.358 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.467 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 149.991 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 5392906.331 ops/s
[info]                  ·gc.alloc.rate:      328.877 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 5575029.935 ops/s
[info]                  ·gc.alloc.rate:                   339.984 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.026 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.473 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 144.423 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 5543535.145 ops/s
[info]                  ·gc.alloc.rate:                   338.075 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.002 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.465 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 145.236 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 5566219.474 ops/s
[info]                  ·gc.alloc.rate:      339.435 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava":
[info]   5489182.062 ±(99.9%) 385833.051 ops/s [Average]
[info]   (min, avg, max) = (5368219.424, 5489182.062, 5575029.935), stdev = 100199.618
[info]   CI (99.9%): [5103349.010, 5875015.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   334.746 ±(99.9%) 23.542 MB/sec [Average]
[info]   (min, avg, max) = (327.358, 334.746, 339.984), stdev = 6.114
[info]   CI (99.9%): [311.204, 358.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   96.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (96.000, 96.000, 96.000), stdev = 0.001
[info]   CI (99.9%): [96.000, 96.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.006 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.026), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0.002 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.007), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   306.881 ±(99.9%) 1078.730 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.881, 511.473), stdev = 280.143
[info]   CI (99.9%): [≈ 0, 1385.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   87.930 ±(99.9%) 309.195 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 87.930, 149.991), stdev = 80.297
[info]   CI (99.9%): [≈ 0, 397.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala
[info] # Run progress: 64.86% complete, ETA 00:47:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 272916.055 ops/s
[info] # Warmup Iteration   2: 963510.115 ops/s
[info] # Warmup Iteration   3: 963969.034 ops/s
[info] # Warmup Iteration   4: 971035.054 ops/s
[info] # Warmup Iteration   5: 973278.759 ops/s
[info] Iteration   1: 968994.420 ops/s
[info]                  ·gc.alloc.rate:                   1201.416 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.169 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.706 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2192.934 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 974545.269 ops/s
[info]                  ·gc.alloc.rate:                   1208.508 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.202 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.425 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2182.841 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 961060.781 ops/s
[info]                  ·gc.alloc.rate:                   1192.025 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.724 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2215.152 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 950037.628 ops/s
[info]                  ·gc.alloc.rate:                   1178.001 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.138 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.224 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2242.353 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 961626.912 ops/s
[info]                  ·gc.alloc.rate:                   1192.307 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676.911 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1108.213 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala":
[info]   963253.002 ±(99.9%) 35635.378 ops/s [Average]
[info]   (min, avg, max) = (950037.628, 963253.002, 974545.269), stdev = 9254.395
[info]   CI (99.9%): [927617.624, 998888.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1194.452 ±(99.9%) 44.208 MB/sec [Average]
[info]   (min, avg, max) = (1178.001, 1194.452, 1208.508), stdev = 11.481
[info]   CI (99.9%): [1150.244, 1238.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1952.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1952.000, 1952.000, 1952.000), stdev = 0.001
[info]   CI (99.9%): [1952.000, 1952.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.207 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.125), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.109 ±(99.9%) 0.336 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.109, 0.202), stdev = 0.087
[info]   CI (99.9%): [≈ 0, 0.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1216.798 ±(99.9%) 1162.159 MB/sec [Average]
[info]   (min, avg, max) = (676.911, 1216.798, 1353.224), stdev = 301.809
[info]   CI (99.9%): [54.639, 2378.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1988.299 ±(99.9%) 1896.494 B/op [Average]
[info]   (min, avg, max) = (1108.213, 1988.299, 2242.353), stdev = 492.514
[info]   CI (99.9%): [91.804, 3884.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala
[info] # Run progress: 65.06% complete, ETA 00:46:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7459520.541 ops/s
[info] # Warmup Iteration   2: 8108745.857 ops/s
[info] # Warmup Iteration   3: 8272000.516 ops/s
[info] # Warmup Iteration   4: 8289472.284 ops/s
[info] # Warmup Iteration   5: 8303650.789 ops/s
[info] Iteration   1: 8143901.134 ops/s
[info]                  ·gc.alloc.rate:                   372.476 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.039 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.463 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 98.867 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 8082762.713 ops/s
[info]                  ·gc.alloc.rate:                   369.714 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.523 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 99.617 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 8279357.511 ops/s
[info]                  ·gc.alloc.rate:      378.701 MB/sec
[info]                  ·gc.alloc.rate.norm: 72.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 8268068.035 ops/s
[info]                  ·gc.alloc.rate:                   378.225 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.025 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.544 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 97.379 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 8202891.394 ops/s
[info]                  ·gc.alloc.rate:                   375.165 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.202 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.614 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.564 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 129.459 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala":
[info]   8195396.157 ±(99.9%) 320581.541 ops/s [Average]
[info]   (min, avg, max) = (8082762.713, 8195396.157, 8279357.511), stdev = 83254.008
[info]   CI (99.9%): [7874814.616, 8515977.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   374.856 ±(99.9%) 14.705 MB/sec [Average]
[info]   (min, avg, max) = (369.714, 374.856, 378.701), stdev = 3.819
[info]   CI (99.9%): [360.151, 389.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   72.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (72.000, 72.000, 72.000), stdev = 0.001
[info]   CI (99.9%): [72.000, 72.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.653 ±(99.9%) 5.486 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.653, 3.202), stdev = 1.425
[info]   CI (99.9%): [≈ 0, 6.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.125 ±(99.9%) 1.053 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.125, 0.614), stdev = 0.273
[info]   CI (99.9%): [≈ 0, 1.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   441.819 ±(99.9%) 989.145 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 441.819, 674.564), stdev = 256.878
[info]   CI (99.9%): [≈ 0, 1430.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   85.064 ±(99.9%) 190.215 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 85.064, 129.459), stdev = 49.398
[info]   CI (99.9%): [≈ 0, 275.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.095
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson
[info] # Run progress: 65.26% complete, ETA 00:46:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35066.169 ops/s
[info] # Warmup Iteration   2: 298556.900 ops/s
[info] # Warmup Iteration   3: 301914.549 ops/s
[info] # Warmup Iteration   4: 309873.020 ops/s
[info] # Warmup Iteration   5: 311530.704 ops/s
[info] Iteration   1: 303915.075 ops/s
[info]                  ·gc.alloc.rate:                   1703.502 MB/sec
[info]                  ·gc.alloc.rate.norm:              8824.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.108 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10501.420 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 308461.237 ops/s
[info]                  ·gc.alloc.rate:                   1728.941 MB/sec
[info]                  ·gc.alloc.rate.norm:              8824.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.319 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.182 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6906.241 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 308532.309 ops/s
[info]                  ·gc.alloc.rate:                   1729.602 MB/sec
[info]                  ·gc.alloc.rate.norm:              8824.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.212 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.635 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10364.901 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 309962.487 ops/s
[info]                  ·gc.alloc.rate:                   1738.013 MB/sec
[info]                  ·gc.alloc.rate.norm:              8824.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.319 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10318.209 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 309515.893 ops/s
[info]                  ·gc.alloc.rate:                   1734.894 MB/sec
[info]                  ·gc.alloc.rate.norm:              8824.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356.772 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6900.799 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson":
[info]   308077.400 ±(99.9%) 9293.950 ops/s [Average]
[info]   (min, avg, max) = (303915.075, 308077.400, 309962.487), stdev = 2413.609
[info]   CI (99.9%): [298783.450, 317371.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1726.990 ±(99.9%) 52.597 MB/sec [Average]
[info]   (min, avg, max) = (1703.502, 1726.990, 1738.013), stdev = 13.659
[info]   CI (99.9%): [1674.393, 1779.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8824.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8824.001, 8824.001, 8824.001), stdev = 0.001
[info]   CI (99.9%): [8824.001, 8824.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.033, 0.062), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.170 ±(99.9%) 0.365 B/op [Average]
[info]   (min, avg, max) = (0.106, 0.170, 0.319), stdev = 0.095
[info]   CI (99.9%): [≈ 0, 0.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1760.248 ±(99.9%) 1424.612 MB/sec [Average]
[info]   (min, avg, max) = (1353.182, 1760.248, 2032.319), stdev = 369.967
[info]   CI (99.9%): [335.636, 3184.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   8998.314 ±(99.9%) 7368.062 B/op [Average]
[info]   (min, avg, max) = (6900.799, 8998.314, 10501.420), stdev = 1913.462
[info]   CI (99.9%): [1630.252, 16366.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.600, 4.000), stdev = 1.140
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle
[info] # Run progress: 65.46% complete, ETA 00:46:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 451898.314 ops/s
[info] # Warmup Iteration   2: 716332.625 ops/s
[info] # Warmup Iteration   3: 686467.875 ops/s
[info] # Warmup Iteration   4: 718175.619 ops/s
[info] # Warmup Iteration   5: 713410.490 ops/s
[info] Iteration   1: 712175.490 ops/s
[info]                  ·gc.alloc.rate:                   1194.149 MB/sec
[info]                  ·gc.alloc.rate.norm:              2640.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.138 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.976 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2969.023 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 716144.525 ops/s
[info]                  ·gc.alloc.rate:                   1201.022 MB/sec
[info]                  ·gc.alloc.rate.norm:              2640.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.137 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.580 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2951.162 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 719784.269 ops/s
[info]                  ·gc.alloc.rate:                   1207.013 MB/sec
[info]                  ·gc.alloc.rate.norm:              2640.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.433 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2936.192 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 724527.659 ops/s
[info]                  ·gc.alloc.rate:                   1214.939 MB/sec
[info]                  ·gc.alloc.rate.norm:              2640.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.228 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1458.544 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 725039.303 ops/s
[info]                  ·gc.alloc.rate:                   1215.892 MB/sec
[info]                  ·gc.alloc.rate.norm:              2640.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.090 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.800 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2917.719 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle":
[info]   719534.249 ±(99.9%) 21173.627 ops/s [Average]
[info]   (min, avg, max) = (712175.490, 719534.249, 725039.303), stdev = 5498.724
[info]   CI (99.9%): [698360.622, 740707.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1206.603 ±(99.9%) 35.616 MB/sec [Average]
[info]   (min, avg, max) = (1194.149, 1206.603, 1215.892), stdev = 9.249
[info]   CI (99.9%): [1170.988, 1242.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   2640.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2640.001, 2640.001, 2640.001), stdev = 0.001
[info]   CI (99.9%): [2640.000, 2640.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0.082 ±(99.9%) 0.230 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.082, 0.138), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   1208.603 ±(99.9%) 1156.742 MB/sec [Average]
[info]   (min, avg, max) = (671.228, 1208.603, 1343.800), stdev = 300.402
[info]   CI (99.9%): [51.861, 2365.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   2646.528 ±(99.9%) 2558.260 B/op [Average]
[info]   (min, avg, max) = (1458.544, 2646.528, 2969.023), stdev = 664.372
[info]   CI (99.9%): [88.268, 5204.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 4.000), stdev = 1.342
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce
[info] # Run progress: 65.66% complete, ETA 00:46:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2238.702 ops/s
[info] # Warmup Iteration   2: 3787.430 ops/s
[info] # Warmup Iteration   3: 3692.058 ops/s
[info] # Warmup Iteration   4: 3878.719 ops/s
[info] # Warmup Iteration   5: 3865.738 ops/s
[info] Iteration   1: 3828.551 ops/s
[info]                  ·gc.alloc.rate:                   1807.448 MB/sec
[info]                  ·gc.alloc.rate.norm:              743312.107 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25.667 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.466 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 835027.885 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 3869.697 ops/s
[info]                  ·gc.alloc.rate:                   1827.341 MB/sec
[info]                  ·gc.alloc.rate.norm:              743312.105 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16.930 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.157 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 551240.548 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 3877.002 ops/s
[info]                  ·gc.alloc.rate:                   1830.632 MB/sec
[info]                  ·gc.alloc.rate.norm:              743312.113 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.250 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     101.397 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034.385 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 826044.270 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 3792.085 ops/s
[info]                  ·gc.alloc.rate:                   1790.701 MB/sec
[info]                  ·gc.alloc.rate.norm:              743312.116 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.250 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103.642 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.733 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 845024.017 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 3871.822 ops/s
[info]                  ·gc.alloc.rate:                   1828.351 MB/sec
[info]                  ·gc.alloc.rate.norm:              743312.105 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.461 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1358.202 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 552174.219 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce":
[info]   3847.831 ±(99.9%) 141.271 ops/s [Average]
[info]   (min, avg, max) = (3792.085, 3847.831, 3877.002), stdev = 36.688
[info]   CI (99.9%): [3706.561, 3989.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.alloc.rate":
[info]   1816.895 ±(99.9%) 66.818 MB/sec [Average]
[info]   (min, avg, max) = (1790.701, 1816.895, 1830.632), stdev = 17.352
[info]   CI (99.9%): [1750.076, 1883.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   743312.109 ±(99.9%) 0.019 B/op [Average]
[info]   (min, avg, max) = (743312.105, 743312.109, 743312.116), stdev = 0.005
[info]   CI (99.9%): [743312.090, 743312.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.125 ±(99.9%) 0.443 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.125, 0.250), stdev = 0.115
[info]   CI (99.9%): [≈ 0, 0.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   51.219 ±(99.9%) 181.867 B/op [Average]
[info]   (min, avg, max) = (8.461, 51.219, 103.642), stdev = 47.230
[info]   CI (99.9%): [≈ 0, 233.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1762.789 ±(99.9%) 1427.557 MB/sec [Average]
[info]   (min, avg, max) = (1355.157, 1762.789, 2035.733), stdev = 370.732
[info]   CI (99.9%): [335.232, 3190.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   721902.188 ±(99.9%) 598818.341 B/op [Average]
[info]   (min, avg, max) = (551240.548, 721902.188, 845024.017), stdev = 155511.222
[info]   CI (99.9%): [123083.847, 1320720.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala
[info] # Run progress: 65.86% complete, ETA 00:45:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2071.874 ops/s
[info] # Warmup Iteration   2: 5051.189 ops/s
[info] # Warmup Iteration   3: 5276.488 ops/s
[info] # Warmup Iteration   4: 5255.360 ops/s
[info] # Warmup Iteration   5: 5277.130 ops/s
[info] Iteration   1: 5156.371 ops/s
[info]                  ·gc.alloc.rate:                   2130.261 MB/sec
[info]                  ·gc.alloc.rate.norm:              650392.079 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25.411 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.176 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 619529.926 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 5244.110 ops/s
[info]                  ·gc.alloc.rate:                   2166.475 MB/sec
[info]                  ·gc.alloc.rate.norm:              650392.078 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24.985 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 609737.150 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 5196.595 ops/s
[info]                  ·gc.alloc.rate:                   2146.926 MB/sec
[info]                  ·gc.alloc.rate.norm:              650392.085 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.608 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.975 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 616174.566 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 5279.069 ops/s
[info]                  ·gc.alloc.rate:                   2181.143 MB/sec
[info]                  ·gc.alloc.rate.norm:              650392.077 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24.820 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2714.439 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 809414.896 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 5266.046 ops/s
[info]                  ·gc.alloc.rate:                   2175.682 MB/sec
[info]                  ·gc.alloc.rate.norm:              650392.077 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18.661 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037.491 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 609081.731 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala":
[info]   5228.438 ±(99.9%) 196.638 ops/s [Average]
[info]   (min, avg, max) = (5156.371, 5228.438, 5279.069), stdev = 51.066
[info]   CI (99.9%): [5031.800, 5425.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2160.097 ±(99.9%) 81.462 MB/sec [Average]
[info]   (min, avg, max) = (2130.261, 2160.097, 2181.143), stdev = 21.155
[info]   CI (99.9%): [2078.636, 2241.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   650392.079 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (650392.077, 650392.079, 650392.085), stdev = 0.003
[info]   CI (99.9%): [650392.067, 650392.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.083), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   21.297 ±(99.9%) 21.559 B/op [Average]
[info]   (min, avg, max) = (12.608, 21.297, 25.411), stdev = 5.599
[info]   CI (99.9%): [≈ 0, 42.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   2169.227 ±(99.9%) 1173.673 MB/sec [Average]
[info]   (min, avg, max) = (2029.176, 2169.227, 2714.439), stdev = 304.799
[info]   CI (99.9%): [995.553, 3342.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   652787.654 ±(99.9%) 337575.662 B/op [Average]
[info]   (min, avg, max) = (609081.731, 652787.654, 809414.896), stdev = 87667.327
[info]   CI (99.9%): [315211.992, 990363.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala
[info] # Run progress: 66.06% complete, ETA 00:45:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 39443.539 ops/s
[info] # Warmup Iteration   2: 43452.317 ops/s
[info] # Warmup Iteration   3: 43007.843 ops/s
[info] # Warmup Iteration   4: 43574.422 ops/s
[info] # Warmup Iteration   5: 43753.752 ops/s
[info] Iteration   1: 41734.306 ops/s
[info]                  ·gc.alloc.rate:                   694.086 MB/sec
[info]                  ·gc.alloc.rate.norm:              26184.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     105.340 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.166 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25470.261 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 43782.975 ops/s
[info]                  ·gc.alloc.rate:                   728.367 MB/sec
[info]                  ·gc.alloc.rate.norm:              26184.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.424 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24280.796 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 43635.187 ops/s
[info]                  ·gc.alloc.rate:                   725.760 MB/sec
[info]                  ·gc.alloc.rate.norm:              26184.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.823 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48626.826 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 42813.028 ops/s
[info]                  ·gc.alloc.rate:                   712.242 MB/sec
[info]                  ·gc.alloc.rate.norm:              26184.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.530 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.373 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24755.052 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 42667.191 ops/s
[info]                  ·gc.alloc.rate:                   709.696 MB/sec
[info]                  ·gc.alloc.rate.norm:              26184.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24838.574 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala":
[info]   42926.537 ±(99.9%) 3185.364 ops/s [Average]
[info]   (min, avg, max) = (41734.306, 42926.537, 43782.975), stdev = 827.229
[info]   CI (99.9%): [39741.173, 46111.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   714.030 ±(99.9%) 53.177 MB/sec [Average]
[info]   (min, avg, max) = (694.086, 714.030, 728.367), stdev = 13.810
[info]   CI (99.9%): [660.853, 767.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   26184.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (26184.009, 26184.010, 26184.010), stdev = 0.001
[info]   CI (99.9%): [26184.009, 26184.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.567 ±(99.9%) 4.791 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.567, 2.792), stdev = 1.244
[info]   CI (99.9%): [≈ 0, 5.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   21.374 ±(99.9%) 180.760 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21.374, 105.340), stdev = 46.943
[info]   CI (99.9%): [≈ 0, 202.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   809.003 ±(99.9%) 1159.856 MB/sec [Average]
[info]   (min, avg, max) = (673.229, 809.003, 1347.823), stdev = 301.211
[info]   CI (99.9%): [≈ 0, 1968.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   29594.302 ±(99.9%) 41001.372 B/op [Average]
[info]   (min, avg, max) = (24280.796, 29594.302, 48626.826), stdev = 10647.926
[info]   CI (99.9%): [≈ 0, 70595.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce
[info] # Run progress: 66.27% complete, ETA 00:45:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2632.441 ops/s
[info] # Warmup Iteration   2: 4107.837 ops/s
[info] # Warmup Iteration   3: 4137.976 ops/s
[info] # Warmup Iteration   4: 4213.320 ops/s
[info] # Warmup Iteration   5: 4198.978 ops/s
[info] Iteration   1: 4192.835 ops/s
[info]                  ·gc.alloc.rate:                   770.780 MB/sec
[info]                  ·gc.alloc.rate.norm:              289408.097 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.813 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.199 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 252393.293 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 4187.678 ops/s
[info]                  ·gc.alloc.rate:                   769.861 MB/sec
[info]                  ·gc.alloc.rate.norm:              289408.105 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.864 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 252944.867 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 4177.860 ops/s
[info]                  ·gc.alloc.rate:                   768.104 MB/sec
[info]                  ·gc.alloc.rate.norm:              289408.105 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47.047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.870 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 507476.659 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 4188.097 ops/s
[info]                  ·gc.alloc.rate:                   769.983 MB/sec
[info]                  ·gc.alloc.rate.norm:              289408.097 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.809 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 253259.884 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 4186.420 ops/s
[info]                  ·gc.alloc.rate:                   769.627 MB/sec
[info]                  ·gc.alloc.rate.norm:              289408.097 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.485 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 253631.205 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce":
[info]   4186.578 ±(99.9%) 20.977 ops/s [Average]
[info]   (min, avg, max) = (4177.860, 4186.578, 4192.835), stdev = 5.448
[info]   CI (99.9%): [4165.602, 4207.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.alloc.rate":
[info]   769.671 ±(99.9%) 3.763 MB/sec [Average]
[info]   (min, avg, max) = (768.104, 769.671, 770.780), stdev = 0.977
[info]   CI (99.9%): [765.908, 773.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   289408.100 ±(99.9%) 0.016 B/op [Average]
[info]   (min, avg, max) = (289408.097, 289408.100, 289408.105), stdev = 0.004
[info]   CI (99.9%): [289408.084, 289408.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.125), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10.972 ±(99.9%) 78.739 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.972, 47.047), stdev = 20.448
[info]   CI (99.9%): [≈ 0, 89.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   808.045 ±(99.9%) 1159.865 MB/sec [Average]
[info]   (min, avg, max) = (672.199, 808.045, 1346.870), stdev = 301.213
[info]   CI (99.9%): [≈ 0, 1967.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   303941.182 ±(99.9%) 438128.947 B/op [Average]
[info]   (min, avg, max) = (252393.293, 303941.182, 507476.659), stdev = 113780.696
[info]   CI (99.9%): [≈ 0, 742070.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala
[info] # Run progress: 66.47% complete, ETA 00:45:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_6a03406e/target/1bdf7fe1/jackson-module-afterburner-2.9.5.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 2154.903 ops/s
[info] # Warmup Iteration   2: 4624.283 ops/s
[info] # Warmup Iteration   3: 4441.367 ops/s
[info] # Warmup Iteration   4: 4703.395 ops/s
[info] # Warmup Iteration   5: 4704.208 ops/s
[info] Iteration   1: 4700.369 ops/s
[info]                  ·gc.alloc.rate:                   549.491 MB/sec
[info]                  ·gc.alloc.rate.norm:              184037.392 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.368 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 171268.900 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 4676.918 ops/s
[info]                  ·gc.alloc.rate:                   546.769 MB/sec
[info]                  ·gc.alloc.rate.norm:              184037.427 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.876 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     294.697 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 226679.766 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 4691.082 ops/s
[info]                  ·gc.alloc.rate:                   548.454 MB/sec
[info]                  ·gc.alloc.rate.norm:              184037.095 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.982 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.519 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 226003.542 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 4692.525 ops/s
[info]                  ·gc.alloc.rate:                   548.624 MB/sec
[info]                  ·gc.alloc.rate.norm:              184037.475 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.772 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 226018.938 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 4704.986 ops/s
[info]                  ·gc.alloc.rate:      550.056 MB/sec
[info]                  ·gc.alloc.rate.norm: 184037.808 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala":
[info]   4693.176 ±(99.9%) 41.309 ops/s [Average]
[info]   (min, avg, max) = (4676.918, 4693.176, 4704.986), stdev = 10.728
[info]   CI (99.9%): [4651.867, 4734.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   548.679 ±(99.9%) 4.816 MB/sec [Average]
[info]   (min, avg, max) = (546.769, 548.679, 550.056), stdev = 1.251
[info]   CI (99.9%): [543.862, 553.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   184037.439 ±(99.9%) 0.977 B/op [Average]
[info]   (min, avg, max) = (184037.095, 184037.439, 184037.808), stdev = 0.254
[info]   CI (99.9%): [184036.462, 184038.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.179 ±(99.9%) 1.499 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.179, 0.876), stdev = 0.389
[info]   CI (99.9%): [≈ 0, 1.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   60.336 ±(99.9%) 504.615 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 60.336, 294.697), stdev = 131.047
[info]   CI (99.9%): [≈ 0, 564.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   506.423 ±(99.9%) 1123.168 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506.423, 673.772), stdev = 291.683
[info]   CI (99.9%): [≈ 0, 1629.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   169994.229 ±(99.9%) 377229.114 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 169994.229, 226679.766), stdev = 97965.203
[info]   CI (99.9%): [≈ 0, 547223.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala
[info] # Run progress: 66.67% complete, ETA 00:44:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6051.084 ops/s
[info] # Warmup Iteration   2: 6466.519 ops/s
[info] # Warmup Iteration   3: 6368.421 ops/s
[info] # Warmup Iteration   4: 6469.421 ops/s
[info] # Warmup Iteration   5: 6481.735 ops/s
[info] Iteration   1: 6456.106 ops/s
[info]                  ·gc.alloc.rate:                   172.468 MB/sec
[info]                  ·gc.alloc.rate.norm:              42056.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.381 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 124699.035 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 6477.947 ops/s
[info]                  ·gc.alloc.rate:      173.070 MB/sec
[info]                  ·gc.alloc.rate.norm: 42056.063 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 6479.216 ops/s
[info]                  ·gc.alloc.rate:      173.096 MB/sec
[info]                  ·gc.alloc.rate.norm: 42056.068 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 6452.586 ops/s
[info]                  ·gc.alloc.rate:                   172.381 MB/sec
[info]                  ·gc.alloc.rate.norm:              42056.063 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.439 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 124776.320 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 6474.026 ops/s
[info]                  ·gc.alloc.rate:      172.973 MB/sec
[info]                  ·gc.alloc.rate.norm: 42056.063 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala":
[info]   6467.976 ±(99.9%) 48.711 ops/s [Average]
[info]   (min, avg, max) = (6452.586, 6467.976, 6479.216), stdev = 12.650
[info]   CI (99.9%): [6419.265, 6516.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   172.798 ±(99.9%) 1.328 MB/sec [Average]
[info]   (min, avg, max) = (172.381, 172.798, 173.096), stdev = 0.345
[info]   CI (99.9%): [171.470, 174.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   42056.064 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (42056.063, 42056.064, 42056.068), stdev = 0.002
[info]   CI (99.9%): [42056.056, 42056.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.007 ±(99.9%) 8.675 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.007, 5.037), stdev = 2.253
[info]   CI (99.9%): [≈ 0, 9.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   204.564 ±(99.9%) 1078.606 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.564, 511.439), stdev = 280.111
[info]   CI (99.9%): [≈ 0, 1283.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   49895.071 ±(99.9%) 263082.328 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 49895.071, 124776.320), stdev = 68321.645
[info]   CI (99.9%): [≈ 0, 312977.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 1.095
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 66.87% complete, ETA 00:44:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6082.828 ops/s
[info] # Warmup Iteration   2: 6636.283 ops/s
[info] # Warmup Iteration   3: 6613.637 ops/s
[info] # Warmup Iteration   4: 6504.268 ops/s
[info] # Warmup Iteration   5: 6646.193 ops/s
[info] Iteration   1: 6630.400 ops/s
[info]                  ·gc.alloc.rate:      128.667 MB/sec
[info]                  ·gc.alloc.rate.norm: 30552.062 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 6629.079 ops/s
[info]                  ·gc.alloc.rate:      128.649 MB/sec
[info]                  ·gc.alloc.rate.norm: 30552.066 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 6618.685 ops/s
[info]                  ·gc.alloc.rate:                   128.459 MB/sec
[info]                  ·gc.alloc.rate.norm:              30552.062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.401 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 121629.115 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 6623.435 ops/s
[info]                  ·gc.alloc.rate:      128.552 MB/sec
[info]                  ·gc.alloc.rate.norm: 30552.062 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 6622.331 ops/s
[info]                  ·gc.alloc.rate:      128.533 MB/sec
[info]                  ·gc.alloc.rate.norm: 30552.092 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc":
[info]   6624.786 ±(99.9%) 18.768 ops/s [Average]
[info]   (min, avg, max) = (6618.685, 6624.786, 6630.400), stdev = 4.874
[info]   CI (99.9%): [6606.018, 6643.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   128.572 ±(99.9%) 0.332 MB/sec [Average]
[info]   (min, avg, max) = (128.459, 128.572, 128.667), stdev = 0.086
[info]   CI (99.9%): [128.240, 128.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   30552.069 ±(99.9%) 0.051 B/op [Average]
[info]   (min, avg, max) = (30552.062, 30552.069, 30552.092), stdev = 0.013
[info]   CI (99.9%): [30552.018, 30552.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   102.280 ±(99.9%) 880.663 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102.280, 511.401), stdev = 228.706
[info]   CI (99.9%): [≈ 0, 982.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   24325.823 ±(99.9%) 209452.672 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 24325.823, 121629.115), stdev = 54394.194
[info]   CI (99.9%): [≈ 0, 233778.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   2.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce
[info] # Run progress: 67.07% complete, ETA 00:44:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5233.927 ops/s
[info] # Warmup Iteration   2: 7088.484 ops/s
[info] # Warmup Iteration   3: 7377.213 ops/s
[info] # Warmup Iteration   4: 7421.073 ops/s
[info] # Warmup Iteration   5: 7373.285 ops/s
[info] Iteration   1: 7411.935 ops/s
[info]                  ·gc.alloc.rate:                   1725.323 MB/sec
[info]                  ·gc.alloc.rate.norm:              366544.055 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.046 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.737 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2011.411 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 427323.364 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 7404.004 ops/s
[info]                  ·gc.alloc.rate:                   1724.308 MB/sec
[info]                  ·gc.alloc.rate.norm:              366544.055 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.004 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.898 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.569 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 285396.141 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 7490.906 ops/s
[info]                  ·gc.alloc.rate:                   1744.718 MB/sec
[info]                  ·gc.alloc.rate.norm:              366544.059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2017.302 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 423810.545 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 7546.775 ops/s
[info]                  ·gc.alloc.rate:                   1757.432 MB/sec
[info]                  ·gc.alloc.rate.norm:              366553.405 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.004 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.881 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.582 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 280861.130 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 7546.997 ops/s
[info]                  ·gc.alloc.rate:                   1757.585 MB/sec
[info]                  ·gc.alloc.rate.norm:              366568.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.004 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.881 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2022.300 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 421777.855 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce":
[info]   7480.123 ±(99.9%) 268.681 ops/s [Average]
[info]   (min, avg, max) = (7404.004, 7480.123, 7546.997), stdev = 69.776
[info]   CI (99.9%): [7211.442, 7748.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1741.873 ±(99.9%) 63.258 MB/sec [Average]
[info]   (min, avg, max) = (1724.308, 1741.873, 1757.585), stdev = 16.428
[info]   CI (99.9%): [1678.615, 1805.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   366550.726 ±(99.9%) 40.434 B/op [Average]
[info]   (min, avg, max) = (366544.055, 366550.726, 366568.058), stdev = 10.500
[info]   CI (99.9%): [366510.293, 366591.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.012 ±(99.9%) 0.074 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.046), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2.479 ±(99.9%) 15.694 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.479, 9.737), stdev = 4.076
[info]   CI (99.9%): [≈ 0, 18.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1748.033 ±(99.9%) 1418.296 MB/sec [Average]
[info]   (min, avg, max) = (1342.569, 1748.033, 2022.300), stdev = 368.327
[info]   CI (99.9%): [329.736, 3166.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   367833.807 ±(99.9%) 297912.566 B/op [Average]
[info]   (min, avg, max) = (280861.130, 367833.807, 427323.364), stdev = 77366.947
[info]   CI (99.9%): [69921.241, 665746.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava
[info] # Run progress: 67.27% complete, ETA 00:43:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 567.697 ops/s
[info] # Warmup Iteration   2: 11302.791 ops/s
[info] # Warmup Iteration   3: 11215.611 ops/s
[info] # Warmup Iteration   4: 11338.910 ops/s
[info] # Warmup Iteration   5: 11262.272 ops/s
[info] Iteration   1: 11316.352 ops/s
[info]                  ·gc.alloc.rate:      260.821 MB/sec
[info]                  ·gc.alloc.rate.norm: 36280.036 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 11259.911 ops/s
[info]                  ·gc.alloc.rate:                   259.515 MB/sec
[info]                  ·gc.alloc.rate.norm:              36280.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.015 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.080 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.449 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71500.166 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 11305.597 ops/s
[info]                  ·gc.alloc.rate:      260.548 MB/sec
[info]                  ·gc.alloc.rate.norm: 36280.036 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 11263.980 ops/s
[info]                  ·gc.alloc.rate:                   259.614 MB/sec
[info]                  ·gc.alloc.rate.norm:              36280.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.462 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71474.782 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 11286.082 ops/s
[info]                  ·gc.alloc.rate:      260.100 MB/sec
[info]                  ·gc.alloc.rate.norm: 36280.045 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava":
[info]   11286.385 ±(99.9%) 95.688 ops/s [Average]
[info]   (min, avg, max) = (11259.911, 11286.385, 11316.352), stdev = 24.850
[info]   CI (99.9%): [11190.696, 11382.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   260.120 ±(99.9%) 2.192 MB/sec [Average]
[info]   (min, avg, max) = (259.515, 260.120, 260.821), stdev = 0.569
[info]   CI (99.9%): [257.927, 262.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   36280.039 ±(99.9%) 0.015 B/op [Average]
[info]   (min, avg, max) = (36280.036, 36280.039, 36280.045), stdev = 0.004
[info]   CI (99.9%): [36280.023, 36280.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.003 ±(99.9%) 0.026 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.015), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0.416 ±(99.9%) 3.583 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.416, 2.080), stdev = 0.930
[info]   CI (99.9%): [≈ 0, 3.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   204.582 ±(99.9%) 1078.702 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.582, 511.462), stdev = 280.136
[info]   CI (99.9%): [≈ 0, 1283.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   28594.990 ±(99.9%) 150773.130 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 28594.990, 71500.166), stdev = 39155.303
[info]   CI (99.9%): [≈ 0, 179368.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 3.000), stdev = 1.414
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala
[info] # Run progress: 67.47% complete, ETA 00:43:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7308.196 ops/s
[info] # Warmup Iteration   2: 14557.398 ops/s
[info] # Warmup Iteration   3: 14634.056 ops/s
[info] # Warmup Iteration   4: 14636.655 ops/s
[info] # Warmup Iteration   5: 14568.872 ops/s
[info] Iteration   1: 14723.966 ops/s
[info]                  ·gc.alloc.rate:                   374.044 MB/sec
[info]                  ·gc.alloc.rate.norm:              39992.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.111 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.407 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54678.596 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 15255.430 ops/s
[info]                  ·gc.alloc.rate:      387.607 MB/sec
[info]                  ·gc.alloc.rate.norm: 39992.027 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 15144.690 ops/s
[info]                  ·gc.alloc.rate:                   384.846 MB/sec
[info]                  ·gc.alloc.rate.norm:              39992.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.553 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53159.045 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 15121.569 ops/s
[info]                  ·gc.alloc.rate:                   384.152 MB/sec
[info]                  ·gc.alloc.rate.norm:              39992.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.499 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51.996 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.597 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70124.603 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 15173.149 ops/s
[info]                  ·gc.alloc.rate:      385.460 MB/sec
[info]                  ·gc.alloc.rate.norm: 39992.029 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala":
[info]   15083.761 ±(99.9%) 798.614 ops/s [Average]
[info]   (min, avg, max) = (14723.966, 15083.761, 15255.430), stdev = 207.398
[info]   CI (99.9%): [14285.147, 15882.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   383.222 ±(99.9%) 20.374 MB/sec [Average]
[info]   (min, avg, max) = (374.044, 383.222, 387.607), stdev = 5.291
[info]   CI (99.9%): [362.848, 403.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   39992.029 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (39992.027, 39992.029, 39992.034), stdev = 0.003
[info]   CI (99.9%): [39992.019, 39992.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.851 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.104, 0.499), stdev = 0.221
[info]   CI (99.9%): [≈ 0, 0.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   10.838 ±(99.9%) 88.620 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.838, 51.996), stdev = 23.014
[info]   CI (99.9%): [≈ 0, 99.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   339.311 ±(99.9%) 1219.650 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339.311, 673.597), stdev = 316.739
[info]   CI (99.9%): [≈ 0, 1558.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   35592.449 ±(99.9%) 127696.619 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 35592.449, 70124.603), stdev = 33162.407
[info]   CI (99.9%): [≈ 0, 163289.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 1.000
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala
[info] # Run progress: 67.67% complete, ETA 00:43:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19495.145 ops/s
[info] # Warmup Iteration   2: 21669.946 ops/s
[info] # Warmup Iteration   3: 22689.226 ops/s
[info] # Warmup Iteration   4: 22723.075 ops/s
[info] # Warmup Iteration   5: 22698.752 ops/s
[info] Iteration   1: 22662.243 ops/s
[info]                  ·gc.alloc.rate:      424.598 MB/sec
[info]                  ·gc.alloc.rate.norm: 29496.018 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 22691.518 ops/s
[info]                  ·gc.alloc.rate:                   425.174 MB/sec
[info]                  ·gc.alloc.rate.norm:              29496.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.441 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35480.741 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 22318.775 ops/s
[info]                  ·gc.alloc.rate:                   418.182 MB/sec
[info]                  ·gc.alloc.rate.norm:              29496.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.046 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.240 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.436 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36073.570 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 22068.462 ops/s
[info]                  ·gc.alloc.rate:                   413.618 MB/sec
[info]                  ·gc.alloc.rate.norm:              29496.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.371 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     240.365 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.752 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48118.120 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 21870.827 ops/s
[info]                  ·gc.alloc.rate:      409.795 MB/sec
[info]                  ·gc.alloc.rate.norm: 29496.019 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala":
[info]   22322.365 ±(99.9%) 1388.579 ops/s [Average]
[info]   (min, avg, max) = (21870.827, 22322.365, 22691.518), stdev = 360.610
[info]   CI (99.9%): [20933.786, 23710.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   418.273 ±(99.9%) 25.915 MB/sec [Average]
[info]   (min, avg, max) = (409.795, 418.273, 425.174), stdev = 6.730
[info]   CI (99.9%): [392.358, 444.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   29496.018 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (29496.018, 29496.018, 29496.019), stdev = 0.001
[info]   CI (99.9%): [29496.017, 29496.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.683 ±(99.9%) 5.785 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.683, 3.371), stdev = 1.502
[info]   CI (99.9%): [≈ 0, 6.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   48.721 ±(99.9%) 412.564 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 48.721, 240.365), stdev = 107.142
[info]   CI (99.9%): [≈ 0, 461.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   339.526 ±(99.9%) 1220.782 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339.526, 674.752), stdev = 317.033
[info]   CI (99.9%): [≈ 0, 1560.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   23934.486 ±(99.9%) 86344.642 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 23934.486, 48118.120), stdev = 22423.429
[info]   CI (99.9%): [≈ 0, 110279.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson
[info] # Run progress: 67.87% complete, ETA 00:43:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 925.386 ops/s
[info] # Warmup Iteration   2: 2367.171 ops/s
[info] # Warmup Iteration   3: 2429.155 ops/s
[info] # Warmup Iteration   4: 2428.676 ops/s
[info] # Warmup Iteration   5: 2453.065 ops/s
[info] Iteration   1: 2442.945 ops/s
[info]                  ·gc.alloc.rate:                   1551.531 MB/sec
[info]                  ·gc.alloc.rate.norm:              999800.167 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26.815 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.583 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 869665.938 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 2450.572 ops/s
[info]                  ·gc.alloc.rate:                   1556.868 MB/sec
[info]                  ·gc.alloc.rate.norm:              999800.166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.690 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 868037.823 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 2436.928 ops/s
[info]                  ·gc.alloc.rate:                   1547.782 MB/sec
[info]                  ·gc.alloc.rate.norm:              999800.180 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26.881 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.782 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1310504.952 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2438.473 ops/s
[info]                  ·gc.alloc.rate:                   1548.896 MB/sec
[info]                  ·gc.alloc.rate.norm:              999800.167 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.494 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 873670.085 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 2455.661 ops/s
[info]                  ·gc.alloc.rate:                   1559.726 MB/sec
[info]                  ·gc.alloc.rate.norm:              999800.166 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26.673 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.859 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 868478.698 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson":
[info]   2444.916 ±(99.9%) 30.844 ops/s [Average]
[info]   (min, avg, max) = (2436.928, 2444.916, 2455.661), stdev = 8.010
[info]   CI (99.9%): [2414.072, 2475.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1552.961 ±(99.9%) 19.861 MB/sec [Average]
[info]   (min, avg, max) = (1547.782, 1552.961, 1559.726), stdev = 5.158
[info]   CI (99.9%): [1533.100, 1572.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   999800.169 ±(99.9%) 0.024 B/op [Average]
[info]   (min, avg, max) = (999800.166, 999800.169, 999800.180), stdev = 0.006
[info]   CI (99.9%): [999800.146, 999800.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   16.074 ±(99.9%) 56.503 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.074, 26.881), stdev = 14.674
[info]   CI (99.9%): [≈ 0, 72.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1487.682 ±(99.9%) 1164.784 MB/sec [Average]
[info]   (min, avg, max) = (1349.583, 1487.682, 2028.782), stdev = 302.491
[info]   CI (99.9%): [322.898, 2652.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   958071.499 ±(99.9%) 758687.804 B/op [Average]
[info]   (min, avg, max) = (868037.823, 958071.499, 1310504.952), stdev = 197028.813
[info]   CI (99.9%): [199383.695, 1716759.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle
[info] # Run progress: 68.07% complete, ETA 00:42:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6372.988 ops/s
[info] # Warmup Iteration   2: 8041.408 ops/s
[info] # Warmup Iteration   3: 7933.798 ops/s
[info] # Warmup Iteration   4: 8033.117 ops/s
[info] # Warmup Iteration   5: 8073.088 ops/s
[info] Iteration   1: 8092.488 ops/s
[info]                  ·gc.alloc.rate:                   993.337 MB/sec
[info]                  ·gc.alloc.rate.norm:              193248.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.144 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.648 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 261399.181 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 8030.884 ops/s
[info]                  ·gc.alloc.rate:                   986.098 MB/sec
[info]                  ·gc.alloc.rate.norm:              193248.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.743 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 131447.284 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 7915.241 ops/s
[info]                  ·gc.alloc.rate:                   971.687 MB/sec
[info]                  ·gc.alloc.rate.norm:              193254.250 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.138 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.038 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 266712.814 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 7962.902 ops/s
[info]                  ·gc.alloc.rate:                   977.687 MB/sec
[info]                  ·gc.alloc.rate.norm:              193272.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.617 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 132569.496 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 8078.386 ops/s
[info]                  ·gc.alloc.rate:                   991.883 MB/sec
[info]                  ·gc.alloc.rate.norm:              193272.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.254 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 130796.264 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle":
[info]   8015.980 ±(99.9%) 291.581 ops/s [Average]
[info]   (min, avg, max) = (7915.241, 8015.980, 8092.488), stdev = 75.723
[info]   CI (99.9%): [7724.399, 8307.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.alloc.rate":
[info]   984.138 ±(99.9%) 35.766 MB/sec [Average]
[info]   (min, avg, max) = (971.687, 984.138, 993.337), stdev = 9.288
[info]   CI (99.9%): [948.372, 1019.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   193258.892 ±(99.9%) 47.276 B/op [Average]
[info]   (min, avg, max) = (193248.051, 193258.892, 193272.054), stdev = 12.278
[info]   CI (99.9%): [193211.616, 193306.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   4.067 ±(99.9%) 19.091 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.067, 12.144), stdev = 4.958
[info]   CI (99.9%): [≈ 0, 23.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   939.460 ±(99.9%) 1416.196 MB/sec [Average]
[info]   (min, avg, max) = (670.617, 939.460, 1343.648), stdev = 367.782
[info]   CI (99.9%): [≈ 0, 2355.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   184585.008 ±(99.9%) 279456.049 B/op [Average]
[info]   (min, avg, max) = (130796.264, 184585.008, 266712.814), stdev = 72573.849
[info]   CI (99.9%): [≈ 0, 464041.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce
[info] # Run progress: 68.27% complete, ETA 00:42:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5433.128 ops/s
[info] # Warmup Iteration   2: 7957.005 ops/s
[info] # Warmup Iteration   3: 8051.925 ops/s
[info] # Warmup Iteration   4: 7919.911 ops/s
[info] # Warmup Iteration   5: 8022.870 ops/s
[info] Iteration   1: 8039.362 ops/s
[info]                  ·gc.alloc.rate:                   1547.616 MB/sec
[info]                  ·gc.alloc.rate.norm:              303088.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16.300 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2017.562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 395123.154 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 8083.407 ops/s
[info]                  ·gc.alloc.rate:                   1556.557 MB/sec
[info]                  ·gc.alloc.rate.norm:              303088.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20.260 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.115 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 262306.077 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 7943.974 ops/s
[info]                  ·gc.alloc.rate:                   1529.473 MB/sec
[info]                  ·gc.alloc.rate.norm:              303088.422 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.494 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 267224.566 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 7886.133 ops/s
[info]                  ·gc.alloc.rate:                   1519.184 MB/sec
[info]                  ·gc.alloc.rate.norm:              303146.142 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026.261 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 404331.118 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 7900.202 ops/s
[info]                  ·gc.alloc.rate:                   1521.768 MB/sec
[info]                  ·gc.alloc.rate.norm:              303136.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20.731 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.785 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 269474.612 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce":
[info]   7970.616 ±(99.9%) 334.879 ops/s [Average]
[info]   (min, avg, max) = (7886.133, 7970.616, 8083.407), stdev = 86.967
[info]   CI (99.9%): [7635.737, 8305.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate":
[info]   1534.920 ±(99.9%) 63.261 MB/sec [Average]
[info]   (min, avg, max) = (1519.184, 1534.920, 1556.557), stdev = 16.429
[info]   CI (99.9%): [1471.658, 1598.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   303109.344 ±(99.9%) 112.459 B/op [Average]
[info]   (min, avg, max) = (303088.051, 303109.344, 303146.142), stdev = 29.205
[info]   CI (99.9%): [302996.886, 303221.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.207 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.104), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   11.458 ±(99.9%) 40.819 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.458, 20.731), stdev = 10.601
[info]   CI (99.9%): [≈ 0, 52.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1618.443 ±(99.9%) 1418.320 MB/sec [Average]
[info]   (min, avg, max) = (1347.115, 1618.443, 2026.261), stdev = 368.333
[info]   CI (99.9%): [200.123, 3036.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   319691.905 ±(99.9%) 281791.120 B/op [Average]
[info]   (min, avg, max) = (262306.077, 319691.905, 404331.118), stdev = 73180.259
[info]   CI (99.9%): [37900.786, 601483.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava
[info] # Run progress: 68.47% complete, ETA 00:42:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5725.429 ops/s
[info] # Warmup Iteration   2: 53840.719 ops/s
[info] # Warmup Iteration   3: 55257.499 ops/s
[info] # Warmup Iteration   4: 55484.631 ops/s
[info] # Warmup Iteration   5: 55471.021 ops/s
[info] Iteration   1: 55112.927 ops/s
[info]                  ·gc.alloc.rate:                   515.049 MB/sec
[info]                  ·gc.alloc.rate.norm:              14712.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.433 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14608.732 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 55307.495 ops/s
[info]                  ·gc.alloc.rate:                   516.926 MB/sec
[info]                  ·gc.alloc.rate.norm:              14712.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.933 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83.473 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.894 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19179.419 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 54590.641 ops/s
[info]                  ·gc.alloc.rate:      510.186 MB/sec
[info]                  ·gc.alloc.rate.norm: 14712.007 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 54660.889 ops/s
[info]                  ·gc.alloc.rate:                   510.857 MB/sec
[info]                  ·gc.alloc.rate.norm:              14712.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.950 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19408.840 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 54531.530 ops/s
[info]                  ·gc.alloc.rate:                   509.614 MB/sec
[info]                  ·gc.alloc.rate.norm:              14712.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.601 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.901 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19397.070 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava":
[info]   54840.696 ±(99.9%) 1337.306 ops/s [Average]
[info]   (min, avg, max) = (54531.530, 54840.696, 55307.495), stdev = 347.294
[info]   CI (99.9%): [53503.390, 56178.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   512.526 ±(99.9%) 12.546 MB/sec [Average]
[info]   (min, avg, max) = (509.614, 512.526, 516.926), stdev = 3.258
[info]   CI (99.9%): [499.980, 525.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   14712.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (14712.007, 14712.008, 14712.008), stdev = 0.001
[info]   CI (99.9%): [14712.006, 14712.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.591 ±(99.9%) 5.042 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.591, 2.933), stdev = 1.309
[info]   CI (99.9%): [≈ 0, 5.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   16.815 ±(99.9%) 143.490 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.815, 83.473), stdev = 37.264
[info]   CI (99.9%): [≈ 0, 160.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   506.236 ±(99.9%) 1122.619 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506.236, 673.950), stdev = 291.541
[info]   CI (99.9%): [≈ 0, 1628.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   14518.812 ±(99.9%) 32230.317 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14518.812, 19408.840), stdev = 8370.111
[info]   CI (99.9%): [≈ 0, 46749.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.140
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala
[info] # Run progress: 68.67% complete, ETA 00:42:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_6a03406e/target/1bdf7fe1/jackson-module-afterburner-2.9.5.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 21717.196 ops/s
[info] # Warmup Iteration   2: 38368.977 ops/s
[info] # Warmup Iteration   3: 39088.509 ops/s
[info] # Warmup Iteration   4: 39618.887 ops/s
[info] # Warmup Iteration   5: 39939.616 ops/s
[info] Iteration   1: 39916.346 ops/s
[info]                  ·gc.alloc.rate:                   594.158 MB/sec
[info]                  ·gc.alloc.rate.norm:              23431.730 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.730 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28.793 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.643 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26566.342 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 39849.536 ops/s
[info]                  ·gc.alloc.rate:                   593.182 MB/sec
[info]                  ·gc.alloc.rate.norm:              23431.918 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.661 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26611.000 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 39839.062 ops/s
[info]                  ·gc.alloc.rate:      593.026 MB/sec
[info]                  ·gc.alloc.rate.norm: 23431.880 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 39799.772 ops/s
[info]                  ·gc.alloc.rate:                   592.460 MB/sec
[info]                  ·gc.alloc.rate.norm:              23431.865 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.469 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.970 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26655.587 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 39809.952 ops/s
[info]                  ·gc.alloc.rate:                   592.536 MB/sec
[info]                  ·gc.alloc.rate.norm:              23431.711 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.874 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26648.224 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala":
[info]   39842.934 ±(99.9%) 176.444 ops/s [Average]
[info]   (min, avg, max) = (39799.772, 39842.934, 39916.346), stdev = 45.822
[info]   CI (99.9%): [39666.489, 40019.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   593.073 ±(99.9%) 2.623 MB/sec [Average]
[info]   (min, avg, max) = (592.460, 593.073, 594.158), stdev = 0.681
[info]   CI (99.9%): [590.449, 595.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   23431.821 ±(99.9%) 0.361 B/op [Average]
[info]   (min, avg, max) = (23431.711, 23431.821, 23431.918), stdev = 0.094
[info]   CI (99.9%): [23431.459, 23432.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.159 ±(99.9%) 1.235 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.159, 0.730), stdev = 0.321
[info]   CI (99.9%): [≈ 0, 1.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   6.252 ±(99.9%) 48.694 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.252, 28.793), stdev = 12.646
[info]   CI (99.9%): [≈ 0, 54.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   539.030 ±(99.9%) 1160.302 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.030, 673.970), stdev = 301.327
[info]   CI (99.9%): [≈ 0, 1699.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   21296.230 ±(99.9%) 45841.945 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21296.230, 26655.587), stdev = 11905.007
[info]   CI (99.9%): [≈ 0, 67138.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala
[info] # Run progress: 68.88% complete, ETA 00:41:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 65136.210 ops/s
[info] # Warmup Iteration   2: 74560.201 ops/s
[info] # Warmup Iteration   3: 73358.117 ops/s
[info] # Warmup Iteration   4: 74403.477 ops/s
[info] # Warmup Iteration   5: 73625.029 ops/s
[info] Iteration   1: 72502.182 ops/s
[info]                  ·gc.alloc.rate:                   544.900 MB/sec
[info]                  ·gc.alloc.rate.norm:              11832.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.020 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.443 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11105.376 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 72202.854 ops/s
[info]                  ·gc.alloc.rate:                   542.742 MB/sec
[info]                  ·gc.alloc.rate.norm:              11832.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.415 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74.445 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.071 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14695.049 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 72684.689 ops/s
[info]                  ·gc.alloc.rate:                   546.473 MB/sec
[info]                  ·gc.alloc.rate.norm:              11832.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.352 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.178 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14597.011 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 72653.319 ops/s
[info]                  ·gc.alloc.rate:      546.079 MB/sec
[info]                  ·gc.alloc.rate.norm: 11832.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 72803.278 ops/s
[info]                  ·gc.alloc.rate:                   547.203 MB/sec
[info]                  ·gc.alloc.rate.norm:              11832.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.977 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14529.955 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala":
[info]   72569.265 ±(99.9%) 890.463 ops/s [Average]
[info]   (min, avg, max) = (72202.854, 72569.265, 72803.278), stdev = 231.250
[info]   CI (99.9%): [71678.802, 73459.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   545.480 ±(99.9%) 6.711 MB/sec [Average]
[info]   (min, avg, max) = (542.742, 545.480, 547.203), stdev = 1.743
[info]   CI (99.9%): [538.769, 552.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   11832.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11832.006, 11832.006, 11832.006), stdev = 0.001
[info]   CI (99.9%): [11832.005, 11832.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.700 ±(99.9%) 5.846 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.700, 3.415), stdev = 1.518
[info]   CI (99.9%): [≈ 0, 6.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   15.248 ±(99.9%) 127.443 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.248, 74.445), stdev = 33.097
[info]   CI (99.9%): [≈ 0, 142.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   506.333 ±(99.9%) 1122.886 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506.333, 674.178), stdev = 291.610
[info]   CI (99.9%): [≈ 0, 1629.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   10985.478 ±(99.9%) 24358.367 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10985.478, 14695.049), stdev = 6325.791
[info]   CI (99.9%): [≈ 0, 35343.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.517
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 69.08% complete, ETA 00:41:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 90892.394 ops/s
[info] # Warmup Iteration   2: 99422.885 ops/s
[info] # Warmup Iteration   3: 99715.074 ops/s
[info] # Warmup Iteration   4: 99710.710 ops/s
[info] # Warmup Iteration   5: 99159.810 ops/s
[info] Iteration   1: 99478.009 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 99947.852 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 99818.499 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 99804.547 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 99604.101 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   99730.602 ±(99.9%) 720.896 ops/s [Average]
[info]   (min, avg, max) = (99478.009, 99730.602, 99947.852), stdev = 187.214
[info]   CI (99.9%): [99009.706, 100451.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.004, 0.004, 0.004), stdev = 0.001
[info]   CI (99.9%): [0.004, 0.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson
[info] # Run progress: 69.28% complete, ETA 00:41:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2539.420 ops/s
[info] # Warmup Iteration   2: 5408.091 ops/s
[info] # Warmup Iteration   3: 5581.330 ops/s
[info] # Warmup Iteration   4: 5543.543 ops/s
[info] # Warmup Iteration   5: 5583.422 ops/s
[info] Iteration   1: 5599.904 ops/s
[info]                  ·gc.alloc.rate:                   1649.504 MB/sec
[info]                  ·gc.alloc.rate.norm:              463663.536 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.773 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 379692.327 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 5611.870 ops/s
[info]                  ·gc.alloc.rate:                   1652.838 MB/sec
[info]                  ·gc.alloc.rate.norm:              463662.786 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17.511 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.610 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 379160.898 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 5575.781 ops/s
[info]                  ·gc.alloc.rate:                   1642.785 MB/sec
[info]                  ·gc.alloc.rate.norm:              463664.697 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.749 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.746 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 572881.922 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 5597.305 ops/s
[info]                  ·gc.alloc.rate:                   1648.724 MB/sec
[info]                  ·gc.alloc.rate.norm:              463663.561 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.520 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 380925.805 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 5536.169 ops/s
[info]                  ·gc.alloc.rate:                   1630.619 MB/sec
[info]                  ·gc.alloc.rate.norm:              463663.831 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.917 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.931 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 578345.141 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson":
[info]   5584.206 ±(99.9%) 114.905 ops/s [Average]
[info]   (min, avg, max) = (5536.169, 5584.206, 5611.870), stdev = 29.841
[info]   CI (99.9%): [5469.300, 5699.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1644.894 ±(99.9%) 33.749 MB/sec [Average]
[info]   (min, avg, max) = (1630.619, 1644.894, 1652.838), stdev = 8.764
[info]   CI (99.9%): [1611.145, 1678.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   463663.682 ±(99.9%) 2.648 B/op [Average]
[info]   (min, avg, max) = (463662.786, 463663.682, 463664.697), stdev = 0.688
[info]   CI (99.9%): [463661.034, 463666.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   7.035 ±(99.9%) 29.338 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.035, 17.511), stdev = 7.619
[info]   CI (99.9%): [≈ 0, 36.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1624.116 ±(99.9%) 1433.224 MB/sec [Average]
[info]   (min, avg, max) = (1350.773, 1624.116, 2033.931), stdev = 372.204
[info]   CI (99.9%): [190.893, 3057.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   458201.219 ±(99.9%) 412795.197 B/op [Average]
[info]   (min, avg, max) = (379160.898, 458201.219, 578345.141), stdev = 107201.602
[info]   CI (99.9%): [45406.022, 870996.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle
[info] # Run progress: 69.48% complete, ETA 00:40:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4022.730 ops/s
[info] # Warmup Iteration   2: 4459.432 ops/s
[info] # Warmup Iteration   3: 4295.451 ops/s
[info] # Warmup Iteration   4: 4458.688 ops/s
[info] # Warmup Iteration   5: 4509.414 ops/s
[info] Iteration   1: 4528.641 ops/s
[info]                  ·gc.alloc.rate:      251.132 MB/sec
[info]                  ·gc.alloc.rate.norm: 87296.090 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 4457.860 ops/s
[info]                  ·gc.alloc.rate:                   247.195 MB/sec
[info]                  ·gc.alloc.rate.norm:              87296.092 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.019 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.732 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.410 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 180602.460 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 4503.918 ops/s
[info]                  ·gc.alloc.rate:      249.740 MB/sec
[info]                  ·gc.alloc.rate.norm: 87296.098 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 4281.458 ops/s
[info]                  ·gc.alloc.rate:                   237.437 MB/sec
[info]                  ·gc.alloc.rate.norm:              87296.095 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.406 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 188023.901 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 4502.913 ops/s
[info]                  ·gc.alloc.rate:      249.717 MB/sec
[info]                  ·gc.alloc.rate.norm: 87296.091 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle":
[info]   4454.958 ±(99.9%) 386.202 ops/s [Average]
[info]   (min, avg, max) = (4281.458, 4454.958, 4528.641), stdev = 100.295
[info]   CI (99.9%): [4068.756, 4841.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.alloc.rate":
[info]   247.044 ±(99.9%) 21.392 MB/sec [Average]
[info]   (min, avg, max) = (237.437, 247.044, 251.132), stdev = 5.555
[info]   CI (99.9%): [225.652, 268.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   87296.093 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (87296.090, 87296.093, 87296.098), stdev = 0.003
[info]   CI (99.9%): [87296.080, 87296.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0.004 ±(99.9%) 0.033 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.019), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   1.346 ±(99.9%) 11.592 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.346, 6.732), stdev = 3.010
[info]   CI (99.9%): [≈ 0, 12.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   204.563 ±(99.9%) 1078.603 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.563, 511.410), stdev = 280.110
[info]   CI (99.9%): [≈ 0, 1283.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   73725.272 ±(99.9%) 388863.360 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 73725.272, 188023.901), stdev = 100986.580
[info]   CI (99.9%): [≈ 0, 462588.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 1.095
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce
[info] # Run progress: 69.68% complete, ETA 00:40:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3524961.490 ops/s
[info] # Warmup Iteration   2: 5248362.035 ops/s
[info] # Warmup Iteration   3: 5243035.175 ops/s
[info] # Warmup Iteration   4: 5261028.914 ops/s
[info] # Warmup Iteration   5: 5261393.781 ops/s
[info] Iteration   1: 5227066.478 ops/s
[info]                  ·gc.alloc.rate:                   3240.103 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3376.898 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1017.206 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 5319258.465 ops/s
[info]                  ·gc.alloc.rate:                   3297.859 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2707.828 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 801.380 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 5287388.434 ops/s
[info]                  ·gc.alloc.rate:                   3277.935 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3391.123 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1009.702 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 5276281.954 ops/s
[info]                  ·gc.alloc.rate:                   3271.492 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3396.503 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1013.295 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 5280715.341 ops/s
[info]                  ·gc.alloc.rate:                   3273.628 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3399.365 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1013.487 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce":
[info]   5278142.134 ±(99.9%) 127636.664 ops/s [Average]
[info]   (min, avg, max) = (5227066.478, 5278142.134, 5319258.465), stdev = 33146.836
[info]   CI (99.9%): [5150505.471, 5405778.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate":
[info]   3272.203 ±(99.9%) 79.942 MB/sec [Average]
[info]   (min, avg, max) = (3240.103, 3272.203, 3297.859), stdev = 20.761
[info]   CI (99.9%): [3192.261, 3352.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   976.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (976.000, 976.000, 976.000), stdev = 0.001
[info]   CI (99.9%): [976.000, 976.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.022 ±(99.9%) 0.032 B/op [Average]
[info]   (min, avg, max) = (0.012, 0.022, 0.031), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   3254.343 ±(99.9%) 1176.888 MB/sec [Average]
[info]   (min, avg, max) = (2707.828, 3254.343, 3399.365), stdev = 305.634
[info]   CI (99.9%): [2077.456, 4431.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   971.014 ±(99.9%) 365.293 B/op [Average]
[info]   (min, avg, max) = (801.380, 971.014, 1017.206), stdev = 94.865
[info]   CI (99.9%): [605.722, 1336.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava
[info] # Run progress: 69.88% complete, ETA 00:40:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.890 ops/s
[info] # Warmup Iteration   2: 34614399.558 ops/s
[info] # Warmup Iteration   3: 38037288.483 ops/s
[info] # Warmup Iteration   4: 42657827.592 ops/s
[info] # Warmup Iteration   5: 42722393.033 ops/s
[info] Iteration   1: 42634862.693 ops/s
[info]                  ·gc.alloc.rate:                   433.309 MB/sec
[info]                  ·gc.alloc.rate.norm:              16.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     ≈ 10⁻³ B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.411 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.884 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 42714026.223 ops/s
[info]                  ·gc.alloc.rate:                   434.181 MB/sec
[info]                  ·gc.alloc.rate.norm:              16.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.545 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.851 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 42657236.381 ops/s
[info]                  ·gc.alloc.rate:      433.553 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 42553893.690 ops/s
[info]                  ·gc.alloc.rate:                   432.519 MB/sec
[info]                  ·gc.alloc.rate.norm:              16.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.546 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.094 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.282 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24.906 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 42820443.966 ops/s
[info]                  ·gc.alloc.rate:      435.167 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava":
[info]   42676092.591 ±(99.9%) 381506.870 ops/s [Average]
[info]   (min, avg, max) = (42553893.690, 42676092.591, 42820443.966), stdev = 99076.123
[info]   CI (99.9%): [42294585.720, 43057599.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   433.746 ±(99.9%) 3.823 MB/sec [Average]
[info]   (min, avg, max) = (432.519, 433.746, 435.167), stdev = 0.993
[info]   CI (99.9%): [429.922, 437.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   16.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.000, 16.000, 16.000), stdev = 0.001
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.511 ±(99.9%) 4.380 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.511, 2.546), stdev = 1.137
[info]   CI (99.9%): [≈ 0, 4.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0.019 ±(99.9%) 0.162 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.094), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   339.247 ±(99.9%) 1219.328 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339.247, 673.282), stdev = 316.656
[info]   CI (99.9%): [≈ 0, 1558.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   12.528 ±(99.9%) 45.050 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.528, 24.906), stdev = 11.699
[info]   CI (99.9%): [≈ 0, 57.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala
[info] # Run progress: 70.08% complete, ETA 00:40:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3766952.041 ops/s
[info] # Warmup Iteration   2: 8866088.070 ops/s
[info] # Warmup Iteration   3: 8880299.269 ops/s
[info] # Warmup Iteration   4: 8916845.763 ops/s
[info] # Warmup Iteration   5: 8932282.489 ops/s
[info] Iteration   1: 8815305.919 ops/s
[info]                  ·gc.alloc.rate:                   3314.728 MB/sec
[info]                  ·gc.alloc.rate.norm:              592.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3389.420 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 605.340 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 8968047.790 ops/s
[info]                  ·gc.alloc.rate:                   3372.012 MB/sec
[info]                  ·gc.alloc.rate.norm:              592.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3394.709 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 595.985 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 8802531.479 ops/s
[info]                  ·gc.alloc.rate:                   3310.046 MB/sec
[info]                  ·gc.alloc.rate.norm:              592.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3398.601 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 607.838 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 8924836.377 ops/s
[info]                  ·gc.alloc.rate:                   3356.240 MB/sec
[info]                  ·gc.alloc.rate.norm:              592.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3402.369 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 600.137 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 8925476.765 ops/s
[info]                  ·gc.alloc.rate:                   3356.489 MB/sec
[info]                  ·gc.alloc.rate.norm:              592.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2722.243 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 480.135 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala":
[info]   8887239.666 ±(99.9%) 283979.979 ops/s [Average]
[info]   (min, avg, max) = (8802531.479, 8887239.666, 8968047.790), stdev = 73748.699
[info]   CI (99.9%): [8603259.687, 9171219.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   3341.903 ±(99.9%) 106.821 MB/sec [Average]
[info]   (min, avg, max) = (3310.046, 3341.903, 3372.012), stdev = 27.741
[info]   CI (99.9%): [3235.082, 3448.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   592.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (592.000, 592.000, 592.000), stdev = 0.001
[info]   CI (99.9%): [592.000, 592.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.079, 0.104), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.014 ±(99.9%) 0.023 B/op [Average]
[info]   (min, avg, max) = (0.004, 0.014, 0.018), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   3261.468 ±(99.9%) 1160.870 MB/sec [Average]
[info]   (min, avg, max) = (2722.243, 3261.468, 3402.369), stdev = 301.474
[info]   CI (99.9%): [2100.598, 4422.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   577.887 ±(99.9%) 211.161 B/op [Average]
[info]   (min, avg, max) = (480.135, 577.887, 607.838), stdev = 54.838
[info]   CI (99.9%): [366.726, 789.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 4.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala
[info] # Run progress: 70.28% complete, ETA 00:39:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 50410911.694 ops/s
[info] # Warmup Iteration   2: 50787338.524 ops/s
[info] # Warmup Iteration   3: 52329176.730 ops/s
[info] # Warmup Iteration   4: 52557277.961 ops/s
[info] # Warmup Iteration   5: 52427248.280 ops/s
[info] Iteration   1: 52591484.583 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 52726223.091 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 52510963.978 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 52490113.157 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 52362870.675 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala":
[info]   52536331.097 ±(99.9%) 516506.807 ops/s [Average]
[info]   (min, avg, max) = (52362870.675, 52536331.097, 52726223.091), stdev = 134135.177
[info]   CI (99.9%): [52019824.290, 53052837.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala
[info] # Run progress: 70.48% complete, ETA 00:39:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26989884.966 ops/s
[info] # Warmup Iteration   2: 33061307.884 ops/s
[info] # Warmup Iteration   3: 35052981.670 ops/s
[info] # Warmup Iteration   4: 35596380.826 ops/s
[info] # Warmup Iteration   5: 35583750.958 ops/s
[info] Iteration   1: 35596200.689 ops/s
[info]                  ·gc.alloc.rate:                   1266.151 MB/sec
[info]                  ·gc.alloc.rate.norm:              56.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.838 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59.436 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 35678571.380 ops/s
[info]                  ·gc.alloc.rate:                   1269.240 MB/sec
[info]                  ·gc.alloc.rate.norm:              56.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.668 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59.240 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 35943134.296 ops/s
[info]                  ·gc.alloc.rate:                   1278.576 MB/sec
[info]                  ·gc.alloc.rate.norm:              56.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.903 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58.861 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 35704772.648 ops/s
[info]                  ·gc.alloc.rate:                   1270.127 MB/sec
[info]                  ·gc.alloc.rate.norm:              56.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.253 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29.640 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 36066913.901 ops/s
[info]                  ·gc.alloc.rate:                   1282.991 MB/sec
[info]                  ·gc.alloc.rate.norm:              56.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.149 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58.713 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala":
[info]   35797918.583 ±(99.9%) 763010.982 ops/s [Average]
[info]   (min, avg, max) = (35596200.689, 35797918.583, 36066913.901), stdev = 198151.529
[info]   CI (99.9%): [35034907.601, 36560929.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate":
[info]   1273.417 ±(99.9%) 27.184 MB/sec [Average]
[info]   (min, avg, max) = (1266.151, 1273.417, 1282.991), stdev = 7.059
[info]   CI (99.9%): [1246.233, 1300.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate.norm":
[info]   56.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (56.000, 56.000, 56.000), stdev = 0.001
[info]   CI (99.9%): [56.000, 56.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.002 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space":
[info]   1209.562 ±(99.9%) 1156.604 MB/sec [Average]
[info]   (min, avg, max) = (672.253, 1209.562, 1345.149), stdev = 300.366
[info]   CI (99.9%): [52.958, 2366.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space.norm":
[info]   53.178 ±(99.9%) 50.680 B/op [Average]
[info]   (min, avg, max) = (29.640, 53.178, 59.436), stdev = 13.161
[info]   CI (99.9%): [2.498, 103.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson
[info] # Run progress: 70.68% complete, ETA 00:39:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4052290.363 ops/s
[info] # Warmup Iteration   2: 7395008.739 ops/s
[info] # Warmup Iteration   3: 7611733.307 ops/s
[info] # Warmup Iteration   4: 7560001.081 ops/s
[info] # Warmup Iteration   5: 7608075.596 ops/s
[info] Iteration   1: 7651776.007 ops/s
[info]                  ·gc.alloc.rate:                   3693.803 MB/sec
[info]                  ·gc.alloc.rate.norm:              760.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3375.043 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 694.415 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 7503186.842 ops/s
[info]                  ·gc.alloc.rate:                   3622.384 MB/sec
[info]                  ·gc.alloc.rate.norm:              760.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4063.727 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 852.597 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 7644604.749 ops/s
[info]                  ·gc.alloc.rate:                   3690.766 MB/sec
[info]                  ·gc.alloc.rate.norm:              760.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3393.389 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 698.764 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 7654478.124 ops/s
[info]                  ·gc.alloc.rate:                   3695.245 MB/sec
[info]                  ·gc.alloc.rate.norm:              760.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3397.566 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 698.777 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 7519217.706 ops/s
[info]                  ·gc.alloc.rate:                   3630.264 MB/sec
[info]                  ·gc.alloc.rate.norm:              760.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4081.543 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 854.476 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson":
[info]   7594652.685 ±(99.9%) 294478.621 ops/s [Average]
[info]   (min, avg, max) = (7503186.842, 7594652.685, 7654478.124), stdev = 76475.163
[info]   CI (99.9%): [7300174.064, 7889131.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3666.492 ±(99.9%) 141.742 MB/sec [Average]
[info]   (min, avg, max) = (3622.384, 3666.492, 3695.245), stdev = 36.810
[info]   CI (99.9%): [3524.750, 3808.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   760.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (760.000, 760.000, 760.000), stdev = 0.001
[info]   CI (99.9%): [760.000, 760.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.092, 0.104), stdev = 0.011
[info]   CI (99.9%): [0.048, 0.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.019 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (0.017, 0.019, 0.021), stdev = 0.002
[info]   CI (99.9%): [0.010, 0.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3662.254 ±(99.9%) 1443.120 MB/sec [Average]
[info]   (min, avg, max) = (3375.043, 3662.254, 4081.543), stdev = 374.774
[info]   CI (99.9%): [2219.133, 5105.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   759.806 ±(99.9%) 329.557 B/op [Average]
[info]   (min, avg, max) = (694.415, 759.806, 854.476), stdev = 85.585
[info]   CI (99.9%): [430.248, 1089.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle
[info] # Run progress: 70.88% complete, ETA 00:39:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7548671.645 ops/s
[info] # Warmup Iteration   2: 10017263.478 ops/s
[info] # Warmup Iteration   3: 10134885.092 ops/s
[info] # Warmup Iteration   4: 10206803.176 ops/s
[info] # Warmup Iteration   5: 10127320.160 ops/s
[info] Iteration   1: 10235521.849 ops/s
[info]                  ·gc.alloc.rate:                   4316.690 MB/sec
[info]                  ·gc.alloc.rate.norm:              664.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4745.373 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 729.941 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 10269855.109 ops/s
[info]                  ·gc.alloc.rate:                   4331.747 MB/sec
[info]                  ·gc.alloc.rate.norm:              664.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4077.110 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 624.967 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 10094725.794 ops/s
[info]                  ·gc.alloc.rate:                   4257.885 MB/sec
[info]                  ·gc.alloc.rate.norm:              664.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4081.456 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 636.487 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 10136295.903 ops/s
[info]                  ·gc.alloc.rate:                   4276.630 MB/sec
[info]                  ·gc.alloc.rate.norm:              664.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4084.609 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 634.186 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 10164997.801 ops/s
[info]                  ·gc.alloc.rate:                   4287.584 MB/sec
[info]                  ·gc.alloc.rate.norm:              664.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4768.304 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 738.447 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle":
[info]   10180279.291 ±(99.9%) 276087.617 ops/s [Average]
[info]   (min, avg, max) = (10094725.794, 10180279.291, 10269855.109), stdev = 71699.077
[info]   CI (99.9%): [9904191.675, 10456366.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.alloc.rate":
[info]   4294.107 ±(99.9%) 115.307 MB/sec [Average]
[info]   (min, avg, max) = (4257.885, 4294.107, 4331.747), stdev = 29.945
[info]   CI (99.9%): [4178.800, 4409.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   664.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (664.000, 664.000, 664.000), stdev = 0.001
[info]   CI (99.9%): [664.000, 664.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.104), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0.012 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (0.010, 0.012, 0.016), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   4351.370 ±(99.9%) 1425.657 MB/sec [Average]
[info]   (min, avg, max) = (4077.110, 4351.370, 4768.304), stdev = 370.239
[info]   CI (99.9%): [2925.714, 5777.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   672.806 ±(99.9%) 216.736 B/op [Average]
[info]   (min, avg, max) = (624.967, 672.806, 738.447), stdev = 56.286
[info]   CI (99.9%): [456.070, 889.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce
[info] # Run progress: 71.08% complete, ETA 00:38:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14462985.618 ops/s
[info] # Warmup Iteration   2: 21060991.912 ops/s
[info] # Warmup Iteration   3: 21469840.185 ops/s
[info] # Warmup Iteration   4: 20961979.446 ops/s
[info] # Warmup Iteration   5: 21598283.294 ops/s
[info] Iteration   1: 21360399.386 ops/s
[info]                  ·gc.alloc.rate:                   2387.667 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2688.515 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 198.176 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 21216922.565 ops/s
[info]                  ·gc.alloc.rate:                   2372.045 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020.283 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 149.900 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 21007125.852 ops/s
[info]                  ·gc.alloc.rate:                   2349.124 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2700.220 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 202.305 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 21655544.657 ops/s
[info]                  ·gc.alloc.rate:                   2421.051 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.406 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 147.529 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 21160349.247 ops/s
[info]                  ·gc.alloc.rate:                   2365.599 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2709.290 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 201.571 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce":
[info]   21280068.341 ±(99.9%) 943708.681 ops/s [Average]
[info]   (min, avg, max) = (21007125.852, 21280068.341, 21655544.657), stdev = 245078.147
[info]   CI (99.9%): [20336359.661, 22223777.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate":
[info]   2379.097 ±(99.9%) 104.817 MB/sec [Average]
[info]   (min, avg, max) = (2349.124, 2379.097, 2421.051), stdev = 27.221
[info]   CI (99.9%): [2274.279, 2483.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   176.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (176.000, 176.000, 176.000), stdev = 0.001
[info]   CI (99.9%): [176.000, 176.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.104), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.005 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.008), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   2429.543 ±(99.9%) 1422.908 MB/sec [Average]
[info]   (min, avg, max) = (2020.283, 2429.543, 2709.290), stdev = 369.525
[info]   CI (99.9%): [1006.635, 3852.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   179.896 ±(99.9%) 109.819 B/op [Average]
[info]   (min, avg, max) = (147.529, 179.896, 202.305), stdev = 28.520
[info]   CI (99.9%): [70.077, 289.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava
[info] # Run progress: 71.29% complete, ETA 00:38:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.947 ops/s
[info] # Warmup Iteration   2: 54839363.805 ops/s
[info] # Warmup Iteration   3: 54947919.624 ops/s
[info] # Warmup Iteration   4: 58109728.964 ops/s
[info] # Warmup Iteration   5: 57526072.495 ops/s
[info] Iteration   1: 57946473.627 ops/s
[info]                  ·gc.alloc.rate:                   1766.918 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2016.280 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54.774 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 57973749.452 ops/s
[info]                  ·gc.alloc.rate:                   1767.715 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.217 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36.528 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 57886223.105 ops/s
[info]                  ·gc.alloc.rate:                   1764.988 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54.937 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 57648065.467 ops/s
[info]                  ·gc.alloc.rate:                   1757.639 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.302 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55.255 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 57886983.570 ops/s
[info]                  ·gc.alloc.rate:                   1764.990 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.503 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36.728 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava":
[info]   57868299.044 ±(99.9%) 496136.702 ops/s [Average]
[info]   (min, avg, max) = (57648065.467, 57868299.044, 57973749.452), stdev = 128845.126
[info]   CI (99.9%): [57372162.342, 58364435.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   1764.450 ±(99.9%) 15.370 MB/sec [Average]
[info]   (min, avg, max) = (1757.639, 1764.450, 1767.715), stdev = 3.992
[info]   CI (99.9%): [1749.080, 1779.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.104, 0.125), stdev = 0.015
[info]   CI (99.9%): [0.047, 0.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0.003 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.003, 0.003), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   1751.077 ±(99.9%) 1417.414 MB/sec [Average]
[info]   (min, avg, max) = (1345.217, 1751.077, 2023.302), stdev = 368.098
[info]   CI (99.9%): [333.663, 3168.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   47.644 ±(99.9%) 38.732 B/op [Average]
[info]   (min, avg, max) = (36.528, 47.644, 55.255), stdev = 10.059
[info]   CI (99.9%): [8.912, 86.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala
[info] # Run progress: 71.49% complete, ETA 00:38:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4571906.705 ops/s
[info] # Warmup Iteration   2: 13288334.472 ops/s
[info] # Warmup Iteration   3: 12421092.710 ops/s
[info] # Warmup Iteration   4: 13135306.214 ops/s
[info] # Warmup Iteration   5: 13182733.554 ops/s
[info] Iteration   1: 13169620.980 ops/s
[info]                  ·gc.alloc.rate:                   2609.990 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2710.841 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 324.056 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 12990805.785 ops/s
[info]                  ·gc.alloc.rate:                   2574.700 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2714.509 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 328.942 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 12863786.779 ops/s
[info]                  ·gc.alloc.rate:                   2549.364 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2717.551 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 332.583 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 13177318.360 ops/s
[info]                  ·gc.alloc.rate:                   2611.621 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2719.676 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 324.909 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 13122670.444 ops/s
[info]                  ·gc.alloc.rate:                   2600.775 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2722.390 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 326.589 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala":
[info]   13064840.470 ±(99.9%) 519759.407 ops/s [Average]
[info]   (min, avg, max) = (12863786.779, 13064840.470, 13177318.360), stdev = 134979.867
[info]   CI (99.9%): [12545081.063, 13584599.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2589.290 ±(99.9%) 103.073 MB/sec [Average]
[info]   (min, avg, max) = (2549.364, 2589.290, 2611.621), stdev = 26.768
[info]   CI (99.9%): [2486.218, 2692.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   312.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (312.000, 312.000, 312.000), stdev = 0.001
[info]   CI (99.9%): [312.000, 312.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.075, 0.083), stdev = 0.011
[info]   CI (99.9%): [0.031, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.009 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (0.007, 0.009, 0.010), stdev = 0.001
[info]   CI (99.9%): [0.004, 0.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   2716.993 ±(99.9%) 17.291 MB/sec [Average]
[info]   (min, avg, max) = (2710.841, 2716.993, 2722.390), stdev = 4.490
[info]   CI (99.9%): [2699.703, 2734.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   327.416 ±(99.9%) 13.240 B/op [Average]
[info]   (min, avg, max) = (324.056, 327.416, 332.583), stdev = 3.438
[info]   CI (99.9%): [314.176, 340.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala
[info] # Run progress: 71.69% complete, ETA 00:37:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34091709.624 ops/s
[info] # Warmup Iteration   2: 43220293.644 ops/s
[info] # Warmup Iteration   3: 45928537.979 ops/s
[info] # Warmup Iteration   4: 46396972.022 ops/s
[info] # Warmup Iteration   5: 46560597.219 ops/s
[info] Iteration   1: 45049510.453 ops/s
[info]                  ·gc.alloc.rate:                   915.603 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.840 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23.481 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 45316726.442 ops/s
[info]                  ·gc.alloc.rate:                   921.176 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.925 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23.341 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 46617643.524 ops/s
[info]                  ·gc.alloc.rate:                   947.561 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.435 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45.335 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 46797458.890 ops/s
[info]                  ·gc.alloc.rate:                   951.264 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.246 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.580 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 46676669.490 ops/s
[info]                  ·gc.alloc.rate:                   948.796 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.830 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45.290 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala":
[info]   46091601.760 ±(99.9%) 3223775.865 ops/s [Average]
[info]   (min, avg, max) = (45049510.453, 46091601.760, 46797458.890), stdev = 837204.355
[info]   CI (99.9%): [42867825.895, 49315377.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   936.880 ±(99.9%) 65.639 MB/sec [Average]
[info]   (min, avg, max) = (915.603, 936.880, 951.264), stdev = 17.046
[info]   CI (99.9%): [871.241, 1002.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   32.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (32.000, 32.000, 32.000), stdev = 0.001
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.083), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.001 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   940.055 ±(99.9%) 1415.116 MB/sec [Average]
[info]   (min, avg, max) = (671.246, 940.055, 1342.830), stdev = 367.501
[info]   CI (99.9%): [≈ 0, 2355.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   32.005 ±(99.9%) 46.794 B/op [Average]
[info]   (min, avg, max) = (22.580, 32.005, 45.335), stdev = 12.152
[info]   CI (99.9%): [≈ 0, 78.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 71.89% complete, ETA 00:37:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35929339.912 ops/s
[info] # Warmup Iteration   2: 46572916.468 ops/s
[info] # Warmup Iteration   3: 52258632.624 ops/s
[info] # Warmup Iteration   4: 52283375.288 ops/s
[info] # Warmup Iteration   5: 52324898.756 ops/s
[info] Iteration   1: 52508559.524 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 52386234.784 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 52362150.396 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 52022383.754 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 52391074.317 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc":
[info]   52334080.555 ±(99.9%) 705714.087 ops/s [Average]
[info]   (min, avg, max) = (52022383.754, 52334080.555, 52508559.524), stdev = 183271.707
[info]   CI (99.9%): [51628366.468, 53039794.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala
[info] # Run progress: 72.09% complete, ETA 00:37:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 43309871.667 ops/s
[info] # Warmup Iteration   2: 39781056.705 ops/s
[info] # Warmup Iteration   3: 39460087.831 ops/s
[info] # Warmup Iteration   4: 40275898.221 ops/s
[info] # Warmup Iteration   5: 39984191.083 ops/s
[info] Iteration   1: 40214411.199 ops/s
[info]                  ·gc.alloc.rate:                   2044.208 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2018.643 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79.000 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 40935619.804 ops/s
[info]                  ·gc.alloc.rate:                   2080.830 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2696.246 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 103.660 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 40853012.974 ops/s
[info]                  ·gc.alloc.rate:                   2076.038 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025.028 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78.034 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 40851511.119 ops/s
[info]                  ·gc.alloc.rate:                   2076.049 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.510 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78.168 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 40918528.583 ops/s
[info]                  ·gc.alloc.rate:                   2079.593 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.429 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78.147 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala":
[info]   40754616.736 ±(99.9%) 1171952.776 ops/s [Average]
[info]   (min, avg, max) = (40214411.199, 40754616.736, 40935619.804), stdev = 304352.414
[info]   CI (99.9%): [39582663.960, 41926569.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate":
[info]   2071.344 ±(99.9%) 58.985 MB/sec [Average]
[info]   (min, avg, max) = (2044.208, 2071.344, 2080.830), stdev = 15.318
[info]   CI (99.9%): [2012.359, 2130.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm":
[info]   80.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (80.000, 80.000, 80.000), stdev = 0.001
[info]   CI (99.9%): [80.000, 80.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.104), stdev = 0.019
[info]   CI (99.9%): [0.020, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.004 ±(99.9%) 0.003 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.004, 0.004), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space":
[info]   2159.971 ±(99.9%) 1154.517 MB/sec [Average]
[info]   (min, avg, max) = (2018.643, 2159.971, 2696.246), stdev = 299.824
[info]   CI (99.9%): [1005.454, 3314.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space.norm":
[info]   83.402 ±(99.9%) 43.633 B/op [Average]
[info]   (min, avg, max) = (78.034, 83.402, 103.660), stdev = 11.331
[info]   CI (99.9%): [39.769, 127.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson
[info] # Run progress: 72.29% complete, ETA 00:37:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1767985.628 ops/s
[info] # Warmup Iteration   2: 2459960.392 ops/s
[info] # Warmup Iteration   3: 2497723.241 ops/s
[info] # Warmup Iteration   4: 2552599.053 ops/s
[info] # Warmup Iteration   5: 2512597.737 ops/s
[info] Iteration   1: 2463186.483 ops/s
[info]                  ·gc.alloc.rate:                   2015.331 MB/sec
[info]                  ·gc.alloc.rate.norm:              1288.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2010.439 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1284.874 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2523329.102 ops/s
[info]                  ·gc.alloc.rate:                   2064.358 MB/sec
[info]                  ·gc.alloc.rate.norm:              1288.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2687.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1676.498 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2531448.376 ops/s
[info]                  ·gc.alloc.rate:                   2071.171 MB/sec
[info]                  ·gc.alloc.rate.norm:              1288.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.757 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1256.027 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2562090.582 ops/s
[info]                  ·gc.alloc.rate:                   2096.248 MB/sec
[info]                  ·gc.alloc.rate.norm:              1288.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.708 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1243.429 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2534095.462 ops/s
[info]                  ·gc.alloc.rate:                   2073.264 MB/sec
[info]                  ·gc.alloc.rate.norm:              1288.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.284 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1259.436 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson":
[info]   2522830.001 ±(99.9%) 140167.917 ops/s [Average]
[info]   (min, avg, max) = (2463186.483, 2522830.001, 2562090.582), stdev = 36401.163
[info]   CI (99.9%): [2382662.084, 2662997.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2064.075 ±(99.9%) 114.649 MB/sec [Average]
[info]   (min, avg, max) = (2015.331, 2064.075, 2096.248), stdev = 29.774
[info]   CI (99.9%): [1949.425, 2178.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1288.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1288.000, 1288.000, 1288.000), stdev = 0.001
[info]   CI (99.9%): [1288.000, 1288.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.042 ±(99.9%) 0.065 B/op [Average]
[info]   (min, avg, max) = (0.026, 0.042, 0.065), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   2153.643 ±(99.9%) 1148.408 MB/sec [Average]
[info]   (min, avg, max) = (2010.439, 2153.643, 2687.029), stdev = 298.238
[info]   CI (99.9%): [1005.235, 3302.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1344.053 ±(99.9%) 717.957 B/op [Average]
[info]   (min, avg, max) = (1243.429, 1344.053, 1676.498), stdev = 186.451
[info]   CI (99.9%): [626.096, 2062.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle
[info] # Run progress: 72.49% complete, ETA 00:36:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9041304.467 ops/s
[info] # Warmup Iteration   2: 11673396.645 ops/s
[info] # Warmup Iteration   3: 12447090.728 ops/s
[info] # Warmup Iteration   4: 12434199.984 ops/s
[info] # Warmup Iteration   5: 12401102.805 ops/s
[info] Iteration   1: 12410094.559 ops/s
[info]                  ·gc.alloc.rate:                   2396.140 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2018.436 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 256.080 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 12465631.942 ops/s
[info]                  ·gc.alloc.rate:                   2407.342 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2697.349 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 340.622 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 12424221.475 ops/s
[info]                  ·gc.alloc.rate:                   2399.275 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026.115 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 256.719 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 12411452.759 ops/s
[info]                  ·gc.alloc.rate:                   2396.704 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2707.590 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 343.433 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 12429754.785 ops/s
[info]                  ·gc.alloc.rate:                   2400.315 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2711.819 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 343.452 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle":
[info]   12428231.104 ±(99.9%) 86696.556 ops/s [Average]
[info]   (min, avg, max) = (12410094.559, 12428231.104, 12465631.942), stdev = 22514.820
[info]   CI (99.9%): [12341534.548, 12514927.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.alloc.rate":
[info]   2399.955 ±(99.9%) 17.251 MB/sec [Average]
[info]   (min, avg, max) = (2396.140, 2399.955, 2407.342), stdev = 4.480
[info]   CI (99.9%): [2382.704, 2417.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   304.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (304.000, 304.000, 304.000), stdev = 0.001
[info]   CI (99.9%): [304.000, 304.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.050, 0.083), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0.006 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (0.003, 0.006, 0.011), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   2432.262 ±(99.9%) 1441.341 MB/sec [Average]
[info]   (min, avg, max) = (2018.436, 2432.262, 2711.819), stdev = 374.312
[info]   CI (99.9%): [990.921, 3873.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   308.061 ±(99.9%) 181.654 B/op [Average]
[info]   (min, avg, max) = (256.080, 308.061, 343.452), stdev = 47.175
[info]   CI (99.9%): [126.407, 489.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 72.69% complete, ETA 00:36:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 138344.292 ops/s
[info] # Warmup Iteration   2: 153976.999 ops/s
[info] # Warmup Iteration   3: 155509.569 ops/s
[info] # Warmup Iteration   4: 155067.128 ops/s
[info] # Warmup Iteration   5: 154730.710 ops/s
[info] Iteration   1: 155133.566 ops/s
[info]                  ·gc.alloc.rate:                   2844.844 MB/sec
[info]                  ·gc.alloc.rate.norm:              28872.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.845 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2698.060 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27382.304 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 155578.148 ops/s
[info]                  ·gc.alloc.rate:                   2853.445 MB/sec
[info]                  ·gc.alloc.rate.norm:              28872.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.842 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2705.294 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27372.967 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 153741.373 ops/s
[info]                  ·gc.alloc.rate:                   2819.671 MB/sec
[info]                  ·gc.alloc.rate.norm:              28872.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.852 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2709.608 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27745.012 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 154871.815 ops/s
[info]                  ·gc.alloc.rate:                   2840.372 MB/sec
[info]                  ·gc.alloc.rate.norm:              28872.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.423 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3392.460 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34483.903 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 155222.813 ops/s
[info]                  ·gc.alloc.rate:                   2847.545 MB/sec
[info]                  ·gc.alloc.rate.norm:              28872.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.633 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2717.952 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27558.027 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala":
[info]   154909.543 ±(99.9%) 2696.415 ops/s [Average]
[info]   (min, avg, max) = (153741.373, 154909.543, 155578.148), stdev = 700.250
[info]   CI (99.9%): [152213.128, 157605.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2841.175 ±(99.9%) 49.749 MB/sec [Average]
[info]   (min, avg, max) = (2819.671, 2841.175, 2853.445), stdev = 12.920
[info]   CI (99.9%): [2791.427, 2890.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   28872.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (28872.003, 28872.003, 28872.003), stdev = 0.001
[info]   CI (99.9%): [28872.002, 28872.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.083), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.719 ±(99.9%) 0.730 B/op [Average]
[info]   (min, avg, max) = (0.423, 0.719, 0.852), stdev = 0.190
[info]   CI (99.9%): [≈ 0, 1.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   2844.675 ±(99.9%) 1179.476 MB/sec [Average]
[info]   (min, avg, max) = (2698.060, 2844.675, 3392.460), stdev = 306.306
[info]   CI (99.9%): [1665.199, 4024.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   28908.443 ±(99.9%) 12015.882 B/op [Average]
[info]   (min, avg, max) = (27372.967, 28908.443, 34483.903), stdev = 3120.486
[info]   CI (99.9%): [16892.561, 40924.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 72.89% complete, ETA 00:36:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8504.884 ops/s
[info] # Warmup Iteration   2: 23054.919 ops/s
[info] # Warmup Iteration   3: 23915.521 ops/s
[info] # Warmup Iteration   4: 23745.573 ops/s
[info] # Warmup Iteration   5: 24010.896 ops/s
[info] Iteration   1: 23972.701 ops/s
[info]                  ·gc.alloc.rate:                   1864.107 MB/sec
[info]                  ·gc.alloc.rate.norm:              122416.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.366 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.210 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 133258.355 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 24225.395 ops/s
[info]                  ·gc.alloc.rate:                   1883.945 MB/sec
[info]                  ·gc.alloc.rate.norm:              122416.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.705 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.318 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 88001.622 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 24085.592 ops/s
[info]                  ·gc.alloc.rate:                   1873.448 MB/sec
[info]                  ·gc.alloc.rate.norm:              122416.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.360 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 132878.239 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 23395.842 ops/s
[info]                  ·gc.alloc.rate:                   1819.450 MB/sec
[info]                  ·gc.alloc.rate.norm:              122416.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.400 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.176 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 136930.530 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 23788.119 ops/s
[info]                  ·gc.alloc.rate:                   1849.871 MB/sec
[info]                  ·gc.alloc.rate.norm:              122416.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1357.853 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 89856.538 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson":
[info]   23893.530 ±(99.9%) 1235.954 ops/s [Average]
[info]   (min, avg, max) = (23395.842, 23893.530, 24225.395), stdev = 320.973
[info]   CI (99.9%): [22657.576, 25129.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1858.164 ±(99.9%) 96.288 MB/sec [Average]
[info]   (min, avg, max) = (1819.450, 1858.164, 1883.945), stdev = 25.006
[info]   CI (99.9%): [1761.876, 1954.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   122416.018 ±(99.9%) 0.004 B/op [Average]
[info]   (min, avg, max) = (122416.017, 122416.018, 122416.020), stdev = 0.001
[info]   CI (99.9%): [122416.013, 122416.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.366 ±(99.9%) 3.683 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.366, 2.705), stdev = 0.956
[info]   CI (99.9%): [≈ 0, 5.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1762.024 ±(99.9%) 1426.963 MB/sec [Average]
[info]   (min, avg, max) = (1354.318, 1762.024, 2035.176), stdev = 370.578
[info]   CI (99.9%): [335.060, 3188.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   116185.057 ±(99.9%) 96035.388 B/op [Average]
[info]   (min, avg, max) = (88001.622, 116185.057, 136930.530), stdev = 24940.085
[info]   CI (99.9%): [20149.669, 212220.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 73.09% complete, ETA 00:36:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 79981.460 ops/s
[info] # Warmup Iteration   2: 147643.484 ops/s
[info] # Warmup Iteration   3: 148628.370 ops/s
[info] # Warmup Iteration   4: 149476.478 ops/s
[info] # Warmup Iteration   5: 148053.488 ops/s
[info] Iteration   1: 145975.907 ops/s
[info]                  ·gc.alloc.rate:                   1356.625 MB/sec
[info]                  ·gc.alloc.rate.norm:              14632.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.648 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14567.545 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 148790.248 ops/s
[info]                  ·gc.alloc.rate:                   1382.506 MB/sec
[info]                  ·gc.alloc.rate.norm:              14632.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.881 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.489 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14303.728 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 148445.627 ops/s
[info]                  ·gc.alloc.rate:                   1379.688 MB/sec
[info]                  ·gc.alloc.rate.norm:              14632.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.883 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.082 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14349.834 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 148610.520 ops/s
[info]                  ·gc.alloc.rate:                   1381.249 MB/sec
[info]                  ·gc.alloc.rate.norm:              14632.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.220 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.144 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14344.873 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 148319.077 ops/s
[info]                  ·gc.alloc.rate:                   1378.502 MB/sec
[info]                  ·gc.alloc.rate.norm:              14632.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.442 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.055 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14383.128 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala":
[info]   148028.276 ±(99.9%) 4470.137 ops/s [Average]
[info]   (min, avg, max) = (145975.907, 148028.276, 148790.248), stdev = 1160.880
[info]   CI (99.9%): [143558.139, 152498.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1375.714 ±(99.9%) 41.506 MB/sec [Average]
[info]   (min, avg, max) = (1356.625, 1375.714, 1382.506), stdev = 10.779
[info]   CI (99.9%): [1334.208, 1417.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   14632.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (14632.003, 14632.003, 14632.003), stdev = 0.001
[info]   CI (99.9%): [14632.002, 14632.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.485 ±(99.9%) 1.518 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.485, 0.883), stdev = 0.394
[info]   CI (99.9%): [≈ 0, 2.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1352.884 ±(99.9%) 7.018 MB/sec [Average]
[info]   (min, avg, max) = (1350.648, 1352.884, 1355.055), stdev = 1.822
[info]   CI (99.9%): [1345.866, 1359.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   14389.822 ±(99.9%) 397.671 B/op [Average]
[info]   (min, avg, max) = (14303.728, 14389.822, 14567.545), stdev = 103.274
[info]   CI (99.9%): [13992.151, 14787.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 73.29% complete, ETA 00:35:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 453826.308 ops/s
[info] # Warmup Iteration   2: 489164.762 ops/s
[info] # Warmup Iteration   3: 488581.872 ops/s
[info] # Warmup Iteration   4: 491535.289 ops/s
[info] # Warmup Iteration   5: 492634.316 ops/s
[info] Iteration   1: 494524.592 ops/s
[info]                  ·gc.alloc.rate:                   1022.820 MB/sec
[info]                  ·gc.alloc.rate.norm:              3256.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.912 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2138.934 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 494505.942 ops/s
[info]                  ·gc.alloc.rate:                   1022.969 MB/sec
[info]                  ·gc.alloc.rate.norm:              3256.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.199 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.641 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4273.482 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 494012.641 ops/s
[info]                  ·gc.alloc.rate:                   1021.724 MB/sec
[info]                  ·gc.alloc.rate.norm:              3256.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.219 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2139.020 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 492502.740 ops/s
[info]                  ·gc.alloc.rate:                   1018.617 MB/sec
[info]                  ·gc.alloc.rate.norm:              3256.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.133 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.850 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4292.409 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 494850.214 ops/s
[info]                  ·gc.alloc.rate:                   1023.495 MB/sec
[info]                  ·gc.alloc.rate.norm:              3256.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.603 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2136.544 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala":
[info]   494079.226 ±(99.9%) 3583.686 ops/s [Average]
[info]   (min, avg, max) = (492502.740, 494079.226, 494850.214), stdev = 930.672
[info]   CI (99.9%): [490495.540, 497662.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1021.925 ±(99.9%) 7.540 MB/sec [Average]
[info]   (min, avg, max) = (1018.617, 1021.925, 1023.495), stdev = 1.958
[info]   CI (99.9%): [1014.385, 1029.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3256.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3256.001, 3256.001, 3256.001), stdev = 0.001
[info]   CI (99.9%): [3256.001, 3256.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.066 ±(99.9%) 0.361 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.066, 0.199), stdev = 0.094
[info]   CI (99.9%): [≈ 0, 0.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   940.045 ±(99.9%) 1415.549 MB/sec [Average]
[info]   (min, avg, max) = (671.219, 940.045, 1342.850), stdev = 367.614
[info]   CI (99.9%): [≈ 0, 2355.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2996.078 ±(99.9%) 4523.596 B/op [Average]
[info]   (min, avg, max) = (2136.544, 2996.078, 4292.409), stdev = 1174.764
[info]   CI (99.9%): [≈ 0, 7519.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 73.49% complete, ETA 00:35:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 492462.111 ops/s
[info] # Warmup Iteration   2: 535143.346 ops/s
[info] # Warmup Iteration   3: 534930.497 ops/s
[info] # Warmup Iteration   4: 538351.006 ops/s
[info] # Warmup Iteration   5: 530998.583 ops/s
[info] Iteration   1: 528667.706 ops/s
[info]                  ·gc.alloc.rate:                   515.855 MB/sec
[info]                  ·gc.alloc.rate.norm:              1536.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.451 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1522.888 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 542147.578 ops/s
[info]                  ·gc.alloc.rate:      529.002 MB/sec
[info]                  ·gc.alloc.rate.norm: 1536.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 541197.544 ops/s
[info]                  ·gc.alloc.rate:                   528.072 MB/sec
[info]                  ·gc.alloc.rate.norm:              1536.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.342 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.720 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.618 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1962.258 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 540853.456 ops/s
[info]                  ·gc.alloc.rate:                   527.721 MB/sec
[info]                  ·gc.alloc.rate.norm:              1536.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.121 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.613 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1963.549 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 537559.140 ops/s
[info]                  ·gc.alloc.rate:                   524.510 MB/sec
[info]                  ·gc.alloc.rate.norm:              1536.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.904 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1967.635 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   538085.085 ±(99.9%) 21337.117 ops/s [Average]
[info]   (min, avg, max) = (528667.706, 538085.085, 542147.578), stdev = 5541.181
[info]   CI (99.9%): [516747.968, 559422.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   525.032 ±(99.9%) 20.801 MB/sec [Average]
[info]   (min, avg, max) = (515.855, 525.032, 529.002), stdev = 5.402
[info]   CI (99.9%): [504.231, 545.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1536.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1536.001, 1536.001, 1536.001), stdev = 0.001
[info]   CI (99.9%): [1536.001, 1536.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   0.677 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.677, 3.342), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   1.968 ±(99.9%) 16.688 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.968, 9.720), stdev = 4.334
[info]   CI (99.9%): [≈ 0, 18.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   506.517 ±(99.9%) 1123.391 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506.517, 674.618), stdev = 291.741
[info]   CI (99.9%): [≈ 0, 1629.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   1483.266 ±(99.9%) 3276.651 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1483.266, 1967.635), stdev = 850.936
[info]   CI (99.9%): [≈ 0, 4759.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.140
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 73.69% complete, ETA 00:35:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11284.081 ops/s
[info] # Warmup Iteration   2: 20132.984 ops/s
[info] # Warmup Iteration   3: 20683.713 ops/s
[info] # Warmup Iteration   4: 20398.115 ops/s
[info] # Warmup Iteration   5: 20795.123 ops/s
[info] Iteration   1: 20823.279 ops/s
[info]                  ·gc.alloc.rate:                   455.301 MB/sec
[info]                  ·gc.alloc.rate.norm:              34424.812 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.573 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.352 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38662.748 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 21002.934 ops/s
[info]                  ·gc.alloc.rate:      459.423 MB/sec
[info]                  ·gc.alloc.rate.norm: 34424.019 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 20835.617 ops/s
[info]                  ·gc.alloc.rate:                   455.632 MB/sec
[info]                  ·gc.alloc.rate.norm:              34424.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.333 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25.154 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.866 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50912.005 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 20785.781 ops/s
[info]                  ·gc.alloc.rate:                   454.544 MB/sec
[info]                  ·gc.alloc.rate.norm:              34424.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.576 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.937 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51039.340 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 20889.168 ops/s
[info]                  ·gc.alloc.rate:      456.797 MB/sec
[info]                  ·gc.alloc.rate.norm: 34424.021 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson":
[info]   20867.356 ±(99.9%) 324.814 ops/s [Average]
[info]   (min, avg, max) = (20785.781, 20867.356, 21002.934), stdev = 84.353
[info]   CI (99.9%): [20542.542, 21192.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   456.340 ±(99.9%) 7.337 MB/sec [Average]
[info]   (min, avg, max) = (454.544, 456.340, 459.423), stdev = 1.905
[info]   CI (99.9%): [449.003, 463.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   34424.179 ±(99.9%) 1.363 B/op [Average]
[info]   (min, avg, max) = (34424.019, 34424.179, 34424.812), stdev = 0.354
[info]   CI (99.9%): [34422.815, 34425.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.557 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.075, 0.333), stdev = 0.145
[info]   CI (99.9%): [≈ 0, 0.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5.661 ±(99.9%) 42.071 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.661, 25.154), stdev = 10.926
[info]   CI (99.9%): [≈ 0, 47.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   371.831 ±(99.9%) 1331.782 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 371.831, 673.937), stdev = 345.860
[info]   CI (99.9%): [≈ 0, 1703.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   28122.818 ±(99.9%) 100732.983 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 28122.818, 51039.340), stdev = 26160.036
[info]   CI (99.9%): [≈ 0, 128855.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 0.837
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 73.90% complete, ETA 00:35:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 311578.895 ops/s
[info] # Warmup Iteration   2: 389904.984 ops/s
[info] # Warmup Iteration   3: 392622.809 ops/s
[info] # Warmup Iteration   4: 391084.867 ops/s
[info] # Warmup Iteration   5: 393494.163 ops/s
[info] Iteration   1: 388880.781 ops/s
[info]                  ·gc.alloc.rate:                   2637.892 MB/sec
[info]                  ·gc.alloc.rate.norm:              10680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.168 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2695.416 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10912.894 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 393495.438 ops/s
[info]                  ·gc.alloc.rate:                   2669.659 MB/sec
[info]                  ·gc.alloc.rate.norm:              10680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.333 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2701.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10806.628 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 391757.040 ops/s
[info]                  ·gc.alloc.rate:                   2657.829 MB/sec
[info]                  ·gc.alloc.rate.norm:              10680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.084 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2706.371 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10875.057 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 392372.249 ops/s
[info]                  ·gc.alloc.rate:                   2661.869 MB/sec
[info]                  ·gc.alloc.rate.norm:              10680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.167 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2711.744 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10880.111 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 392586.420 ops/s
[info]                  ·gc.alloc.rate:                   2663.356 MB/sec
[info]                  ·gc.alloc.rate.norm:              10680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.417 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2714.930 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10886.812 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce":
[info]   391818.385 ±(99.9%) 6764.002 ops/s [Average]
[info]   (min, avg, max) = (388880.781, 391818.385, 393495.438), stdev = 1756.590
[info]   CI (99.9%): [385054.384, 398582.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2658.121 ±(99.9%) 46.522 MB/sec [Average]
[info]   (min, avg, max) = (2637.892, 2658.121, 2669.659), stdev = 12.082
[info]   CI (99.9%): [2611.599, 2704.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   10680.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10680.001, 10680.001, 10680.001), stdev = 0.001
[info]   CI (99.9%): [10680.001, 10680.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.104), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.234 ±(99.9%) 0.526 B/op [Average]
[info]   (min, avg, max) = (0.084, 0.234, 0.417), stdev = 0.137
[info]   CI (99.9%): [≈ 0, 0.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2705.954 ±(99.9%) 30.252 MB/sec [Average]
[info]   (min, avg, max) = (2695.416, 2705.954, 2714.930), stdev = 7.856
[info]   CI (99.9%): [2675.703, 2736.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   10872.301 ±(99.9%) 152.086 B/op [Average]
[info]   (min, avg, max) = (10806.628, 10872.301, 10912.894), stdev = 39.496
[info]   CI (99.9%): [10720.214, 11024.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 74.10% complete, ETA 00:34:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 178106.222 ops/s
[info] # Warmup Iteration   2: 318606.373 ops/s
[info] # Warmup Iteration   3: 329024.102 ops/s
[info] # Warmup Iteration   4: 328208.870 ops/s
[info] # Warmup Iteration   5: 328756.686 ops/s
[info] Iteration   1: 327789.197 ops/s
[info]                  ·gc.alloc.rate:                   867.759 MB/sec
[info]                  ·gc.alloc.rate.norm:              4168.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.161 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3238.113 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 329373.657 ops/s
[info]                  ·gc.alloc.rate:                   872.058 MB/sec
[info]                  ·gc.alloc.rate.norm:              4168.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.099 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3222.378 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 322883.672 ops/s
[info]                  ·gc.alloc.rate:                   854.853 MB/sec
[info]                  ·gc.alloc.rate.norm:              4168.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.894 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3290.578 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 320230.935 ops/s
[info]                  ·gc.alloc.rate:                   847.852 MB/sec
[info]                  ·gc.alloc.rate.norm:              4168.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.102 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.548 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6639.230 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 320688.718 ops/s
[info]                  ·gc.alloc.rate:                   848.986 MB/sec
[info]                  ·gc.alloc.rate.norm:              4168.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.102 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.525 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3316.416 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala":
[info]   324193.236 ±(99.9%) 16046.623 ops/s [Average]
[info]   (min, avg, max) = (320230.935, 324193.236, 329373.657), stdev = 4167.257
[info]   CI (99.9%): [308146.613, 340239.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   858.301 ±(99.9%) 42.469 MB/sec [Average]
[info]   (min, avg, max) = (847.852, 858.301, 872.058), stdev = 11.029
[info]   CI (99.9%): [815.833, 900.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   4168.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4168.001, 4168.001, 4168.001), stdev = 0.001
[info]   CI (99.9%): [4168.001, 4168.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.061 ±(99.9%) 0.214 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.061, 0.102), stdev = 0.055
[info]   CI (99.9%): [≈ 0, 0.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   809.867 ±(99.9%) 1163.858 MB/sec [Average]
[info]   (min, avg, max) = (674.161, 809.867, 1350.548), stdev = 302.250
[info]   CI (99.9%): [≈ 0, 1973.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3941.343 ±(99.9%) 5809.263 B/op [Average]
[info]   (min, avg, max) = (3222.378, 3941.343, 6639.230), stdev = 1508.647
[info]   CI (99.9%): [≈ 0, 9750.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 74.30% complete, ETA 00:34:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 402631.491 ops/s
[info] # Warmup Iteration   2: 416877.657 ops/s
[info] # Warmup Iteration   3: 419998.715 ops/s
[info] # Warmup Iteration   4: 418779.801 ops/s
[info] # Warmup Iteration   5: 415430.531 ops/s
[info] Iteration   1: 418119.761 ops/s
[info]                  ·gc.alloc.rate:                   824.398 MB/sec
[info]                  ·gc.alloc.rate.norm:              3104.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.157 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.556 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2539.817 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 416865.970 ops/s
[info]                  ·gc.alloc.rate:                   822.248 MB/sec
[info]                  ·gc.alloc.rate.norm:              3104.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.706 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5080.066 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 418119.576 ops/s
[info]                  ·gc.alloc.rate:                   824.398 MB/sec
[info]                  ·gc.alloc.rate.norm:              3104.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.258 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2527.402 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 410844.963 ops/s
[info]                  ·gc.alloc.rate:                   810.319 MB/sec
[info]                  ·gc.alloc.rate.norm:              3104.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.239 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.491 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2572.209 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 420604.076 ops/s
[info]                  ·gc.alloc.rate:                   829.312 MB/sec
[info]                  ·gc.alloc.rate.norm:              3104.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.231 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2512.323 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala":
[info]   416910.869 ±(99.9%) 14063.999 ops/s [Average]
[info]   (min, avg, max) = (410844.963, 416910.869, 420604.076), stdev = 3652.376
[info]   CI (99.9%): [402846.870, 430974.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   822.135 ±(99.9%) 27.323 MB/sec [Average]
[info]   (min, avg, max) = (810.319, 822.135, 829.312), stdev = 7.096
[info]   CI (99.9%): [794.812, 849.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3104.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3104.001, 3104.001, 3104.001), stdev = 0.001
[info]   CI (99.9%): [3104.001, 3104.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.095 ±(99.9%) 0.399 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.095, 0.239), stdev = 0.104
[info]   CI (99.9%): [≈ 0, 0.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   806.848 ±(99.9%) 1159.944 MB/sec [Average]
[info]   (min, avg, max) = (671.231, 806.848, 1345.706), stdev = 301.234
[info]   CI (99.9%): [≈ 0, 1966.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3046.364 ±(99.9%) 4378.522 B/op [Average]
[info]   (min, avg, max) = (2512.323, 3046.364, 5080.066), stdev = 1137.088
[info]   CI (99.9%): [≈ 0, 7424.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 74.50% complete, ETA 00:34:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 68317.847 ops/s
[info] # Warmup Iteration   2: 107710.634 ops/s
[info] # Warmup Iteration   3: 107988.837 ops/s
[info] # Warmup Iteration   4: 108225.052 ops/s
[info] # Warmup Iteration   5: 107984.770 ops/s
[info] Iteration   1: 110663.935 ops/s
[info]                  ·gc.alloc.rate:                   4005.503 MB/sec
[info]                  ·gc.alloc.rate.norm:              56984.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.480 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4074.110 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57960.036 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 110653.578 ops/s
[info]                  ·gc.alloc.rate:                   4005.491 MB/sec
[info]                  ·gc.alloc.rate.norm:              56984.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.888 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3399.616 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48364.548 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 108840.114 ops/s
[info]                  ·gc.alloc.rate:                   3939.563 MB/sec
[info]                  ·gc.alloc.rate.norm:              56984.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.903 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4083.015 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59058.969 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 110270.863 ops/s
[info]                  ·gc.alloc.rate:                   3991.642 MB/sec
[info]                  ·gc.alloc.rate.norm:              56984.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.891 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4084.651 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58311.788 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 110471.890 ops/s
[info]                  ·gc.alloc.rate:                   3998.707 MB/sec
[info]                  ·gc.alloc.rate.norm:              56984.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.186 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4087.249 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58245.787 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson":
[info]   110180.076 ±(99.9%) 2949.716 ops/s [Average]
[info]   (min, avg, max) = (108840.114, 110180.076, 110663.935), stdev = 766.032
[info]   CI (99.9%): [107230.360, 113129.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3988.181 ±(99.9%) 106.957 MB/sec [Average]
[info]   (min, avg, max) = (3939.563, 3988.181, 4005.503), stdev = 27.776
[info]   CI (99.9%): [3881.224, 4095.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   56984.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (56984.004, 56984.004, 56984.004), stdev = 0.001
[info]   CI (99.9%): [56984.003, 56984.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.075, 0.104), stdev = 0.019
[info]   CI (99.9%): [0.003, 0.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.070 ±(99.9%) 1.009 B/op [Average]
[info]   (min, avg, max) = (0.888, 1.070, 1.480), stdev = 0.262
[info]   CI (99.9%): [0.061, 2.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3945.728 ±(99.9%) 1175.701 MB/sec [Average]
[info]   (min, avg, max) = (3399.616, 3945.728, 4087.249), stdev = 305.326
[info]   CI (99.9%): [2770.028, 5121.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   56388.226 ±(99.9%) 17342.169 B/op [Average]
[info]   (min, avg, max) = (48364.548, 56388.226, 59058.969), stdev = 4503.706
[info]   CI (99.9%): [39046.056, 73730.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 74.70% complete, ETA 00:33:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 500317.109 ops/s
[info] # Warmup Iteration   2: 567685.014 ops/s
[info] # Warmup Iteration   3: 582780.461 ops/s
[info] # Warmup Iteration   4: 576987.471 ops/s
[info] # Warmup Iteration   5: 581036.685 ops/s
[info] Iteration   1: 571859.600 ops/s
[info]                  ·gc.alloc.rate:                   2496.062 MB/sec
[info]                  ·gc.alloc.rate.norm:              6872.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.115 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2693.694 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7416.109 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 572281.917 ops/s
[info]                  ·gc.alloc.rate:                   2498.181 MB/sec
[info]                  ·gc.alloc.rate.norm:              6872.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.286 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2699.899 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7426.887 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 571084.840 ops/s
[info]                  ·gc.alloc.rate:                   2492.960 MB/sec
[info]                  ·gc.alloc.rate.norm:              6872.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.172 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.728 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5592.315 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 581633.070 ops/s
[info]                  ·gc.alloc.rate:                   2538.761 MB/sec
[info]                  ·gc.alloc.rate.norm:              6872.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.113 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2708.857 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7332.422 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 578029.951 ops/s
[info]                  ·gc.alloc.rate:                   2523.439 MB/sec
[info]                  ·gc.alloc.rate.norm:              6872.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2713.861 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7390.571 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle":
[info]   574977.876 ±(99.9%) 17829.182 ops/s [Average]
[info]   (min, avg, max) = (571084.840, 574977.876, 581633.070), stdev = 4630.182
[info]   CI (99.9%): [557148.694, 592807.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.alloc.rate":
[info]   2509.881 ±(99.9%) 77.780 MB/sec [Average]
[info]   (min, avg, max) = (2492.960, 2509.881, 2538.761), stdev = 20.199
[info]   CI (99.9%): [2432.101, 2587.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   6872.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6872.001, 6872.001, 6872.001), stdev = 0.001
[info]   CI (99.9%): [6872.001, 6872.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.054, 0.104), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0.148 ±(99.9%) 0.336 B/op [Average]
[info]   (min, avg, max) = (0.057, 0.148, 0.286), stdev = 0.087
[info]   CI (99.9%): [≈ 0, 0.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   2569.008 ±(99.9%) 1163.382 MB/sec [Average]
[info]   (min, avg, max) = (2028.728, 2569.008, 2713.861), stdev = 302.127
[info]   CI (99.9%): [1405.626, 3732.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   7031.661 ±(99.9%) 3101.498 B/op [Average]
[info]   (min, avg, max) = (5592.315, 7031.661, 7426.887), stdev = 805.449
[info]   CI (99.9%): [3930.162, 10133.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 74.90% complete, ETA 00:33:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 259735.886 ops/s
[info] # Warmup Iteration   2: 321029.801 ops/s
[info] # Warmup Iteration   3: 311061.578 ops/s
[info] # Warmup Iteration   4: 323782.626 ops/s
[info] # Warmup Iteration   5: 325499.273 ops/s
[info] Iteration   1: 325804.572 ops/s
[info]                  ·gc.alloc.rate:                   496.625 MB/sec
[info]                  ·gc.alloc.rate.norm:              2400.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.024 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.356 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2471.190 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 327399.326 ops/s
[info]                  ·gc.alloc.rate:                   499.158 MB/sec
[info]                  ·gc.alloc.rate.norm:              2400.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.495 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2459.319 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 325867.354 ops/s
[info]                  ·gc.alloc.rate:                   496.783 MB/sec
[info]                  ·gc.alloc.rate.norm:              2400.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.552 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17.158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.891 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3255.628 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 324105.039 ops/s
[info]                  ·gc.alloc.rate:                   494.073 MB/sec
[info]                  ·gc.alloc.rate.norm:              2400.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.202 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.883 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3273.444 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 324424.783 ops/s
[info]                  ·gc.alloc.rate:      494.603 MB/sec
[info]                  ·gc.alloc.rate.norm: 2400.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce":
[info]   325520.215 ±(99.9%) 5070.261 ops/s [Average]
[info]   (min, avg, max) = (324105.039, 325520.215, 327399.326), stdev = 1316.731
[info]   CI (99.9%): [320449.954, 330590.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   496.248 ±(99.9%) 7.781 MB/sec [Average]
[info]   (min, avg, max) = (494.073, 496.248, 499.158), stdev = 2.021
[info]   CI (99.9%): [488.467, 504.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2400.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2400.001, 2400.001, 2400.001), stdev = 0.001
[info]   CI (99.9%): [2400.001, 2400.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.723 ±(99.9%) 6.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.723, 3.552), stdev = 1.581
[info]   CI (99.9%): [≈ 0, 6.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3.495 ±(99.9%) 29.411 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.495, 17.158), stdev = 7.638
[info]   CI (99.9%): [≈ 0, 32.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   474.125 ±(99.9%) 1067.447 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474.125, 673.891), stdev = 277.213
[info]   CI (99.9%): [≈ 0, 1541.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2291.916 ±(99.9%) 5168.039 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2291.916, 3273.444), stdev = 1342.123
[info]   CI (99.9%): [≈ 0, 7459.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 75.10% complete, ETA 00:33:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 448811.818 ops/s
[info] # Warmup Iteration   2: 726150.456 ops/s
[info] # Warmup Iteration   3: 743959.438 ops/s
[info] # Warmup Iteration   4: 761112.659 ops/s
[info] # Warmup Iteration   5: 760670.716 ops/s
[info] Iteration   1: 766044.222 ops/s
[info]                  ·gc.alloc.rate:      560.533 MB/sec
[info]                  ·gc.alloc.rate.norm: 1152.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 765363.803 ops/s
[info]                  ·gc.alloc.rate:                   560.006 MB/sec
[info]                  ·gc.alloc.rate.norm:              1152.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.270 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.556 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.485 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1385.442 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 761715.217 ops/s
[info]                  ·gc.alloc.rate:                   557.383 MB/sec
[info]                  ·gc.alloc.rate.norm:              1152.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.549 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1392.093 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 763027.482 ops/s
[info]                  ·gc.alloc.rate:                   558.447 MB/sec
[info]                  ·gc.alloc.rate.norm:              1152.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.129 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.371 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1391.138 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 763204.113 ops/s
[info]                  ·gc.alloc.rate:                   558.480 MB/sec
[info]                  ·gc.alloc.rate.norm:              1152.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.222 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1390.746 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala":
[info]   763870.968 ±(99.9%) 6876.127 ops/s [Average]
[info]   (min, avg, max) = (761715.217, 763870.968, 766044.222), stdev = 1785.708
[info]   CI (99.9%): [756994.841, 770747.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   558.970 ±(99.9%) 4.927 MB/sec [Average]
[info]   (min, avg, max) = (557.383, 558.970, 560.533), stdev = 1.280
[info]   CI (99.9%): [554.042, 563.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1152.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1152.001, 1152.001, 1152.001), stdev = 0.001
[info]   CI (99.9%): [1152.000, 1152.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.451 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.270), stdev = 0.117
[info]   CI (99.9%): [≈ 0, 0.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.137 ±(99.9%) 0.928 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.137, 0.556), stdev = 0.241
[info]   CI (99.9%): [≈ 0, 1.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   539.126 ±(99.9%) 1160.509 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.126, 674.371), stdev = 301.381
[info]   CI (99.9%): [≈ 0, 1699.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1111.884 ±(99.9%) 2393.435 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1111.884, 1392.093), stdev = 621.567
[info]   CI (99.9%): [≈ 0, 3505.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   3.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 75.30% complete, ETA 00:33:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2008266.286 ops/s
[info] # Warmup Iteration   2: 2206356.286 ops/s
[info] # Warmup Iteration   3: 1982397.535 ops/s
[info] # Warmup Iteration   4: 1988532.794 ops/s
[info] # Warmup Iteration   5: 1988383.570 ops/s
[info] Iteration   1: 1982288.738 ops/s
[info]                  ·gc.alloc.rate:                   916.585 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.840 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 533.611 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 1986809.816 ops/s
[info]                  ·gc.alloc.rate:                   919.192 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.840 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1064.321 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1983243.297 ops/s
[info]                  ·gc.alloc.rate:                   917.173 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.268 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 532.815 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1984122.423 ops/s
[info]                  ·gc.alloc.rate:                   917.563 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.615 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1065.239 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1987590.999 ops/s
[info]                  ·gc.alloc.rate:                   919.206 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.675 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 531.959 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala":
[info]   1984811.055 ±(99.9%) 8826.566 ops/s [Average]
[info]   (min, avg, max) = (1982288.738, 1984811.055, 1987590.999), stdev = 2292.231
[info]   CI (99.9%): [1975984.489, 1993637.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   917.944 ±(99.9%) 4.612 MB/sec [Average]
[info]   (min, avg, max) = (916.585, 917.944, 919.206), stdev = 1.198
[info]   CI (99.9%): [913.332, 922.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (728.000, 728.000, 728.000), stdev = 0.001
[info]   CI (99.9%): [728.000, 728.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.188 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.104), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.033 ±(99.9%) 0.149 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.083), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   940.248 ±(99.9%) 1416.532 MB/sec [Average]
[info]   (min, avg, max) = (671.268, 940.248, 1343.840), stdev = 367.869
[info]   CI (99.9%): [≈ 0, 2356.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   745.589 ±(99.9%) 1122.004 B/op [Average]
[info]   (min, avg, max) = (531.959, 745.589, 1065.239), stdev = 291.381
[info]   CI (99.9%): [≈ 0, 1867.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 75.50% complete, ETA 00:32:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2229887.617 ops/s
[info] # Warmup Iteration   2: 2376705.561 ops/s
[info] # Warmup Iteration   3: 2365505.180 ops/s
[info] # Warmup Iteration   4: 2371453.414 ops/s
[info] # Warmup Iteration   5: 2382197.950 ops/s
[info] Iteration   1: 2385196.103 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2382193.959 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2387181.744 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2380935.644 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2381027.638 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2383307.017 ±(99.9%) 10657.319 ops/s [Average]
[info]   (min, avg, max) = (2380935.644, 2383307.017, 2387181.744), stdev = 2767.672
[info]   CI (99.9%): [2372649.698, 2393964.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 75.70% complete, ETA 00:32:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 300817.490 ops/s
[info] # Warmup Iteration   2: 374644.385 ops/s
[info] # Warmup Iteration   3: 382119.013 ops/s
[info] # Warmup Iteration   4: 371772.618 ops/s
[info] # Warmup Iteration   5: 378067.810 ops/s
[info] Iteration   1: 384172.308 ops/s
[info]                  ·gc.alloc.rate:                   552.470 MB/sec
[info]                  ·gc.alloc.rate.norm:              2264.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.024 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.096 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.398 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2095.689 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 385351.886 ops/s
[info]                  ·gc.alloc.rate:                   554.212 MB/sec
[info]                  ·gc.alloc.rate.norm:              2264.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4.034 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16.480 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.325 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2750.590 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 385908.642 ops/s
[info]                  ·gc.alloc.rate:      554.976 MB/sec
[info]                  ·gc.alloc.rate.norm: 2264.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 385146.049 ops/s
[info]                  ·gc.alloc.rate:                   553.905 MB/sec
[info]                  ·gc.alloc.rate.norm:              2264.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.085 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.251 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2751.811 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 378045.131 ops/s
[info]                  ·gc.alloc.rate:                   543.680 MB/sec
[info]                  ·gc.alloc.rate.norm:              2264.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.564 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2792.372 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson":
[info]   383724.803 ±(99.9%) 12461.969 ops/s [Average]
[info]   (min, avg, max) = (378045.131, 383724.803, 385908.642), stdev = 3236.334
[info]   CI (99.9%): [371262.835, 396186.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   551.848 ±(99.9%) 17.928 MB/sec [Average]
[info]   (min, avg, max) = (543.680, 551.848, 554.976), stdev = 4.656
[info]   CI (99.9%): [533.921, 569.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2264.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2264.001, 2264.001, 2264.001), stdev = 0.001
[info]   CI (99.9%): [2264.001, 2264.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.816 ±(99.9%) 6.928 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.816, 4.034), stdev = 1.799
[info]   CI (99.9%): [≈ 0, 7.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3.332 ±(99.9%) 28.301 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.332, 16.480), stdev = 7.350
[info]   CI (99.9%): [≈ 0, 31.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   505.708 ±(99.9%) 1121.186 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 505.708, 673.325), stdev = 291.169
[info]   CI (99.9%): [≈ 0, 1626.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2078.092 ±(99.9%) 4610.783 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2078.092, 2792.372), stdev = 1197.406
[info]   CI (99.9%): [≈ 0, 6688.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.342
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 75.90% complete, ETA 00:32:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 168999.195 ops/s
[info] # Warmup Iteration   2: 175464.004 ops/s
[info] # Warmup Iteration   3: 178067.104 ops/s
[info] # Warmup Iteration   4: 178090.273 ops/s
[info] # Warmup Iteration   5: 172345.503 ops/s
[info] Iteration   1: 177946.166 ops/s
[info]                  ·gc.alloc.rate:                   453.922 MB/sec
[info]                  ·gc.alloc.rate.norm:              4016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.024 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.210 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.433 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4524.829 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 177828.003 ops/s
[info]                  ·gc.alloc.rate:                   453.707 MB/sec
[info]                  ·gc.alloc.rate.norm:              4016.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.557 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4528.060 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 178640.129 ops/s
[info]                  ·gc.alloc.rate:      455.696 MB/sec
[info]                  ·gc.alloc.rate.norm: 4016.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 177639.998 ops/s
[info]                  ·gc.alloc.rate:                   453.183 MB/sec
[info]                  ·gc.alloc.rate.norm:              4016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.350 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29.688 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.618 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5978.306 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 177460.585 ops/s
[info]                  ·gc.alloc.rate:                   452.860 MB/sec
[info]                  ·gc.alloc.rate.norm:              4016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.369 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.802 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5984.200 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle":
[info]   177902.976 ±(99.9%) 1738.928 ops/s [Average]
[info]   (min, avg, max) = (177460.585, 177902.976, 178640.129), stdev = 451.594
[info]   CI (99.9%): [176164.049, 179641.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.alloc.rate":
[info]   453.874 ±(99.9%) 4.242 MB/sec [Average]
[info]   (min, avg, max) = (452.860, 453.874, 455.696), stdev = 1.102
[info]   CI (99.9%): [449.631, 458.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   4016.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4016.002, 4016.002, 4016.002), stdev = 0.001
[info]   CI (99.9%): [4016.002, 4016.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0.683 ±(99.9%) 5.741 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.683, 3.350), stdev = 1.491
[info]   CI (99.9%): [≈ 0, 6.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   6.053 ±(99.9%) 50.878 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.053, 29.688), stdev = 13.213
[info]   CI (99.9%): [≈ 0, 56.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   474.482 ±(99.9%) 1068.607 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474.482, 674.802), stdev = 277.514
[info]   CI (99.9%): [≈ 0, 1543.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   4203.079 ±(99.9%) 9471.103 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4203.079, 5984.200), stdev = 2459.615
[info]   CI (99.9%): [≈ 0, 13674.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.140
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 76.10% complete, ETA 00:32:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 47033.084 ops/s
[info] # Warmup Iteration   2: 58360.625 ops/s
[info] # Warmup Iteration   3: 58467.097 ops/s
[info] # Warmup Iteration   4: 60050.229 ops/s
[info] # Warmup Iteration   5: 59875.623 ops/s
[info] Iteration   1: 58773.614 ops/s
[info]                  ·gc.alloc.rate:                   1979.047 MB/sec
[info]                  ·gc.alloc.rate.norm:              53016.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.230 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2014.822 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53974.365 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 58798.180 ops/s
[info]                  ·gc.alloc.rate:                   1979.961 MB/sec
[info]                  ·gc.alloc.rate.norm:              53016.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.343 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2018.328 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54043.324 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 60107.378 ops/s
[info]                  ·gc.alloc.rate:                   2024.215 MB/sec
[info]                  ·gc.alloc.rate.norm:              53016.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.090 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021.638 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52948.519 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 59990.957 ops/s
[info]                  ·gc.alloc.rate:                   2020.236 MB/sec
[info]                  ·gc.alloc.rate.norm:              53016.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025.261 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53147.864 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 59467.833 ops/s
[info]                  ·gc.alloc.rate:                   2003.043 MB/sec
[info]                  ·gc.alloc.rate.norm:              53016.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.551 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.378 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53686.569 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce":
[info]   59427.592 ±(99.9%) 2439.129 ops/s [Average]
[info]   (min, avg, max) = (58773.614, 59427.592, 60107.378), stdev = 633.434
[info]   CI (99.9%): [56988.464, 61866.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2001.300 ±(99.9%) 82.525 MB/sec [Average]
[info]   (min, avg, max) = (1979.047, 2001.300, 2024.215), stdev = 21.432
[info]   CI (99.9%): [1918.775, 2083.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   53016.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (53016.007, 53016.007, 53016.007), stdev = 0.001
[info]   CI (99.9%): [53016.006, 53016.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.125), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.661 ±(99.9%) 4.320 B/op [Average]
[info]   (min, avg, max) = (0.551, 1.661, 3.343), stdev = 1.122
[info]   CI (99.9%): [≈ 0, 5.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2021.685 ±(99.9%) 20.733 MB/sec [Average]
[info]   (min, avg, max) = (2014.822, 2021.685, 2028.378), stdev = 5.384
[info]   CI (99.9%): [2000.952, 2042.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   53560.128 ±(99.9%) 1891.412 B/op [Average]
[info]   (min, avg, max) = (52948.519, 53560.128, 54043.324), stdev = 491.194
[info]   CI (99.9%): [51668.716, 55451.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76.31% complete, ETA 00:31:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 41998.380 ops/s
[info] # Warmup Iteration   2: 86624.631 ops/s
[info] # Warmup Iteration   3: 86750.706 ops/s
[info] # Warmup Iteration   4: 89086.247 ops/s
[info] # Warmup Iteration   5: 89161.186 ops/s
[info] Iteration   1: 88796.596 ops/s
[info]                  ·gc.alloc.rate:                   1596.364 MB/sec
[info]                  ·gc.alloc.rate.norm:              28304.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.107 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.877 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35954.854 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 89281.901 ops/s
[info]                  ·gc.alloc.rate:                   1605.551 MB/sec
[info]                  ·gc.alloc.rate.norm:              28304.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.734 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.409 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23859.026 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 89021.377 ops/s
[info]                  ·gc.alloc.rate:                   1600.521 MB/sec
[info]                  ·gc.alloc.rate.norm:              28304.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.137 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23946.894 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 89167.345 ops/s
[info]                  ·gc.alloc.rate:                   1603.222 MB/sec
[info]                  ·gc.alloc.rate.norm:              28304.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.837 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.066 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35892.663 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 89219.420 ops/s
[info]                  ·gc.alloc.rate:                   1604.111 MB/sec
[info]                  ·gc.alloc.rate.norm:              28304.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.734 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1357.099 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23945.564 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala":
[info]   89097.328 ±(99.9%) 745.883 ops/s [Average]
[info]   (min, avg, max) = (88796.596, 89097.328, 89281.901), stdev = 193.704
[info]   CI (99.9%): [88351.444, 89843.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1601.954 ±(99.9%) 13.951 MB/sec [Average]
[info]   (min, avg, max) = (1596.364, 1601.954, 1605.551), stdev = 3.623
[info]   CI (99.9%): [1588.003, 1615.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   28304.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (28304.005, 28304.005, 28304.005), stdev = 0.001
[info]   CI (99.9%): [28304.004, 28304.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.104), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.882 ±(99.9%) 2.572 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.882, 1.837), stdev = 0.668
[info]   CI (99.9%): [≈ 0, 3.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1625.118 ±(99.9%) 1424.904 MB/sec [Average]
[info]   (min, avg, max) = (1353.409, 1625.118, 2033.066), stdev = 370.043
[info]   CI (99.9%): [200.214, 3050.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   28719.800 ±(99.9%) 25323.442 B/op [Average]
[info]   (min, avg, max) = (23859.026, 28719.800, 35954.854), stdev = 6576.417
[info]   CI (99.9%): [3396.358, 54043.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76.51% complete, ETA 00:31:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 88361.795 ops/s
[info] # Warmup Iteration   2: 98784.173 ops/s
[info] # Warmup Iteration   3: 98948.246 ops/s
[info] # Warmup Iteration   4: 99747.510 ops/s
[info] # Warmup Iteration   5: 99743.530 ops/s
[info] Iteration   1: 99762.409 ops/s
[info]                  ·gc.alloc.rate:                   1528.216 MB/sec
[info]                  ·gc.alloc.rate.norm:              24120.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.314 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.207 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21184.203 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 99582.192 ops/s
[info]                  ·gc.alloc.rate:                   1525.900 MB/sec
[info]                  ·gc.alloc.rate.norm:              24120.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.658 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2014.761 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31847.451 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 99010.822 ops/s
[info]                  ·gc.alloc.rate:                   1517.014 MB/sec
[info]                  ·gc.alloc.rate.norm:              24120.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.523 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21377.470 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 99459.198 ops/s
[info]                  ·gc.alloc.rate:                   1523.803 MB/sec
[info]                  ·gc.alloc.rate.norm:              24120.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.659 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.818 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21302.708 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 99421.018 ops/s
[info]                  ·gc.alloc.rate:                   1523.199 MB/sec
[info]                  ·gc.alloc.rate.norm:              24120.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.330 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21336.138 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala":
[info]   99447.128 ±(99.9%) 1069.958 ops/s [Average]
[info]   (min, avg, max) = (99010.822, 99447.128, 99762.409), stdev = 277.865
[info]   CI (99.9%): [98377.170, 100517.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1523.627 ±(99.9%) 16.129 MB/sec [Average]
[info]   (min, avg, max) = (1517.014, 1523.627, 1528.216), stdev = 4.189
[info]   CI (99.9%): [1507.497, 1539.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   24120.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (24120.004, 24120.004, 24120.004), stdev = 0.001
[info]   CI (99.9%): [24120.004, 24120.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.083), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.592 ±(99.9%) 1.875 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.592, 1.314), stdev = 0.487
[info]   CI (99.9%): [≈ 0, 2.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1478.941 ±(99.9%) 1153.416 MB/sec [Average]
[info]   (min, avg, max) = (1342.207, 1478.941, 2014.761), stdev = 299.538
[info]   CI (99.9%): [325.525, 2632.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   23409.594 ±(99.9%) 18165.238 B/op [Average]
[info]   (min, avg, max) = (21184.203, 23409.594, 31847.451), stdev = 4717.455
[info]   CI (99.9%): [5244.356, 41574.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 76.71% complete, ETA 00:31:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8560.790 ops/s
[info] # Warmup Iteration   2: 17518.400 ops/s
[info] # Warmup Iteration   3: 17849.510 ops/s
[info] # Warmup Iteration   4: 17624.638 ops/s
[info] # Warmup Iteration   5: 17842.882 ops/s
[info] Iteration   1: 17787.668 ops/s
[info]                  ·gc.alloc.rate:                   1239.933 MB/sec
[info]                  ·gc.alloc.rate.norm:              109712.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.366 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.712 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 119513.973 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 17837.325 ops/s
[info]                  ·gc.alloc.rate:                   1243.357 MB/sec
[info]                  ·gc.alloc.rate.norm:              109712.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.464 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 119251.203 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 17862.955 ops/s
[info]                  ·gc.alloc.rate:                   1244.859 MB/sec
[info]                  ·gc.alloc.rate.norm:              109712.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.834 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.383 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 119188.373 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 17924.023 ops/s
[info]                  ·gc.alloc.rate:                   1249.231 MB/sec
[info]                  ·gc.alloc.rate.norm:              109712.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676.924 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59449.914 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 17713.084 ops/s
[info]                  ·gc.alloc.rate:                   1234.470 MB/sec
[info]                  ·gc.alloc.rate.norm:              109712.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.699 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.115 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 120345.372 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson":
[info]   17825.011 ±(99.9%) 306.343 ops/s [Average]
[info]   (min, avg, max) = (17713.084, 17825.011, 17924.023), stdev = 79.556
[info]   CI (99.9%): [17518.668, 18131.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1242.370 ±(99.9%) 21.318 MB/sec [Average]
[info]   (min, avg, max) = (1234.470, 1242.370, 1249.231), stdev = 5.536
[info]   CI (99.9%): [1221.052, 1263.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   109712.025 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (109712.023, 109712.025, 109712.029), stdev = 0.002
[info]   CI (99.9%): [109712.016, 109712.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.083), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.580 ±(99.9%) 11.873 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.580, 7.366), stdev = 3.083
[info]   CI (99.9%): [≈ 0, 14.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1217.120 ±(99.9%) 1162.822 MB/sec [Average]
[info]   (min, avg, max) = (676.924, 1217.120, 1354.115), stdev = 301.981
[info]   CI (99.9%): [54.297, 2379.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   107549.767 ±(99.9%) 103553.802 B/op [Average]
[info]   (min, avg, max) = (59449.914, 107549.767, 120345.372), stdev = 26892.594
[info]   CI (99.9%): [3995.965, 211103.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76.91% complete, ETA 00:30:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 73079.479 ops/s
[info] # Warmup Iteration   2: 121547.205 ops/s
[info] # Warmup Iteration   3: 123313.146 ops/s
[info] # Warmup Iteration   4: 123180.416 ops/s
[info] # Warmup Iteration   5: 123441.950 ops/s
[info] Iteration   1: 122383.141 ops/s
[info]                  ·gc.alloc.rate:                   1126.896 MB/sec
[info]                  ·gc.alloc.rate.norm:              14496.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.764 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17362.912 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 122907.068 ops/s
[info]                  ·gc.alloc.rate:                   1131.630 MB/sec
[info]                  ·gc.alloc.rate.norm:              14496.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.533 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.657 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17301.700 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 122679.755 ops/s
[info]                  ·gc.alloc.rate:                   1130.069 MB/sec
[info]                  ·gc.alloc.rate.norm:              14496.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.800 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.659 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17325.628 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 122611.336 ops/s
[info]                  ·gc.alloc.rate:                   1129.002 MB/sec
[info]                  ·gc.alloc.rate.norm:              14496.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676.213 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8682.346 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 122973.371 ops/s
[info]                  ·gc.alloc.rate:                   1132.270 MB/sec
[info]                  ·gc.alloc.rate.norm:              14496.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.799 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.004 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17321.972 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala":
[info]   122710.934 ±(99.9%) 914.643 ops/s [Average]
[info]   (min, avg, max) = (122383.141, 122710.934, 122973.371), stdev = 237.530
[info]   CI (99.9%): [121796.292, 123625.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1129.973 ±(99.9%) 8.269 MB/sec [Average]
[info]   (min, avg, max) = (1126.896, 1129.973, 1132.270), stdev = 2.147
[info]   CI (99.9%): [1121.705, 1138.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   14496.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (14496.003, 14496.003, 14496.004), stdev = 0.001
[info]   CI (99.9%): [14496.003, 14496.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.083), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.641 ±(99.9%) 1.561 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.641, 1.071), stdev = 0.405
[info]   CI (99.9%): [≈ 0, 2.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1216.059 ±(99.9%) 1162.069 MB/sec [Average]
[info]   (min, avg, max) = (676.213, 1216.059, 1353.004), stdev = 301.786
[info]   CI (99.9%): [53.990, 2378.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   15598.911 ±(99.9%) 14888.672 B/op [Average]
[info]   (min, avg, max) = (8682.346, 15598.911, 17362.912), stdev = 3866.541
[info]   CI (99.9%): [710.239, 30487.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 77.11% complete, ETA 00:30:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 439998.673 ops/s
[info] # Warmup Iteration   2: 473626.888 ops/s
[info] # Warmup Iteration   3: 469945.049 ops/s
[info] # Warmup Iteration   4: 472063.304 ops/s
[info] # Warmup Iteration   5: 472204.804 ops/s
[info] Iteration   1: 472132.997 ops/s
[info]                  ·gc.alloc.rate:                   520.590 MB/sec
[info]                  ·gc.alloc.rate.norm:              1736.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.392 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1705.330 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 471636.804 ops/s
[info]                  ·gc.alloc.rate:      520.112 MB/sec
[info]                  ·gc.alloc.rate.norm: 1736.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 473121.056 ops/s
[info]                  ·gc.alloc.rate:                   521.687 MB/sec
[info]                  ·gc.alloc.rate.norm:              1736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.364 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.195 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.529 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2244.609 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 474951.841 ops/s
[info]                  ·gc.alloc.rate:                   523.743 MB/sec
[info]                  ·gc.alloc.rate.norm:              1736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.561 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2235.901 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 474180.357 ops/s
[info]                  ·gc.alloc.rate:                   522.974 MB/sec
[info]                  ·gc.alloc.rate.norm:              1736.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2230.787 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala":
[info]   473204.611 ±(99.9%) 5314.114 ops/s [Average]
[info]   (min, avg, max) = (471636.804, 473204.611, 474951.841), stdev = 1380.059
[info]   CI (99.9%): [467890.497, 478518.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   521.821 ±(99.9%) 5.928 MB/sec [Average]
[info]   (min, avg, max) = (520.112, 521.821, 523.743), stdev = 1.539
[info]   CI (99.9%): [515.893, 527.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1736.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1736.001, 1736.001, 1736.001), stdev = 0.001
[info]   CI (99.9%): [1736.001, 1736.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.677 ±(99.9%) 5.784 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.677, 3.364), stdev = 1.502
[info]   CI (99.9%): [≈ 0, 6.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2.253 ±(99.9%) 19.249 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.253, 11.195), stdev = 4.999
[info]   CI (99.9%): [≈ 0, 21.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   506.502 ±(99.9%) 1123.379 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506.502, 674.561), stdev = 291.738
[info]   CI (99.9%): [≈ 0, 1629.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1683.326 ±(99.9%) 3730.439 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1683.326, 2244.609), stdev = 968.783
[info]   CI (99.9%): [≈ 0, 5413.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 77.31% complete, ETA 00:30:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 532572.690 ops/s
[info] # Warmup Iteration   2: 569961.056 ops/s
[info] # Warmup Iteration   3: 576718.369 ops/s
[info] # Warmup Iteration   4: 573587.982 ops/s
[info] # Warmup Iteration   5: 571968.619 ops/s
[info] Iteration   1: 575279.262 ops/s
[info]                  ·gc.alloc.rate:      5.847 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 575541.181 ops/s
[info]                  ·gc.alloc.rate:      5.849 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 570772.741 ops/s
[info]                  ·gc.alloc.rate:      5.801 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 573510.362 ops/s
[info]                  ·gc.alloc.rate:      5.829 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 575676.117 ops/s
[info]                  ·gc.alloc.rate:      5.852 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   574155.932 ±(99.9%) 8020.645 ops/s [Average]
[info]   (min, avg, max) = (570772.741, 574155.932, 575676.117), stdev = 2082.936
[info]   CI (99.9%): [566135.287, 582176.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   5.836 ±(99.9%) 0.082 MB/sec [Average]
[info]   (min, avg, max) = (5.801, 5.836, 5.852), stdev = 0.021
[info]   CI (99.9%): [5.753, 5.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.001, 16.001, 16.001), stdev = 0.001
[info]   CI (99.9%): [16.001, 16.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 77.51% complete, ETA 00:30:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11730.528 ops/s
[info] # Warmup Iteration   2: 20852.580 ops/s
[info] # Warmup Iteration   3: 20717.176 ops/s
[info] # Warmup Iteration   4: 20970.063 ops/s
[info] # Warmup Iteration   5: 20991.578 ops/s
[info] Iteration   1: 21015.088 ops/s
[info]                  ·gc.alloc.rate:                   401.110 MB/sec
[info]                  ·gc.alloc.rate.norm:              30048.805 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.380 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38309.613 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 21111.378 ops/s
[info]                  ·gc.alloc.rate:                   403.017 MB/sec
[info]                  ·gc.alloc.rate.norm:              30048.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.103 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.490 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38135.453 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 21133.436 ops/s
[info]                  ·gc.alloc.rate:      403.393 MB/sec
[info]                  ·gc.alloc.rate.norm: 30048.019 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 21074.261 ops/s
[info]                  ·gc.alloc.rate:                   402.277 MB/sec
[info]                  ·gc.alloc.rate.norm:              30048.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.291 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21.762 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.603 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50314.735 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 21031.271 ops/s
[info]                  ·gc.alloc.rate:                   401.427 MB/sec
[info]                  ·gc.alloc.rate.norm:              30048.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.555 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50417.580 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson":
[info]   21073.087 ±(99.9%) 194.658 ops/s [Average]
[info]   (min, avg, max) = (21015.088, 21073.087, 21133.436), stdev = 50.552
[info]   CI (99.9%): [20878.429, 21267.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   402.245 ±(99.9%) 3.789 MB/sec [Average]
[info]   (min, avg, max) = (401.110, 402.245, 403.393), stdev = 0.984
[info]   CI (99.9%): [398.455, 406.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   30048.177 ±(99.9%) 1.351 B/op [Average]
[info]   (min, avg, max) = (30048.019, 30048.177, 30048.805), stdev = 0.351
[info]   CI (99.9%): [30046.825, 30049.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.489 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.291), stdev = 0.127
[info]   CI (99.9%): [≈ 0, 0.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4.973 ±(99.9%) 36.509 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.973, 21.762), stdev = 9.481
[info]   CI (99.9%): [≈ 0, 41.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   474.006 ±(99.9%) 1067.022 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474.006, 673.603), stdev = 277.102
[info]   CI (99.9%): [≈ 0, 1541.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   35435.476 ±(99.9%) 79780.828 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 35435.476, 50417.580), stdev = 20718.828
[info]   CI (99.9%): [≈ 0, 115216.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce
[info] # Run progress: 77.71% complete, ETA 00:29:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1284449.055 ops/s
[info] # Warmup Iteration   2: 2202230.037 ops/s
[info] # Warmup Iteration   3: 2262869.828 ops/s
[info] # Warmup Iteration   4: 2261895.994 ops/s
[info] # Warmup Iteration   5: 2261383.376 ops/s
[info] Iteration   1: 2264772.335 ops/s
[info]                  ·gc.alloc.rate:                   3107.129 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3372.832 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2344.710 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2248529.862 ops/s
[info]                  ·gc.alloc.rate:                   3084.981 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2705.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1893.957 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 2227420.604 ops/s
[info]                  ·gc.alloc.rate:                   3056.368 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.044 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3387.692 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2394.154 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2267227.717 ops/s
[info]                  ·gc.alloc.rate:                   3111.376 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2715.483 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1885.160 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2249565.145 ops/s
[info]                  ·gc.alloc.rate:                   3086.841 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3398.014 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2377.742 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce":
[info]   2251503.133 ±(99.9%) 61366.102 ops/s [Average]
[info]   (min, avg, max) = (2227420.604, 2251503.133, 2267227.717), stdev = 15936.582
[info]   CI (99.9%): [2190137.030, 2312869.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate":
[info]   3089.339 ±(99.9%) 84.241 MB/sec [Average]
[info]   (min, avg, max) = (3056.368, 3089.339, 3111.376), stdev = 21.877
[info]   CI (99.9%): [3005.097, 3173.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2160.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2160.000, 2160.000, 2160.000), stdev = 0.001
[info]   CI (99.9%): [2160.000, 2160.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.058, 0.083), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.041 ±(99.9%) 0.047 B/op [Average]
[info]   (min, avg, max) = (0.029, 0.041, 0.058), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   3115.806 ±(99.9%) 1426.088 MB/sec [Average]
[info]   (min, avg, max) = (2705.010, 3115.806, 3398.014), stdev = 370.351
[info]   CI (99.9%): [1689.718, 4541.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2179.145 ±(99.9%) 1020.313 B/op [Average]
[info]   (min, avg, max) = (1885.160, 2179.145, 2394.154), stdev = 264.972
[info]   CI (99.9%): [1158.831, 3199.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava
[info] # Run progress: 77.91% complete, ETA 00:29:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.911 ops/s
[info] # Warmup Iteration   2: 832736.265 ops/s
[info] # Warmup Iteration   3: 839925.260 ops/s
[info] # Warmup Iteration   4: 844128.867 ops/s
[info] # Warmup Iteration   5: 841688.153 ops/s
[info] Iteration   1: 844464.299 ops/s
[info]                  ·gc.alloc.rate:                   536.424 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.430 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 953.408 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 852770.266 ops/s
[info]                  ·gc.alloc.rate:                   541.766 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.490 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.596 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.403 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1242.977 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 857702.425 ops/s
[info]                  ·gc.alloc.rate:      544.936 MB/sec
[info]                  ·gc.alloc.rate.norm: 1000.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 855064.683 ops/s
[info]                  ·gc.alloc.rate:                   543.252 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.400 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1239.573 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 851128.117 ops/s
[info]                  ·gc.alloc.rate:                   540.609 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.889 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1242.838 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava":
[info]   852225.958 ±(99.9%) 19233.467 ops/s [Average]
[info]   (min, avg, max) = (844464.299, 852225.958, 857702.425), stdev = 4994.870
[info]   CI (99.9%): [832992.490, 871459.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   541.397 ±(99.9%) 12.396 MB/sec [Average]
[info]   (min, avg, max) = (536.424, 541.397, 544.936), stdev = 3.219
[info]   CI (99.9%): [529.001, 553.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1000.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1000.000, 1000.000, 1000.001), stdev = 0.001
[info]   CI (99.9%): [1000.000, 1000.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.502 ±(99.9%) 4.279 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.502, 2.490), stdev = 1.111
[info]   CI (99.9%): [≈ 0, 4.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0.927 ±(99.9%) 7.899 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.927, 4.596), stdev = 2.051
[info]   CI (99.9%): [≈ 0, 8.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   506.024 ±(99.9%) 1122.037 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506.024, 673.403), stdev = 291.389
[info]   CI (99.9%): [≈ 0, 1628.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   935.759 ±(99.9%) 2070.898 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 935.759, 1242.977), stdev = 537.806
[info]   CI (99.9%): [≈ 0, 3006.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.140
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala
[info] # Run progress: 78.11% complete, ETA 00:29:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37686.071 ops/s
[info] # Warmup Iteration   2: 306021.869 ops/s
[info] # Warmup Iteration   3: 307723.427 ops/s
[info] # Warmup Iteration   4: 306181.348 ops/s
[info] # Warmup Iteration   5: 304793.087 ops/s
[info] Iteration   1: 303768.832 ops/s
[info]                  ·gc.alloc.rate:                   569.586 MB/sec
[info]                  ·gc.alloc.rate.norm:              2952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.216 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.395 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2650.412 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 305415.472 ops/s
[info]                  ·gc.alloc.rate:                   572.780 MB/sec
[info]                  ·gc.alloc.rate.norm:              2952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.180 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.712 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3472.186 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 304958.702 ops/s
[info]                  ·gc.alloc.rate:                   571.865 MB/sec
[info]                  ·gc.alloc.rate.norm:              2952.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.604 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3477.183 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 305271.600 ops/s
[info]                  ·gc.alloc.rate:                   572.441 MB/sec
[info]                  ·gc.alloc.rate.norm:              2952.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.581 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3478.724 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 305005.758 ops/s
[info]                  ·gc.alloc.rate:                   571.911 MB/sec
[info]                  ·gc.alloc.rate.norm:              2952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.215 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.553 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3481.803 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala":
[info]   304884.073 ±(99.9%) 2507.875 ops/s [Average]
[info]   (min, avg, max) = (303768.832, 304884.073, 305415.472), stdev = 651.287
[info]   CI (99.9%): [302376.198, 307391.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   571.717 ±(99.9%) 4.815 MB/sec [Average]
[info]   (min, avg, max) = (569.586, 571.717, 572.780), stdev = 1.251
[info]   CI (99.9%): [566.902, 576.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2952.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2952.001, 2952.001, 2952.001), stdev = 0.001
[info]   CI (99.9%): [2952.001, 2952.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.367 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.229), stdev = 0.095
[info]   CI (99.9%): [≈ 0, 0.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.322 ±(99.9%) 1.893 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.322, 1.180), stdev = 0.492
[info]   CI (99.9%): [≈ 0, 2.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   641.569 ±(99.9%) 280.216 MB/sec [Average]
[info]   (min, avg, max) = (511.395, 641.569, 674.581), stdev = 72.771
[info]   CI (99.9%): [361.353, 921.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3312.061 ±(99.9%) 1424.314 B/op [Average]
[info]   (min, avg, max) = (2650.412, 3312.061, 3481.803), stdev = 369.890
[info]   CI (99.9%): [1887.748, 4736.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala
[info] # Run progress: 78.31% complete, ETA 00:29:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 722429.797 ops/s
[info] # Warmup Iteration   2: 797798.648 ops/s
[info] # Warmup Iteration   3: 782793.354 ops/s
[info] # Warmup Iteration   4: 799093.592 ops/s
[info] # Warmup Iteration   5: 808695.075 ops/s
[info] Iteration   1: 799215.873 ops/s
[info]                  ·gc.alloc.rate:                   601.013 MB/sec
[info]                  ·gc.alloc.rate.norm:              1184.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.356 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1007.375 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 814256.574 ops/s
[info]                  ·gc.alloc.rate:                   612.516 MB/sec
[info]                  ·gc.alloc.rate.norm:              1184.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.239 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.261 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.770 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1304.337 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 809748.878 ops/s
[info]                  ·gc.alloc.rate:                   609.014 MB/sec
[info]                  ·gc.alloc.rate.norm:              1184.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.121 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.647 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1311.599 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 809735.301 ops/s
[info]                  ·gc.alloc.rate:                   608.969 MB/sec
[info]                  ·gc.alloc.rate.norm:              1184.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.570 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1307.658 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 802718.241 ops/s
[info]                  ·gc.alloc.rate:                   603.729 MB/sec
[info]                  ·gc.alloc.rate.norm:              1184.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.565 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1318.996 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala":
[info]   807134.973 ±(99.9%) 23306.026 ops/s [Average]
[info]   (min, avg, max) = (799215.873, 807134.973, 814256.574), stdev = 6052.501
[info]   CI (99.9%): [783828.948, 830440.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   607.048 ±(99.9%) 17.739 MB/sec [Average]
[info]   (min, avg, max) = (601.013, 607.048, 612.516), stdev = 4.607
[info]   CI (99.9%): [589.309, 624.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1184.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1184.001, 1184.001, 1184.001), stdev = 0.001
[info]   CI (99.9%): [1184.000, 1184.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.660 ±(99.9%) 5.552 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.660, 3.239), stdev = 1.442
[info]   CI (99.9%): [≈ 0, 6.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.276 ±(99.9%) 10.732 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.276, 6.261), stdev = 2.787
[info]   CI (99.9%): [≈ 0, 12.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   641.181 ±(99.9%) 279.490 MB/sec [Average]
[info]   (min, avg, max) = (511.356, 641.181, 674.770), stdev = 72.583
[info]   CI (99.9%): [361.691, 920.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1249.993 ±(99.9%) 522.678 B/op [Average]
[info]   (min, avg, max) = (1007.375, 1249.993, 1318.996), stdev = 135.738
[info]   CI (99.9%): [727.315, 1772.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.140
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless
[info] # Run progress: 78.51% complete, ETA 00:28:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3985669.939 ops/s
[info] # Warmup Iteration   2: 4418802.259 ops/s
[info] # Warmup Iteration   3: 4594651.396 ops/s
[info] # Warmup Iteration   4: 4611869.219 ops/s
[info] # Warmup Iteration   5: 4598089.390 ops/s
[info] Iteration   1: 4564778.955 ops/s
[info]                  ·gc.alloc.rate:                   1461.353 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.751 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 463.441 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 4606329.013 ops/s
[info]                  ·gc.alloc.rate:                   1475.113 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.283 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 459.300 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 4566100.531 ops/s
[info]                  ·gc.alloc.rate:                   1461.836 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.449 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 463.528 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 4589228.025 ops/s
[info]                  ·gc.alloc.rate:                   1469.225 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.792 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 461.658 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 4459049.001 ops/s
[info]                  ·gc.alloc.rate:                   1427.609 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.162 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 475.599 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless":
[info]   4557097.105 ±(99.9%) 221283.745 ops/s [Average]
[info]   (min, avg, max) = (4459049.001, 4557097.105, 4606329.013), stdev = 57466.686
[info]   CI (99.9%): [4335813.361, 4778380.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate":
[info]   1459.027 ±(99.9%) 71.084 MB/sec [Average]
[info]   (min, avg, max) = (1427.609, 1459.027, 1475.113), stdev = 18.460
[info]   CI (99.9%): [1387.943, 1530.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm":
[info]   504.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (504.000, 504.000, 504.000), stdev = 0.001
[info]   CI (99.9%): [504.000, 504.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm":
[info]   0.023 ±(99.9%) 0.036 B/op [Average]
[info]   (min, avg, max) = (0.014, 0.023, 0.036), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space":
[info]   1345.087 ±(99.9%) 5.323 MB/sec [Average]
[info]   (min, avg, max) = (1343.751, 1345.087, 1347.162), stdev = 1.382
[info]   CI (99.9%): [1339.765, 1350.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm":
[info]   464.705 ±(99.9%) 24.367 B/op [Average]
[info]   (min, avg, max) = (459.300, 464.705, 475.599), stdev = 6.328
[info]   CI (99.9%): [440.338, 489.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump
[info] # Run progress: 78.71% complete, ETA 00:28:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7705643.723 ops/s
[info] # Warmup Iteration   2: 8591505.631 ops/s
[info] # Warmup Iteration   3: 8932724.493 ops/s
[info] # Warmup Iteration   4: 8849186.722 ops/s
[info] # Warmup Iteration   5: 8945892.638 ops/s
[info] Iteration   1: 8838974.174 ops/s
[info]                  ·gc.alloc.rate:                   718.595 MB/sec
[info]                  ·gc.alloc.rate.norm:              128.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.221 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.574 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.502 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 120.146 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 8818191.054 ops/s
[info]                  ·gc.alloc.rate:                   717.023 MB/sec
[info]                  ·gc.alloc.rate.norm:              128.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.658 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 120.437 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 8838503.650 ops/s
[info]                  ·gc.alloc.rate:                   718.595 MB/sec
[info]                  ·gc.alloc.rate.norm:              128.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.502 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 119.790 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 8818057.237 ops/s
[info]                  ·gc.alloc.rate:                   717.053 MB/sec
[info]                  ·gc.alloc.rate.norm:              128.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.649 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 240.031 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 8754798.681 ops/s
[info]                  ·gc.alloc.rate:                   711.914 MB/sec
[info]                  ·gc.alloc.rate.norm:              128.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.951 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 120.815 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump":
[info]   8813704.959 ±(99.9%) 132868.494 ops/s [Average]
[info]   (min, avg, max) = (8754798.681, 8813704.959, 8838974.174), stdev = 34505.526
[info]   CI (99.9%): [8680836.465, 8946573.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate":
[info]   716.636 ±(99.9%) 10.597 MB/sec [Average]
[info]   (min, avg, max) = (711.914, 716.636, 718.595), stdev = 2.752
[info]   CI (99.9%): [706.039, 727.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm":
[info]   128.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (128.000, 128.000, 128.000), stdev = 0.001
[info]   CI (99.9%): [128.000, 128.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space":
[info]   0.673 ±(99.9%) 5.486 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.673, 3.221), stdev = 1.425
[info]   CI (99.9%): [≈ 0, 6.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm":
[info]   0.120 ±(99.9%) 0.977 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.120, 0.574), stdev = 0.254
[info]   CI (99.9%): [≈ 0, 1.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space":
[info]   807.652 ±(99.9%) 1155.935 MB/sec [Average]
[info]   (min, avg, max) = (671.951, 807.652, 1344.649), stdev = 300.193
[info]   CI (99.9%): [≈ 0, 1963.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm":
[info]   144.244 ±(99.9%) 206.195 B/op [Average]
[info]   (min, avg, max) = (119.790, 144.244, 240.031), stdev = 53.548
[info]   CI (99.9%): [≈ 0, 350.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson
[info] # Run progress: 78.92% complete, ETA 00:28:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24807.791 ops/s
[info] # Warmup Iteration   2: 187286.602 ops/s
[info] # Warmup Iteration   3: 189030.172 ops/s
[info] # Warmup Iteration   4: 194566.668 ops/s
[info] # Warmup Iteration   5: 194725.134 ops/s
[info] Iteration   1: 191995.378 ops/s
[info]                  ·gc.alloc.rate:                   1297.469 MB/sec
[info]                  ·gc.alloc.rate.norm:              10640.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.512 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.645 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11067.875 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 194271.500 ops/s
[info]                  ·gc.alloc.rate:                   1313.530 MB/sec
[info]                  ·gc.alloc.rate.norm:              10640.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.675 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.798 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10949.988 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 191746.399 ops/s
[info]                  ·gc.alloc.rate:                   1295.993 MB/sec
[info]                  ·gc.alloc.rate.norm:              10640.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.509 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11103.997 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 191033.910 ops/s
[info]                  ·gc.alloc.rate:                   1291.191 MB/sec
[info]                  ·gc.alloc.rate.norm:              10640.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.171 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676.922 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5578.145 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 191266.216 ops/s
[info]                  ·gc.alloc.rate:                   1292.481 MB/sec
[info]                  ·gc.alloc.rate.norm:              10640.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.514 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.886 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11145.501 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson":
[info]   192062.681 ±(99.9%) 4974.702 ops/s [Average]
[info]   (min, avg, max) = (191033.910, 192062.681, 194271.500), stdev = 1291.914
[info]   CI (99.9%): [187087.979, 197037.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1298.133 ±(99.9%) 34.561 MB/sec [Average]
[info]   (min, avg, max) = (1291.191, 1298.133, 1313.530), stdev = 8.975
[info]   CI (99.9%): [1263.572, 1332.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10640.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10640.002, 10640.002, 10640.002), stdev = 0.001
[info]   CI (99.9%): [10640.002, 10640.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.083), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.374 ±(99.9%) 1.072 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.374, 0.675), stdev = 0.278
[info]   CI (99.9%): [≈ 0, 1.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1216.952 ±(99.9%) 1162.471 MB/sec [Average]
[info]   (min, avg, max) = (676.922, 1216.952, 1353.886), stdev = 301.890
[info]   CI (99.9%): [54.482, 2379.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   9969.101 ±(99.9%) 9456.025 B/op [Average]
[info]   (min, avg, max) = (5578.145, 9969.101, 11145.501), stdev = 2455.700
[info]   CI (99.9%): [513.076, 19425.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle
[info] # Run progress: 79.12% complete, ETA 00:28:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 205256.768 ops/s
[info] # Warmup Iteration   2: 296812.142 ops/s
[info] # Warmup Iteration   3: 314207.782 ops/s
[info] # Warmup Iteration   4: 315460.199 ops/s
[info] # Warmup Iteration   5: 307202.607 ops/s
[info] Iteration   1: 316218.943 ops/s
[info]                  ·gc.alloc.rate:                   625.046 MB/sec
[info]                  ·gc.alloc.rate.norm:              3112.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.372 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2546.037 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 317125.559 ops/s
[info]                  ·gc.alloc.rate:                   627.067 MB/sec
[info]                  ·gc.alloc.rate.norm:              3112.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.437 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17.055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.087 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3345.352 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 316408.488 ops/s
[info]                  ·gc.alloc.rate:                   625.472 MB/sec
[info]                  ·gc.alloc.rate.norm:              3112.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.207 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.898 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3352.941 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 316385.248 ops/s
[info]                  ·gc.alloc.rate:                   625.401 MB/sec
[info]                  ·gc.alloc.rate.norm:              3112.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.881 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3343.287 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 314366.913 ops/s
[info]                  ·gc.alloc.rate:                   621.439 MB/sec
[info]                  ·gc.alloc.rate.norm:              3112.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.208 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.881 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3364.604 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle":
[info]   316101.030 ±(99.9%) 3967.301 ops/s [Average]
[info]   (min, avg, max) = (314366.913, 316101.030, 317125.559), stdev = 1030.295
[info]   CI (99.9%): [312133.729, 320068.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.alloc.rate":
[info]   624.885 ±(99.9%) 8.003 MB/sec [Average]
[info]   (min, avg, max) = (621.439, 624.885, 627.067), stdev = 2.078
[info]   CI (99.9%): [616.882, 632.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   3112.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3112.001, 3112.001, 3112.001), stdev = 0.001
[info]   CI (99.9%): [3112.001, 3112.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0.704 ±(99.9%) 5.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.704, 3.437), stdev = 1.528
[info]   CI (99.9%): [≈ 0, 6.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   3.494 ±(99.9%) 29.193 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.494, 17.055), stdev = 7.581
[info]   CI (99.9%): [≈ 0, 32.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   640.624 ±(99.9%) 278.255 MB/sec [Average]
[info]   (min, avg, max) = (511.372, 640.624, 674.087), stdev = 72.262
[info]   CI (99.9%): [362.369, 918.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   3190.444 ±(99.9%) 1387.508 B/op [Average]
[info]   (min, avg, max) = (2546.037, 3190.444, 3364.604), stdev = 360.331
[info]   CI (99.9%): [1802.936, 4577.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 1.000
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 79.32% complete, ETA 00:27:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 891815.099 ops/s
[info] # Warmup Iteration   2: 938635.332 ops/s
[info] # Warmup Iteration   3: 938440.954 ops/s
[info] # Warmup Iteration   4: 940281.123 ops/s
[info] # Warmup Iteration   5: 941883.086 ops/s
[info] Iteration   1: 942669.379 ops/s
[info]                  ·gc.alloc.rate:      52.698 MB/sec
[info]                  ·gc.alloc.rate.norm: 88.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 943855.140 ops/s
[info]                  ·gc.alloc.rate:      52.749 MB/sec
[info]                  ·gc.alloc.rate.norm: 88.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 941419.131 ops/s
[info]                  ·gc.alloc.rate:      52.630 MB/sec
[info]                  ·gc.alloc.rate.norm: 88.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 932327.344 ops/s
[info]                  ·gc.alloc.rate:                   52.133 MB/sec
[info]                  ·gc.alloc.rate.norm:              88.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.586 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 863.563 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 943573.540 ops/s
[info]                  ·gc.alloc.rate:      52.750 MB/sec
[info]                  ·gc.alloc.rate.norm: 88.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala":
[info]   940768.907 ±(99.9%) 18535.699 ops/s [Average]
[info]   (min, avg, max) = (932327.344, 940768.907, 943855.140), stdev = 4813.662
[info]   CI (99.9%): [922233.208, 959304.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   52.592 ±(99.9%) 1.007 MB/sec [Average]
[info]   (min, avg, max) = (52.133, 52.592, 52.750), stdev = 0.261
[info]   CI (99.9%): [51.585, 53.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   88.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (88.000, 88.000, 88.001), stdev = 0.001
[info]   CI (99.9%): [88.000, 88.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   102.317 ±(99.9%) 880.981 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102.317, 511.586), stdev = 228.788
[info]   CI (99.9%): [≈ 0, 983.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   172.713 ±(99.9%) 1487.108 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 172.713, 863.563), stdev = 386.197
[info]   CI (99.9%): [≈ 0, 1659.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.time":
[info]   2.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 79.52% complete, ETA 00:27:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31638.712 ops/s
[info] # Warmup Iteration   2: 64013.372 ops/s
[info] # Warmup Iteration   3: 62416.538 ops/s
[info] # Warmup Iteration   4: 64105.081 ops/s
[info] # Warmup Iteration   5: 64566.217 ops/s
[info] Iteration   1: 63855.977 ops/s
[info]                  ·gc.alloc.rate:                   2965.871 MB/sec
[info]                  ·gc.alloc.rate.norm:              73120.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.513 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2713.563 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66899.645 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 63707.658 ops/s
[info]                  ·gc.alloc.rate:                   2959.808 MB/sec
[info]                  ·gc.alloc.rate.norm:              73120.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.600 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2717.593 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67136.245 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 64157.344 ops/s
[info]                  ·gc.alloc.rate:                   2980.087 MB/sec
[info]                  ·gc.alloc.rate.norm:              73120.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.085 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3399.717 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 83416.139 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 63667.625 ops/s
[info]                  ·gc.alloc.rate:                   2957.357 MB/sec
[info]                  ·gc.alloc.rate.norm:              73120.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.544 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2721.709 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67293.670 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 62942.590 ops/s
[info]                  ·gc.alloc.rate:                   2924.013 MB/sec
[info]                  ·gc.alloc.rate.norm:              73120.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.561 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2722.633 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68084.160 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson":
[info]   63666.239 ±(99.9%) 1724.824 ops/s [Average]
[info]   (min, avg, max) = (62942.590, 63666.239, 64157.344), stdev = 447.931
[info]   CI (99.9%): [61941.415, 65391.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2957.427 ±(99.9%) 79.545 MB/sec [Average]
[info]   (min, avg, max) = (2924.013, 2957.427, 2980.087), stdev = 20.658
[info]   CI (99.9%): [2877.882, 3036.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   73120.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (73120.006, 73120.007, 73120.007), stdev = 0.001
[info]   CI (99.9%): [73120.006, 73120.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.238 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.092, 0.166), stdev = 0.062
[info]   CI (99.9%): [≈ 0, 0.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.261 ±(99.9%) 5.833 B/op [Average]
[info]   (min, avg, max) = (0.513, 2.261, 4.085), stdev = 1.515
[info]   CI (99.9%): [≈ 0, 8.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2855.043 ±(99.9%) 1172.534 MB/sec [Average]
[info]   (min, avg, max) = (2713.563, 2855.043, 3399.717), stdev = 304.503
[info]   CI (99.9%): [1682.509, 4027.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   70565.972 ±(99.9%) 27713.880 B/op [Average]
[info]   (min, avg, max) = (66899.645, 70565.972, 83416.139), stdev = 7197.207
[info]   CI (99.9%): [42852.092, 98279.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 79.72% complete, ETA 00:27:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 699145.124 ops/s
[info] # Warmup Iteration   2: 1012075.800 ops/s
[info] # Warmup Iteration   3: 1056871.565 ops/s
[info] # Warmup Iteration   4: 1059871.295 ops/s
[info] # Warmup Iteration   5: 1055960.774 ops/s
[info] Iteration   1: 1055597.181 ops/s
[info]                  ·gc.alloc.rate:                   606.099 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.279 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.498 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1004.527 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 1064096.253 ops/s
[info]                  ·gc.alloc.rate:                   611.024 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.604 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 996.586 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 1057448.170 ops/s
[info]                  ·gc.alloc.rate:                   607.244 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.617 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1004.298 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 1037167.786 ops/s
[info]                  ·gc.alloc.rate:                   595.635 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.686 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1023.977 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1036318.096 ops/s
[info]                  ·gc.alloc.rate:      595.111 MB/sec
[info]                  ·gc.alloc.rate.norm: 904.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala":
[info]   1050125.497 ±(99.9%) 48603.970 ops/s [Average]
[info]   (min, avg, max) = (1036318.096, 1050125.497, 1064096.253), stdev = 12622.297
[info]   CI (99.9%): [1001521.527, 1098729.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   603.022 ±(99.9%) 27.800 MB/sec [Average]
[info]   (min, avg, max) = (595.111, 603.022, 611.024), stdev = 7.220
[info]   CI (99.9%): [575.223, 630.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   904.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (904.000, 904.000, 904.000), stdev = 0.001
[info]   CI (99.9%): [904.000, 904.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.303 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.187), stdev = 0.079
[info]   CI (99.9%): [≈ 0, 0.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.074 ±(99.9%) 0.452 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.074, 0.279), stdev = 0.117
[info]   CI (99.9%): [≈ 0, 0.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   539.281 ±(99.9%) 1160.845 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.281, 674.686), stdev = 301.468
[info]   CI (99.9%): [≈ 0, 1700.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   805.878 ±(99.9%) 1735.150 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 805.878, 1023.977), stdev = 450.613
[info]   CI (99.9%): [≈ 0, 2541.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.time":
[info]   3.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 79.92% complete, ETA 00:26:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 665867.333 ops/s
[info] # Warmup Iteration   2: 687317.740 ops/s
[info] # Warmup Iteration   3: 675875.161 ops/s
[info] # Warmup Iteration   4: 693202.768 ops/s
[info] # Warmup Iteration   5: 686183.440 ops/s
[info] Iteration   1: 688900.434 ops/s
[info]                  ·gc.alloc.rate:                   192.528 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.375 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1168.691 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 694977.314 ops/s
[info]                  ·gc.alloc.rate:      194.278 MB/sec
[info]                  ·gc.alloc.rate.norm: 440.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 687962.405 ops/s
[info]                  ·gc.alloc.rate:                   192.279 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.410 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1170.282 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 690766.942 ops/s
[info]                  ·gc.alloc.rate:      193.064 MB/sec
[info]                  ·gc.alloc.rate.norm: 440.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 688210.087 ops/s
[info]                  ·gc.alloc.rate:      192.354 MB/sec
[info]                  ·gc.alloc.rate.norm: 440.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala":
[info]   690163.436 ±(99.9%) 11192.219 ops/s [Average]
[info]   (min, avg, max) = (687962.405, 690163.436, 694977.314), stdev = 2906.584
[info]   CI (99.9%): [678971.217, 701355.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   192.900 ±(99.9%) 3.191 MB/sec [Average]
[info]   (min, avg, max) = (192.279, 192.900, 194.278), stdev = 0.829
[info]   CI (99.9%): [189.710, 196.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   440.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (440.001, 440.001, 440.001), stdev = 0.001
[info]   CI (99.9%): [440.001, 440.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   204.557 ±(99.9%) 1078.571 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.557, 511.410), stdev = 280.101
[info]   CI (99.9%): [≈ 0, 1283.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   467.795 ±(99.9%) 2466.547 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 467.795, 1170.282), stdev = 640.554
[info]   CI (99.9%): [≈ 0, 2934.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 1.095
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 80.12% complete, ETA 00:26:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1366059.166 ops/s
[info] # Warmup Iteration   2: 1474740.452 ops/s
[info] # Warmup Iteration   3: 1477542.486 ops/s
[info] # Warmup Iteration   4: 1479418.618 ops/s
[info] # Warmup Iteration   5: 1479647.681 ops/s
[info] Iteration   1: 1480716.718 ops/s
[info]                  ·gc.alloc.rate:      15.051 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1477083.651 ops/s
[info]                  ·gc.alloc.rate:      15.011 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1479441.898 ops/s
[info]                  ·gc.alloc.rate:      15.037 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1477767.373 ops/s
[info]                  ·gc.alloc.rate:      15.022 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1476647.397 ops/s
[info]                  ·gc.alloc.rate:      15.009 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc":
[info]   1478331.407 ±(99.9%) 6566.962 ops/s [Average]
[info]   (min, avg, max) = (1476647.397, 1478331.407, 1480716.718), stdev = 1705.419
[info]   CI (99.9%): [1471764.445, 1484898.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   15.026 ±(99.9%) 0.070 MB/sec [Average]
[info]   (min, avg, max) = (15.009, 15.026, 15.051), stdev = 0.018
[info]   CI (99.9%): [14.956, 15.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.000, 16.000, 16.000), stdev = 0.001
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 80.32% complete, ETA 00:26:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23950.082 ops/s
[info] # Warmup Iteration   2: 46655.300 ops/s
[info] # Warmup Iteration   3: 46081.272 ops/s
[info] # Warmup Iteration   4: 45386.972 ops/s
[info] # Warmup Iteration   5: 46520.020 ops/s
[info] Iteration   1: 46593.918 ops/s
[info]                  ·gc.alloc.rate:                   1971.954 MB/sec
[info]                  ·gc.alloc.rate.norm:              66616.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.219 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.311 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68587.391 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 46558.689 ops/s
[info]                  ·gc.alloc.rate:                   1970.460 MB/sec
[info]                  ·gc.alloc.rate.norm:              66616.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.111 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.338 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68741.733 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 46328.171 ops/s
[info]                  ·gc.alloc.rate:                   1960.565 MB/sec
[info]                  ·gc.alloc.rate.norm:              66616.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.828 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.035 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69146.328 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 46480.807 ops/s
[info]                  ·gc.alloc.rate:                   1966.942 MB/sec
[info]                  ·gc.alloc.rate.norm:              66616.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.114 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036.486 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68971.315 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 46544.192 ops/s
[info]                  ·gc.alloc.rate:                   1969.619 MB/sec
[info]                  ·gc.alloc.rate.norm:              66616.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.111 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1358.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45944.736 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson":
[info]   46501.155 ±(99.9%) 404.339 ops/s [Average]
[info]   (min, avg, max) = (46328.171, 46501.155, 46593.918), stdev = 105.006
[info]   CI (99.9%): [46096.816, 46905.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1967.908 ±(99.9%) 17.292 MB/sec [Average]
[info]   (min, avg, max) = (1960.565, 1967.908, 1971.954), stdev = 4.491
[info]   CI (99.9%): [1950.616, 1985.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   66616.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (66616.009, 66616.009, 66616.009), stdev = 0.001
[info]   CI (99.9%): [66616.008, 66616.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.125), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.677 ±(99.9%) 3.527 B/op [Average]
[info]   (min, avg, max) = (2.111, 2.677, 4.219), stdev = 0.916
[info]   CI (99.9%): [≈ 0, 6.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1898.721 ±(99.9%) 1163.036 MB/sec [Average]
[info]   (min, avg, max) = (1358.437, 1898.721, 2036.486), stdev = 302.037
[info]   CI (99.9%): [735.685, 3061.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   64278.301 ±(99.9%) 39472.957 B/op [Average]
[info]   (min, avg, max) = (45944.736, 64278.301, 69146.328), stdev = 10251.002
[info]   CI (99.9%): [24805.344, 103751.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80.52% complete, ETA 00:26:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 219497.857 ops/s
[info] # Warmup Iteration   2: 234494.504 ops/s
[info] # Warmup Iteration   3: 236277.678 ops/s
[info] # Warmup Iteration   4: 239944.844 ops/s
[info] # Warmup Iteration   5: 241375.845 ops/s
[info] Iteration   1: 243223.472 ops/s
[info]                  ·gc.alloc.rate:                   951.604 MB/sec
[info]                  ·gc.alloc.rate.norm:              6160.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.892 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4349.346 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 244140.643 ops/s
[info]                  ·gc.alloc.rate:                   955.595 MB/sec
[info]                  ·gc.alloc.rate.norm:              6160.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.537 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.652 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8661.517 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 244219.860 ops/s
[info]                  ·gc.alloc.rate:                   955.797 MB/sec
[info]                  ·gc.alloc.rate.norm:              6160.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.360 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4326.839 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 242699.900 ops/s
[info]                  ·gc.alloc.rate:                   949.672 MB/sec
[info]                  ·gc.alloc.rate.norm:              6160.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.675 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.531 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8708.256 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 242785.269 ops/s
[info]                  ·gc.alloc.rate:                   950.217 MB/sec
[info]                  ·gc.alloc.rate.norm:              6160.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.670 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4354.261 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala":
[info]   243413.829 ±(99.9%) 2802.625 ops/s [Average]
[info]   (min, avg, max) = (242699.900, 243413.829, 244219.860), stdev = 727.833
[info]   CI (99.9%): [240611.203, 246216.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   952.577 ±(99.9%) 11.297 MB/sec [Average]
[info]   (min, avg, max) = (949.672, 952.577, 955.797), stdev = 2.934
[info]   CI (99.9%): [941.280, 963.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6160.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6160.002, 6160.002, 6160.002), stdev = 0.001
[info]   CI (99.9%): [6160.001, 6160.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.200 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.104), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.242 ±(99.9%) 1.292 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.242, 0.675), stdev = 0.335
[info]   CI (99.9%): [≈ 0, 1.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   940.221 ±(99.9%) 1416.147 MB/sec [Average]
[info]   (min, avg, max) = (671.360, 940.221, 1343.652), stdev = 367.769
[info]   CI (99.9%): [≈ 0, 2356.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6080.044 ±(99.9%) 9156.697 B/op [Average]
[info]   (min, avg, max) = (4326.839, 6080.044, 8708.256), stdev = 2377.965
[info]   CI (99.9%): [≈ 0, 15236.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 80.72% complete, ETA 00:25:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9811.836 ops/s
[info] # Warmup Iteration   2: 27143.873 ops/s
[info] # Warmup Iteration   3: 27224.638 ops/s
[info] # Warmup Iteration   4: 27268.271 ops/s
[info] # Warmup Iteration   5: 27301.428 ops/s
[info] Iteration   1: 27460.320 ops/s
[info]                  ·gc.alloc.rate:                   1499.713 MB/sec
[info]                  ·gc.alloc.rate.norm:              85960.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.579 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.445 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77461.615 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 27391.623 ops/s
[info]                  ·gc.alloc.rate:                   1495.631 MB/sec
[info]                  ·gc.alloc.rate.norm:              85960.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.196 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.295 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77721.903 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 27413.822 ops/s
[info]                  ·gc.alloc.rate:                   1496.880 MB/sec
[info]                  ·gc.alloc.rate.norm:              85960.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.585 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.769 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77741.695 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 27401.436 ops/s
[info]                  ·gc.alloc.rate:                   1496.779 MB/sec
[info]                  ·gc.alloc.rate.norm:              85960.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.936 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77813.988 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 27305.373 ops/s
[info]                  ·gc.alloc.rate:                   1491.030 MB/sec
[info]                  ·gc.alloc.rate.norm:              85960.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.999 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034.119 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 117269.896 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson":
[info]   27394.515 ±(99.9%) 217.020 ops/s [Average]
[info]   (min, avg, max) = (27305.373, 27394.515, 27460.320), stdev = 56.359
[info]   CI (99.9%): [27177.495, 27611.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1496.007 ±(99.9%) 12.178 MB/sec [Average]
[info]   (min, avg, max) = (1491.030, 1496.007, 1499.713), stdev = 3.163
[info]   CI (99.9%): [1483.828, 1508.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   85960.015 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (85960.015, 85960.015, 85960.016), stdev = 0.001
[info]   CI (99.9%): [85960.013, 85960.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.104), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.872 ±(99.9%) 8.998 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.872, 5.999), stdev = 2.337
[info]   CI (99.9%): [≈ 0, 11.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1489.313 ±(99.9%) 1172.748 MB/sec [Average]
[info]   (min, avg, max) = (1351.445, 1489.313, 2034.119), stdev = 304.559
[info]   CI (99.9%): [316.565, 2662.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   85601.819 ±(99.9%) 68169.856 B/op [Average]
[info]   (min, avg, max) = (77461.615, 85601.819, 117269.896), stdev = 17703.495
[info]   CI (99.9%): [17431.963, 153771.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80.92% complete, ETA 00:25:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 69612.179 ops/s
[info] # Warmup Iteration   2: 137835.940 ops/s
[info] # Warmup Iteration   3: 138484.536 ops/s
[info] # Warmup Iteration   4: 135797.269 ops/s
[info] # Warmup Iteration   5: 138860.757 ops/s
[info] Iteration   1: 137888.287 ops/s
[info]                  ·gc.alloc.rate:                   1684.652 MB/sec
[info]                  ·gc.alloc.rate.norm:              19232.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.475 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.185 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23153.776 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 139418.377 ops/s
[info]                  ·gc.alloc.rate:                   1703.434 MB/sec
[info]                  ·gc.alloc.rate.norm:              19232.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.470 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.414 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15280.234 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 138779.654 ops/s
[info]                  ·gc.alloc.rate:                   1695.349 MB/sec
[info]                  ·gc.alloc.rate.norm:              19232.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.708 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.276 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23054.093 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 138856.542 ops/s
[info]                  ·gc.alloc.rate:                   1696.436 MB/sec
[info]                  ·gc.alloc.rate.norm:              19232.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.236 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15374.937 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 138290.838 ops/s
[info]                  ·gc.alloc.rate:                   1689.444 MB/sec
[info]                  ·gc.alloc.rate.norm:              19232.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.711 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.338 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23169.537 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala":
[info]   138646.740 ±(99.9%) 2244.485 ops/s [Average]
[info]   (min, avg, max) = (137888.287, 138646.740, 139418.377), stdev = 582.886
[info]   CI (99.9%): [136402.254, 140891.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1693.863 ±(99.9%) 27.553 MB/sec [Average]
[info]   (min, avg, max) = (1684.652, 1693.863, 1703.434), stdev = 7.155
[info]   CI (99.9%): [1666.310, 1721.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   19232.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (19232.003, 19232.003, 19232.003), stdev = 0.001
[info]   CI (99.9%): [19232.003, 19232.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.046, 0.062), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.520 ±(99.9%) 0.763 B/op [Average]
[info]   (min, avg, max) = (0.236, 0.520, 0.711), stdev = 0.198
[info]   CI (99.9%): [≈ 0, 1.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1761.084 ±(99.9%) 1428.146 MB/sec [Average]
[info]   (min, avg, max) = (1353.414, 1761.084, 2035.338), stdev = 370.885
[info]   CI (99.9%): [332.938, 3189.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   20006.515 ±(99.9%) 16448.486 B/op [Average]
[info]   (min, avg, max) = (15280.234, 20006.515, 23169.537), stdev = 4271.620
[info]   CI (99.9%): [3558.030, 36455.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 81.12% complete, ETA 00:25:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 326386.382 ops/s
[info] # Warmup Iteration   2: 339953.434 ops/s
[info] # Warmup Iteration   3: 349093.008 ops/s
[info] # Warmup Iteration   4: 350036.192 ops/s
[info] # Warmup Iteration   5: 349491.469 ops/s
[info] Iteration   1: 353732.147 ops/s
[info]                  ·gc.alloc.rate:                   1684.114 MB/sec
[info]                  ·gc.alloc.rate.norm:              7496.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.370 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2014.237 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8965.380 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 357098.231 ops/s
[info]                  ·gc.alloc.rate:                   1700.437 MB/sec
[info]                  ·gc.alloc.rate.norm:              7496.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.550 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.980 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5924.639 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 356186.920 ops/s
[info]                  ·gc.alloc.rate:                   1695.960 MB/sec
[info]                  ·gc.alloc.rate.norm:              7496.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.368 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2018.750 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8922.705 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 355089.234 ops/s
[info]                  ·gc.alloc.rate:                   1691.051 MB/sec
[info]                  ·gc.alloc.rate.norm:              7496.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.277 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5975.364 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 356612.028 ops/s
[info]                  ·gc.alloc.rate:                   1698.068 MB/sec
[info]                  ·gc.alloc.rate.norm:              7496.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.367 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024.070 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8935.115 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala":
[info]   355743.712 ±(99.9%) 5187.613 ops/s [Average]
[info]   (min, avg, max) = (353732.147, 355743.712, 357098.231), stdev = 1347.207
[info]   CI (99.9%): [350556.099, 360931.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1693.926 ±(99.9%) 24.971 MB/sec [Average]
[info]   (min, avg, max) = (1684.114, 1693.926, 1700.437), stdev = 6.485
[info]   CI (99.9%): [1668.955, 1718.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   7496.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7496.001, 7496.001, 7496.001), stdev = 0.001
[info]   CI (99.9%): [7496.001, 7496.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.125), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.387 ±(99.9%) 0.385 B/op [Average]
[info]   (min, avg, max) = (0.277, 0.387, 0.550), stdev = 0.100
[info]   CI (99.9%): [0.002, 0.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1749.808 ±(99.9%) 1419.544 MB/sec [Average]
[info]   (min, avg, max) = (1343.980, 1749.808, 2024.070), stdev = 368.651
[info]   CI (99.9%): [330.264, 3169.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7744.641 ±(99.9%) 6309.070 B/op [Average]
[info]   (min, avg, max) = (5924.639, 7744.641, 8965.380), stdev = 1638.445
[info]   CI (99.9%): [1435.570, 14053.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 81.33% complete, ETA 00:25:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 382088.076 ops/s
[info] # Warmup Iteration   2: 420350.040 ops/s
[info] # Warmup Iteration   3: 426394.339 ops/s
[info] # Warmup Iteration   4: 427387.421 ops/s
[info] # Warmup Iteration   5: 428325.986 ops/s
[info] Iteration   1: 429162.708 ops/s
[info]                  ·gc.alloc.rate:                   1469.880 MB/sec
[info]                  ·gc.alloc.rate.norm:              5392.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.305 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.574 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4925.002 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 427360.506 ops/s
[info]                  ·gc.alloc.rate:                   1463.865 MB/sec
[info]                  ·gc.alloc.rate.norm:              5392.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.307 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.386 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4948.231 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 426988.086 ops/s
[info]                  ·gc.alloc.rate:                   1462.504 MB/sec
[info]                  ·gc.alloc.rate.norm:              5392.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.230 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.822 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4954.440 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 423185.306 ops/s
[info]                  ·gc.alloc.rate:                   1449.485 MB/sec
[info]                  ·gc.alloc.rate.norm:              5392.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.232 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.224 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5004.155 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 426860.150 ops/s
[info]                  ·gc.alloc.rate:                   1462.046 MB/sec
[info]                  ·gc.alloc.rate.norm:              5392.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.153 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021.351 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7454.710 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   426711.351 ±(99.9%) 8383.947 ops/s [Average]
[info]   (min, avg, max) = (423185.306, 426711.351, 429162.708), stdev = 2177.284
[info]   CI (99.9%): [418327.405, 435095.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1461.556 ±(99.9%) 28.652 MB/sec [Average]
[info]   (min, avg, max) = (1449.485, 1461.556, 1469.880), stdev = 7.441
[info]   CI (99.9%): [1432.904, 1490.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   5392.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5392.001, 5392.001, 5392.001), stdev = 0.001
[info]   CI (99.9%): [5392.001, 5392.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.083), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   0.246 ±(99.9%) 0.245 B/op [Average]
[info]   (min, avg, max) = (0.153, 0.246, 0.307), stdev = 0.064
[info]   CI (99.9%): [0.001, 0.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   1479.271 ±(99.9%) 1166.873 MB/sec [Average]
[info]   (min, avg, max) = (1342.574, 1479.271, 2021.351), stdev = 303.033
[info]   CI (99.9%): [312.398, 2646.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   5457.308 ±(99.9%) 4300.993 B/op [Average]
[info]   (min, avg, max) = (4925.002, 5457.308, 7454.710), stdev = 1116.954
[info]   CI (99.9%): [1156.314, 9758.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 81.53% complete, ETA 00:24:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10455.800 ops/s
[info] # Warmup Iteration   2: 19621.885 ops/s
[info] # Warmup Iteration   3: 19571.980 ops/s
[info] # Warmup Iteration   4: 19426.976 ops/s
[info] # Warmup Iteration   5: 19825.466 ops/s
[info] Iteration   1: 19811.435 ops/s
[info]                  ·gc.alloc.rate:                   496.876 MB/sec
[info]                  ·gc.alloc.rate.norm:              39496.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.284 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 40641.250 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 19774.111 ops/s
[info]                  ·gc.alloc.rate:                   496.132 MB/sec
[info]                  ·gc.alloc.rate.norm:              39497.678 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.375 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29.824 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.645 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53629.702 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 19887.436 ops/s
[info]                  ·gc.alloc.rate:      498.957 MB/sec
[info]                  ·gc.alloc.rate.norm: 39496.021 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 19824.768 ops/s
[info]                  ·gc.alloc.rate:                   497.353 MB/sec
[info]                  ·gc.alloc.rate.norm:              39496.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.560 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53489.063 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 19859.504 ops/s
[info]                  ·gc.alloc.rate:                   498.209 MB/sec
[info]                  ·gc.alloc.rate.norm:              39496.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.299 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.529 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53473.998 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson":
[info]   19831.451 ±(99.9%) 168.446 ops/s [Average]
[info]   (min, avg, max) = (19774.111, 19831.451, 19887.436), stdev = 43.745
[info]   CI (99.9%): [19663.005, 19999.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   497.505 ±(99.9%) 4.264 MB/sec [Average]
[info]   (min, avg, max) = (496.132, 497.505, 498.957), stdev = 1.107
[info]   CI (99.9%): [493.241, 501.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   39496.353 ±(99.9%) 2.851 B/op [Average]
[info]   (min, avg, max) = (39496.021, 39496.353, 39497.678), stdev = 0.740
[info]   CI (99.9%): [39493.502, 39499.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.631 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.083, 0.375), stdev = 0.164
[info]   CI (99.9%): [≈ 0, 0.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   6.625 ±(99.9%) 50.240 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.625, 29.824), stdev = 13.047
[info]   CI (99.9%): [≈ 0, 56.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   506.604 ±(99.9%) 1123.711 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506.604, 674.529), stdev = 291.824
[info]   CI (99.9%): [≈ 0, 1630.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   40246.803 ±(99.9%) 89260.610 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 40246.803, 53629.702), stdev = 23180.697
[info]   CI (99.9%): [≈ 0, 129507.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 81.73% complete, ETA 00:24:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63647.722 ops/s
[info] # Warmup Iteration   2: 78980.318 ops/s
[info] # Warmup Iteration   3: 80273.948 ops/s
[info] # Warmup Iteration   4: 79962.065 ops/s
[info] # Warmup Iteration   5: 80343.549 ops/s
[info] Iteration   1: 81007.882 ops/s
[info]                  ·gc.alloc.rate:                   1673.572 MB/sec
[info]                  ·gc.alloc.rate.norm:              32528.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.294 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26089.195 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 81050.117 ops/s
[info]                  ·gc.alloc.rate:                   1674.784 MB/sec
[info]                  ·gc.alloc.rate.norm:              32528.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.404 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2014.988 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39135.525 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 81012.758 ops/s
[info]                  ·gc.alloc.rate:                   1673.951 MB/sec
[info]                  ·gc.alloc.rate.norm:              32528.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.404 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.179 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26139.346 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 81039.649 ops/s
[info]                  ·gc.alloc.rate:                   1674.419 MB/sec
[info]                  ·gc.alloc.rate.norm:              32528.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020.582 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39252.719 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 81016.063 ops/s
[info]                  ·gc.alloc.rate:                   1673.980 MB/sec
[info]                  ·gc.alloc.rate.norm:              32528.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.404 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.114 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26215.370 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce":
[info]   81025.294 ±(99.9%) 71.205 ops/s [Average]
[info]   (min, avg, max) = (81007.882, 81025.294, 81050.117), stdev = 18.492
[info]   CI (99.9%): [80954.089, 81096.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1674.141 ±(99.9%) 1.802 MB/sec [Average]
[info]   (min, avg, max) = (1673.572, 1674.141, 1674.784), stdev = 0.468
[info]   CI (99.9%): [1672.339, 1675.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   32528.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (32528.005, 32528.005, 32528.005), stdev = 0.001
[info]   CI (99.9%): [32528.005, 32528.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.243 ±(99.9%) 0.853 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.243, 0.404), stdev = 0.221
[info]   CI (99.9%): [≈ 0, 1.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1614.431 ±(99.9%) 1417.895 MB/sec [Average]
[info]   (min, avg, max) = (1342.294, 1614.431, 2020.582), stdev = 368.223
[info]   CI (99.9%): [196.536, 3032.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   31366.431 ±(99.9%) 27516.442 B/op [Average]
[info]   (min, avg, max) = (26089.195, 31366.431, 39252.719), stdev = 7145.933
[info]   CI (99.9%): [3849.989, 58882.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 81.93% complete, ETA 00:24:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 66010.138 ops/s
[info] # Warmup Iteration   2: 126475.652 ops/s
[info] # Warmup Iteration   3: 126903.145 ops/s
[info] # Warmup Iteration   4: 127363.952 ops/s
[info] # Warmup Iteration   5: 127944.196 ops/s
[info] Iteration   1: 127470.725 ops/s
[info]                  ·gc.alloc.rate:                   630.257 MB/sec
[info]                  ·gc.alloc.rate.norm:              7784.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.827 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.598 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8319.290 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 127429.507 ops/s
[info]                  ·gc.alloc.rate:                   630.261 MB/sec
[info]                  ·gc.alloc.rate.norm:              7784.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.257 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.846 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8322.293 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 127369.958 ops/s
[info]                  ·gc.alloc.rate:                   629.820 MB/sec
[info]                  ·gc.alloc.rate.norm:              7784.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.325 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8334.052 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 127012.725 ops/s
[info]                  ·gc.alloc.rate:                   628.184 MB/sec
[info]                  ·gc.alloc.rate.norm:              7784.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.258 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.465 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8357.473 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 127143.999 ops/s
[info]                  ·gc.alloc.rate:                   628.702 MB/sec
[info]                  ·gc.alloc.rate.norm:              7784.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.975 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8356.912 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala":
[info]   127285.383 ±(99.9%) 761.922 ops/s [Average]
[info]   (min, avg, max) = (127012.725, 127285.383, 127470.725), stdev = 197.869
[info]   CI (99.9%): [126523.461, 128047.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   629.445 ±(99.9%) 3.657 MB/sec [Average]
[info]   (min, avg, max) = (628.184, 629.445, 630.261), stdev = 0.950
[info]   CI (99.9%): [625.788, 633.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   7784.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7784.003, 7784.003, 7784.003), stdev = 0.001
[info]   CI (99.9%): [7784.003, 7784.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.378 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.229), stdev = 0.098
[info]   CI (99.9%): [≈ 0, 0.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.668 ±(99.9%) 4.673 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.668, 2.827), stdev = 1.214
[info]   CI (99.9%): [≈ 0, 5.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   674.242 ±(99.9%) 2.077 MB/sec [Average]
[info]   (min, avg, max) = (673.598, 674.242, 674.975), stdev = 0.540
[info]   CI (99.9%): [672.164, 676.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   8338.004 ±(99.9%) 70.720 B/op [Average]
[info]   (min, avg, max) = (8319.290, 8338.004, 8357.473), stdev = 18.366
[info]   CI (99.9%): [8267.284, 8408.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 82.13% complete, ETA 00:23:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 208662.004 ops/s
[info] # Warmup Iteration   2: 227306.570 ops/s
[info] # Warmup Iteration   3: 222282.467 ops/s
[info] # Warmup Iteration   4: 229908.031 ops/s
[info] # Warmup Iteration   5: 231756.979 ops/s
[info] Iteration   1: 230938.380 ops/s
[info]                  ·gc.alloc.rate:                   950.488 MB/sec
[info]                  ·gc.alloc.rate.norm:              6480.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.142 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.825 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4580.203 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 230481.951 ops/s
[info]                  ·gc.alloc.rate:                   949.054 MB/sec
[info]                  ·gc.alloc.rate.norm:              6480.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.739 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9174.852 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 230482.232 ops/s
[info]                  ·gc.alloc.rate:                   948.678 MB/sec
[info]                  ·gc.alloc.rate.norm:              6480.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.212 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4584.754 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 231549.326 ops/s
[info]                  ·gc.alloc.rate:                   953.146 MB/sec
[info]                  ·gc.alloc.rate.norm:              6480.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.283 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.492 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9126.989 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 230271.158 ops/s
[info]                  ·gc.alloc.rate:                   947.865 MB/sec
[info]                  ·gc.alloc.rate.norm:              6480.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.564 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4591.091 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala":
[info]   230744.609 ±(99.9%) 1970.144 ops/s [Average]
[info]   (min, avg, max) = (230271.158, 230744.609, 231549.326), stdev = 511.640
[info]   CI (99.9%): [228774.465, 232714.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   949.846 ±(99.9%) 7.989 MB/sec [Average]
[info]   (min, avg, max) = (947.865, 949.846, 953.146), stdev = 2.075
[info]   CI (99.9%): [941.857, 957.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6480.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6480.002, 6480.002, 6480.002), stdev = 0.001
[info]   CI (99.9%): [6480.002, 6480.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.085 ±(99.9%) 0.487 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.085, 0.283), stdev = 0.127
[info]   CI (99.9%): [≈ 0, 0.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   940.166 ±(99.9%) 1416.425 MB/sec [Average]
[info]   (min, avg, max) = (671.212, 940.166, 1343.739), stdev = 367.841
[info]   CI (99.9%): [≈ 0, 2356.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6411.578 ±(99.9%) 9629.408 B/op [Average]
[info]   (min, avg, max) = (4580.203, 6411.578, 9174.852), stdev = 2500.727
[info]   CI (99.9%): [≈ 0, 16040.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 82.33% complete, ETA 00:23:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6067.447 ops/s
[info] # Warmup Iteration   2: 16815.752 ops/s
[info] # Warmup Iteration   3: 17392.310 ops/s
[info] # Warmup Iteration   4: 17539.344 ops/s
[info] # Warmup Iteration   5: 17457.122 ops/s
[info] Iteration   1: 17630.451 ops/s
[info]                  ·gc.alloc.rate:                   1009.427 MB/sec
[info]                  ·gc.alloc.rate.norm:              90128.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.716 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 120465.834 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 17174.653 ops/s
[info]                  ·gc.alloc.rate:                   983.443 MB/sec
[info]                  ·gc.alloc.rate.norm:              90128.032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.311 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61889.177 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 17536.518 ops/s
[info]                  ·gc.alloc.rate:                   1004.072 MB/sec
[info]                  ·gc.alloc.rate.norm:              90128.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.736 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.907 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 121260.841 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 17600.418 ops/s
[info]                  ·gc.alloc.rate:                   1007.720 MB/sec
[info]                  ·gc.alloc.rate.norm:              90128.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.861 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.610 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60424.899 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 17537.718 ops/s
[info]                  ·gc.alloc.rate:                   1004.093 MB/sec
[info]                  ·gc.alloc.rate.norm:              90128.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.446 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 121396.446 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson":
[info]   17495.952 ±(99.9%) 709.047 ops/s [Average]
[info]   (min, avg, max) = (17174.653, 17495.952, 17630.451), stdev = 184.137
[info]   CI (99.9%): [16786.904, 18204.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1001.751 ±(99.9%) 40.414 MB/sec [Average]
[info]   (min, avg, max) = (983.443, 1001.751, 1009.427), stdev = 10.495
[info]   CI (99.9%): [961.337, 1042.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   90128.025 ±(99.9%) 0.014 B/op [Average]
[info]   (min, avg, max) = (90128.023, 90128.025, 90128.032), stdev = 0.004
[info]   CI (99.9%): [90128.011, 90128.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.863 ±(99.9%) 7.174 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.863, 3.736), stdev = 1.863
[info]   CI (99.9%): [≈ 0, 9.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1080.696 ±(99.9%) 1424.469 MB/sec [Average]
[info]   (min, avg, max) = (675.311, 1080.696, 1352.446), stdev = 369.930
[info]   CI (99.9%): [≈ 0, 2505.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   97087.440 ±(99.9%) 126323.571 B/op [Average]
[info]   (min, avg, max) = (60424.899, 97087.440, 121396.446), stdev = 32805.830
[info]   CI (99.9%): [≈ 0, 223411.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 1.000
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 82.53% complete, ETA 00:23:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 96988.220 ops/s
[info] # Warmup Iteration   2: 167766.068 ops/s
[info] # Warmup Iteration   3: 170063.520 ops/s
[info] # Warmup Iteration   4: 170397.866 ops/s
[info] # Warmup Iteration   5: 170310.158 ops/s
[info] Iteration   1: 166110.721 ops/s
[info]                  ·gc.alloc.rate:                   1068.600 MB/sec
[info]                  ·gc.alloc.rate.norm:              10128.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.394 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.976 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12785.357 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 166263.987 ops/s
[info]                  ·gc.alloc.rate:                   1069.524 MB/sec
[info]                  ·gc.alloc.rate.norm:              10128.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.812 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6390.219 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 165232.153 ops/s
[info]                  ·gc.alloc.rate:                   1063.006 MB/sec
[info]                  ·gc.alloc.rate.norm:              10128.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.595 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.106 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12872.930 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 165650.147 ops/s
[info]                  ·gc.alloc.rate:                   1065.736 MB/sec
[info]                  ·gc.alloc.rate.norm:              10128.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.841 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12846.939 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 165487.970 ops/s
[info]                  ·gc.alloc.rate:                   1064.654 MB/sec
[info]                  ·gc.alloc.rate.norm:              10128.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.792 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676.536 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6435.857 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala":
[info]   165748.996 ±(99.9%) 1657.447 ops/s [Average]
[info]   (min, avg, max) = (165232.153, 165748.996, 166263.987), stdev = 430.434
[info]   CI (99.9%): [164091.549, 167406.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1066.304 ±(99.9%) 10.468 MB/sec [Average]
[info]   (min, avg, max) = (1063.006, 1066.304, 1069.524), stdev = 2.719
[info]   CI (99.9%): [1055.836, 1076.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   10128.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10128.002, 10128.002, 10128.003), stdev = 0.001
[info]   CI (99.9%): [10128.002, 10128.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.356 ±(99.9%) 1.364 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.356, 0.792), stdev = 0.354
[info]   CI (99.9%): [≈ 0, 1.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1080.654 ±(99.9%) 1423.570 MB/sec [Average]
[info]   (min, avg, max) = (674.812, 1080.654, 1351.841), stdev = 369.697
[info]   CI (99.9%): [≈ 0, 2504.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   10266.261 ±(99.9%) 13545.316 B/op [Average]
[info]   (min, avg, max) = (6390.219, 10266.261, 12872.930), stdev = 3517.675
[info]   CI (99.9%): [≈ 0, 23811.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 82.73% complete, ETA 00:23:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 499934.915 ops/s
[info] # Warmup Iteration   2: 537657.391 ops/s
[info] # Warmup Iteration   3: 535502.036 ops/s
[info] # Warmup Iteration   4: 533810.064 ops/s
[info] # Warmup Iteration   5: 535096.421 ops/s
[info] Iteration   1: 536617.829 ops/s
[info]                  ·gc.alloc.rate:                   597.147 MB/sec
[info]                  ·gc.alloc.rate.norm:              1752.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.372 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1500.341 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 535966.010 ops/s
[info]                  ·gc.alloc.rate:                   596.482 MB/sec
[info]                  ·gc.alloc.rate.norm:              1752.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.324 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.763 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.631 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1981.542 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 527804.101 ops/s
[info]                  ·gc.alloc.rate:                   587.382 MB/sec
[info]                  ·gc.alloc.rate.norm:              1752.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.124 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.567 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2012.050 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 524262.393 ops/s
[info]                  ·gc.alloc.rate:                   583.483 MB/sec
[info]                  ·gc.alloc.rate.norm:              1752.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.658 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2019.761 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 526192.655 ops/s
[info]                  ·gc.alloc.rate:                   585.642 MB/sec
[info]                  ·gc.alloc.rate.norm:              1752.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.125 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.666 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2012.339 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala":
[info]   530168.597 ±(99.9%) 22077.054 ops/s [Average]
[info]   (min, avg, max) = (524262.393, 530168.597, 536617.829), stdev = 5733.341
[info]   CI (99.9%): [508091.544, 552245.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   590.027 ±(99.9%) 24.460 MB/sec [Average]
[info]   (min, avg, max) = (583.483, 590.027, 597.147), stdev = 6.352
[info]   CI (99.9%): [565.567, 614.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1752.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1752.001, 1752.001, 1752.001), stdev = 0.001
[info]   CI (99.9%): [1752.001, 1752.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.686 ±(99.9%) 5.680 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.686, 3.324), stdev = 1.475
[info]   CI (99.9%): [≈ 0, 6.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2.015 ±(99.9%) 16.680 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.015, 9.763), stdev = 4.332
[info]   CI (99.9%): [≈ 0, 18.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   641.179 ±(99.9%) 279.443 MB/sec [Average]
[info]   (min, avg, max) = (511.372, 641.179, 674.631), stdev = 72.571
[info]   CI (99.9%): [361.735, 920.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1905.207 ±(99.9%) 873.339 B/op [Average]
[info]   (min, avg, max) = (1500.341, 1905.207, 2019.761), stdev = 226.803
[info]   CI (99.9%): [1031.868, 2778.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.342
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 82.93% complete, ETA 00:22:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 530925.375 ops/s
[info] # Warmup Iteration   2: 566988.257 ops/s
[info] # Warmup Iteration   3: 568428.023 ops/s
[info] # Warmup Iteration   4: 568594.710 ops/s
[info] # Warmup Iteration   5: 568096.978 ops/s
[info] Iteration   1: 569385.044 ops/s
[info]                  ·gc.alloc.rate:      11.573 MB/sec
[info]                  ·gc.alloc.rate.norm: 32.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 567914.707 ops/s
[info]                  ·gc.alloc.rate:      11.543 MB/sec
[info]                  ·gc.alloc.rate.norm: 32.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 569754.266 ops/s
[info]                  ·gc.alloc.rate:      11.581 MB/sec
[info]                  ·gc.alloc.rate.norm: 32.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 568541.786 ops/s
[info]                  ·gc.alloc.rate:      11.557 MB/sec
[info]                  ·gc.alloc.rate.norm: 32.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 567879.462 ops/s
[info]                  ·gc.alloc.rate:      11.543 MB/sec
[info]                  ·gc.alloc.rate.norm: 32.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   568695.053 ±(99.9%) 3276.239 ops/s [Average]
[info]   (min, avg, max) = (567879.462, 568695.053, 569754.266), stdev = 850.829
[info]   CI (99.9%): [565418.814, 571971.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   11.560 ±(99.9%) 0.066 MB/sec [Average]
[info]   (min, avg, max) = (11.543, 11.560, 11.581), stdev = 0.017
[info]   CI (99.9%): [11.494, 11.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   32.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (32.001, 32.001, 32.001), stdev = 0.001
[info]   CI (99.9%): [32.001, 32.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 83.13% complete, ETA 00:22:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11384.051 ops/s
[info] # Warmup Iteration   2: 21640.007 ops/s
[info] # Warmup Iteration   3: 21347.576 ops/s
[info] # Warmup Iteration   4: 21499.416 ops/s
[info] # Warmup Iteration   5: 21164.771 ops/s
[info] Iteration   1: 21374.798 ops/s
[info]                  ·gc.alloc.rate:      437.813 MB/sec
[info]                  ·gc.alloc.rate.norm: 32248.024 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 21672.609 ops/s
[info]                  ·gc.alloc.rate:                   443.951 MB/sec
[info]                  ·gc.alloc.rate.norm:              32248.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.321 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37141.701 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 21580.950 ops/s
[info]                  ·gc.alloc.rate:                   442.082 MB/sec
[info]                  ·gc.alloc.rate.norm:              32248.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.271 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19.733 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.555 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49133.026 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 21672.628 ops/s
[info]                  ·gc.alloc.rate:      443.969 MB/sec
[info]                  ·gc.alloc.rate.norm: 32248.019 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 21613.634 ops/s
[info]                  ·gc.alloc.rate:                   442.740 MB/sec
[info]                  ·gc.alloc.rate.norm:              32248.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.529 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49058.031 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson":
[info]   21582.924 ±(99.9%) 472.993 ops/s [Average]
[info]   (min, avg, max) = (21374.798, 21582.924, 21672.628), stdev = 122.835
[info]   CI (99.9%): [21109.931, 22055.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   442.111 ±(99.9%) 9.763 MB/sec [Average]
[info]   (min, avg, max) = (437.813, 442.111, 443.969), stdev = 2.535
[info]   CI (99.9%): [432.348, 451.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   32248.020 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (32248.019, 32248.020, 32248.024), stdev = 0.002
[info]   CI (99.9%): [32248.011, 32248.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.466 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.271), stdev = 0.121
[info]   CI (99.9%): [≈ 0, 0.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3.947 ±(99.9%) 33.982 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.947, 19.733), stdev = 8.825
[info]   CI (99.9%): [≈ 0, 37.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   371.681 ±(99.9%) 1331.166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 371.681, 673.555), stdev = 345.700
[info]   CI (99.9%): [≈ 0, 1702.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   27066.552 ±(99.9%) 96980.810 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 27066.552, 49133.026), stdev = 25185.608
[info]   CI (99.9%): [≈ 0, 124047.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 0.837
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 83.33% complete, ETA 00:22:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 62965.311 ops/s
[info] # Warmup Iteration   2: 74236.304 ops/s
[info] # Warmup Iteration   3: 73993.640 ops/s
[info] # Warmup Iteration   4: 74721.802 ops/s
[info] # Warmup Iteration   5: 75062.927 ops/s
[info] Iteration   1: 75579.448 ops/s
[info]                  ·gc.alloc.rate:                   1321.515 MB/sec
[info]                  ·gc.alloc.rate.norm:              27528.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.433 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.369 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27962.397 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 76233.049 ops/s
[info]                  ·gc.alloc.rate:                   1333.218 MB/sec
[info]                  ·gc.alloc.rate.norm:              27528.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.430 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.518 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27720.026 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 76095.538 ops/s
[info]                  ·gc.alloc.rate:                   1330.909 MB/sec
[info]                  ·gc.alloc.rate.norm:              27528.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.153 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.746 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27772.833 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 76038.813 ops/s
[info]                  ·gc.alloc.rate:                   1329.700 MB/sec
[info]                  ·gc.alloc.rate.norm:              27528.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.292 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.810 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27820.123 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 76159.808 ops/s
[info]                  ·gc.alloc.rate:                   1331.715 MB/sec
[info]                  ·gc.alloc.rate.norm:              27528.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.112 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27804.924 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce":
[info]   76021.331 ±(99.9%) 991.256 ops/s [Average]
[info]   (min, avg, max) = (75579.448, 76021.331, 76233.049), stdev = 257.426
[info]   CI (99.9%): [75030.075, 77012.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1329.411 ±(99.9%) 17.696 MB/sec [Average]
[info]   (min, avg, max) = (1321.515, 1329.411, 1333.218), stdev = 4.595
[info]   CI (99.9%): [1311.716, 1347.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   27528.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (27528.005, 27528.005, 27528.006), stdev = 0.001
[info]   CI (99.9%): [27528.005, 27528.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.104), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.862 ±(99.9%) 3.315 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.862, 2.153), stdev = 0.861
[info]   CI (99.9%): [≈ 0, 4.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1343.311 ±(99.9%) 4.444 MB/sec [Average]
[info]   (min, avg, max) = (1342.369, 1343.311, 1345.112), stdev = 1.154
[info]   CI (99.9%): [1338.867, 1347.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   27816.061 ±(99.9%) 347.870 B/op [Average]
[info]   (min, avg, max) = (27720.026, 27816.061, 27962.397), stdev = 90.341
[info]   CI (99.9%): [27468.190, 28163.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83.53% complete, ETA 00:22:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 79357.982 ops/s
[info] # Warmup Iteration   2: 133832.291 ops/s
[info] # Warmup Iteration   3: 133484.698 ops/s
[info] # Warmup Iteration   4: 139788.601 ops/s
[info] # Warmup Iteration   5: 138506.063 ops/s
[info] Iteration   1: 140781.355 ops/s
[info]                  ·gc.alloc.rate:                   601.629 MB/sec
[info]                  ·gc.alloc.rate.norm:              6728.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.327 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.577 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7532.595 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 140867.125 ops/s
[info]                  ·gc.alloc.rate:                   602.051 MB/sec
[info]                  ·gc.alloc.rate.norm:              6728.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.233 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.671 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7528.372 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 140781.969 ops/s
[info]                  ·gc.alloc.rate:      601.701 MB/sec
[info]                  ·gc.alloc.rate.norm: 6728.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 136915.242 ops/s
[info]                  ·gc.alloc.rate:                   585.195 MB/sec
[info]                  ·gc.alloc.rate.norm:              6728.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.239 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.326 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7752.738 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 140847.249 ops/s
[info]                  ·gc.alloc.rate:                   601.944 MB/sec
[info]                  ·gc.alloc.rate.norm:              6728.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.270 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7536.403 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala":
[info]   140038.588 ±(99.9%) 6724.865 ops/s [Average]
[info]   (min, avg, max) = (136915.242, 140038.588, 140867.125), stdev = 1746.426
[info]   CI (99.9%): [133313.723, 146763.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   598.504 ±(99.9%) 28.656 MB/sec [Average]
[info]   (min, avg, max) = (585.195, 598.504, 602.051), stdev = 7.442
[info]   CI (99.9%): [569.848, 627.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   6728.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6728.003, 6728.003, 6728.003), stdev = 0.001
[info]   CI (99.9%): [6728.003, 6728.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.343 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.208), stdev = 0.089
[info]   CI (99.9%): [≈ 0, 0.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.560 ±(99.9%) 3.831 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.560, 2.327), stdev = 0.995
[info]   CI (99.9%): [≈ 0, 4.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   539.169 ±(99.9%) 1160.602 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.169, 674.326), stdev = 301.405
[info]   CI (99.9%): [≈ 0, 1699.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6070.022 ±(99.9%) 13071.345 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6070.022, 7752.738), stdev = 3394.587
[info]   CI (99.9%): [≈ 0, 19141.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83.73% complete, ETA 00:21:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 184599.078 ops/s
[info] # Warmup Iteration   2: 206881.907 ops/s
[info] # Warmup Iteration   3: 208300.499 ops/s
[info] # Warmup Iteration   4: 208645.341 ops/s
[info] # Warmup Iteration   5: 209892.541 ops/s
[info] Iteration   1: 207469.578 ops/s
[info]                  ·gc.alloc.rate:                   739.020 MB/sec
[info]                  ·gc.alloc.rate.norm:              5608.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.367 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25.548 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.074 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10237.355 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 208839.520 ops/s
[info]                  ·gc.alloc.rate:                   744.045 MB/sec
[info]                  ·gc.alloc.rate.norm:              5608.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.057 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5065.415 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 208926.987 ops/s
[info]                  ·gc.alloc.rate:                   744.349 MB/sec
[info]                  ·gc.alloc.rate.norm:              5608.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.157 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5062.991 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 208482.995 ops/s
[info]                  ·gc.alloc.rate:                   742.653 MB/sec
[info]                  ·gc.alloc.rate.norm:              5608.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.471 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.231 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5068.670 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 208146.137 ops/s
[info]                  ·gc.alloc.rate:                   741.465 MB/sec
[info]                  ·gc.alloc.rate.norm:              5608.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.235 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5076.825 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala":
[info]   208373.043 ±(99.9%) 2281.550 ops/s [Average]
[info]   (min, avg, max) = (207469.578, 208373.043, 208926.987), stdev = 592.511
[info]   CI (99.9%): [206091.494, 210654.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   742.306 ±(99.9%) 8.353 MB/sec [Average]
[info]   (min, avg, max) = (739.020, 742.306, 744.349), stdev = 2.169
[info]   CI (99.9%): [733.953, 750.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5608.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5608.002, 5608.002, 5608.002), stdev = 0.001
[info]   CI (99.9%): [5608.002, 5608.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.690 ±(99.9%) 5.763 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.690, 3.367), stdev = 1.497
[info]   CI (99.9%): [≈ 0, 6.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5.235 ±(99.9%) 43.731 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.235, 25.548), stdev = 11.357
[info]   CI (99.9%): [≈ 0, 48.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   807.121 ±(99.9%) 1166.595 MB/sec [Average]
[info]   (min, avg, max) = (671.231, 807.121, 1349.074), stdev = 302.961
[info]   CI (99.9%): [≈ 0, 1973.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6102.251 ±(99.9%) 8901.146 B/op [Average]
[info]   (min, avg, max) = (5062.991, 6102.251, 10237.355), stdev = 2311.599
[info]   CI (99.9%): [≈ 0, 15003.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.095
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 83.94% complete, ETA 00:21:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25810.335 ops/s
[info] # Warmup Iteration   2: 41787.910 ops/s
[info] # Warmup Iteration   3: 41404.526 ops/s
[info] # Warmup Iteration   4: 41648.369 ops/s
[info] # Warmup Iteration   5: 41966.657 ops/s
[info] Iteration   1: 41907.594 ops/s
[info]                  ·gc.alloc.rate:                   1736.838 MB/sec
[info]                  ·gc.alloc.rate.norm:              65248.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.720 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50855.361 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 42076.976 ops/s
[info]                  ·gc.alloc.rate:                   1743.808 MB/sec
[info]                  ·gc.alloc.rate.norm:              65248.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.893 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.254 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76040.820 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 42003.521 ops/s
[info]                  ·gc.alloc.rate:                   1740.998 MB/sec
[info]                  ·gc.alloc.rate.norm:              65248.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356.192 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50826.511 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 42000.128 ops/s
[info]                  ·gc.alloc.rate:                   1741.163 MB/sec
[info]                  ·gc.alloc.rate.norm:              65248.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.120 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.841 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76290.706 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 42036.837 ops/s
[info]                  ·gc.alloc.rate:                   1742.340 MB/sec
[info]                  ·gc.alloc.rate.norm:              65248.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1358.568 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50876.324 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson":
[info]   42005.011 ±(99.9%) 241.304 ops/s [Average]
[info]   (min, avg, max) = (41907.594, 42005.011, 42076.976), stdev = 62.666
[info]   CI (99.9%): [41763.708, 42246.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1741.029 ±(99.9%) 10.009 MB/sec [Average]
[info]   (min, avg, max) = (1736.838, 1741.029, 1743.808), stdev = 2.599
[info]   CI (99.9%): [1731.021, 1751.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   65248.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (65248.010, 65248.010, 65248.010), stdev = 0.001
[info]   CI (99.9%): [65248.010, 65248.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.200 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.104), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.403 ±(99.9%) 7.470 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.403, 3.893), stdev = 1.940
[info]   CI (99.9%): [≈ 0, 8.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1627.315 ±(99.9%) 1429.746 MB/sec [Average]
[info]   (min, avg, max) = (1353.720, 1627.315, 2035.841), stdev = 371.300
[info]   CI (99.9%): [197.569, 3057.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   60977.944 ±(99.9%) 53388.450 B/op [Average]
[info]   (min, avg, max) = (50826.511, 60977.944, 76290.706), stdev = 13864.811
[info]   CI (99.9%): [7589.494, 114366.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 84.14% complete, ETA 00:21:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 108798.901 ops/s
[info] # Warmup Iteration   2: 121993.714 ops/s
[info] # Warmup Iteration   3: 122432.321 ops/s
[info] # Warmup Iteration   4: 123492.143 ops/s
[info] # Warmup Iteration   5: 123849.403 ops/s
[info] Iteration   1: 123433.796 ops/s
[info]                  ·gc.alloc.rate:                   1143.267 MB/sec
[info]                  ·gc.alloc.rate.norm:              14584.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.265 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.215 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17134.622 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 123406.466 ops/s
[info]                  ·gc.alloc.rate:                   1143.619 MB/sec
[info]                  ·gc.alloc.rate.norm:              14584.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.265 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.788 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17123.907 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 122120.720 ops/s
[info]                  ·gc.alloc.rate:                   1131.277 MB/sec
[info]                  ·gc.alloc.rate.norm:              14584.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.217 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8653.076 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 121371.834 ops/s
[info]                  ·gc.alloc.rate:                   1124.441 MB/sec
[info]                  ·gc.alloc.rate.norm:              14584.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.270 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.220 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17421.563 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 119906.935 ops/s
[info]                  ·gc.alloc.rate:                   1110.862 MB/sec
[info]                  ·gc.alloc.rate.norm:              14584.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.546 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.942 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17643.992 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle":
[info]   122047.950 ±(99.9%) 5715.486 ops/s [Average]
[info]   (min, avg, max) = (119906.935, 122047.950, 123433.796), stdev = 1484.293
[info]   CI (99.9%): [116332.465, 127763.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1130.693 ±(99.9%) 53.003 MB/sec [Average]
[info]   (min, avg, max) = (1110.862, 1130.693, 1143.619), stdev = 13.765
[info]   CI (99.9%): [1077.690, 1183.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   14584.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (14584.003, 14584.003, 14584.004), stdev = 0.001
[info]   CI (99.9%): [14584.003, 14584.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0.269 ±(99.9%) 0.744 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.269, 0.546), stdev = 0.193
[info]   CI (99.9%): [≈ 0, 1.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   1208.876 ±(99.9%) 1157.354 MB/sec [Average]
[info]   (min, avg, max) = (671.217, 1208.876, 1343.942), stdev = 300.561
[info]   CI (99.9%): [51.522, 2366.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   15595.432 ±(99.9%) 14967.196 B/op [Average]
[info]   (min, avg, max) = (8653.076, 15595.432, 17643.992), stdev = 3886.933
[info]   CI (99.9%): [628.236, 30562.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 2.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 84.34% complete, ETA 00:21:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 190537.945 ops/s
[info] # Warmup Iteration   2: 263633.779 ops/s
[info] # Warmup Iteration   3: 266427.973 ops/s
[info] # Warmup Iteration   4: 263715.099 ops/s
[info] # Warmup Iteration   5: 267188.572 ops/s
[info] Iteration   1: 262090.650 ops/s
[info]                  ·gc.alloc.rate:                   1233.160 MB/sec
[info]                  ·gc.alloc.rate.norm:              7408.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.500 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1340.982 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8055.723 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 262269.483 ops/s
[info]                  ·gc.alloc.rate:                   1234.192 MB/sec
[info]                  ·gc.alloc.rate.norm:              7408.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.749 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.183 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8050.196 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 267849.937 ops/s
[info]                  ·gc.alloc.rate:                   1260.486 MB/sec
[info]                  ·gc.alloc.rate.norm:              7408.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.275 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3945.149 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 267774.004 ops/s
[info]                  ·gc.alloc.rate:                   1260.105 MB/sec
[info]                  ·gc.alloc.rate.norm:              7408.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.122 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.973 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7895.172 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 266281.838 ops/s
[info]                  ·gc.alloc.rate:                   1253.111 MB/sec
[info]                  ·gc.alloc.rate.norm:              7408.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.492 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.970 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7945.130 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce":
[info]   265253.183 ±(99.9%) 11070.163 ops/s [Average]
[info]   (min, avg, max) = (262090.650, 265253.183, 267849.937), stdev = 2874.886
[info]   CI (99.9%): [254183.019, 276323.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1248.211 ±(99.9%) 52.347 MB/sec [Average]
[info]   (min, avg, max) = (1233.160, 1248.211, 1260.486), stdev = 13.594
[info]   CI (99.9%): [1195.864, 1300.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7408.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7408.002, 7408.002, 7408.002), stdev = 0.001
[info]   CI (99.9%): [7408.001, 7408.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.196 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.125), stdev = 0.051
[info]   CI (99.9%): [≈ 0, 0.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.373 ±(99.9%) 1.177 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.373, 0.749), stdev = 0.306
[info]   CI (99.9%): [≈ 0, 1.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1208.077 ±(99.9%) 1155.516 MB/sec [Average]
[info]   (min, avg, max) = (671.275, 1208.077, 1343.970), stdev = 300.084
[info]   CI (99.9%): [52.561, 2363.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   7178.274 ±(99.9%) 6964.577 B/op [Average]
[info]   (min, avg, max) = (3945.149, 7178.274, 8055.723), stdev = 1808.679
[info]   CI (99.9%): [213.697, 14142.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 84.54% complete, ETA 00:20:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 294362.946 ops/s
[info] # Warmup Iteration   2: 502386.459 ops/s
[info] # Warmup Iteration   3: 508845.993 ops/s
[info] # Warmup Iteration   4: 519227.202 ops/s
[info] # Warmup Iteration   5: 518354.031 ops/s
[info] Iteration   1: 519475.712 ops/s
[info]                  ·gc.alloc.rate:                   417.162 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.532 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1549.942 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 517888.515 ops/s
[info]                  ·gc.alloc.rate:                   415.892 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.549 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1554.727 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 517696.872 ops/s
[info]                  ·gc.alloc.rate:      415.655 MB/sec
[info]                  ·gc.alloc.rate.norm: 1264.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 516809.939 ops/s
[info]                  ·gc.alloc.rate:                   414.958 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.333 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.597 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2051.839 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 514429.514 ops/s
[info]                  ·gc.alloc.rate:                   413.097 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.670 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2061.306 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala":
[info]   517260.110 ±(99.9%) 7128.755 ops/s [Average]
[info]   (min, avg, max) = (514429.514, 517260.110, 519475.712), stdev = 1851.315
[info]   CI (99.9%): [510131.355, 524388.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   415.353 ±(99.9%) 5.744 MB/sec [Average]
[info]   (min, avg, max) = (413.097, 415.353, 417.162), stdev = 1.492
[info]   CI (99.9%): [409.609, 421.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1264.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1264.001, 1264.001, 1264.001), stdev = 0.001
[info]   CI (99.9%): [1264.001, 1264.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.573 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.333), stdev = 0.149
[info]   CI (99.9%): [≈ 0, 0.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.203 ±(99.9%) 1.747 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.203, 1.014), stdev = 0.454
[info]   CI (99.9%): [≈ 0, 1.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   474.069 ±(99.9%) 1067.124 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474.069, 673.670), stdev = 277.129
[info]   CI (99.9%): [≈ 0, 1541.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1443.563 ±(99.9%) 3255.533 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1443.563, 2061.306), stdev = 845.452
[info]   CI (99.9%): [≈ 0, 4699.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 1.000
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 84.74% complete, ETA 00:20:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 542167.199 ops/s
[info] # Warmup Iteration   2: 571849.988 ops/s
[info] # Warmup Iteration   3: 609704.915 ops/s
[info] # Warmup Iteration   4: 609232.678 ops/s
[info] # Warmup Iteration   5: 613721.097 ops/s
[info] Iteration   1: 611556.819 ops/s
[info]                  ·gc.alloc.rate:      323.268 MB/sec
[info]                  ·gc.alloc.rate.norm: 832.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 607343.855 ops/s
[info]                  ·gc.alloc.rate:                   321.005 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.005 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1325.627 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 610689.835 ops/s
[info]                  ·gc.alloc.rate:                   322.746 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.414 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1318.365 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 597268.313 ops/s
[info]                  ·gc.alloc.rate:      315.672 MB/sec
[info]                  ·gc.alloc.rate.norm: 832.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 594730.537 ops/s
[info]                  ·gc.alloc.rate:                   314.317 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.036 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.096 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.453 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1353.822 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala":
[info]   604317.872 ±(99.9%) 30060.566 ops/s [Average]
[info]   (min, avg, max) = (594730.537, 604317.872, 611556.819), stdev = 7806.634
[info]   CI (99.9%): [574257.306, 634378.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   319.402 ±(99.9%) 15.931 MB/sec [Average]
[info]   (min, avg, max) = (314.317, 319.402, 323.268), stdev = 4.137
[info]   CI (99.9%): [303.471, 335.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   832.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (832.001, 832.001, 832.001), stdev = 0.001
[info]   CI (99.9%): [832.001, 832.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.008 ±(99.9%) 0.061 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.036), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.022 ±(99.9%) 0.162 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.096), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   306.865 ±(99.9%) 1078.673 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.865, 511.458), stdev = 280.128
[info]   CI (99.9%): [≈ 0, 1385.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   799.563 ±(99.9%) 2811.039 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 799.563, 1353.822), stdev = 730.018
[info]   CI (99.9%): [≈ 0, 3610.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 84.94% complete, ETA 00:20:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 628833.503 ops/s
[info] # Warmup Iteration   2: 685348.066 ops/s
[info] # Warmup Iteration   3: 707599.086 ops/s
[info] # Warmup Iteration   4: 707135.715 ops/s
[info] # Warmup Iteration   5: 704652.070 ops/s
[info] Iteration   1: 708721.585 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 710225.339 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 710366.898 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 707915.245 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 708955.146 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   709236.843 ±(99.9%) 4013.553 ops/s [Average]
[info]   (min, avg, max) = (707915.245, 709236.843, 710366.898), stdev = 1042.307
[info]   CI (99.9%): [705223.289, 713250.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 85.14% complete, ETA 00:19:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23295.687 ops/s
[info] # Warmup Iteration   2: 33430.672 ops/s
[info] # Warmup Iteration   3: 33421.865 ops/s
[info] # Warmup Iteration   4: 33820.071 ops/s
[info] # Warmup Iteration   5: 34046.253 ops/s
[info] Iteration   1: 34413.976 ops/s
[info]                  ·gc.alloc.rate:                   1782.263 MB/sec
[info]                  ·gc.alloc.rate.norm:              81536.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.856 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2007.641 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 91846.740 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 34561.893 ops/s
[info]                  ·gc.alloc.rate:                   1790.102 MB/sec
[info]                  ·gc.alloc.rate.norm:              81536.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.896 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2010.893 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 91592.665 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 34615.756 ops/s
[info]                  ·gc.alloc.rate:                   1793.022 MB/sec
[info]                  ·gc.alloc.rate.norm:              81536.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.946 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.647 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61055.634 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 34255.651 ops/s
[info]                  ·gc.alloc.rate:                   1774.510 MB/sec
[info]                  ·gc.alloc.rate.norm:              81536.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.825 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2016.999 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 92678.022 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 34446.210 ops/s
[info]                  ·gc.alloc.rate:                   1784.049 MB/sec
[info]                  ·gc.alloc.rate.norm:              81536.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.902 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021.321 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 92379.987 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson":
[info]   34458.697 ±(99.9%) 540.122 ops/s [Average]
[info]   (min, avg, max) = (34255.651, 34458.697, 34615.756), stdev = 140.268
[info]   CI (99.9%): [33918.575, 34998.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1784.789 ±(99.9%) 27.807 MB/sec [Average]
[info]   (min, avg, max) = (1774.510, 1784.789, 1793.022), stdev = 7.221
[info]   CI (99.9%): [1756.982, 1812.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   81536.012 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (81536.012, 81536.012, 81536.012), stdev = 0.001
[info]   CI (99.9%): [81536.012, 81536.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.050, 0.083), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.285 ±(99.9%) 4.213 B/op [Average]
[info]   (min, avg, max) = (0.946, 2.285, 3.825), stdev = 1.094
[info]   CI (99.9%): [≈ 0, 6.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1879.900 ±(99.9%) 1156.659 MB/sec [Average]
[info]   (min, avg, max) = (1342.647, 1879.900, 2021.321), stdev = 300.381
[info]   CI (99.9%): [723.242, 3036.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   85910.609 ±(99.9%) 53527.549 B/op [Average]
[info]   (min, avg, max) = (61055.634, 85910.609, 92678.022), stdev = 13900.934
[info]   CI (99.9%): [32383.061, 139438.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 85.34% complete, ETA 00:19:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 127921.110 ops/s
[info] # Warmup Iteration   2: 131889.264 ops/s
[info] # Warmup Iteration   3: 138542.924 ops/s
[info] # Warmup Iteration   4: 137176.493 ops/s
[info] # Warmup Iteration   5: 138939.664 ops/s
[info] Iteration   1: 139328.973 ops/s
[info]                  ·gc.alloc.rate:                   1035.724 MB/sec
[info]                  ·gc.alloc.rate.norm:              11704.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.815 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7591.725 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 139034.404 ops/s
[info]                  ·gc.alloc.rate:                   1033.780 MB/sec
[info]                  ·gc.alloc.rate.norm:              11704.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.943 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.680 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15201.234 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 138351.665 ops/s
[info]                  ·gc.alloc.rate:                   1028.852 MB/sec
[info]                  ·gc.alloc.rate.norm:              11704.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.409 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7637.800 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 139388.455 ops/s
[info]                  ·gc.alloc.rate:                   1036.386 MB/sec
[info]                  ·gc.alloc.rate.norm:              11704.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.940 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.990 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15166.505 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 139659.004 ops/s
[info]                  ·gc.alloc.rate:                   1038.486 MB/sec
[info]                  ·gc.alloc.rate.norm:              11704.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.683 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7570.038 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle":
[info]   139152.500 ±(99.9%) 1924.019 ops/s [Average]
[info]   (min, avg, max) = (138351.665, 139152.500, 139659.004), stdev = 499.662
[info]   CI (99.9%): [137228.481, 141076.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1034.646 ±(99.9%) 14.050 MB/sec [Average]
[info]   (min, avg, max) = (1028.852, 1034.646, 1038.486), stdev = 3.649
[info]   CI (99.9%): [1020.595, 1048.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   11704.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11704.003, 11704.003, 11704.003), stdev = 0.001
[info]   CI (99.9%): [11704.003, 11704.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.083), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0.377 ±(99.9%) 1.985 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.377, 0.943), stdev = 0.516
[info]   CI (99.9%): [≈ 0, 2.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   940.115 ±(99.9%) 1415.616 MB/sec [Average]
[info]   (min, avg, max) = (671.409, 940.115, 1342.990), stdev = 367.631
[info]   CI (99.9%): [≈ 0, 2355.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   10633.461 ±(99.9%) 15995.677 B/op [Average]
[info]   (min, avg, max) = (7570.038, 10633.461, 15201.234), stdev = 4154.026
[info]   CI (99.9%): [≈ 0, 26629.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 85.54% complete, ETA 00:19:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 47776.936 ops/s
[info] # Warmup Iteration   2: 58870.249 ops/s
[info] # Warmup Iteration   3: 60423.813 ops/s
[info] # Warmup Iteration   4: 60950.300 ops/s
[info] # Warmup Iteration   5: 61382.727 ops/s
[info] Iteration   1: 61516.099 ops/s
[info]                  ·gc.alloc.rate:                   2785.436 MB/sec
[info]                  ·gc.alloc.rate.norm:              71288.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.728 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2695.688 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68991.093 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 61432.972 ops/s
[info]                  ·gc.alloc.rate:                   2782.024 MB/sec
[info]                  ·gc.alloc.rate.norm:              71288.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.133 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2702.349 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69246.390 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 61246.952 ops/s
[info]                  ·gc.alloc.rate:                   2774.523 MB/sec
[info]                  ·gc.alloc.rate.norm:              71288.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.675 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2708.708 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69596.964 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 61487.856 ops/s
[info]                  ·gc.alloc.rate:                   2784.423 MB/sec
[info]                  ·gc.alloc.rate.norm:              71288.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.197 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2712.094 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69436.191 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 60857.140 ops/s
[info]                  ·gc.alloc.rate:                   2755.786 MB/sec
[info]                  ·gc.alloc.rate.norm:              71288.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2715.510 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70246.134 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce":
[info]   61308.204 ±(99.9%) 1051.502 ops/s [Average]
[info]   (min, avg, max) = (60857.140, 61308.204, 61516.099), stdev = 273.072
[info]   CI (99.9%): [60256.702, 62359.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.alloc.rate":
[info]   2776.438 ±(99.9%) 47.400 MB/sec [Average]
[info]   (min, avg, max) = (2755.786, 2776.438, 2785.436), stdev = 12.310
[info]   CI (99.9%): [2729.038, 2823.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   71288.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (71288.007, 71288.007, 71288.007), stdev = 0.001
[info]   CI (99.9%): [71288.006, 71288.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.217 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.092, 0.146), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2.346 ±(99.9%) 5.544 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.346, 3.728), stdev = 1.440
[info]   CI (99.9%): [≈ 0, 7.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2706.870 ±(99.9%) 30.490 MB/sec [Average]
[info]   (min, avg, max) = (2695.688, 2706.870, 2715.510), stdev = 7.918
[info]   CI (99.9%): [2676.380, 2737.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   69503.354 ±(99.9%) 1819.850 B/op [Average]
[info]   (min, avg, max) = (68991.093, 69503.354, 70246.134), stdev = 472.609
[info]   CI (99.9%): [67683.505, 71323.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 4.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 85.74% complete, ETA 00:19:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 76309.482 ops/s
[info] # Warmup Iteration   2: 135884.711 ops/s
[info] # Warmup Iteration   3: 135660.059 ops/s
[info] # Warmup Iteration   4: 135433.099 ops/s
[info] # Warmup Iteration   5: 137651.960 ops/s
[info] Iteration   1: 137347.751 ops/s
[info]                  ·gc.alloc.rate:                   1230.455 MB/sec
[info]                  ·gc.alloc.rate.norm:              14104.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.426 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15479.164 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 139865.952 ops/s
[info]                  ·gc.alloc.rate:                   1253.042 MB/sec
[info]                  ·gc.alloc.rate.norm:              14104.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.468 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.872 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15216.416 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 138539.071 ops/s
[info]                  ·gc.alloc.rate:                   1241.253 MB/sec
[info]                  ·gc.alloc.rate.norm:              14104.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.557 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15368.712 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 138536.215 ops/s
[info]                  ·gc.alloc.rate:                   1241.180 MB/sec
[info]                  ·gc.alloc.rate.norm:              14104.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.473 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      676.890 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7691.757 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 134073.995 ops/s
[info]                  ·gc.alloc.rate:                   1201.119 MB/sec
[info]                  ·gc.alloc.rate.norm:              14104.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.489 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.035 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15899.599 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala":
[info]   137672.597 ±(99.9%) 8472.047 ops/s [Average]
[info]   (min, avg, max) = (134073.995, 137672.597, 139865.952), stdev = 2200.164
[info]   CI (99.9%): [129200.550, 146144.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1233.410 ±(99.9%) 76.013 MB/sec [Average]
[info]   (min, avg, max) = (1201.119, 1233.410, 1253.042), stdev = 19.740
[info]   CI (99.9%): [1157.397, 1309.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   14104.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (14104.003, 14104.003, 14104.003), stdev = 0.001
[info]   CI (99.9%): [14104.003, 14104.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.286 ±(99.9%) 1.006 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.286, 0.489), stdev = 0.261
[info]   CI (99.9%): [≈ 0, 1.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1217.156 ±(99.9%) 1162.974 MB/sec [Average]
[info]   (min, avg, max) = (676.890, 1217.156, 1354.035), stdev = 302.021
[info]   CI (99.9%): [54.181, 2380.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   13931.130 ±(99.9%) 13466.201 B/op [Average]
[info]   (min, avg, max) = (7691.757, 13931.130, 15899.599), stdev = 3497.130
[info]   CI (99.9%): [464.929, 27397.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 85.94% complete, ETA 00:18:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 451189.858 ops/s
[info] # Warmup Iteration   2: 476550.666 ops/s
[info] # Warmup Iteration   3: 489218.944 ops/s
[info] # Warmup Iteration   4: 481747.746 ops/s
[info] # Warmup Iteration   5: 495212.754 ops/s
[info] Iteration   1: 495525.951 ops/s
[info]                  ·gc.alloc.rate:                   1294.086 MB/sec
[info]                  ·gc.alloc.rate.norm:              4112.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.264 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.698 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4269.643 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 489412.960 ops/s
[info]                  ·gc.alloc.rate:                   1278.477 MB/sec
[info]                  ·gc.alloc.rate.norm:              4112.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.268 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.737 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4318.680 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 494014.003 ops/s
[info]                  ·gc.alloc.rate:                   1290.385 MB/sec
[info]                  ·gc.alloc.rate.norm:              4112.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.199 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.158 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4280.171 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 493683.203 ops/s
[info]                  ·gc.alloc.rate:                   1289.537 MB/sec
[info]                  ·gc.alloc.rate.norm:              4112.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.265 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.493 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4287.243 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 495856.875 ops/s
[info]                  ·gc.alloc.rate:                   1295.113 MB/sec
[info]                  ·gc.alloc.rate.norm:              4112.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.739 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4272.740 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala":
[info]   493698.598 ±(99.9%) 9904.427 ops/s [Average]
[info]   (min, avg, max) = (489412.960, 493698.598, 495856.875), stdev = 2572.148
[info]   CI (99.9%): [483794.171, 503603.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1289.520 ±(99.9%) 25.457 MB/sec [Average]
[info]   (min, avg, max) = (1278.477, 1289.520, 1295.113), stdev = 6.611
[info]   CI (99.9%): [1264.063, 1314.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4112.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4112.001, 4112.001, 4112.001), stdev = 0.001
[info]   CI (99.9%): [4112.001, 4112.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.083), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.213 ±(99.9%) 0.334 B/op [Average]
[info]   (min, avg, max) = (0.066, 0.213, 0.268), stdev = 0.087
[info]   CI (99.9%): [≈ 0, 0.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1343.965 ±(99.9%) 4.580 MB/sec [Average]
[info]   (min, avg, max) = (1342.737, 1343.965, 1345.739), stdev = 1.189
[info]   CI (99.9%): [1339.386, 1348.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4285.695 ±(99.9%) 75.713 B/op [Average]
[info]   (min, avg, max) = (4269.643, 4285.695, 4318.680), stdev = 19.663
[info]   CI (99.9%): [4209.982, 4361.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 86.14% complete, ETA 00:18:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7263.770 ops/s
[info] # Warmup Iteration   2: 16171.446 ops/s
[info] # Warmup Iteration   3: 16512.582 ops/s
[info] # Warmup Iteration   4: 16515.479 ops/s
[info] # Warmup Iteration   5: 16501.105 ops/s
[info] Iteration   1: 16576.590 ops/s
[info]                  ·gc.alloc.rate:                   2165.388 MB/sec
[info]                  ·gc.alloc.rate.norm:              205664.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.929 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.254 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 192829.205 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 16452.587 ops/s
[info]                  ·gc.alloc.rate:                   2149.330 MB/sec
[info]                  ·gc.alloc.rate.norm:              205664.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.991 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.046 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 194537.101 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 16434.011 ops/s
[info]                  ·gc.alloc.rate:                   2147.166 MB/sec
[info]                  ·gc.alloc.rate.norm:              205664.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.993 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2713.685 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 259927.441 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 16322.521 ops/s
[info]                  ·gc.alloc.rate:                   2133.035 MB/sec
[info]                  ·gc.alloc.rate.norm:              205664.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037.571 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 196459.483 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 16310.529 ops/s
[info]                  ·gc.alloc.rate:                   2130.755 MB/sec
[info]                  ·gc.alloc.rate.norm:              205664.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2038.221 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 196732.524 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson":
[info]   16419.248 ±(99.9%) 418.561 ops/s [Average]
[info]   (min, avg, max) = (16310.529, 16419.248, 16576.590), stdev = 108.699
[info]   CI (99.9%): [16000.687, 16837.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2145.135 ±(99.9%) 53.948 MB/sec [Average]
[info]   (min, avg, max) = (2130.755, 2145.135, 2165.388), stdev = 14.010
[info]   CI (99.9%): [2091.187, 2199.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   205664.026 ±(99.9%) 0.014 B/op [Average]
[info]   (min, avg, max) = (205664.025, 205664.026, 205664.033), stdev = 0.004
[info]   CI (99.9%): [205664.012, 205664.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.037, 0.062), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3.589 ±(99.9%) 8.395 B/op [Average]
[info]   (min, avg, max) = (1.991, 3.589, 6.025), stdev = 2.180
[info]   CI (99.9%): [≈ 0, 11.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2170.555 ±(99.9%) 1169.196 MB/sec [Average]
[info]   (min, avg, max) = (2030.254, 2170.555, 2713.685), stdev = 303.637
[info]   CI (99.9%): [1001.359, 3339.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   208097.151 ±(99.9%) 111734.284 B/op [Average]
[info]   (min, avg, max) = (192829.205, 208097.151, 259927.441), stdev = 29017.039
[info]   CI (99.9%): [96362.867, 319831.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 86.35% complete, ETA 00:18:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27666.579 ops/s
[info] # Warmup Iteration   2: 39699.980 ops/s
[info] # Warmup Iteration   3: 39433.024 ops/s
[info] # Warmup Iteration   4: 39404.158 ops/s
[info] # Warmup Iteration   5: 40195.740 ops/s
[info] Iteration   1: 40299.383 ops/s
[info]                  ·gc.alloc.rate:                   2247.085 MB/sec
[info]                  ·gc.alloc.rate.norm:              87792.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2015.513 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78744.655 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 40453.122 ops/s
[info]                  ·gc.alloc.rate:                   2256.017 MB/sec
[info]                  ·gc.alloc.rate.norm:              87792.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.810 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.636 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78593.310 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 40332.669 ops/s
[info]                  ·gc.alloc.rate:                   2249.624 MB/sec
[info]                  ·gc.alloc.rate.norm:              87792.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.498 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2698.576 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 105312.485 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 40385.292 ops/s
[info]                  ·gc.alloc.rate:                   2252.753 MB/sec
[info]                  ·gc.alloc.rate.norm:              87792.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.056 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.569 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79016.347 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 40280.922 ops/s
[info]                  ·gc.alloc.rate:                   2246.402 MB/sec
[info]                  ·gc.alloc.rate.norm:              87792.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.401 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79350.431 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce":
[info]   40350.278 ±(99.9%) 268.950 ops/s [Average]
[info]   (min, avg, max) = (40280.922, 40350.278, 40453.122), stdev = 69.845
[info]   CI (99.9%): [40081.328, 40619.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2250.376 ±(99.9%) 15.482 MB/sec [Average]
[info]   (min, avg, max) = (2246.402, 2250.376, 2256.017), stdev = 4.021
[info]   CI (99.9%): [2234.894, 2265.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   87792.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (87792.010, 87792.010, 87792.010), stdev = 0.001
[info]   CI (99.9%): [87792.010, 87792.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.200 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.100, 0.167), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3.899 ±(99.9%) 7.792 B/op [Average]
[info]   (min, avg, max) = (0.810, 3.899, 6.498), stdev = 2.024
[info]   CI (99.9%): [≈ 0, 11.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   2158.339 ±(99.9%) 1163.129 MB/sec [Average]
[info]   (min, avg, max) = (2015.513, 2158.339, 2698.576), stdev = 302.061
[info]   CI (99.9%): [995.210, 3321.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   84203.446 ±(99.9%) 45452.335 B/op [Average]
[info]   (min, avg, max) = (78593.310, 84203.446, 105312.485), stdev = 11803.827
[info]   CI (99.9%): [38751.111, 129655.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 86.55% complete, ETA 00:18:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_6a03406e/target/1bdf7fe1/jackson-module-afterburner-2.9.5.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 136476.483 ops/s
[info] # Warmup Iteration   2: 212272.024 ops/s
[info] # Warmup Iteration   3: 230788.731 ops/s
[info] # Warmup Iteration   4: 223727.206 ops/s
[info] # Warmup Iteration   5: 231614.782 ops/s
[info] Iteration   1: 217480.969 ops/s
[info]                  ·gc.alloc.rate:                   1011.258 MB/sec
[info]                  ·gc.alloc.rate.norm:              7320.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.151 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.626 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4883.286 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 220776.740 ops/s
[info]                  ·gc.alloc.rate:                   1026.672 MB/sec
[info]                  ·gc.alloc.rate.norm:              7320.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.445 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.105 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9626.019 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 219663.004 ops/s
[info]                  ·gc.alloc.rate:                   1021.833 MB/sec
[info]                  ·gc.alloc.rate.norm:              7320.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.298 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.648 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9668.337 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 232709.484 ops/s
[info]                  ·gc.alloc.rate:                   1082.044 MB/sec
[info]                  ·gc.alloc.rate.norm:              7320.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.888 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4572.364 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 231821.663 ops/s
[info]                  ·gc.alloc.rate:                   1077.842 MB/sec
[info]                  ·gc.alloc.rate.norm:              7320.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.424 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.348 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9184.271 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala":
[info]   224490.372 ±(99.9%) 27735.860 ops/s [Average]
[info]   (min, avg, max) = (217480.969, 224490.372, 232709.484), stdev = 7202.915
[info]   CI (99.9%): [196754.512, 252226.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1043.930 ±(99.9%) 128.525 MB/sec [Average]
[info]   (min, avg, max) = (1011.258, 1043.930, 1082.044), stdev = 33.378
[info]   CI (99.9%): [915.404, 1172.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   7320.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7320.002, 7320.002, 7320.002), stdev = 0.001
[info]   CI (99.9%): [7320.001, 7320.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.264 ±(99.9%) 0.726 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.264, 0.445), stdev = 0.188
[info]   CI (99.9%): [≈ 0, 0.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1080.523 ±(99.9%) 1424.574 MB/sec [Average]
[info]   (min, avg, max) = (674.626, 1080.523, 1352.348), stdev = 369.957
[info]   CI (99.9%): [≈ 0, 2505.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7586.855 ±(99.9%) 10085.258 B/op [Average]
[info]   (min, avg, max) = (4572.364, 7586.855, 9668.337), stdev = 2619.109
[info]   CI (99.9%): [≈ 0, 17672.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 86.75% complete, ETA 00:17:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1090280.923 ops/s
[info] # Warmup Iteration   2: 1112113.475 ops/s
[info] # Warmup Iteration   3: 1129144.495 ops/s
[info] # Warmup Iteration   4: 1131482.112 ops/s
[info] # Warmup Iteration   5: 1116994.881 ops/s
[info] Iteration   1: 1103366.765 ops/s
[info]                  ·gc.alloc.rate:                   555.103 MB/sec
[info]                  ·gc.alloc.rate.norm:              792.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.466 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 729.740 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1120037.647 ops/s
[info]                  ·gc.alloc.rate:                   563.359 MB/sec
[info]                  ·gc.alloc.rate.norm:              792.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.294 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.630 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.459 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 948.191 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1129618.364 ops/s
[info]                  ·gc.alloc.rate:                   568.372 MB/sec
[info]                  ·gc.alloc.rate.norm:              792.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.087 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.652 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 940.096 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1130383.189 ops/s
[info]                  ·gc.alloc.rate:                   568.668 MB/sec
[info]                  ·gc.alloc.rate.norm:              792.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.551 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 936.682 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1132157.171 ops/s
[info]                  ·gc.alloc.rate:      569.679 MB/sec
[info]                  ·gc.alloc.rate.norm: 792.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala":
[info]   1123112.627 ±(99.9%) 46221.525 ops/s [Average]
[info]   (min, avg, max) = (1103366.765, 1123112.627, 1132157.171), stdev = 12003.583
[info]   CI (99.9%): [1076891.102, 1169334.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   565.036 ±(99.9%) 23.371 MB/sec [Average]
[info]   (min, avg, max) = (555.103, 565.036, 569.679), stdev = 6.069
[info]   CI (99.9%): [541.665, 588.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   792.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (792.000, 792.000, 792.000), stdev = 0.001
[info]   CI (99.9%): [792.000, 792.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.671 ±(99.9%) 5.646 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.671, 3.294), stdev = 1.466
[info]   CI (99.9%): [≈ 0, 6.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.943 ±(99.9%) 7.938 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.943, 4.630), stdev = 2.061
[info]   CI (99.9%): [≈ 0, 8.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   506.626 ±(99.9%) 1123.677 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506.626, 674.652), stdev = 291.815
[info]   CI (99.9%): [≈ 0, 1630.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   710.942 ±(99.9%) 1570.701 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 710.942, 948.191), stdev = 407.906
[info]   CI (99.9%): [≈ 0, 2281.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.140
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 86.95% complete, ETA 00:17:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1151145.424 ops/s
[info] # Warmup Iteration   2: 1157448.306 ops/s
[info] # Warmup Iteration   3: 1169001.386 ops/s
[info] # Warmup Iteration   4: 1172551.035 ops/s
[info] # Warmup Iteration   5: 1173407.842 ops/s
[info] Iteration   1: 1171744.928 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1173961.191 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1173759.520 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1169170.419 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1171471.872 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScalaPrealloc":
[info]   1172021.586 ±(99.9%) 7528.565 ops/s [Average]
[info]   (min, avg, max) = (1169170.419, 1172021.586, 1173961.191), stdev = 1955.144
[info]   CI (99.9%): [1164493.021, 1179550.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 87.15% complete, ETA 00:17:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27186.134 ops/s
[info] # Warmup Iteration   2: 50455.580 ops/s
[info] # Warmup Iteration   3: 52381.328 ops/s
[info] # Warmup Iteration   4: 51381.898 ops/s
[info] # Warmup Iteration   5: 52150.921 ops/s
[info] Iteration   1: 52708.915 ops/s
[info]                  ·gc.alloc.rate:                   2753.212 MB/sec
[info]                  ·gc.alloc.rate.norm:              82232.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.865 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2710.865 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80967.203 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 51188.463 ops/s
[info]                  ·gc.alloc.rate:                   2674.097 MB/sec
[info]                  ·gc.alloc.rate.norm:              82232.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.280 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2714.778 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 83483.002 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 52383.037 ops/s
[info]                  ·gc.alloc.rate:                   2736.276 MB/sec
[info]                  ·gc.alloc.rate.norm:              82232.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.501 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2716.842 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 81647.965 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 50972.255 ops/s
[info]                  ·gc.alloc.rate:                   2662.751 MB/sec
[info]                  ·gc.alloc.rate.norm:              82232.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.499 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2719.775 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 83993.025 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 52398.855 ops/s
[info]                  ·gc.alloc.rate:                   2736.925 MB/sec
[info]                  ·gc.alloc.rate.norm:              82232.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.126 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2720.911 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 81750.874 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson":
[info]   51930.305 ±(99.9%) 3043.549 ops/s [Average]
[info]   (min, avg, max) = (50972.255, 51930.305, 52708.915), stdev = 790.400
[info]   CI (99.9%): [48886.756, 54973.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2712.652 ±(99.9%) 158.403 MB/sec [Average]
[info]   (min, avg, max) = (2662.751, 2712.652, 2753.212), stdev = 41.137
[info]   CI (99.9%): [2554.249, 2871.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   82232.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (82232.008, 82232.008, 82232.008), stdev = 0.001
[info]   CI (99.9%): [82232.007, 82232.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.146), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.654 ±(99.9%) 4.779 B/op [Average]
[info]   (min, avg, max) = (1.280, 2.654, 4.499), stdev = 1.241
[info]   CI (99.9%): [≈ 0, 7.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   2716.634 ±(99.9%) 15.514 MB/sec [Average]
[info]   (min, avg, max) = (2710.865, 2716.634, 2720.911), stdev = 4.029
[info]   CI (99.9%): [2701.121, 2732.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   82368.414 ±(99.9%) 5000.451 B/op [Average]
[info]   (min, avg, max) = (80967.203, 82368.414, 83993.025), stdev = 1298.601
[info]   CI (99.9%): [77367.963, 87368.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce
[info] # Run progress: 87.35% complete, ETA 00:16:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 314314.877 ops/s
[info] # Warmup Iteration   2: 683733.416 ops/s
[info] # Warmup Iteration   3: 692064.270 ops/s
[info] # Warmup Iteration   4: 695064.754 ops/s
[info] # Warmup Iteration   5: 680412.847 ops/s
[info] Iteration   1: 682841.481 ops/s
[info]                  ·gc.alloc.rate:                   2071.806 MB/sec
[info]                  ·gc.alloc.rate.norm:              4776.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.144 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2015.289 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4645.715 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 695673.290 ops/s
[info]                  ·gc.alloc.rate:                   2110.291 MB/sec
[info]                  ·gc.alloc.rate.norm:              4776.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.141 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2018.259 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4567.714 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 695843.710 ops/s
[info]                  ·gc.alloc.rate:                   2111.099 MB/sec
[info]                  ·gc.alloc.rate.norm:              4776.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.188 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021.080 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4572.349 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 687513.189 ops/s
[info]                  ·gc.alloc.rate:                   2085.994 MB/sec
[info]                  ·gc.alloc.rate.norm:              4776.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.095 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025.580 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4637.679 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 697000.911 ops/s
[info]                  ·gc.alloc.rate:                   2114.564 MB/sec
[info]                  ·gc.alloc.rate.norm:              4776.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.188 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2704.959 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6109.480 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce":
[info]   691774.516 ±(99.9%) 24126.674 ops/s [Average]
[info]   (min, avg, max) = (682841.481, 691774.516, 697000.911), stdev = 6265.621
[info]   CI (99.9%): [667647.843, 715901.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate":
[info]   2098.751 ±(99.9%) 72.665 MB/sec [Average]
[info]   (min, avg, max) = (2071.806, 2098.751, 2114.564), stdev = 18.871
[info]   CI (99.9%): [2026.086, 2171.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4776.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4776.001, 4776.001, 4776.001), stdev = 0.001
[info]   CI (99.9%): [4776.001, 4776.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.083), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.151 ±(99.9%) 0.149 B/op [Average]
[info]   (min, avg, max) = (0.095, 0.151, 0.188), stdev = 0.039
[info]   CI (99.9%): [0.002, 0.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2157.033 ±(99.9%) 1179.541 MB/sec [Average]
[info]   (min, avg, max) = (2015.289, 2157.033, 2704.959), stdev = 306.323
[info]   CI (99.9%): [977.492, 3336.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4906.588 ±(99.9%) 2593.021 B/op [Average]
[info]   (min, avg, max) = (4567.714, 4906.588, 6109.480), stdev = 673.399
[info]   CI (99.9%): [2313.566, 7499.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala
[info] # Run progress: 87.55% complete, ETA 00:16:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 500241.472 ops/s
[info] # Warmup Iteration   2: 1474930.166 ops/s
[info] # Warmup Iteration   3: 1536104.621 ops/s
[info] # Warmup Iteration   4: 1533393.761 ops/s
[info] # Warmup Iteration   5: 1528563.838 ops/s
[info] Iteration   1: 1538446.239 ops/s
[info]                  ·gc.alloc.rate:                   1164.782 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.689 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1381.229 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1540273.244 ops/s
[info]                  ·gc.alloc.rate:                   1166.184 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.085 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.038 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1380.946 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 1541752.869 ops/s
[info]                  ·gc.alloc.rate:                   1167.377 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.894 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 690.151 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1536709.079 ops/s
[info]                  ·gc.alloc.rate:                   1163.603 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.498 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1385.505 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1537453.467 ops/s
[info]                  ·gc.alloc.rate:                   1164.441 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.085 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.192 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1386.241 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala":
[info]   1538926.980 ±(99.9%) 7966.162 ops/s [Average]
[info]   (min, avg, max) = (1536709.079, 1538926.980, 1541752.869), stdev = 2068.787
[info]   CI (99.9%): [1530960.818, 1546893.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1165.278 ±(99.9%) 5.770 MB/sec [Average]
[info]   (min, avg, max) = (1163.603, 1165.278, 1167.377), stdev = 1.498
[info]   CI (99.9%): [1159.508, 1171.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1192.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1192.000, 1192.000, 1192.000), stdev = 0.001
[info]   CI (99.9%): [1192.000, 1192.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.104), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.060 ±(99.9%) 0.178 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.060, 0.106), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1216.662 ±(99.9%) 1164.062 MB/sec [Average]
[info]   (min, avg, max) = (675.894, 1216.662, 1354.192), stdev = 302.303
[info]   CI (99.9%): [52.601, 2380.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1244.814 ±(99.9%) 1193.992 B/op [Average]
[info]   (min, avg, max) = (690.151, 1244.814, 1386.241), stdev = 310.076
[info]   CI (99.9%): [50.823, 2438.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala
[info] # Run progress: 87.75% complete, ETA 00:16:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6697077.218 ops/s
[info] # Warmup Iteration   2: 7369934.580 ops/s
[info] # Warmup Iteration   3: 7161170.192 ops/s
[info] # Warmup Iteration   4: 7298315.569 ops/s
[info] # Warmup Iteration   5: 7362498.356 ops/s
[info] Iteration   1: 7387405.247 ops/s
[info]                  ·gc.alloc.rate:      225.234 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 7375145.522 ops/s
[info]                  ·gc.alloc.rate:                   224.883 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.015 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.461 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 109.169 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 7373908.664 ops/s
[info]                  ·gc.alloc.rate:      224.823 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 7314111.622 ops/s
[info]                  ·gc.alloc.rate:                   223.013 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.421 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 110.075 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 7374770.655 ops/s
[info]                  ·gc.alloc.rate:      224.868 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala":
[info]   7365068.342 ±(99.9%) 111757.608 ops/s [Average]
[info]   (min, avg, max) = (7314111.622, 7365068.342, 7387405.247), stdev = 29023.096
[info]   CI (99.9%): [7253310.734, 7476825.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   224.564 ±(99.9%) 3.399 MB/sec [Average]
[info]   (min, avg, max) = (223.013, 224.564, 225.234), stdev = 0.883
[info]   CI (99.9%): [221.165, 227.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.003 ±(99.9%) 0.026 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.015), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.001 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   204.576 ±(99.9%) 1078.672 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.576, 511.461), stdev = 280.128
[info]   CI (99.9%): [≈ 0, 1283.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   43.849 ±(99.9%) 231.206 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 43.849, 110.075), stdev = 60.043
[info]   CI (99.9%): [≈ 0, 275.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 1.095
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson
[info] # Run progress: 87.95% complete, ETA 00:16:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 47431.992 ops/s
[info] # Warmup Iteration   2: 224124.092 ops/s
[info] # Warmup Iteration   3: 227482.048 ops/s
[info] # Warmup Iteration   4: 229767.196 ops/s
[info] # Warmup Iteration   5: 230874.388 ops/s
[info] Iteration   1: 230567.196 ops/s
[info]                  ·gc.alloc.rate:                   1633.359 MB/sec
[info]                  ·gc.alloc.rate.norm:              11152.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.284 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.129 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9225.035 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 229677.075 ops/s
[info]                  ·gc.alloc.rate:                   1626.849 MB/sec
[info]                  ·gc.alloc.rate.norm:              11152.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.571 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.108 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13909.477 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 222571.744 ops/s
[info]                  ·gc.alloc.rate:                   1576.809 MB/sec
[info]                  ·gc.alloc.rate.norm:              11152.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.294 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.243 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9577.897 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 228034.971 ops/s
[info]                  ·gc.alloc.rate:                   1615.429 MB/sec
[info]                  ·gc.alloc.rate.norm:              11152.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.287 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.198 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9355.513 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 227254.961 ops/s
[info]                  ·gc.alloc.rate:                   1609.939 MB/sec
[info]                  ·gc.alloc.rate.norm:              11152.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.577 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034.415 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14092.337 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson":
[info]   227621.189 ±(99.9%) 11978.514 ops/s [Average]
[info]   (min, avg, max) = (222571.744, 227621.189, 230567.196), stdev = 3110.782
[info]   CI (99.9%): [215642.675, 239599.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1612.477 ±(99.9%) 84.582 MB/sec [Average]
[info]   (min, avg, max) = (1576.809, 1612.477, 1633.359), stdev = 21.966
[info]   CI (99.9%): [1527.895, 1697.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   11152.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11152.002, 11152.002, 11152.002), stdev = 0.001
[info]   CI (99.9%): [11152.002, 11152.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.058, 0.083), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.403 ±(99.9%) 0.601 B/op [Average]
[info]   (min, avg, max) = (0.284, 0.403, 0.577), stdev = 0.156
[info]   CI (99.9%): [≈ 0, 1.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1624.819 ±(99.9%) 1430.492 MB/sec [Average]
[info]   (min, avg, max) = (1351.129, 1624.819, 2034.415), stdev = 371.494
[info]   CI (99.9%): [194.327, 3055.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   11232.052 ±(99.9%) 9748.211 B/op [Average]
[info]   (min, avg, max) = (9225.035, 11232.052, 14092.337), stdev = 2531.580
[info]   CI (99.9%): [1483.841, 20980.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce
[info] # Run progress: 88.15% complete, ETA 00:15:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 421885.564 ops/s
[info] # Warmup Iteration   2: 934071.767 ops/s
[info] # Warmup Iteration   3: 959057.349 ops/s
[info] # Warmup Iteration   4: 928028.777 ops/s
[info] # Warmup Iteration   5: 956747.225 ops/s
[info] Iteration   1: 955319.797 ops/s
[info]                  ·gc.alloc.rate:                   1427.472 MB/sec
[info]                  ·gc.alloc.rate.norm:              2352.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.137 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2012.100 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3315.274 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 943781.856 ops/s
[info]                  ·gc.alloc.rate:                   1410.269 MB/sec
[info]                  ·gc.alloc.rate.norm:              2352.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.832 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2237.862 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 940756.116 ops/s
[info]                  ·gc.alloc.rate:                   1405.825 MB/sec
[info]                  ·gc.alloc.rate.norm:              2352.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.501 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2246.057 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 953914.039 ops/s
[info]                  ·gc.alloc.rate:                   1425.027 MB/sec
[info]                  ·gc.alloc.rate.norm:              2352.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.103 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.326 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2217.154 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 954338.078 ops/s
[info]                  ·gc.alloc.rate:                   1425.903 MB/sec
[info]                  ·gc.alloc.rate.norm:              2352.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.103 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.267 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2218.992 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce":
[info]   949621.977 ±(99.9%) 26246.528 ops/s [Average]
[info]   (min, avg, max) = (940756.116, 949621.977, 955319.797), stdev = 6816.140
[info]   CI (99.9%): [923375.449, 975868.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1418.899 ±(99.9%) 38.770 MB/sec [Average]
[info]   (min, avg, max) = (1405.825, 1418.899, 1427.472), stdev = 10.068
[info]   CI (99.9%): [1380.129, 1457.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2352.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2352.000, 2352.000, 2352.000), stdev = 0.001
[info]   CI (99.9%): [2352.000, 2352.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.083), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.083 ±(99.9%) 0.200 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.083, 0.137), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1477.005 ±(99.9%) 1151.843 MB/sec [Average]
[info]   (min, avg, max) = (1341.832, 1477.005, 2012.100), stdev = 299.130
[info]   CI (99.9%): [325.162, 2628.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2447.068 ±(99.9%) 1869.481 B/op [Average]
[info]   (min, avg, max) = (2217.154, 2447.068, 3315.274), stdev = 485.498
[info]   CI (99.9%): [577.588, 4316.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala
[info] # Run progress: 88.35% complete, ETA 00:15:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_6a03406e/target/1bdf7fe1/jackson-module-afterburner-2.9.5.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 748414.964 ops/s
[info] # Warmup Iteration   2: 2355409.132 ops/s
[info] # Warmup Iteration   3: 2387236.801 ops/s
[info] # Warmup Iteration   4: 2430455.083 ops/s
[info] # Warmup Iteration   5: 2471809.519 ops/s
[info] Iteration   1: 2463052.875 ops/s
[info]                  ·gc.alloc.rate:                   1013.806 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.450 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 861.896 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 2479119.840 ops/s
[info]                  ·gc.alloc.rate:                   1020.517 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.865 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 428.521 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 2464366.281 ops/s
[info]                  ·gc.alloc.rate:                   1014.378 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.098 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 862.463 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2475258.497 ops/s
[info]                  ·gc.alloc.rate:                   1018.825 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.197 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 429.443 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 2464532.933 ops/s
[info]                  ·gc.alloc.rate:                   1014.406 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.735 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 863.485 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala":
[info]   2469266.085 ±(99.9%) 28428.361 ops/s [Average]
[info]   (min, avg, max) = (2463052.875, 2469266.085, 2479119.840), stdev = 7382.755
[info]   CI (99.9%): [2440837.724, 2497694.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1016.386 ±(99.9%) 11.809 MB/sec [Average]
[info]   (min, avg, max) = (1013.806, 1016.386, 1020.517), stdev = 3.067
[info]   CI (99.9%): [1004.578, 1028.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   648.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (648.000, 648.000, 648.000), stdev = 0.001
[info]   CI (99.9%): [648.000, 648.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.184 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.104), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.021 ±(99.9%) 0.118 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.066), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1080.069 ±(99.9%) 1423.772 MB/sec [Average]
[info]   (min, avg, max) = (674.865, 1080.069, 1351.735), stdev = 369.749
[info]   CI (99.9%): [≈ 0, 2503.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   689.162 ±(99.9%) 914.571 B/op [Average]
[info]   (min, avg, max) = (428.521, 689.162, 863.485), stdev = 237.511
[info]   CI (99.9%): [≈ 0, 1603.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala
[info] # Run progress: 88.55% complete, ETA 00:15:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4158018.368 ops/s
[info] # Warmup Iteration   2: 5683406.031 ops/s
[info] # Warmup Iteration   3: 5837099.390 ops/s
[info] # Warmup Iteration   4: 5845975.663 ops/s
[info] # Warmup Iteration   5: 5555583.494 ops/s
[info] Iteration   1: 5845502.432 ops/s
[info]                  ·gc.alloc.rate:                   653.504 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.312 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.892 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.600 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 181.682 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 5849795.950 ops/s
[info]                  ·gc.alloc.rate:                   653.933 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.558 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 181.551 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 5860052.503 ops/s
[info]                  ·gc.alloc.rate:      655.121 MB/sec
[info]                  ·gc.alloc.rate.norm: 176.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 5812498.926 ops/s
[info]                  ·gc.alloc.rate:                   649.778 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.850 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 181.979 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 5821414.158 ops/s
[info]                  ·gc.alloc.rate:                   650.840 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.916 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 181.699 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala":
[info]   5837852.794 ±(99.9%) 77181.890 ops/s [Average]
[info]   (min, avg, max) = (5812498.926, 5837852.794, 5860052.503), stdev = 20043.892
[info]   CI (99.9%): [5760670.904, 5915034.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   652.635 ±(99.9%) 8.611 MB/sec [Average]
[info]   (min, avg, max) = (649.778, 652.635, 655.121), stdev = 2.236
[info]   CI (99.9%): [644.025, 661.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   176.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (176.000, 176.000, 176.000), stdev = 0.001
[info]   CI (99.9%): [176.000, 176.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.675 ±(99.9%) 5.677 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.675, 3.312), stdev = 1.474
[info]   CI (99.9%): [≈ 0, 6.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.182 ±(99.9%) 1.529 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.182, 0.892), stdev = 0.397
[info]   CI (99.9%): [≈ 0, 1.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   538.585 ±(99.9%) 1159.356 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538.585, 674.600), stdev = 301.081
[info]   CI (99.9%): [≈ 0, 1697.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   145.382 ±(99.9%) 312.946 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 145.382, 181.979), stdev = 81.271
[info]   CI (99.9%): [≈ 0, 458.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 3.000), stdev = 1.225
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 88.76% complete, ETA 00:15:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4271868.574 ops/s
[info] # Warmup Iteration   2: 5574094.168 ops/s
[info] # Warmup Iteration   3: 5697603.267 ops/s
[info] # Warmup Iteration   4: 5647920.892 ops/s
[info] # Warmup Iteration   5: 5778504.159 ops/s
[info] Iteration   1: 5804985.276 ops/s
[info]                  ·gc.alloc.rate:                   353.960 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.386 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 138.697 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 5715431.173 ops/s
[info]                  ·gc.alloc.rate:      348.557 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 5796404.225 ops/s
[info]                  ·gc.alloc.rate:                   353.474 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.430 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 138.899 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 5654754.033 ops/s
[info]                  ·gc.alloc.rate:                   344.824 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.037 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.413 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 142.379 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 5684886.858 ops/s
[info]                  ·gc.alloc.rate:      346.675 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc":
[info]   5731292.313 ±(99.9%) 257830.476 ops/s [Average]
[info]   (min, avg, max) = (5654754.033, 5731292.313, 5804985.276), stdev = 66957.756
[info]   CI (99.9%): [5473461.837, 5989122.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   349.498 ±(99.9%) 15.691 MB/sec [Average]
[info]   (min, avg, max) = (344.824, 349.498, 353.960), stdev = 4.075
[info]   CI (99.9%): [333.807, 365.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   96.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (96.000, 96.000, 96.000), stdev = 0.001
[info]   CI (99.9%): [96.000, 96.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   0.009 ±(99.9%) 0.062 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.037), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   0.003 ±(99.9%) 0.017 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.010), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   306.846 ±(99.9%) 1078.606 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.846, 511.430), stdev = 280.111
[info]   CI (99.9%): [≈ 0, 1385.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   83.995 ±(99.9%) 295.308 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 83.995, 142.379), stdev = 76.691
[info]   CI (99.9%): [≈ 0, 379.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson
[info] # Run progress: 88.96% complete, ETA 00:14:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 58458.192 ops/s
[info] # Warmup Iteration   2: 338859.005 ops/s
[info] # Warmup Iteration   3: 339129.612 ops/s
[info] # Warmup Iteration   4: 339917.247 ops/s
[info] # Warmup Iteration   5: 343403.773 ops/s
[info] Iteration   1: 341827.246 ops/s
[info]                  ·gc.alloc.rate:                   1985.316 MB/sec
[info]                  ·gc.alloc.rate.norm:              9144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.288 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.237 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9346.294 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 341478.427 ops/s
[info]                  ·gc.alloc.rate:                   1983.309 MB/sec
[info]                  ·gc.alloc.rate.norm:              9144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.288 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.107 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9364.369 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 343255.955 ops/s
[info]                  ·gc.alloc.rate:                   1994.361 MB/sec
[info]                  ·gc.alloc.rate.norm:              9144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.382 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034.953 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9330.109 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 339998.601 ops/s
[info]                  ·gc.alloc.rate:                   1974.970 MB/sec
[info]                  ·gc.alloc.rate.norm:              9144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.385 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.846 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9425.853 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 344021.238 ops/s
[info]                  ·gc.alloc.rate:                   1998.257 MB/sec
[info]                  ·gc.alloc.rate.norm:              9144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.286 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037.736 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9324.657 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson":
[info]   342116.293 ±(99.9%) 6058.705 ops/s [Average]
[info]   (min, avg, max) = (339998.601, 342116.293, 344021.238), stdev = 1573.427
[info]   CI (99.9%): [336057.588, 348174.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1987.243 ±(99.9%) 35.594 MB/sec [Average]
[info]   (min, avg, max) = (1974.970, 1987.243, 1998.257), stdev = 9.244
[info]   CI (99.9%): [1951.649, 2022.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   9144.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9144.001, 9144.001, 9144.001), stdev = 0.001
[info]   CI (99.9%): [9144.001, 9144.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.071, 0.083), stdev = 0.011
[info]   CI (99.9%): [0.027, 0.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.326 ±(99.9%) 0.204 B/op [Average]
[info]   (min, avg, max) = (0.286, 0.326, 0.385), stdev = 0.053
[info]   CI (99.9%): [0.122, 0.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   2033.776 ±(99.9%) 13.488 MB/sec [Average]
[info]   (min, avg, max) = (2029.237, 2033.776, 2037.736), stdev = 3.503
[info]   CI (99.9%): [2020.288, 2047.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   9358.256 ±(99.9%) 157.251 B/op [Average]
[info]   (min, avg, max) = (9324.657, 9358.256, 9425.853), stdev = 40.838
[info]   CI (99.9%): [9201.005, 9515.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 89.16% complete, ETA 00:14:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 53838.884 ops/s
[info] # Warmup Iteration   2: 66767.628 ops/s
[info] # Warmup Iteration   3: 65294.752 ops/s
[info] # Warmup Iteration   4: 68031.152 ops/s
[info] # Warmup Iteration   5: 68143.932 ops/s
[info] Iteration   1: 67950.511 ops/s
[info]                  ·gc.alloc.rate:                   1942.633 MB/sec
[info]                  ·gc.alloc.rate.norm:              44992.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.411 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2015.672 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 46683.601 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 66711.831 ops/s
[info]                  ·gc.alloc.rate:                   1906.806 MB/sec
[info]                  ·gc.alloc.rate.norm:              44992.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.982 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2018.654 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47631.116 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 67805.449 ops/s
[info]                  ·gc.alloc.rate:                   1938.019 MB/sec
[info]                  ·gc.alloc.rate.norm:              44992.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.542 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31283.816 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 66682.495 ops/s
[info]                  ·gc.alloc.rate:                   1906.474 MB/sec
[info]                  ·gc.alloc.rate.norm:              44992.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.456 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024.812 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47784.742 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 66677.422 ops/s
[info]                  ·gc.alloc.rate:                   1905.760 MB/sec
[info]                  ·gc.alloc.rate.norm:              44992.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.474 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.536 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47866.937 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce":
[info]   67165.542 ±(99.9%) 2512.604 ops/s [Average]
[info]   (min, avg, max) = (66677.422, 67165.542, 67950.511), stdev = 652.515
[info]   CI (99.9%): [64652.937, 69678.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1919.938 ±(99.9%) 71.955 MB/sec [Average]
[info]   (min, avg, max) = (1905.760, 1919.938, 1942.633), stdev = 18.687
[info]   CI (99.9%): [1847.983, 1991.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   44992.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (44992.006, 44992.006, 44992.006), stdev = 0.001
[info]   CI (99.9%): [44992.005, 44992.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.170 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.104), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.465 ±(99.9%) 3.972 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.465, 2.456), stdev = 1.032
[info]   CI (99.9%): [≈ 0, 5.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1886.843 ±(99.9%) 1161.029 MB/sec [Average]
[info]   (min, avg, max) = (1347.542, 1886.843, 2027.536), stdev = 301.516
[info]   CI (99.9%): [725.814, 3047.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   44250.042 ±(99.9%) 27970.424 B/op [Average]
[info]   (min, avg, max) = (31283.816, 44250.042, 47866.937), stdev = 7263.830
[info]   CI (99.9%): [16279.618, 72220.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 89.36% complete, ETA 00:14:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 60119.460 ops/s
[info] # Warmup Iteration   2: 105798.908 ops/s
[info] # Warmup Iteration   3: 108088.034 ops/s
[info] # Warmup Iteration   4: 108798.688 ops/s
[info] # Warmup Iteration   5: 108650.816 ops/s
[info] Iteration   1: 106642.752 ops/s
[info]                  ·gc.alloc.rate:                   1642.052 MB/sec
[info]                  ·gc.alloc.rate.norm:              24240.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.614 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.233 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19961.688 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 109311.310 ops/s
[info]                  ·gc.alloc.rate:                   1683.486 MB/sec
[info]                  ·gc.alloc.rate.norm:              24240.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.599 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.578 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29237.672 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 109099.806 ops/s
[info]                  ·gc.alloc.rate:                   1679.774 MB/sec
[info]                  ·gc.alloc.rate.norm:              24240.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.901 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.997 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19553.305 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 108859.275 ops/s
[info]                  ·gc.alloc.rate:                   1676.221 MB/sec
[info]                  ·gc.alloc.rate.norm:              24240.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.204 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034.443 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29420.298 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 109052.014 ops/s
[info]                  ·gc.alloc.rate:                   1678.927 MB/sec
[info]                  ·gc.alloc.rate.norm:              24240.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.901 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356.982 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19591.825 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala":
[info]   108593.032 ±(99.9%) 4243.527 ops/s [Average]
[info]   (min, avg, max) = (106642.752, 108593.032, 109311.310), stdev = 1102.030
[info]   CI (99.9%): [104349.505, 112836.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1672.092 ±(99.9%) 65.432 MB/sec [Average]
[info]   (min, avg, max) = (1642.052, 1672.092, 1683.486), stdev = 16.993
[info]   CI (99.9%): [1606.660, 1737.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   24240.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (24240.004, 24240.004, 24240.004), stdev = 0.001
[info]   CI (99.9%): [24240.003, 24240.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.058, 0.083), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.844 ±(99.9%) 0.960 B/op [Average]
[info]   (min, avg, max) = (0.599, 0.844, 1.204), stdev = 0.249
[info]   CI (99.9%): [≈ 0, 1.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1625.847 ±(99.9%) 1429.506 MB/sec [Average]
[info]   (min, avg, max) = (1352.233, 1625.847, 2034.443), stdev = 371.238
[info]   CI (99.9%): [196.341, 3055.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   23552.957 ±(99.9%) 20314.352 B/op [Average]
[info]   (min, avg, max) = (19553.305, 23552.957, 29420.298), stdev = 5275.573
[info]   CI (99.9%): [3238.605, 43867.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 89.56% complete, ETA 00:14:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 148675.019 ops/s
[info] # Warmup Iteration   2: 163613.386 ops/s
[info] # Warmup Iteration   3: 166159.974 ops/s
[info] # Warmup Iteration   4: 165616.345 ops/s
[info] # Warmup Iteration   5: 165599.251 ops/s
[info] Iteration   1: 163004.181 ops/s
[info]                  ·gc.alloc.rate:                   2394.353 MB/sec
[info]                  ·gc.alloc.rate.norm:              23120.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.402 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020.409 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19509.183 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 162515.650 ops/s
[info]                  ·gc.alloc.rate:                   2387.317 MB/sec
[info]                  ·gc.alloc.rate.norm:              23120.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.403 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2698.944 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26137.960 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 166192.170 ops/s
[info]                  ·gc.alloc.rate:                   2440.702 MB/sec
[info]                  ·gc.alloc.rate.norm:              23120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.394 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.334 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19213.769 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 164961.499 ops/s
[info]                  ·gc.alloc.rate:                   2422.512 MB/sec
[info]                  ·gc.alloc.rate.norm:              23120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.397 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2707.739 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25842.162 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 164474.586 ops/s
[info]                  ·gc.alloc.rate:                   2415.613 MB/sec
[info]                  ·gc.alloc.rate.norm:              23120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.598 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2712.633 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25962.803 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala":
[info]   164229.617 ±(99.9%) 5739.478 ops/s [Average]
[info]   (min, avg, max) = (162515.650, 164229.617, 166192.170), stdev = 1490.524
[info]   CI (99.9%): [158490.139, 169969.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2412.099 ±(99.9%) 83.212 MB/sec [Average]
[info]   (min, avg, max) = (2387.317, 2412.099, 2440.702), stdev = 21.610
[info]   CI (99.9%): [2328.887, 2495.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   23120.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (23120.002, 23120.002, 23120.003), stdev = 0.001
[info]   CI (99.9%): [23120.002, 23120.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.046, 0.062), stdev = 0.009
[info]   CI (99.9%): [0.010, 0.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.439 ±(99.9%) 0.342 B/op [Average]
[info]   (min, avg, max) = (0.394, 0.439, 0.598), stdev = 0.089
[info]   CI (99.9%): [0.097, 0.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   2433.612 ±(99.9%) 1438.702 MB/sec [Average]
[info]   (min, avg, max) = (2020.409, 2433.612, 2712.633), stdev = 373.626
[info]   CI (99.9%): [994.910, 3872.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   23333.176 ±(99.9%) 13972.744 B/op [Average]
[info]   (min, avg, max) = (19213.769, 23333.176, 26137.960), stdev = 3628.677
[info]   CI (99.9%): [9360.432, 37305.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 89.76% complete, ETA 00:13:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36584.277 ops/s
[info] # Warmup Iteration   2: 58913.953 ops/s
[info] # Warmup Iteration   3: 58303.297 ops/s
[info] # Warmup Iteration   4: 59285.969 ops/s
[info] # Warmup Iteration   5: 60150.728 ops/s
[info] Iteration   1: 59466.286 ops/s
[info]                  ·gc.alloc.rate:                   3126.118 MB/sec
[info]                  ·gc.alloc.rate.norm:              82760.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.551 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3395.461 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 89890.535 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 59673.260 ops/s
[info]                  ·gc.alloc.rate:                   3137.448 MB/sec
[info]                  ·gc.alloc.rate.norm:              82760.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.196 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2719.473 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71734.595 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 58774.417 ops/s
[info]                  ·gc.alloc.rate:                   3089.960 MB/sec
[info]                  ·gc.alloc.rate.norm:              82760.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.230 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3401.630 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 91107.626 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 60099.085 ops/s
[info]                  ·gc.alloc.rate:                   3159.593 MB/sec
[info]                  ·gc.alloc.rate.norm:              82760.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.180 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2722.316 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71306.308 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 59357.745 ops/s
[info]                  ·gc.alloc.rate:                   3120.408 MB/sec
[info]                  ·gc.alloc.rate.norm:              82760.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.656 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3402.749 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 90248.322 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson":
[info]   59474.159 ±(99.9%) 1860.131 ops/s [Average]
[info]   (min, avg, max) = (58774.417, 59474.159, 60099.085), stdev = 483.070
[info]   CI (99.9%): [57614.028, 61334.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3126.705 ±(99.9%) 97.930 MB/sec [Average]
[info]   (min, avg, max) = (3089.960, 3126.705, 3159.593), stdev = 25.432
[info]   CI (99.9%): [3028.775, 3224.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   82760.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (82760.007, 82760.007, 82760.007), stdev = 0.001
[info]   CI (99.9%): [82760.006, 82760.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.083), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.763 ±(99.9%) 2.763 B/op [Average]
[info]   (min, avg, max) = (0.551, 1.763, 2.230), stdev = 0.718
[info]   CI (99.9%): [≈ 0, 4.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3128.326 ±(99.9%) 1432.225 MB/sec [Average]
[info]   (min, avg, max) = (2719.473, 3128.326, 3402.749), stdev = 371.944
[info]   CI (99.9%): [1696.101, 4560.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   82857.477 ±(99.9%) 39891.885 B/op [Average]
[info]   (min, avg, max) = (71306.308, 82857.477, 91107.626), stdev = 10359.796
[info]   CI (99.9%): [42965.592, 122749.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 89.96% complete, ETA 00:13:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 66629.086 ops/s
[info] # Warmup Iteration   2: 77175.162 ops/s
[info] # Warmup Iteration   3: 78971.712 ops/s
[info] # Warmup Iteration   4: 80410.229 ops/s
[info] # Warmup Iteration   5: 80328.437 ops/s
[info] Iteration   1: 80381.132 ops/s
[info]                  ·gc.alloc.rate:                   1638.749 MB/sec
[info]                  ·gc.alloc.rate.norm:              32096.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.893 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26301.463 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 80297.114 ops/s
[info]                  ·gc.alloc.rate:                   1637.294 MB/sec
[info]                  ·gc.alloc.rate.norm:              32096.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.816 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2015.847 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39516.801 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 80371.050 ops/s
[info]                  ·gc.alloc.rate:                   1639.108 MB/sec
[info]                  ·gc.alloc.rate.norm:              32096.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.552 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26347.769 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 79366.154 ops/s
[info]                  ·gc.alloc.rate:                   1618.134 MB/sec
[info]                  ·gc.alloc.rate.norm:              32096.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.413 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.149 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26720.949 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 77645.577 ops/s
[info]                  ·gc.alloc.rate:                   1583.021 MB/sec
[info]                  ·gc.alloc.rate.norm:              32096.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.688 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.317 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 41023.075 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle":
[info]   79612.206 ±(99.9%) 4541.623 ops/s [Average]
[info]   (min, avg, max) = (77645.577, 79612.206, 80381.132), stdev = 1179.445
[info]   CI (99.9%): [75070.583, 84153.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1623.261 ±(99.9%) 93.004 MB/sec [Average]
[info]   (min, avg, max) = (1583.021, 1623.261, 1639.108), stdev = 24.153
[info]   CI (99.9%): [1530.257, 1716.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   32096.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (32096.005, 32096.005, 32096.005), stdev = 0.001
[info]   CI (99.9%): [32096.005, 32096.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0.991 ±(99.9%) 3.295 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.991, 2.038), stdev = 0.856
[info]   CI (99.9%): [≈ 0, 4.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   1614.952 ±(99.9%) 1422.382 MB/sec [Average]
[info]   (min, avg, max) = (1342.893, 1614.952, 2023.317), stdev = 369.388
[info]   CI (99.9%): [192.569, 3037.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   31982.012 ±(99.9%) 29212.026 B/op [Average]
[info]   (min, avg, max) = (26301.463, 31982.012, 41023.075), stdev = 7586.270
[info]   CI (99.9%): [2769.986, 61194.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 90.16% complete, ETA 00:13:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 201307.134 ops/s
[info] # Warmup Iteration   2: 257646.840 ops/s
[info] # Warmup Iteration   3: 259327.411 ops/s
[info] # Warmup Iteration   4: 262488.539 ops/s
[info] # Warmup Iteration   5: 263224.792 ops/s
[info] Iteration   1: 263334.996 ops/s
[info]                  ·gc.alloc.rate:                   1252.497 MB/sec
[info]                  ·gc.alloc.rate.norm:              7488.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.249 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.196 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8018.286 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 260078.621 ops/s
[info]                  ·gc.alloc.rate:                   1237.102 MB/sec
[info]                  ·gc.alloc.rate.norm:              7488.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.252 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.339 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8118.934 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 257291.874 ops/s
[info]                  ·gc.alloc.rate:                   1223.786 MB/sec
[info]                  ·gc.alloc.rate.norm:              7488.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.927 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4105.216 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 257826.841 ops/s
[info]                  ·gc.alloc.rate:                   1226.628 MB/sec
[info]                  ·gc.alloc.rate.norm:              7488.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.842 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8197.432 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 263083.169 ops/s
[info]                  ·gc.alloc.rate:                   1251.451 MB/sec
[info]                  ·gc.alloc.rate.norm:              7488.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.623 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.942 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8041.416 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce":
[info]   260323.100 ±(99.9%) 10919.973 ops/s [Average]
[info]   (min, avg, max) = (257291.874, 260323.100, 263334.996), stdev = 2835.882
[info]   CI (99.9%): [249403.128, 271243.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1238.293 ±(99.9%) 51.763 MB/sec [Average]
[info]   (min, avg, max) = (1223.786, 1238.293, 1252.497), stdev = 13.443
[info]   CI (99.9%): [1186.529, 1290.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7488.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7488.002, 7488.002, 7488.002), stdev = 0.001
[info]   CI (99.9%): [7488.002, 7488.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.104), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.250 ±(99.9%) 0.896 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.250, 0.623), stdev = 0.233
[info]   CI (99.9%): [≈ 0, 1.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1208.049 ±(99.9%) 1156.204 MB/sec [Average]
[info]   (min, avg, max) = (670.927, 1208.049, 1343.942), stdev = 300.262
[info]   CI (99.9%): [51.846, 2364.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   7296.257 ±(99.9%) 6874.302 B/op [Average]
[info]   (min, avg, max) = (4105.216, 7296.257, 8197.432), stdev = 1785.234
[info]   CI (99.9%): [421.955, 14170.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 90.36% complete, ETA 00:12:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 312113.221 ops/s
[info] # Warmup Iteration   2: 567257.188 ops/s
[info] # Warmup Iteration   3: 572318.128 ops/s
[info] # Warmup Iteration   4: 560061.096 ops/s
[info] # Warmup Iteration   5: 572509.247 ops/s
[info] Iteration   1: 576376.925 ops/s
[info]                  ·gc.alloc.rate:                   497.900 MB/sec
[info]                  ·gc.alloc.rate.norm:              1360.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.430 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1396.959 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 571303.918 ops/s
[info]                  ·gc.alloc.rate:                   493.615 MB/sec
[info]                  ·gc.alloc.rate.norm:              1360.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.354 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.975 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.752 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1856.311 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 572587.264 ops/s
[info]                  ·gc.alloc.rate:      494.655 MB/sec
[info]                  ·gc.alloc.rate.norm: 1360.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 570829.695 ops/s
[info]                  ·gc.alloc.rate:                   493.148 MB/sec
[info]                  ·gc.alloc.rate.norm:              1360.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.576 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1857.585 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 572801.665 ops/s
[info]                  ·gc.alloc.rate:                   494.835 MB/sec
[info]                  ·gc.alloc.rate.norm:              1360.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.596 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1854.053 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala":
[info]   572779.893 ±(99.9%) 8383.001 ops/s [Average]
[info]   (min, avg, max) = (570829.695, 572779.893, 576376.925), stdev = 2177.039
[info]   CI (99.9%): [564396.892, 581162.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   494.831 ±(99.9%) 7.142 MB/sec [Average]
[info]   (min, avg, max) = (493.148, 494.831, 497.900), stdev = 1.855
[info]   CI (99.9%): [487.689, 501.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1360.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1360.001, 1360.001, 1360.001), stdev = 0.001
[info]   CI (99.9%): [1360.001, 1360.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.584 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.083, 0.354), stdev = 0.152
[info]   CI (99.9%): [≈ 0, 0.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.229 ±(99.9%) 1.608 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.229, 0.975), stdev = 0.418
[info]   CI (99.9%): [≈ 0, 1.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   506.671 ±(99.9%) 1123.818 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506.671, 674.596), stdev = 291.852
[info]   CI (99.9%): [≈ 0, 1630.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1392.982 ±(99.9%) 3094.640 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1392.982, 1857.585), stdev = 803.668
[info]   CI (99.9%): [≈ 0, 4487.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 90.56% complete, ETA 00:12:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 738277.994 ops/s
[info] # Warmup Iteration   2: 779134.916 ops/s
[info] # Warmup Iteration   3: 805491.790 ops/s
[info] # Warmup Iteration   4: 802811.059 ops/s
[info] # Warmup Iteration   5: 788678.930 ops/s
[info] Iteration   1: 799874.953 ops/s
[info]                  ·gc.alloc.rate:                   430.817 MB/sec
[info]                  ·gc.alloc.rate.norm:              848.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.082 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.373 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1006.564 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 810331.915 ops/s
[info]                  ·gc.alloc.rate:      436.529 MB/sec
[info]                  ·gc.alloc.rate.norm: 848.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 761354.870 ops/s
[info]                  ·gc.alloc.rate:                   410.093 MB/sec
[info]                  ·gc.alloc.rate.norm:              848.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.404 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1057.493 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 775144.617 ops/s
[info]                  ·gc.alloc.rate:                   417.536 MB/sec
[info]                  ·gc.alloc.rate.norm:              848.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.292 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.686 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.572 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1370.032 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 805683.049 ops/s
[info]                  ·gc.alloc.rate:      433.992 MB/sec
[info]                  ·gc.alloc.rate.norm: 848.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala":
[info]   790477.881 ±(99.9%) 81615.112 ops/s [Average]
[info]   (min, avg, max) = (761354.870, 790477.881, 810331.915), stdev = 21195.185
[info]   CI (99.9%): [708862.769, 872092.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   425.793 ±(99.9%) 44.005 MB/sec [Average]
[info]   (min, avg, max) = (410.093, 425.793, 436.529), stdev = 11.428
[info]   CI (99.9%): [381.789, 469.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   848.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (848.001, 848.001, 848.001), stdev = 0.001
[info]   CI (99.9%): [848.000, 848.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.667 ±(99.9%) 5.651 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.667, 3.292), stdev = 1.468
[info]   CI (99.9%): [≈ 0, 6.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.354 ±(99.9%) 11.479 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.354, 6.686), stdev = 2.981
[info]   CI (99.9%): [≈ 0, 12.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   339.470 ±(99.9%) 1220.546 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339.470, 674.572), stdev = 316.972
[info]   CI (99.9%): [≈ 0, 1560.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   686.818 ±(99.9%) 2473.013 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 686.818, 1370.032), stdev = 642.234
[info]   CI (99.9%): [≈ 0, 3159.831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 90.76% complete, ETA 00:12:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 607916.528 ops/s
[info] # Warmup Iteration   2: 628265.431 ops/s
[info] # Warmup Iteration   3: 612846.808 ops/s
[info] # Warmup Iteration   4: 593172.846 ops/s
[info] # Warmup Iteration   5: 612528.837 ops/s
[info] Iteration   1: 612799.145 ops/s
[info]                  ·gc.alloc.rate:      6.230 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 612879.613 ops/s
[info]                  ·gc.alloc.rate:      6.229 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 612859.695 ops/s
[info]                  ·gc.alloc.rate:      6.230 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 610226.583 ops/s
[info]                  ·gc.alloc.rate:      6.203 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 611736.648 ops/s
[info]                  ·gc.alloc.rate:      6.219 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   612100.337 ±(99.9%) 4438.881 ops/s [Average]
[info]   (min, avg, max) = (610226.583, 612100.337, 612879.613), stdev = 1152.763
[info]   CI (99.9%): [607661.455, 616539.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   6.222 ±(99.9%) 0.046 MB/sec [Average]
[info]   (min, avg, max) = (6.203, 6.222, 6.230), stdev = 0.012
[info]   CI (99.9%): [6.177, 6.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.001, 16.001, 16.001), stdev = 0.001
[info]   CI (99.9%): [16.001, 16.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 90.96% complete, ETA 00:12:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23231.940 ops/s
[info] # Warmup Iteration   2: 34128.919 ops/s
[info] # Warmup Iteration   3: 34145.907 ops/s
[info] # Warmup Iteration   4: 34317.463 ops/s
[info] # Warmup Iteration   5: 34646.955 ops/s
[info] Iteration   1: 34338.782 ops/s
[info]                  ·gc.alloc.rate:                   1772.379 MB/sec
[info]                  ·gc.alloc.rate.norm:              81248.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.908 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2007.843 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 92041.942 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 34149.697 ops/s
[info]                  ·gc.alloc.rate:                   1762.566 MB/sec
[info]                  ·gc.alloc.rate.norm:              81248.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.919 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2010.947 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 92697.483 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 34552.711 ops/s
[info]                  ·gc.alloc.rate:                   1783.367 MB/sec
[info]                  ·gc.alloc.rate.norm:              81248.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.896 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.516 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61163.394 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 34043.402 ops/s
[info]                  ·gc.alloc.rate:                   1757.598 MB/sec
[info]                  ·gc.alloc.rate.norm:              81248.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.925 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2017.398 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 93257.736 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 33867.066 ops/s
[info]                  ·gc.alloc.rate:                   1747.875 MB/sec
[info]                  ·gc.alloc.rate.norm:              81248.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.902 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021.323 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 93958.922 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson":
[info]   34190.332 ±(99.9%) 1020.776 ops/s [Average]
[info]   (min, avg, max) = (33867.066, 34190.332, 34552.711), stdev = 265.092
[info]   CI (99.9%): [33169.555, 35211.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1764.757 ±(99.9%) 52.569 MB/sec [Average]
[info]   (min, avg, max) = (1747.875, 1764.757, 1783.367), stdev = 13.652
[info]   CI (99.9%): [1712.188, 1817.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   81248.012 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (81248.012, 81248.012, 81248.013), stdev = 0.001
[info]   CI (99.9%): [81248.010, 81248.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.046, 0.062), stdev = 0.009
[info]   CI (99.9%): [0.010, 0.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.110 ±(99.9%) 1.705 B/op [Average]
[info]   (min, avg, max) = (1.896, 2.110, 2.902), stdev = 0.443
[info]   CI (99.9%): [0.405, 3.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1880.005 ±(99.9%) 1157.165 MB/sec [Average]
[info]   (min, avg, max) = (1342.516, 1880.005, 2021.323), stdev = 300.512
[info]   CI (99.9%): [722.841, 3037.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   86623.895 ±(99.9%) 54873.071 B/op [Average]
[info]   (min, avg, max) = (61163.394, 86623.895, 93958.922), stdev = 14250.362
[info]   CI (99.9%): [31750.825, 141496.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 91.16% complete, ETA 00:11:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 124692.271 ops/s
[info] # Warmup Iteration   2: 138393.085 ops/s
[info] # Warmup Iteration   3: 139518.779 ops/s
[info] # Warmup Iteration   4: 139979.820 ops/s
[info] # Warmup Iteration   5: 135175.378 ops/s
[info] Iteration   1: 140084.611 ops/s
[info]                  ·gc.alloc.rate:                   1048.473 MB/sec
[info]                  ·gc.alloc.rate.norm:              11784.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.828 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7550.819 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 140014.120 ops/s
[info]                  ·gc.alloc.rate:                   1048.148 MB/sec
[info]                  ·gc.alloc.rate.norm:              11784.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.702 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.638 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15094.858 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 139750.192 ops/s
[info]                  ·gc.alloc.rate:                   1046.084 MB/sec
[info]                  ·gc.alloc.rate.norm:              11784.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.234 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7561.359 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 140097.611 ops/s
[info]                  ·gc.alloc.rate:                   1048.901 MB/sec
[info]                  ·gc.alloc.rate.norm:              11784.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.702 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.149 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15089.766 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 135772.484 ops/s
[info]                  ·gc.alloc.rate:                   1016.319 MB/sec
[info]                  ·gc.alloc.rate.norm:              11784.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.560 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7786.589 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle":
[info]   139143.804 ±(99.9%) 7277.061 ops/s [Average]
[info]   (min, avg, max) = (135772.484, 139143.804, 140097.611), stdev = 1889.830
[info]   CI (99.9%): [131866.743, 146420.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1041.585 ±(99.9%) 54.546 MB/sec [Average]
[info]   (min, avg, max) = (1016.319, 1041.585, 1048.901), stdev = 14.165
[info]   CI (99.9%): [987.039, 1096.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   11784.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11784.003, 11784.003, 11784.003), stdev = 0.001
[info]   CI (99.9%): [11784.003, 11784.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0.281 ±(99.9%) 1.480 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.281, 0.702), stdev = 0.384
[info]   CI (99.9%): [≈ 0, 1.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   940.082 ±(99.9%) 1415.941 MB/sec [Average]
[info]   (min, avg, max) = (671.234, 940.082, 1343.149), stdev = 367.715
[info]   CI (99.9%): [≈ 0, 2356.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   10616.678 ±(99.9%) 15736.664 B/op [Average]
[info]   (min, avg, max) = (7550.819, 10616.678, 15094.858), stdev = 4086.762
[info]   CI (99.9%): [≈ 0, 26353.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 91.37% complete, ETA 00:11:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4501318.936 ops/s
[info] # Warmup Iteration   2: 5307029.415 ops/s
[info] # Warmup Iteration   3: 5276915.915 ops/s
[info] # Warmup Iteration   4: 5270466.096 ops/s
[info] # Warmup Iteration   5: 5247231.555 ops/s
[info] Iteration   1: 5285414.801 ops/s
[info]                  ·gc.alloc.rate:                   3894.355 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4063.222 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1210.300 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 5271736.234 ops/s
[info]                  ·gc.alloc.rate:                   3885.154 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4073.643 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1216.278 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 5272888.101 ops/s
[info]                  ·gc.alloc.rate:                   3885.283 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3398.295 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1014.604 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 5277599.277 ops/s
[info]                  ·gc.alloc.rate:                   3888.892 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4082.108 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1217.634 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 5244234.379 ops/s
[info]                  ·gc.alloc.rate:                   3864.416 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4084.286 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1225.999 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce":
[info]   5270374.558 ±(99.9%) 59960.303 ops/s [Average]
[info]   (min, avg, max) = (5244234.379, 5270374.558, 5285414.801), stdev = 15571.500
[info]   CI (99.9%): [5210414.256, 5330334.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   3883.620 ±(99.9%) 43.774 MB/sec [Average]
[info]   (min, avg, max) = (3864.416, 3883.620, 3894.355), stdev = 11.368
[info]   CI (99.9%): [3839.846, 3927.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   1160.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1160.000, 1160.000, 1160.000), stdev = 0.001
[info]   CI (99.9%): [1160.000, 1160.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.125), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.025 ±(99.9%) 0.038 B/op [Average]
[info]   (min, avg, max) = (0.012, 0.025, 0.037), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   3940.311 ±(99.9%) 1167.167 MB/sec [Average]
[info]   (min, avg, max) = (3398.295, 3940.311, 4084.286), stdev = 303.109
[info]   CI (99.9%): [2773.144, 5107.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1176.963 ±(99.9%) 350.156 B/op [Average]
[info]   (min, avg, max) = (1014.604, 1176.963, 1225.999), stdev = 90.934
[info]   CI (99.9%): [826.807, 1527.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 91.57% complete, ETA 00:11:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 629792.547 ops/s
[info] # Warmup Iteration   2: 7381934.335 ops/s
[info] # Warmup Iteration   3: 7578743.767 ops/s
[info] # Warmup Iteration   4: 7595995.967 ops/s
[info] # Warmup Iteration   5: 7634370.447 ops/s
[info] Iteration   1: 7590957.721 ops/s
[info]                  ·gc.alloc.rate:                   810.034 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.201 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 139.621 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 7605502.278 ops/s
[info]                  ·gc.alloc.rate:                   811.663 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.985 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 139.089 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 7568823.252 ops/s
[info]                  ·gc.alloc.rate:                   807.714 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.903 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 139.752 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 7528885.906 ops/s
[info]                  ·gc.alloc.rate:                   803.507 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.886 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 280.984 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 7577630.553 ops/s
[info]                  ·gc.alloc.rate:                   808.677 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.929 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 139.591 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava":
[info]   7574359.942 ±(99.9%) 111512.068 ops/s [Average]
[info]   (min, avg, max) = (7528885.906, 7574359.942, 7605502.278), stdev = 28959.330
[info]   CI (99.9%): [7462847.874, 7685872.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   808.319 ±(99.9%) 11.833 MB/sec [Average]
[info]   (min, avg, max) = (803.507, 808.319, 811.663), stdev = 3.073
[info]   CI (99.9%): [796.486, 820.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   168.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (168.000, 168.000, 168.000), stdev = 0.001
[info]   CI (99.9%): [168.000, 168.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.215 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.125), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0.005 ±(99.9%) 0.045 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.026), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   806.581 ±(99.9%) 1156.593 MB/sec [Average]
[info]   (min, avg, max) = (671.903, 806.581, 1343.886), stdev = 300.363
[info]   CI (99.9%): [≈ 0, 1963.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   167.807 ±(99.9%) 243.624 B/op [Average]
[info]   (min, avg, max) = (139.089, 167.807, 280.984), stdev = 63.268
[info]   CI (99.9%): [≈ 0, 411.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 91.77% complete, ETA 00:11:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2708712.400 ops/s
[info] # Warmup Iteration   2: 4492301.170 ops/s
[info] # Warmup Iteration   3: 4534956.501 ops/s
[info] # Warmup Iteration   4: 4639290.776 ops/s
[info] # Warmup Iteration   5: 4612285.762 ops/s
[info] Iteration   1: 4574275.014 ops/s
[info]                  ·gc.alloc.rate:                   2371.497 MB/sec
[info]                  ·gc.alloc.rate.norm:              816.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2704.287 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 930.508 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 4646310.251 ops/s
[info]                  ·gc.alloc.rate:                   2408.453 MB/sec
[info]                  ·gc.alloc.rate.norm:              816.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.670 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 688.344 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 4602643.632 ops/s
[info]                  ·gc.alloc.rate:                   2385.350 MB/sec
[info]                  ·gc.alloc.rate.norm:              816.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2711.641 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 927.621 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 4652460.783 ops/s
[info]                  ·gc.alloc.rate:                   2411.336 MB/sec
[info]                  ·gc.alloc.rate.norm:              816.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036.263 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 689.075 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 4643021.095 ops/s
[info]                  ·gc.alloc.rate:                   2406.522 MB/sec
[info]                  ·gc.alloc.rate.norm:              816.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2717.553 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 921.464 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala":
[info]   4623742.155 ±(99.9%) 130551.905 ops/s [Average]
[info]   (min, avg, max) = (4574275.014, 4623742.155, 4652460.783), stdev = 33903.915
[info]   CI (99.9%): [4493190.250, 4754294.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2396.632 ±(99.9%) 67.050 MB/sec [Average]
[info]   (min, avg, max) = (2371.497, 2396.632, 2411.336), stdev = 17.413
[info]   CI (99.9%): [2329.582, 2463.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   816.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (816.000, 816.000, 816.000), stdev = 0.001
[info]   CI (99.9%): [816.000, 816.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.083), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.018 ±(99.9%) 0.042 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.029), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   2440.283 ±(99.9%) 1428.387 MB/sec [Average]
[info]   (min, avg, max) = (2031.670, 2440.283, 2717.553), stdev = 370.948
[info]   CI (99.9%): [1011.896, 3868.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   831.402 ±(99.9%) 501.745 B/op [Average]
[info]   (min, avg, max) = (688.344, 831.402, 930.508), stdev = 130.302
[info]   CI (99.9%): [329.657, 1333.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 91.97% complete, ETA 00:10:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7443797.016 ops/s
[info] # Warmup Iteration   2: 8202312.830 ops/s
[info] # Warmup Iteration   3: 7948868.675 ops/s
[info] # Warmup Iteration   4: 8271780.078 ops/s
[info] # Warmup Iteration   5: 8286467.020 ops/s
[info] Iteration   1: 8311882.314 ops/s
[info]                  ·gc.alloc.rate:                   886.939 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.134 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 255.168 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 8331528.227 ops/s
[info]                  ·gc.alloc.rate:                   889.180 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.660 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 127.091 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 8313240.752 ops/s
[info]                  ·gc.alloc.rate:                   887.255 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.301 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 127.110 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 8291680.359 ops/s
[info]                  ·gc.alloc.rate:                   884.755 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.319 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 254.884 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 8300459.679 ops/s
[info]                  ·gc.alloc.rate:                   885.777 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.222 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 127.307 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala":
[info]   8309758.266 ±(99.9%) 57882.907 ops/s [Average]
[info]   (min, avg, max) = (8291680.359, 8309758.266, 8331528.227), stdev = 15032.007
[info]   CI (99.9%): [8251875.360, 8367641.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   886.781 ±(99.9%) 6.419 MB/sec [Average]
[info]   (min, avg, max) = (884.755, 886.781, 889.180), stdev = 1.667
[info]   CI (99.9%): [880.362, 893.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   168.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (168.000, 168.000, 168.000), stdev = 0.001
[info]   CI (99.9%): [168.000, 168.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.083), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.006 ±(99.9%) 0.030 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.016), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   940.927 ±(99.9%) 1419.428 MB/sec [Average]
[info]   (min, avg, max) = (671.222, 940.927, 1347.134), stdev = 368.621
[info]   CI (99.9%): [≈ 0, 2360.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   178.312 ±(99.9%) 269.661 B/op [Average]
[info]   (min, avg, max) = (127.091, 178.312, 255.168), stdev = 70.030
[info]   CI (99.9%): [≈ 0, 447.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 92.17% complete, ETA 00:10:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4026718.727 ops/s
[info] # Warmup Iteration   2: 5301058.681 ops/s
[info] # Warmup Iteration   3: 5409547.099 ops/s
[info] # Warmup Iteration   4: 5476248.846 ops/s
[info] # Warmup Iteration   5: 5504502.236 ops/s
[info] Iteration   1: 5503795.082 ops/s
[info]                  ·gc.alloc.rate:                   2964.718 MB/sec
[info]                  ·gc.alloc.rate.norm:              848.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2692.450 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 770.123 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 5485839.871 ops/s
[info]                  ·gc.alloc.rate:                   2954.738 MB/sec
[info]                  ·gc.alloc.rate.norm:              848.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3375.220 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 968.677 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 5503243.809 ops/s
[info]                  ·gc.alloc.rate:                   2964.173 MB/sec
[info]                  ·gc.alloc.rate.norm:              848.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2707.045 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 774.440 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 5425012.019 ops/s
[info]                  ·gc.alloc.rate:                   2921.954 MB/sec
[info]                  ·gc.alloc.rate.norm:              848.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2711.488 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 786.919 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 5389919.799 ops/s
[info]                  ·gc.alloc.rate:                   2904.484 MB/sec
[info]                  ·gc.alloc.rate.norm:              848.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3396.078 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 991.527 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson":
[info]   5461562.116 ±(99.9%) 198026.899 ops/s [Average]
[info]   (min, avg, max) = (5389919.799, 5461562.116, 5503795.082), stdev = 51426.957
[info]   CI (99.9%): [5263535.217, 5659589.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2942.013 ±(99.9%) 105.090 MB/sec [Average]
[info]   (min, avg, max) = (2904.484, 2942.013, 2964.718), stdev = 27.291
[info]   CI (99.9%): [2836.924, 3047.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   848.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (848.000, 848.000, 848.000), stdev = 0.001
[info]   CI (99.9%): [848.000, 848.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.075, 0.083), stdev = 0.011
[info]   CI (99.9%): [0.031, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.022 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (0.018, 0.022, 0.024), stdev = 0.003
[info]   CI (99.9%): [0.009, 0.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2976.456 ±(99.9%) 1438.906 MB/sec [Average]
[info]   (min, avg, max) = (2692.450, 2976.456, 3396.078), stdev = 373.679
[info]   CI (99.9%): [1537.551, 4415.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   858.337 ±(99.9%) 429.806 B/op [Average]
[info]   (min, avg, max) = (770.123, 858.337, 991.527), stdev = 111.619
[info]   CI (99.9%): [428.532, 1288.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 92.37% complete, ETA 00:10:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4154018.675 ops/s
[info] # Warmup Iteration   2: 4474970.430 ops/s
[info] # Warmup Iteration   3: 4619607.881 ops/s
[info] # Warmup Iteration   4: 4535943.659 ops/s
[info] # Warmup Iteration   5: 4562935.793 ops/s
[info] Iteration   1: 4507254.438 ops/s
[info]                  ·gc.alloc.rate:                   2358.899 MB/sec
[info]                  ·gc.alloc.rate.norm:              824.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2692.749 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 940.619 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 4549328.308 ops/s
[info]                  ·gc.alloc.rate:                   2381.370 MB/sec
[info]                  ·gc.alloc.rate.norm:              824.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2698.704 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 933.804 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 4603387.063 ops/s
[info]                  ·gc.alloc.rate:                   2409.573 MB/sec
[info]                  ·gc.alloc.rate.norm:              824.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.442 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 693.665 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 4587030.241 ops/s
[info]                  ·gc.alloc.rate:                   2400.697 MB/sec
[info]                  ·gc.alloc.rate.norm:              824.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2708.442 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 929.629 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 4596745.762 ops/s
[info]                  ·gc.alloc.rate:                   2406.065 MB/sec
[info]                  ·gc.alloc.rate.norm:              824.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 696.590 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle":
[info]   4568749.163 ±(99.9%) 154944.312 ops/s [Average]
[info]   (min, avg, max) = (4507254.438, 4568749.163, 4603387.063), stdev = 40238.546
[info]   CI (99.9%): [4413804.851, 4723693.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.alloc.rate":
[info]   2391.321 ±(99.9%) 81.426 MB/sec [Average]
[info]   (min, avg, max) = (2358.899, 2391.321, 2409.573), stdev = 21.146
[info]   CI (99.9%): [2309.894, 2472.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   824.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (824.000, 824.000, 824.000), stdev = 0.001
[info]   CI (99.9%): [824.000, 824.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.083), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0.021 ±(99.9%) 0.027 B/op [Average]
[info]   (min, avg, max) = (0.014, 0.021, 0.029), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   2432.473 ±(99.9%) 1410.592 MB/sec [Average]
[info]   (min, avg, max) = (2028.442, 2432.473, 2708.442), stdev = 366.326
[info]   CI (99.9%): [1021.881, 3843.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   838.861 ±(99.9%) 505.486 B/op [Average]
[info]   (min, avg, max) = (693.665, 838.861, 940.619), stdev = 131.273
[info]   CI (99.9%): [333.375, 1344.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 92.57% complete, ETA 00:09:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2409144.459 ops/s
[info] # Warmup Iteration   2: 3054925.562 ops/s
[info] # Warmup Iteration   3: 3030865.711 ops/s
[info] # Warmup Iteration   4: 3151190.398 ops/s
[info] # Warmup Iteration   5: 3146609.984 ops/s
[info] Iteration   1: 3131677.294 ops/s
[info]                  ·gc.alloc.rate:                   747.890 MB/sec
[info]                  ·gc.alloc.rate.norm:              376.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.507 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.763 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.830 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 338.767 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 3143215.641 ops/s
[info]                  ·gc.alloc.rate:                   750.700 MB/sec
[info]                  ·gc.alloc.rate.norm:              376.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.752 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 674.042 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 3144602.421 ops/s
[info]                  ·gc.alloc.rate:                   751.054 MB/sec
[info]                  ·gc.alloc.rate.norm:              376.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.901 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 336.374 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 3149781.581 ops/s
[info]                  ·gc.alloc.rate:                   752.335 MB/sec
[info]                  ·gc.alloc.rate.norm:              376.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.275 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 335.488 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 3150514.427 ops/s
[info]                  ·gc.alloc.rate:                   752.449 MB/sec
[info]                  ·gc.alloc.rate.norm:              376.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.249 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 335.425 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce":
[info]   3143958.273 ±(99.9%) 29115.232 ops/s [Average]
[info]   (min, avg, max) = (3131677.294, 3143958.273, 3150514.427), stdev = 7561.133
[info]   CI (99.9%): [3114843.040, 3173073.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   750.886 ±(99.9%) 7.095 MB/sec [Average]
[info]   (min, avg, max) = (747.890, 750.886, 752.449), stdev = 1.843
[info]   CI (99.9%): [743.790, 757.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   376.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (376.000, 376.000, 376.000), stdev = 0.001
[info]   CI (99.9%): [376.000, 376.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.718 ±(99.9%) 6.004 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.718, 3.507), stdev = 1.559
[info]   CI (99.9%): [≈ 0, 6.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.361 ±(99.9%) 3.019 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.361, 1.763), stdev = 0.784
[info]   CI (99.9%): [≈ 0, 3.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   806.801 ±(99.9%) 1160.140 MB/sec [Average]
[info]   (min, avg, max) = (671.249, 806.801, 1345.752), stdev = 301.285
[info]   CI (99.9%): [≈ 0, 1966.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   404.019 ±(99.9%) 581.268 B/op [Average]
[info]   (min, avg, max) = (335.425, 404.019, 674.042), stdev = 150.953
[info]   CI (99.9%): [≈ 0, 985.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 92.77% complete, ETA 00:09:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 696178.660 ops/s
[info] # Warmup Iteration   2: 7015032.136 ops/s
[info] # Warmup Iteration   3: 6968021.480 ops/s
[info] # Warmup Iteration   4: 7073783.561 ops/s
[info] # Warmup Iteration   5: 7308997.092 ops/s
[info] Iteration   1: 7282483.389 ops/s
[info]                  ·gc.alloc.rate:                   703.166 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.579 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.558 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 145.547 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 7278117.491 ops/s
[info]                  ·gc.alloc.rate:                   702.794 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.337 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 145.629 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 7332207.402 ops/s
[info]                  ·gc.alloc.rate:                   707.967 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.973 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 144.272 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 7327429.909 ops/s
[info]                  ·gc.alloc.rate:                   707.600 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.019 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 144.357 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 7323635.754 ops/s
[info]                  ·gc.alloc.rate:                   707.127 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.935 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 144.435 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava":
[info]   7308774.789 ±(99.9%) 100947.420 ops/s [Average]
[info]   (min, avg, max) = (7278117.491, 7308774.789, 7332207.402), stdev = 26215.724
[info]   CI (99.9%): [7207827.369, 7409722.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   705.731 ±(99.9%) 9.750 MB/sec [Average]
[info]   (min, avg, max) = (702.794, 705.731, 707.967), stdev = 2.532
[info]   CI (99.9%): [695.980, 715.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   152.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (152.000, 152.000, 152.000), stdev = 0.001
[info]   CI (99.9%): [152.000, 152.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.524 ±(99.9%) 4.424 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.524, 2.579), stdev = 1.149
[info]   CI (99.9%): [≈ 0, 4.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0.113 ±(99.9%) 0.956 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.113, 0.558), stdev = 0.248
[info]   CI (99.9%): [≈ 0, 1.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   672.515 ±(99.9%) 2.848 MB/sec [Average]
[info]   (min, avg, max) = (671.935, 672.515, 673.337), stdev = 0.739
[info]   CI (99.9%): [669.668, 675.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   144.848 ±(99.9%) 2.613 B/op [Average]
[info]   (min, avg, max) = (144.272, 144.848, 145.629), stdev = 0.678
[info]   CI (99.9%): [142.236, 147.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 92.97% complete, ETA 00:09:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1478272.101 ops/s
[info] # Warmup Iteration   2: 1984435.292 ops/s
[info] # Warmup Iteration   3: 1980740.925 ops/s
[info] # Warmup Iteration   4: 1977427.429 ops/s
[info] # Warmup Iteration   5: 1986593.184 ops/s
[info] Iteration   1: 1983225.184 ops/s
[info]                  ·gc.alloc.rate:                   614.741 MB/sec
[info]                  ·gc.alloc.rate.norm:              488.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.541 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 532.295 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 1995741.957 ops/s
[info]                  ·gc.alloc.rate:                   618.743 MB/sec
[info]                  ·gc.alloc.rate.norm:              488.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.731 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 529.003 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 1990062.418 ops/s
[info]                  ·gc.alloc.rate:                   616.884 MB/sec
[info]                  ·gc.alloc.rate.norm:              488.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 531.254 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1991290.981 ops/s
[info]                  ·gc.alloc.rate:                   617.352 MB/sec
[info]                  ·gc.alloc.rate.norm:              488.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.664 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 530.932 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1997941.595 ops/s
[info]                  ·gc.alloc.rate:                   619.339 MB/sec
[info]                  ·gc.alloc.rate.norm:              488.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.239 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 529.682 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala":
[info]   1991652.427 ±(99.9%) 21948.257 ops/s [Average]
[info]   (min, avg, max) = (1983225.184, 1991652.427, 1997941.595), stdev = 5699.893
[info]   CI (99.9%): [1969704.170, 2013600.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   617.412 ±(99.9%) 6.916 MB/sec [Average]
[info]   (min, avg, max) = (614.741, 617.412, 619.339), stdev = 1.796
[info]   CI (99.9%): [610.496, 624.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   488.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (488.000, 488.000, 488.000), stdev = 0.001
[info]   CI (99.9%): [488.000, 488.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.016 ±(99.9%) 0.078 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.049), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   671.347 ±(99.9%) 2.703 MB/sec [Average]
[info]   (min, avg, max) = (670.541, 671.347, 672.239), stdev = 0.702
[info]   CI (99.9%): [668.644, 674.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   530.633 ±(99.9%) 5.021 B/op [Average]
[info]   (min, avg, max) = (529.003, 530.633, 532.295), stdev = 1.304
[info]   CI (99.9%): [525.612, 535.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 93.17% complete, ETA 00:09:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8716251.919 ops/s
[info] # Warmup Iteration   2: 9064226.695 ops/s
[info] # Warmup Iteration   3: 9175799.073 ops/s
[info] # Warmup Iteration   4: 9248047.721 ops/s
[info] # Warmup Iteration   5: 9193984.463 ops/s
[info] Iteration   1: 9304297.183 ops/s
[info]                  ·gc.alloc.rate:                   898.287 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.851 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 113.684 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 9445885.038 ops/s
[info]                  ·gc.alloc.rate:                   912.124 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.838 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 111.958 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 9399701.374 ops/s
[info]                  ·gc.alloc.rate:                   907.543 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.444 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 224.840 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 9386977.177 ops/s
[info]                  ·gc.alloc.rate:                   906.325 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.223 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 112.571 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 9396626.891 ops/s
[info]                  ·gc.alloc.rate:                   907.276 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.247 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 112.457 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala":
[info]   9386697.532 ±(99.9%) 197856.681 ops/s [Average]
[info]   (min, avg, max) = (9304297.183, 9386697.532, 9445885.038), stdev = 51382.752
[info]   CI (99.9%): [9188840.852, 9584554.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   906.311 ±(99.9%) 19.314 MB/sec [Average]
[info]   (min, avg, max) = (898.287, 906.311, 912.124), stdev = 5.016
[info]   CI (99.9%): [886.998, 925.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   152.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (152.000, 152.000, 152.000), stdev = 0.001
[info]   CI (99.9%): [152.000, 152.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.104), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.006 ±(99.9%) 0.029 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.017), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   805.721 ±(99.9%) 1155.338 MB/sec [Average]
[info]   (min, avg, max) = (671.223, 805.721, 1342.444), stdev = 300.038
[info]   CI (99.9%): [≈ 0, 1961.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   135.102 ±(99.9%) 193.182 B/op [Average]
[info]   (min, avg, max) = (111.958, 135.102, 224.840), stdev = 50.169
[info]   CI (99.9%): [≈ 0, 328.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 93.37% complete, ETA 00:08:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8822069.171 ops/s
[info] # Warmup Iteration   2: 9215116.175 ops/s
[info] # Warmup Iteration   3: 9209185.918 ops/s
[info] # Warmup Iteration   4: 9204499.052 ops/s
[info] # Warmup Iteration   5: 9212101.502 ops/s
[info] Iteration   1: 9225353.277 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 9248369.586 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 9234231.287 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 9203225.645 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 9201489.661 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   9222533.891 ±(99.9%) 77682.129 ops/s [Average]
[info]   (min, avg, max) = (9201489.661, 9222533.891, 9248369.586), stdev = 20173.802
[info]   CI (99.9%): [9144851.762, 9300216.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 93.57% complete, ETA 00:08:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2749411.397 ops/s
[info] # Warmup Iteration   2: 3419839.260 ops/s
[info] # Warmup Iteration   3: 3471761.975 ops/s
[info] # Warmup Iteration   4: 3487987.301 ops/s
[info] # Warmup Iteration   5: 3530108.888 ops/s
[info] Iteration   1: 3484484.019 ops/s
[info]                  ·gc.alloc.rate:                   1115.491 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.819 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 605.356 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 3526286.118 ops/s
[info]                  ·gc.alloc.rate:                   1128.767 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.194 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 298.798 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 3536181.102 ops/s
[info]                  ·gc.alloc.rate:                   1132.330 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.755 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 595.880 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 3523294.643 ops/s
[info]                  ·gc.alloc.rate:                   1127.940 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.100 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 598.353 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 3529293.727 ops/s
[info]                  ·gc.alloc.rate:                   1130.115 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.324 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 298.946 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson":
[info]   3519907.922 ±(99.9%) 78441.546 ops/s [Average]
[info]   (min, avg, max) = (3484484.019, 3519907.922, 3536181.102), stdev = 20371.020
[info]   CI (99.9%): [3441466.376, 3598349.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1126.929 ±(99.9%) 25.436 MB/sec [Average]
[info]   (min, avg, max) = (1115.491, 1126.929, 1132.330), stdev = 6.606
[info]   CI (99.9%): [1101.492, 1152.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   504.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (504.000, 504.000, 504.000), stdev = 0.001
[info]   CI (99.9%): [504.000, 504.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.017 ±(99.9%) 0.064 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.037), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1071.439 ±(99.9%) 1411.961 MB/sec [Average]
[info]   (min, avg, max) = (669.194, 1071.439, 1339.819), stdev = 366.682
[info]   CI (99.9%): [≈ 0, 2483.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   479.467 ±(99.9%) 634.956 B/op [Average]
[info]   (min, avg, max) = (298.798, 479.467, 605.356), stdev = 164.896
[info]   CI (99.9%): [≈ 0, 1114.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 93.78% complete, ETA 00:08:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 390619.931 ops/s
[info] # Warmup Iteration   2: 410769.994 ops/s
[info] # Warmup Iteration   3: 400093.958 ops/s
[info] # Warmup Iteration   4: 411796.006 ops/s
[info] # Warmup Iteration   5: 407583.491 ops/s
[info] Iteration   1: 409042.284 ops/s
[info]                  ·gc.alloc.rate:      197.472 MB/sec
[info]                  ·gc.alloc.rate.norm: 760.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 409520.567 ops/s
[info]                  ·gc.alloc.rate:      197.762 MB/sec
[info]                  ·gc.alloc.rate.norm: 760.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 406971.388 ops/s
[info]                  ·gc.alloc.rate:                   196.474 MB/sec
[info]                  ·gc.alloc.rate.norm:              760.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.024 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.093 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.474 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1978.484 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 408964.214 ops/s
[info]                  ·gc.alloc.rate:      197.444 MB/sec
[info]                  ·gc.alloc.rate.norm: 760.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 408920.799 ops/s
[info]                  ·gc.alloc.rate:      197.424 MB/sec
[info]                  ·gc.alloc.rate.norm: 760.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle":
[info]   408683.850 ±(99.9%) 3800.181 ops/s [Average]
[info]   (min, avg, max) = (406971.388, 408683.850, 409520.567), stdev = 986.895
[info]   CI (99.9%): [404883.670, 412484.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   197.315 ±(99.9%) 1.887 MB/sec [Average]
[info]   (min, avg, max) = (196.474, 197.315, 197.762), stdev = 0.490
[info]   CI (99.9%): [195.428, 199.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   760.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (760.001, 760.001, 760.001), stdev = 0.001
[info]   CI (99.9%): [760.001, 760.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0.005 ±(99.9%) 0.041 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.024), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0.019 ±(99.9%) 0.160 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.093), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   102.295 ±(99.9%) 880.790 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102.295, 511.474), stdev = 228.738
[info]   CI (99.9%): [≈ 0, 983.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   395.697 ±(99.9%) 3407.069 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 395.697, 1978.484), stdev = 884.805
[info]   CI (99.9%): [≈ 0, 3802.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.time":
[info]   2.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 93.98% complete, ETA 00:08:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 535176.519 ops/s
[info] # Warmup Iteration   2: 784885.226 ops/s
[info] # Warmup Iteration   3: 805873.373 ops/s
[info] # Warmup Iteration   4: 791851.767 ops/s
[info] # Warmup Iteration   5: 809155.030 ops/s
[info] Iteration   1: 776860.693 ops/s
[info]                  ·gc.alloc.rate:                   1362.200 MB/sec
[info]                  ·gc.alloc.rate.norm:              2760.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.169 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.679 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2720.448 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 776030.251 ops/s
[info]                  ·gc.alloc.rate:                   1360.646 MB/sec
[info]                  ·gc.alloc.rate.norm:              2760.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.084 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.700 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2723.599 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 771146.219 ops/s
[info]                  ·gc.alloc.rate:                   1351.958 MB/sec
[info]                  ·gc.alloc.rate.norm:              2760.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.128 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2741.974 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 774360.413 ops/s
[info]                  ·gc.alloc.rate:                   1357.665 MB/sec
[info]                  ·gc.alloc.rate.norm:              2760.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.085 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.506 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2733.251 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 775146.603 ops/s
[info]                  ·gc.alloc.rate:                   1359.007 MB/sec
[info]                  ·gc.alloc.rate.norm:              2760.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.085 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.832 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2733.245 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce":
[info]   774708.836 ±(99.9%) 8476.208 ops/s [Average]
[info]   (min, avg, max) = (771146.219, 774708.836, 776860.693), stdev = 2201.244
[info]   CI (99.9%): [766232.628, 783185.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   1358.295 ±(99.9%) 15.139 MB/sec [Average]
[info]   (min, avg, max) = (1351.958, 1358.295, 1362.200), stdev = 3.932
[info]   CI (99.9%): [1343.156, 1373.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2760.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2760.001, 2760.001, 2760.001), stdev = 0.001
[info]   CI (99.9%): [2760.001, 2760.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.083), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.084 ±(99.9%) 0.230 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.084, 0.169), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1343.769 ±(99.9%) 5.288 MB/sec [Average]
[info]   (min, avg, max) = (1342.679, 1343.769, 1345.832), stdev = 1.373
[info]   CI (99.9%): [1338.481, 1349.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2730.503 ±(99.9%) 33.093 B/op [Average]
[info]   (min, avg, max) = (2720.448, 2730.503, 2741.974), stdev = 8.594
[info]   CI (99.9%): [2697.410, 2763.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 94.18% complete, ETA 00:07:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.920 ops/s
[info] # Warmup Iteration   2: 2134555.107 ops/s
[info] # Warmup Iteration   3: 2142953.962 ops/s
[info] # Warmup Iteration   4: 2127427.181 ops/s
[info] # Warmup Iteration   5: 2198834.721 ops/s
[info] Iteration   1: 2195776.199 ops/s
[info]                  ·gc.alloc.rate:                   613.702 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.024 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.418 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 366.667 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2202612.466 ops/s
[info]                  ·gc.alloc.rate:                   615.642 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.527 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.806 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.292 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 481.202 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 2197606.212 ops/s
[info]                  ·gc.alloc.rate:                   614.225 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.249 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 482.282 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 2201223.391 ops/s
[info]                  ·gc.alloc.rate:                   615.253 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.937 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 480.538 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 2204011.158 ops/s
[info]                  ·gc.alloc.rate:                   615.962 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.888 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 479.950 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava":
[info]   2200245.885 ±(99.9%) 13294.410 ops/s [Average]
[info]   (min, avg, max) = (2195776.199, 2200245.885, 2204011.158), stdev = 3452.516
[info]   CI (99.9%): [2186951.476, 2213540.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   614.957 ±(99.9%) 3.692 MB/sec [Average]
[info]   (min, avg, max) = (613.702, 614.957, 615.962), stdev = 0.959
[info]   CI (99.9%): [611.265, 618.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   440.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (440.000, 440.000, 440.000), stdev = 0.001
[info]   CI (99.9%): [440.000, 440.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.519 ±(99.9%) 4.324 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.519, 2.527), stdev = 1.123
[info]   CI (99.9%): [≈ 0, 4.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0.371 ±(99.9%) 3.090 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.371, 1.806), stdev = 0.803
[info]   CI (99.9%): [≈ 0, 3.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   640.357 ±(99.9%) 277.562 MB/sec [Average]
[info]   (min, avg, max) = (511.418, 640.357, 673.292), stdev = 72.082
[info]   CI (99.9%): [362.795, 917.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   458.128 ±(99.9%) 196.905 B/op [Average]
[info]   (min, avg, max) = (366.667, 458.128, 482.282), stdev = 51.136
[info]   CI (99.9%): [261.223, 655.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.140
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 94.38% complete, ETA 00:07:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 597201.902 ops/s
[info] # Warmup Iteration   2: 997427.677 ops/s
[info] # Warmup Iteration   3: 1047472.943 ops/s
[info] # Warmup Iteration   4: 1017288.719 ops/s
[info] # Warmup Iteration   5: 1025332.895 ops/s
[info] Iteration   1: 1025076.644 ops/s
[info]                  ·gc.alloc.rate:                   755.342 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.638 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1029.918 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 1029395.415 ops/s
[info]                  ·gc.alloc.rate:                   758.580 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.095 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.719 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1027.175 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 1027411.948 ops/s
[info]                  ·gc.alloc.rate:                   757.027 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.604 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1029.105 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1024181.203 ops/s
[info]                  ·gc.alloc.rate:                   754.721 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.128 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.675 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2066.754 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1044470.339 ops/s
[info]                  ·gc.alloc.rate:                   769.546 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.173 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1014.730 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala":
[info]   1030107.110 ±(99.9%) 31898.507 ops/s [Average]
[info]   (min, avg, max) = (1024181.203, 1030107.110, 1044470.339), stdev = 8283.941
[info]   CI (99.9%): [998208.602, 1062005.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   759.043 ±(99.9%) 23.341 MB/sec [Average]
[info]   (min, avg, max) = (754.721, 759.043, 769.546), stdev = 6.062
[info]   CI (99.9%): [735.703, 782.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1160.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1160.000, 1160.000, 1160.000), stdev = 0.001
[info]   CI (99.9%): [1160.000, 1160.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.057 ±(99.9%) 0.220 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.057, 0.128), stdev = 0.057
[info]   CI (99.9%): [≈ 0, 0.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   806.362 ±(99.9%) 1158.764 MB/sec [Average]
[info]   (min, avg, max) = (670.638, 806.362, 1344.675), stdev = 300.927
[info]   CI (99.9%): [≈ 0, 1965.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1233.536 ±(99.9%) 1793.719 B/op [Average]
[info]   (min, avg, max) = (1014.730, 1233.536, 2066.754), stdev = 465.823
[info]   CI (99.9%): [≈ 0, 3027.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 94.58% complete, ETA 00:07:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2297931.369 ops/s
[info] # Warmup Iteration   2: 2535597.056 ops/s
[info] # Warmup Iteration   3: 2545659.619 ops/s
[info] # Warmup Iteration   4: 2579797.383 ops/s
[info] # Warmup Iteration   5: 2579720.535 ops/s
[info] Iteration   1: 2575377.624 ops/s
[info]                  ·gc.alloc.rate:                   719.692 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.238 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.979 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.491 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 412.366 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 2582787.048 ops/s
[info]                  ·gc.alloc.rate:                   721.912 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.657 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 411.199 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 2570631.677 ops/s
[info]                  ·gc.alloc.rate:                   718.492 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.572 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 411.879 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 2565323.117 ops/s
[info]                  ·gc.alloc.rate:                   717.006 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.494 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 825.067 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 2567885.324 ops/s
[info]                  ·gc.alloc.rate:                   717.722 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.955 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 411.942 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala":
[info]   2572400.958 ±(99.9%) 26563.062 ops/s [Average]
[info]   (min, avg, max) = (2565323.117, 2572400.958, 2582787.048), stdev = 6898.343
[info]   CI (99.9%): [2545837.896, 2598964.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   718.965 ±(99.9%) 7.412 MB/sec [Average]
[info]   (min, avg, max) = (717.006, 718.965, 721.912), stdev = 1.925
[info]   CI (99.9%): [711.553, 726.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   440.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (440.000, 440.000, 440.000), stdev = 0.001
[info]   CI (99.9%): [440.000, 440.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.668 ±(99.9%) 5.532 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.668, 3.238), stdev = 1.437
[info]   CI (99.9%): [≈ 0, 6.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.409 ±(99.9%) 3.382 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.409, 1.979), stdev = 0.878
[info]   CI (99.9%): [≈ 0, 3.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   807.634 ±(99.9%) 1155.641 MB/sec [Average]
[info]   (min, avg, max) = (671.955, 807.634, 1344.494), stdev = 300.116
[info]   CI (99.9%): [≈ 0, 1963.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   494.490 ±(99.9%) 711.592 B/op [Average]
[info]   (min, avg, max) = (411.199, 494.490, 825.067), stdev = 184.798
[info]   CI (99.9%): [≈ 0, 1206.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 94.78% complete, ETA 00:07:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 758872.143 ops/s
[info] # Warmup Iteration   2: 1239414.309 ops/s
[info] # Warmup Iteration   3: 1256423.208 ops/s
[info] # Warmup Iteration   4: 1263438.626 ops/s
[info] # Warmup Iteration   5: 1257782.984 ops/s
[info] Iteration   1: 1263055.223 ops/s
[info]                  ·gc.alloc.rate:                   898.906 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.650 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1674.133 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 1267971.337 ops/s
[info]                  ·gc.alloc.rate:                   902.069 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.904 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 831.747 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 1273435.714 ops/s
[info]                  ·gc.alloc.rate:                   906.113 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.336 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 827.332 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1264240.912 ops/s
[info]                  ·gc.alloc.rate:                   899.434 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.472 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1666.703 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1267376.111 ops/s
[info]                  ·gc.alloc.rate:                   901.650 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.231 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 831.298 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson":
[info]   1267215.859 ±(99.9%) 15575.393 ops/s [Average]
[info]   (min, avg, max) = (1263055.223, 1267215.859, 1273435.714), stdev = 4044.880
[info]   CI (99.9%): [1251640.466, 1282791.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   901.634 ±(99.9%) 10.982 MB/sec [Average]
[info]   (min, avg, max) = (898.906, 901.634, 906.113), stdev = 2.852
[info]   CI (99.9%): [890.652, 912.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   1120.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1120.000, 1120.000, 1120.000), stdev = 0.001
[info]   CI (99.9%): [1120.000, 1120.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.031 ±(99.9%) 0.130 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.078), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   938.119 ±(99.9%) 1416.416 MB/sec [Average]
[info]   (min, avg, max) = (669.231, 938.119, 1343.650), stdev = 367.839
[info]   CI (99.9%): [≈ 0, 2354.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1166.243 ±(99.9%) 1772.289 B/op [Average]
[info]   (min, avg, max) = (827.332, 1166.243, 1674.133), stdev = 460.258
[info]   CI (99.9%): [≈ 0, 2938.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 94.98% complete, ETA 00:06:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 820676.971 ops/s
[info] # Warmup Iteration   2: 1088357.831 ops/s
[info] # Warmup Iteration   3: 1104375.896 ops/s
[info] # Warmup Iteration   4: 1105755.558 ops/s
[info] # Warmup Iteration   5: 1105378.925 ops/s
[info] Iteration   1: 1106376.426 ops/s
[info]                  ·gc.alloc.rate:                   1501.494 MB/sec
[info]                  ·gc.alloc.rate.norm:              2136.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.118 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.769 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1910.201 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1111992.030 ops/s
[info]                  ·gc.alloc.rate:                   1508.879 MB/sec
[info]                  ·gc.alloc.rate.norm:              2136.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.088 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.301 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1901.604 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1105691.478 ops/s
[info]                  ·gc.alloc.rate:                   1500.133 MB/sec
[info]                  ·gc.alloc.rate.norm:              2136.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.119 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.781 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1913.375 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1112623.127 ops/s
[info]                  ·gc.alloc.rate:                   1509.700 MB/sec
[info]                  ·gc.alloc.rate.norm:              2136.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.465 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2857.241 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1112766.156 ops/s
[info]                  ·gc.alloc.rate:                   1509.804 MB/sec
[info]                  ·gc.alloc.rate.norm:              2136.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.088 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.854 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1906.880 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle":
[info]   1109889.843 ±(99.9%) 13632.255 ops/s [Average]
[info]   (min, avg, max) = (1105691.478, 1109889.843, 1112766.156), stdev = 3540.253
[info]   CI (99.9%): [1096257.588, 1123522.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1506.002 ±(99.9%) 18.385 MB/sec [Average]
[info]   (min, avg, max) = (1500.133, 1506.002, 1509.804), stdev = 4.774
[info]   CI (99.9%): [1487.617, 1524.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   2136.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2136.000, 2136.000, 2136.000), stdev = 0.001
[info]   CI (99.9%): [2136.000, 2136.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.083), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0.089 ±(99.9%) 0.140 B/op [Average]
[info]   (min, avg, max) = (0.029, 0.089, 0.119), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   1479.434 ±(99.9%) 1162.484 MB/sec [Average]
[info]   (min, avg, max) = (1342.769, 1479.434, 2019.465), stdev = 301.893
[info]   CI (99.9%): [316.950, 2641.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   2097.860 ±(99.9%) 1634.711 B/op [Average]
[info]   (min, avg, max) = (1901.604, 2097.860, 2857.241), stdev = 424.529
[info]   CI (99.9%): [463.150, 3732.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 95.18% complete, ETA 00:06:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1008010.421 ops/s
[info] # Warmup Iteration   2: 1727971.475 ops/s
[info] # Warmup Iteration   3: 1769075.403 ops/s
[info] # Warmup Iteration   4: 1780846.163 ops/s
[info] # Warmup Iteration   5: 1779728.463 ops/s
[info] Iteration   1: 1772638.198 ops/s
[info]                  ·gc.alloc.rate:                   1486.502 MB/sec
[info]                  ·gc.alloc.rate.norm:              1320.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.315 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1191.075 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 1765146.894 ops/s
[info]                  ·gc.alloc.rate:                   1480.368 MB/sec
[info]                  ·gc.alloc.rate.norm:              1320.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2012.811 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1794.763 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1775633.761 ops/s
[info]                  ·gc.alloc.rate:                   1488.906 MB/sec
[info]                  ·gc.alloc.rate.norm:              1320.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.195 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1190.819 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1776713.553 ops/s
[info]                  ·gc.alloc.rate:                   1490.209 MB/sec
[info]                  ·gc.alloc.rate.norm:              1320.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.911 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1191.298 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1775361.925 ops/s
[info]                  ·gc.alloc.rate:                   1488.704 MB/sec
[info]                  ·gc.alloc.rate.norm:              1320.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.927 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1193.404 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce":
[info]   1773098.866 ±(99.9%) 18067.192 ops/s [Average]
[info]   (min, avg, max) = (1765146.894, 1773098.866, 1776713.553), stdev = 4691.992
[info]   CI (99.9%): [1755031.674, 1791166.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1486.938 ±(99.9%) 15.043 MB/sec [Average]
[info]   (min, avg, max) = (1480.368, 1486.938, 1490.209), stdev = 3.907
[info]   CI (99.9%): [1471.895, 1501.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1320.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1320.000, 1320.000, 1320.000), stdev = 0.001
[info]   CI (99.9%): [1320.000, 1320.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.050, 0.104), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.044 ±(99.9%) 0.139 B/op [Average]
[info]   (min, avg, max) = (0.018, 0.044, 0.092), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1477.632 ±(99.9%) 1152.033 MB/sec [Average]
[info]   (min, avg, max) = (1341.315, 1477.632, 2012.811), stdev = 299.179
[info]   CI (99.9%): [325.599, 2629.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1312.272 ±(99.9%) 1038.607 B/op [Average]
[info]   (min, avg, max) = (1190.819, 1312.272, 1794.763), stdev = 269.723
[info]   CI (99.9%): [273.665, 2350.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 95.38% complete, ETA 00:06:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.933 ops/s
[info] # Warmup Iteration   2: 2477472.608 ops/s
[info] # Warmup Iteration   3: 2443980.211 ops/s
[info] # Warmup Iteration   4: 2518602.088 ops/s
[info] # Warmup Iteration   5: 2569898.660 ops/s
[info] Iteration   1: 2558078.414 ops/s
[info]                  ·gc.alloc.rate:                   662.963 MB/sec
[info]                  ·gc.alloc.rate.norm:              408.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.491 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.533 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.234 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 414.321 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 2580971.962 ops/s
[info]                  ·gc.alloc.rate:                   668.986 MB/sec
[info]                  ·gc.alloc.rate.norm:              408.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.377 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 410.678 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 2546234.498 ops/s
[info]                  ·gc.alloc.rate:                   660.091 MB/sec
[info]                  ·gc.alloc.rate.norm:              408.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.101 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 415.424 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 2575228.233 ops/s
[info]                  ·gc.alloc.rate:                   667.475 MB/sec
[info]                  ·gc.alloc.rate.norm:              408.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.980 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 410.754 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 2570132.483 ops/s
[info]                  ·gc.alloc.rate:                   666.114 MB/sec
[info]                  ·gc.alloc.rate.norm:              408.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.921 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 411.557 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava":
[info]   2566129.118 ±(99.9%) 53762.373 ops/s [Average]
[info]   (min, avg, max) = (2546234.498, 2566129.118, 2580971.962), stdev = 13961.918
[info]   CI (99.9%): [2512366.745, 2619891.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   665.125 ±(99.9%) 13.807 MB/sec [Average]
[info]   (min, avg, max) = (660.091, 665.125, 668.986), stdev = 3.586
[info]   CI (99.9%): [651.319, 678.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   408.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (408.000, 408.000, 408.000), stdev = 0.001
[info]   CI (99.9%): [408.000, 408.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   0.507 ±(99.9%) 4.273 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.507, 2.491), stdev = 1.110
[info]   CI (99.9%): [≈ 0, 4.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   0.312 ±(99.9%) 2.630 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.312, 1.533), stdev = 0.683
[info]   CI (99.9%): [≈ 0, 2.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   672.523 ±(99.9%) 2.770 MB/sec [Average]
[info]   (min, avg, max) = (671.921, 672.523, 673.377), stdev = 0.719
[info]   CI (99.9%): [669.753, 675.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   412.547 ±(99.9%) 8.417 B/op [Average]
[info]   (min, avg, max) = (410.678, 412.547, 415.424), stdev = 2.186
[info]   CI (99.9%): [404.130, 420.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 95.58% complete, ETA 00:05:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1182402.408 ops/s
[info] # Warmup Iteration   2: 2569012.024 ops/s
[info] # Warmup Iteration   3: 2566621.529 ops/s
[info] # Warmup Iteration   4: 2574427.514 ops/s
[info] # Warmup Iteration   5: 2572924.223 ops/s
[info] Iteration   1: 2570106.555 ops/s
[info]                  ·gc.alloc.rate:                   1214.516 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.342 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 823.530 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 2571839.616 ops/s
[info]                  ·gc.alloc.rate:                   1215.458 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.497 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 824.211 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 2569539.685 ops/s
[info]                  ·gc.alloc.rate:                   1214.666 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 412.873 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 2573299.777 ops/s
[info]                  ·gc.alloc.rate:                   1216.149 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.793 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 825.148 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2574767.840 ops/s
[info]                  ·gc.alloc.rate:                   1216.752 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.365 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 825.699 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala":
[info]   2571910.694 ±(99.9%) 8386.647 ops/s [Average]
[info]   (min, avg, max) = (2569539.685, 2571910.694, 2574767.840), stdev = 2177.986
[info]   CI (99.9%): [2563524.047, 2580297.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1215.508 ±(99.9%) 3.680 MB/sec [Average]
[info]   (min, avg, max) = (1214.516, 1215.508, 1216.752), stdev = 0.956
[info]   CI (99.9%): [1211.829, 1219.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   744.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (744.000, 744.000, 744.000), stdev = 0.001
[info]   CI (99.9%): [744.000, 744.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.104), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.031 ±(99.9%) 0.096 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.064), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1212.812 ±(99.9%) 1159.732 MB/sec [Average]
[info]   (min, avg, max) = (674.062, 1212.812, 1350.365), stdev = 301.179
[info]   CI (99.9%): [53.080, 2372.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   742.292 ±(99.9%) 709.107 B/op [Average]
[info]   (min, avg, max) = (412.873, 742.292, 825.699), stdev = 184.153
[info]   CI (99.9%): [33.185, 1451.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 95.78% complete, ETA 00:05:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1996038.946 ops/s
[info] # Warmup Iteration   2: 2644806.879 ops/s
[info] # Warmup Iteration   3: 2631940.786 ops/s
[info] # Warmup Iteration   4: 2674747.058 ops/s
[info] # Warmup Iteration   5: 2729093.548 ops/s
[info] Iteration   1: 2725174.576 ops/s
[info]                  ·gc.alloc.rate:                   706.246 MB/sec
[info]                  ·gc.alloc.rate.norm:              408.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.287 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.899 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.561 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 389.696 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 2748321.622 ops/s
[info]                  ·gc.alloc.rate:                   712.281 MB/sec
[info]                  ·gc.alloc.rate.norm:              408.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.618 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 386.426 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 2742213.866 ops/s
[info]                  ·gc.alloc.rate:                   710.845 MB/sec
[info]                  ·gc.alloc.rate.norm:              408.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.745 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 386.132 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 2745109.639 ops/s
[info]                  ·gc.alloc.rate:                   711.491 MB/sec
[info]                  ·gc.alloc.rate.norm:              408.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.613 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 385.706 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 2735974.757 ops/s
[info]                  ·gc.alloc.rate:                   709.067 MB/sec
[info]                  ·gc.alloc.rate.norm:              408.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.225 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 386.226 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala":
[info]   2739358.892 ±(99.9%) 35197.060 ops/s [Average]
[info]   (min, avg, max) = (2725174.576, 2739358.892, 2748321.622), stdev = 9140.565
[info]   CI (99.9%): [2704161.832, 2774555.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   709.986 ±(99.9%) 9.254 MB/sec [Average]
[info]   (min, avg, max) = (706.246, 709.986, 712.281), stdev = 2.403
[info]   CI (99.9%): [700.732, 719.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   408.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (408.000, 408.000, 408.000), stdev = 0.001
[info]   CI (99.9%): [408.000, 408.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.674 ±(99.9%) 5.624 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.674, 3.287), stdev = 1.461
[info]   CI (99.9%): [≈ 0, 6.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.389 ±(99.9%) 3.249 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.389, 1.899), stdev = 0.844
[info]   CI (99.9%): [≈ 0, 3.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   673.152 ±(99.9%) 5.548 MB/sec [Average]
[info]   (min, avg, max) = (671.225, 673.152, 674.618), stdev = 1.441
[info]   CI (99.9%): [667.605, 678.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   386.837 ±(99.9%) 6.236 B/op [Average]
[info]   (min, avg, max) = (385.706, 386.837, 389.696), stdev = 1.620
[info]   CI (99.9%): [380.601, 393.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 95.98% complete, ETA 00:05:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2113473.727 ops/s
[info] # Warmup Iteration   2: 2798967.937 ops/s
[info] # Warmup Iteration   3: 2787084.583 ops/s
[info] # Warmup Iteration   4: 2788654.734 ops/s
[info] # Warmup Iteration   5: 2799708.937 ops/s
[info] Iteration   1: 2783973.570 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2763747.556 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2793016.320 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2785237.503 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2786206.897 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   2782436.369 ±(99.9%) 42428.493 ops/s [Average]
[info]   (min, avg, max) = (2763747.556, 2782436.369, 2793016.320), stdev = 11018.545
[info]   CI (99.9%): [2740007.876, 2824864.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 96.18% complete, ETA 00:05:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1886375.963 ops/s
[info] # Warmup Iteration   2: 2447856.555 ops/s
[info] # Warmup Iteration   3: 2464806.315 ops/s
[info] # Warmup Iteration   4: 2443032.528 ops/s
[info] # Warmup Iteration   5: 2477516.285 ops/s
[info] Iteration   1: 2507016.834 ops/s
[info]                  ·gc.alloc.rate:                   1261.316 MB/sec
[info]                  ·gc.alloc.rate.norm:              792.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.903 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 841.346 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 2488651.833 ops/s
[info]                  ·gc.alloc.rate:                   1252.220 MB/sec
[info]                  ·gc.alloc.rate.norm:              792.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1340.171 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 847.628 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 2451876.784 ops/s
[info]                  ·gc.alloc.rate:                   1233.847 MB/sec
[info]                  ·gc.alloc.rate.norm:              792.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.088 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 430.126 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 2500497.185 ops/s
[info]                  ·gc.alloc.rate:                   1258.273 MB/sec
[info]                  ·gc.alloc.rate.norm:              792.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1340.806 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 843.949 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2501274.025 ops/s
[info]                  ·gc.alloc.rate:                   1258.408 MB/sec
[info]                  ·gc.alloc.rate.norm:              792.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.780 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 844.471 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson":
[info]   2489863.332 ±(99.9%) 85714.048 ops/s [Average]
[info]   (min, avg, max) = (2451876.784, 2489863.332, 2507016.834), stdev = 22259.666
[info]   CI (99.9%): [2404149.284, 2575577.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1252.813 ±(99.9%) 42.771 MB/sec [Average]
[info]   (min, avg, max) = (1233.847, 1252.813, 1261.316), stdev = 11.107
[info]   CI (99.9%): [1210.042, 1295.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   792.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (792.000, 792.000, 792.000), stdev = 0.001
[info]   CI (99.9%): [792.000, 792.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.083), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.031 ±(99.9%) 0.092 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.053), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1206.550 ±(99.9%) 1154.778 MB/sec [Average]
[info]   (min, avg, max) = (670.088, 1206.550, 1341.780), stdev = 299.892
[info]   CI (99.9%): [51.772, 2361.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   761.504 ±(99.9%) 713.368 B/op [Average]
[info]   (min, avg, max) = (430.126, 761.504, 847.628), stdev = 185.259
[info]   CI (99.9%): [48.136, 1474.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.140
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce
[info] # Run progress: 96.39% complete, ETA 00:04:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6278.553 ops/s
[info] # Warmup Iteration   2: 9998.429 ops/s
[info] # Warmup Iteration   3: 11616.802 ops/s
[info] # Warmup Iteration   4: 11651.432 ops/s
[info] # Warmup Iteration   5: 12059.282 ops/s
[info] Iteration   1: 13003.471 ops/s
[info]                  ·gc.alloc.rate:                   1889.923 MB/sec
[info]                  ·gc.alloc.rate.norm:              228801.802 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.040 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.863 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2011.831 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 243560.518 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 12921.353 ops/s
[info]                  ·gc.alloc.rate:                   1878.405 MB/sec
[info]                  ·gc.alloc.rate.norm:              228832.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.001 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.177 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2013.323 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 245268.125 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 13015.666 ops/s
[info]                  ·gc.alloc.rate:                   1891.945 MB/sec
[info]                  ·gc.alloc.rate.norm:              228832.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.126 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15.277 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2017.367 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 244001.920 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 13031.980 ops/s
[info]                  ·gc.alloc.rate:                   1895.056 MB/sec
[info]                  ·gc.alloc.rate.norm:              228832.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.123 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14.908 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020.865 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 244023.799 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 13046.168 ops/s
[info]                  ·gc.alloc.rate:                   1896.307 MB/sec
[info]                  ·gc.alloc.rate.norm:              228817.763 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.215 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 162802.895 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce":
[info]   13003.727 ±(99.9%) 187.929 ops/s [Average]
[info]   (min, avg, max) = (12921.353, 13003.727, 13046.168), stdev = 48.805
[info]   CI (99.9%): [12815.798, 13191.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1890.327 ±(99.9%) 27.435 MB/sec [Average]
[info]   (min, avg, max) = (1878.405, 1890.327, 1896.307), stdev = 7.125
[info]   CI (99.9%): [1862.892, 1917.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   228823.134 ±(99.9%) 51.718 B/op [Average]
[info]   (min, avg, max) = (228801.802, 228823.134, 228832.039), stdev = 13.431
[info]   CI (99.9%): [228771.416, 228874.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.242 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.126), stdev = 0.063
[info]   CI (99.9%): [≈ 0, 0.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   7.045 ±(99.9%) 29.272 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.045, 15.277), stdev = 7.602
[info]   CI (99.9%): [≈ 0, 36.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1882.520 ±(99.9%) 1148.061 MB/sec [Average]
[info]   (min, avg, max) = (1349.215, 1882.520, 2020.865), stdev = 298.148
[info]   CI (99.9%): [734.459, 3030.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   227931.451 ±(99.9%) 140215.535 B/op [Average]
[info]   (min, avg, max) = (162802.895, 227931.451, 245268.125), stdev = 36413.529
[info]   CI (99.9%): [87715.916, 368146.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala
[info] # Run progress: 96.59% complete, ETA 00:04:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5327.418 ops/s
[info] # Warmup Iteration   2: 15102.659 ops/s
[info] # Warmup Iteration   3: 15222.933 ops/s
[info] # Warmup Iteration   4: 15486.383 ops/s
[info] # Warmup Iteration   5: 15511.502 ops/s
[info] Iteration   1: 15333.459 ops/s
[info]                  ·gc.alloc.rate:                   216.787 MB/sec
[info]                  ·gc.alloc.rate.norm:              22256.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.420 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52504.001 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 15449.435 ops/s
[info]                  ·gc.alloc.rate:      218.424 MB/sec
[info]                  ·gc.alloc.rate.norm: 22256.026 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 15361.026 ops/s
[info]                  ·gc.alloc.rate:                   217.170 MB/sec
[info]                  ·gc.alloc.rate.norm:              22250.745 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.133 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.511 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52408.328 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 15513.546 ops/s
[info]                  ·gc.alloc.rate:      219.019 MB/sec
[info]                  ·gc.alloc.rate.norm: 22224.028 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 15474.148 ops/s
[info]                  ·gc.alloc.rate:                   218.468 MB/sec
[info]                  ·gc.alloc.rate.norm:              22224.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.426 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52025.736 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala":
[info]   15426.323 ±(99.9%) 293.992 ops/s [Average]
[info]   (min, avg, max) = (15333.459, 15426.323, 15513.546), stdev = 76.349
[info]   CI (99.9%): [15132.331, 15720.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   217.974 ±(99.9%) 3.651 MB/sec [Average]
[info]   (min, avg, max) = (216.787, 217.974, 219.019), stdev = 0.948
[info]   CI (99.9%): [214.323, 221.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   22242.170 ±(99.9%) 64.314 B/op [Average]
[info]   (min, avg, max) = (22224.026, 22242.170, 22256.027), stdev = 16.702
[info]   CI (99.9%): [22177.857, 22306.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.427 ±(99.9%) 3.672 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.427, 2.133), stdev = 0.954
[info]   CI (99.9%): [≈ 0, 4.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   306.871 ±(99.9%) 1078.696 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.871, 511.511), stdev = 280.134
[info]   CI (99.9%): [≈ 0, 1385.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   31387.613 ±(99.9%) 110334.034 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 31387.613, 52504.001), stdev = 28653.398
[info]   CI (99.9%): [≈ 0, 141721.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 0.837
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala
[info] # Run progress: 96.79% complete, ETA 00:04:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18227.017 ops/s
[info] # Warmup Iteration   2: 24195.339 ops/s
[info] # Warmup Iteration   3: 36297.857 ops/s
[info] # Warmup Iteration   4: 36910.764 ops/s
[info] # Warmup Iteration   5: 37599.753 ops/s
[info] Iteration   1: 37281.885 ops/s
[info]                  ·gc.alloc.rate:                   345.238 MB/sec
[info]                  ·gc.alloc.rate.norm:              14576.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.504 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21595.773 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 36832.907 ops/s
[info]                  ·gc.alloc.rate:                   341.120 MB/sec
[info]                  ·gc.alloc.rate.norm:              14576.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.034 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.435 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.589 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21860.158 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 37236.071 ops/s
[info]                  ·gc.alloc.rate:      344.745 MB/sec
[info]                  ·gc.alloc.rate.norm: 14576.011 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 36818.265 ops/s
[info]                  ·gc.alloc.rate:                   340.878 MB/sec
[info]                  ·gc.alloc.rate.norm:              14576.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.393 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21867.281 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 37324.470 ops/s
[info]                  ·gc.alloc.rate:                   345.637 MB/sec
[info]                  ·gc.alloc.rate.norm:              14576.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.519 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21571.477 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala":
[info]   37098.719 ±(99.9%) 967.825 ops/s [Average]
[info]   (min, avg, max) = (36818.265, 37098.719, 37324.470), stdev = 251.341
[info]   CI (99.9%): [36130.895, 38066.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   343.524 ±(99.9%) 8.964 MB/sec [Average]
[info]   (min, avg, max) = (340.878, 343.524, 345.637), stdev = 2.328
[info]   CI (99.9%): [334.560, 352.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   14576.011 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (14576.011, 14576.011, 14576.012), stdev = 0.001
[info]   CI (99.9%): [14576.010, 14576.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.007 ±(99.9%) 0.058 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.034), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.287 ±(99.9%) 2.471 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.287, 1.435), stdev = 0.642
[info]   CI (99.9%): [≈ 0, 2.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   409.201 ±(99.9%) 880.837 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 409.201, 511.589), stdev = 228.750
[info]   CI (99.9%): [≈ 0, 1290.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   17378.938 ±(99.9%) 37413.377 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17378.938, 21867.281), stdev = 9716.135
[info]   CI (99.9%): [≈ 0, 54792.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 3.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson
[info] # Run progress: 96.99% complete, ETA 00:04:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1014.517 ops/s
[info] # Warmup Iteration   2: 3445.201 ops/s
[info] # Warmup Iteration   3: 3222.906 ops/s
[info] # Warmup Iteration   4: 3567.170 ops/s
[info] # Warmup Iteration   5: 3877.546 ops/s
[info] Iteration   1: 3887.367 ops/s
[info]                  ·gc.alloc.rate:                   1237.289 MB/sec
[info]                  ·gc.alloc.rate.norm:              500744.105 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33.703 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.761 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 545858.090 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 3899.470 ops/s
[info]                  ·gc.alloc.rate:                   1241.043 MB/sec
[info]                  ·gc.alloc.rate.norm:              500744.105 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.400 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.692 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 544582.152 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 3837.388 ops/s
[info]                  ·gc.alloc.rate:                   1221.399 MB/sec
[info]                  ·gc.alloc.rate.norm:              500744.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.113 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 553923.451 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 3908.274 ops/s
[info]                  ·gc.alloc.rate:                   1244.045 MB/sec
[info]                  ·gc.alloc.rate.norm:              500744.113 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      675.920 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 272066.586 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 3869.566 ops/s
[info]                  ·gc.alloc.rate:                   1231.578 MB/sec
[info]                  ·gc.alloc.rate.norm:              500744.105 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16.930 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.109 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 550157.028 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson":
[info]   3880.413 ±(99.9%) 108.171 ops/s [Average]
[info]   (min, avg, max) = (3837.388, 3880.413, 3908.274), stdev = 28.092
[info]   CI (99.9%): [3772.242, 3988.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1235.071 ±(99.9%) 34.454 MB/sec [Average]
[info]   (min, avg, max) = (1221.399, 1235.071, 1244.045), stdev = 8.948
[info]   CI (99.9%): [1200.617, 1269.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   500744.107 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (500744.105, 500744.107, 500744.113), stdev = 0.003
[info]   CI (99.9%): [500744.094, 500744.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.083), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   11.807 ±(99.9%) 54.324 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.807, 33.703), stdev = 14.108
[info]   CI (99.9%): [≈ 0, 66.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1215.719 ±(99.9%) 1161.975 MB/sec [Average]
[info]   (min, avg, max) = (675.920, 1215.719, 1353.109), stdev = 301.761
[info]   CI (99.9%): [53.744, 2377.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   493317.462 ±(99.9%) 476470.931 B/op [Average]
[info]   (min, avg, max) = (272066.586, 493317.462, 553923.451), stdev = 123737.988
[info]   CI (99.9%): [16846.531, 969788.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala
[info] # Run progress: 97.19% complete, ETA 00:03:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_6a03406e/target/1bdf7fe1/jackson-module-afterburner-2.9.5.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 23962.967 ops/s
[info] # Warmup Iteration   2: 56711.386 ops/s
[info] # Warmup Iteration   3: 57202.106 ops/s
[info] # Warmup Iteration   4: 57479.306 ops/s
[info] # Warmup Iteration   5: 57492.910 ops/s
[info] Iteration   1: 57287.143 ops/s
[info]                  ·gc.alloc.rate:                   731.250 MB/sec
[info]                  ·gc.alloc.rate.norm:              20100.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.144 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18511.495 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 57801.347 ops/s
[info]                  ·gc.alloc.rate:                   738.022 MB/sec
[info]                  ·gc.alloc.rate.norm:              20099.958 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.567 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.987 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18355.975 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 58831.401 ops/s
[info]                  ·gc.alloc.rate:                   751.156 MB/sec
[info]                  ·gc.alloc.rate.norm:              20100.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.902 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18032.813 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 59016.099 ops/s
[info]                  ·gc.alloc.rate:                   753.559 MB/sec
[info]                  ·gc.alloc.rate.norm:              20100.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.940 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17976.299 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 59010.226 ops/s
[info]                  ·gc.alloc.rate:                   753.457 MB/sec
[info]                  ·gc.alloc.rate.norm:              20099.959 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.919 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17978.126 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala":
[info]   58389.243 ±(99.9%) 3065.024 ops/s [Average]
[info]   (min, avg, max) = (57287.143, 58389.243, 59016.099), stdev = 795.977
[info]   CI (99.9%): [55324.220, 61454.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   745.489 ±(99.9%) 39.422 MB/sec [Average]
[info]   (min, avg, max) = (731.250, 745.489, 753.559), stdev = 10.238
[info]   CI (99.9%): [706.066, 784.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   20099.995 ±(99.9%) 0.135 B/op [Average]
[info]   (min, avg, max) = (20099.958, 20099.995, 20100.036), stdev = 0.035
[info]   CI (99.9%): [20099.861, 20100.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.564 ±(99.9%) 2.170 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.564, 1.144), stdev = 0.564
[info]   CI (99.9%): [≈ 0, 2.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   673.841 ±(99.9%) 0.833 MB/sec [Average]
[info]   (min, avg, max) = (673.458, 673.841, 673.987), stdev = 0.216
[info]   CI (99.9%): [673.008, 674.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   18170.942 ±(99.9%) 951.734 B/op [Average]
[info]   (min, avg, max) = (17976.299, 18170.942, 18511.495), stdev = 247.162
[info]   CI (99.9%): [17219.207, 19122.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala
[info] # Run progress: 97.39% complete, ETA 00:03:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 67707.572 ops/s
[info] # Warmup Iteration   2: 77311.826 ops/s
[info] # Warmup Iteration   3: 78526.343 ops/s
[info] # Warmup Iteration   4: 80551.052 ops/s
[info] # Warmup Iteration   5: 81034.459 ops/s
[info] Iteration   1: 80582.537 ops/s
[info]                  ·gc.alloc.rate:                   528.189 MB/sec
[info]                  ·gc.alloc.rate.norm:              10320.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.049 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.948 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.358 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9991.146 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 80315.305 ops/s
[info]                  ·gc.alloc.rate:      526.581 MB/sec
[info]                  ·gc.alloc.rate.norm: 10320.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 80962.254 ops/s
[info]                  ·gc.alloc.rate:                   530.763 MB/sec
[info]                  ·gc.alloc.rate.norm:              10320.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.379 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65.708 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.585 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13116.426 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 81134.644 ops/s
[info]                  ·gc.alloc.rate:                   531.880 MB/sec
[info]                  ·gc.alloc.rate.norm:              10320.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.808 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.554 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13088.304 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 81030.508 ops/s
[info]                  ·gc.alloc.rate:                   531.198 MB/sec
[info]                  ·gc.alloc.rate.norm:              10320.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.890 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13053.350 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala":
[info]   80805.050 ±(99.9%) 1324.894 ops/s [Average]
[info]   (min, avg, max) = (80315.305, 80805.050, 81134.644), stdev = 344.071
[info]   CI (99.9%): [79480.156, 82129.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   529.722 ±(99.9%) 8.639 MB/sec [Average]
[info]   (min, avg, max) = (526.581, 529.722, 531.880), stdev = 2.244
[info]   CI (99.9%): [521.083, 538.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   10320.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10320.005, 10320.005, 10320.005), stdev = 0.001
[info]   CI (99.9%): [10320.004, 10320.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.694 ±(99.9%) 5.781 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.694, 3.379), stdev = 1.501
[info]   CI (99.9%): [≈ 0, 6.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   13.493 ±(99.9%) 112.410 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.493, 65.708), stdev = 29.193
[info]   CI (99.9%): [≈ 0, 125.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   506.477 ±(99.9%) 1123.330 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506.477, 674.585), stdev = 291.725
[info]   CI (99.9%): [≈ 0, 1629.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   9849.845 ±(99.9%) 21821.639 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9849.845, 13116.426), stdev = 5667.010
[info]   CI (99.9%): [≈ 0, 31671.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.517
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 97.59% complete, ETA 00:03:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 77253.239 ops/s
[info] # Warmup Iteration   2: 90081.946 ops/s
[info] # Warmup Iteration   3: 86957.316 ops/s
[info] # Warmup Iteration   4: 87112.857 ops/s
[info] # Warmup Iteration   5: 87004.950 ops/s
[info] Iteration   1: 87242.281 ops/s
[info]                  ·gc.alloc.rate:      12.415 MB/sec
[info]                  ·gc.alloc.rate.norm: 224.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 87355.699 ops/s
[info]                  ·gc.alloc.rate:      12.429 MB/sec
[info]                  ·gc.alloc.rate.norm: 224.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 87068.350 ops/s
[info]                  ·gc.alloc.rate:      12.388 MB/sec
[info]                  ·gc.alloc.rate.norm: 224.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 87054.864 ops/s
[info]                  ·gc.alloc.rate:      12.386 MB/sec
[info]                  ·gc.alloc.rate.norm: 224.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 87095.924 ops/s
[info]                  ·gc.alloc.rate:      12.392 MB/sec
[info]                  ·gc.alloc.rate.norm: 224.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   87163.423 ±(99.9%) 504.158 ops/s [Average]
[info]   (min, avg, max) = (87054.864, 87163.423, 87355.699), stdev = 130.928
[info]   CI (99.9%): [86659.265, 87667.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   12.402 ±(99.9%) 0.073 MB/sec [Average]
[info]   (min, avg, max) = (12.386, 12.402, 12.429), stdev = 0.019
[info]   CI (99.9%): [12.329, 12.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   224.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (224.005, 224.005, 224.005), stdev = 0.001
[info]   CI (99.9%): [224.005, 224.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 97.79% complete, ETA 00:02:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 327499.659 ops/s
[info] # Warmup Iteration   2: 387392.605 ops/s
[info] # Warmup Iteration   3: 386335.250 ops/s
[info] # Warmup Iteration   4: 395814.095 ops/s
[info] # Warmup Iteration   5: 393518.635 ops/s
[info] Iteration   1: 396504.652 ops/s
[info]                  ·gc.alloc.rate:                   2124.203 MB/sec
[info]                  ·gc.alloc.rate.norm:              8432.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.413 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2016.984 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8006.395 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 396124.524 ops/s
[info]                  ·gc.alloc.rate:                   2122.014 MB/sec
[info]                  ·gc.alloc.rate.norm:              8432.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.414 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020.122 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8027.125 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 396429.498 ops/s
[info]                  ·gc.alloc.rate:                   2123.345 MB/sec
[info]                  ·gc.alloc.rate.norm:              8432.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.331 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2698.461 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10715.838 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 397602.560 ops/s
[info]                  ·gc.alloc.rate:                   2129.599 MB/sec
[info]                  ·gc.alloc.rate.norm:              8432.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.247 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.410 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8027.392 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 396473.775 ops/s
[info]                  ·gc.alloc.rate:                   2123.613 MB/sec
[info]                  ·gc.alloc.rate.norm:              8432.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.105 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8060.722 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce":
[info]   396627.002 ±(99.9%) 2179.660 ops/s [Average]
[info]   (min, avg, max) = (396124.524, 396627.002, 397602.560), stdev = 566.051
[info]   CI (99.9%): [394447.342, 398806.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2124.555 ±(99.9%) 11.288 MB/sec [Average]
[info]   (min, avg, max) = (2122.014, 2124.555, 2129.599), stdev = 2.931
[info]   CI (99.9%): [2113.267, 2135.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   8432.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8432.001, 8432.001, 8432.001), stdev = 0.001
[info]   CI (99.9%): [8432.001, 8432.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.314 ±(99.9%) 0.416 B/op [Average]
[info]   (min, avg, max) = (0.165, 0.314, 0.414), stdev = 0.108
[info]   CI (99.9%): [≈ 0, 0.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2158.616 ±(99.9%) 1162.235 MB/sec [Average]
[info]   (min, avg, max) = (2016.984, 2158.616, 2698.461), stdev = 301.829
[info]   CI (99.9%): [996.381, 3320.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   8567.495 ±(99.9%) 4625.079 B/op [Average]
[info]   (min, avg, max) = (8006.395, 8567.495, 10715.838), stdev = 1201.118
[info]   CI (99.9%): [3942.415, 13192.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 97.99% complete, ETA 00:02:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 216313.878 ops/s
[info] # Warmup Iteration   2: 432817.735 ops/s
[info] # Warmup Iteration   3: 435625.615 ops/s
[info] # Warmup Iteration   4: 435398.324 ops/s
[info] # Warmup Iteration   5: 434910.445 ops/s
[info] Iteration   1: 433736.384 ops/s
[info]                  ·gc.alloc.rate:                   528.972 MB/sec
[info]                  ·gc.alloc.rate.norm:              1920.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.404 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1856.233 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 435009.133 ops/s
[info]                  ·gc.alloc.rate:                   530.554 MB/sec
[info]                  ·gc.alloc.rate.norm:              1920.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.828 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.487 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2437.254 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 433610.696 ops/s
[info]                  ·gc.alloc.rate:                   528.865 MB/sec
[info]                  ·gc.alloc.rate.norm:              1920.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.600 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2445.448 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 433724.106 ops/s
[info]                  ·gc.alloc.rate:      529.007 MB/sec
[info]                  ·gc.alloc.rate.norm: 1920.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 434583.219 ops/s
[info]                  ·gc.alloc.rate:                   529.979 MB/sec
[info]                  ·gc.alloc.rate.norm:              1920.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.166 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2442.358 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala":
[info]   434132.708 ±(99.9%) 2410.582 ops/s [Average]
[info]   (min, avg, max) = (433610.696, 434132.708, 435009.133), stdev = 626.021
[info]   CI (99.9%): [431722.125, 436543.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   529.476 ±(99.9%) 2.896 MB/sec [Average]
[info]   (min, avg, max) = (528.865, 529.476, 530.554), stdev = 0.752
[info]   CI (99.9%): [526.579, 532.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1920.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1920.001, 1920.001, 1920.001), stdev = 0.001
[info]   CI (99.9%): [1920.001, 1920.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.387 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.229), stdev = 0.100
[info]   CI (99.9%): [≈ 0, 0.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.181 ±(99.9%) 1.400 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.181, 0.828), stdev = 0.363
[info]   CI (99.9%): [≈ 0, 1.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   506.531 ±(99.9%) 1123.447 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506.531, 674.166), stdev = 291.756
[info]   CI (99.9%): [≈ 0, 1629.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1836.259 ±(99.9%) 4071.457 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1836.259, 2445.448), stdev = 1057.344
[info]   CI (99.9%): [≈ 0, 5907.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 98.19% complete, ETA 00:02:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1095670.326 ops/s
[info] # Warmup Iteration   2: 1181448.003 ops/s
[info] # Warmup Iteration   3: 1175968.567 ops/s
[info] # Warmup Iteration   4: 1188635.649 ops/s
[info] # Warmup Iteration   5: 1176926.321 ops/s
[info] Iteration   1: 1187332.226 ops/s
[info]                  ·gc.alloc.rate:                   621.558 MB/sec
[info]                  ·gc.alloc.rate.norm:              824.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.311 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.389 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.665 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 894.404 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1193327.771 ops/s
[info]                  ·gc.alloc.rate:      624.720 MB/sec
[info]                  ·gc.alloc.rate.norm: 824.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1190979.688 ops/s
[info]                  ·gc.alloc.rate:                   623.440 MB/sec
[info]                  ·gc.alloc.rate.norm:              824.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.645 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 891.678 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1189807.557 ops/s
[info]                  ·gc.alloc.rate:                   622.739 MB/sec
[info]                  ·gc.alloc.rate.norm:              824.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.517 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 889.865 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 1187724.300 ops/s
[info]                  ·gc.alloc.rate:                   621.730 MB/sec
[info]                  ·gc.alloc.rate.norm:              824.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.652 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 891.489 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala":
[info]   1189834.308 ±(99.9%) 9477.091 ops/s [Average]
[info]   (min, avg, max) = (1187332.226, 1189834.308, 1193327.771), stdev = 2461.170
[info]   CI (99.9%): [1180357.218, 1199311.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   622.837 ±(99.9%) 5.013 MB/sec [Average]
[info]   (min, avg, max) = (621.558, 622.837, 624.720), stdev = 1.302
[info]   CI (99.9%): [617.824, 627.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   824.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (824.000, 824.000, 824.000), stdev = 0.001
[info]   CI (99.9%): [824.000, 824.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.679 ±(99.9%) 5.666 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.679, 3.311), stdev = 1.471
[info]   CI (99.9%): [≈ 0, 6.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.900 ±(99.9%) 7.511 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.900, 4.389), stdev = 1.951
[info]   CI (99.9%): [≈ 0, 8.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   538.896 ±(99.9%) 1160.020 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538.896, 674.665), stdev = 301.254
[info]   CI (99.9%): [≈ 0, 1698.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   713.487 ±(99.9%) 1535.848 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 713.487, 894.404), stdev = 398.855
[info]   CI (99.9%): [≈ 0, 2249.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 0.837
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 98.39% complete, ETA 00:02:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 70125.137 ops/s
[info] # Warmup Iteration   2: 109227.148 ops/s
[info] # Warmup Iteration   3: 109862.555 ops/s
[info] # Warmup Iteration   4: 111641.601 ops/s
[info] # Warmup Iteration   5: 111350.385 ops/s
[info] Iteration   1: 112327.125 ops/s
[info]                  ·gc.alloc.rate:                   3903.321 MB/sec
[info]                  ·gc.alloc.rate.norm:              54704.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.875 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4073.474 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57088.661 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 111505.782 ops/s
[info]                  ·gc.alloc.rate:                   3874.665 MB/sec
[info]                  ·gc.alloc.rate.norm:              54704.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.469 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4078.661 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57584.105 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 112660.520 ops/s
[info]                  ·gc.alloc.rate:                   3914.883 MB/sec
[info]                  ·gc.alloc.rate.norm:              54704.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.582 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3402.820 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47548.770 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 111470.852 ops/s
[info]                  ·gc.alloc.rate:                   3873.573 MB/sec
[info]                  ·gc.alloc.rate.norm:              54704.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.294 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4083.973 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57675.348 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 111004.184 ops/s
[info]                  ·gc.alloc.rate:                   3857.363 MB/sec
[info]                  ·gc.alloc.rate.norm:              54704.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.180 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4087.427 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57966.708 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson":
[info]   111793.693 ±(99.9%) 2616.160 ops/s [Average]
[info]   (min, avg, max) = (111004.184, 111793.693, 112660.520), stdev = 679.408
[info]   CI (99.9%): [109177.533, 114409.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3884.761 ±(99.9%) 90.910 MB/sec [Average]
[info]   (min, avg, max) = (3857.363, 3884.761, 3914.883), stdev = 23.609
[info]   CI (99.9%): [3793.850, 3975.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   54704.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (54704.004, 54704.004, 54704.004), stdev = 0.001
[info]   CI (99.9%): [54704.003, 54704.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.104), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.880 ±(99.9%) 1.796 B/op [Average]
[info]   (min, avg, max) = (0.294, 0.880, 1.469), stdev = 0.466
[info]   CI (99.9%): [≈ 0, 2.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3945.271 ±(99.9%) 1167.845 MB/sec [Average]
[info]   (min, avg, max) = (3402.820, 3945.271, 4087.427), stdev = 303.286
[info]   CI (99.9%): [2777.426, 5113.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   55572.718 ±(99.9%) 17315.029 B/op [Average]
[info]   (min, avg, max) = (47548.770, 55572.718, 57966.708), stdev = 4496.658
[info]   CI (99.9%): [38257.689, 72887.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 98.59% complete, ETA 00:01:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 525766.296 ops/s
[info] # Warmup Iteration   2: 574559.773 ops/s
[info] # Warmup Iteration   3: 584193.389 ops/s
[info] # Warmup Iteration   4: 597267.405 ops/s
[info] # Warmup Iteration   5: 598596.587 ops/s
[info] Iteration   1: 598137.975 ops/s
[info]                  ·gc.alloc.rate:                   1744.515 MB/sec
[info]                  ·gc.alloc.rate.norm:              4592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.012 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3535.144 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 600432.597 ops/s
[info]                  ·gc.alloc.rate:                   1751.581 MB/sec
[info]                  ·gc.alloc.rate.norm:              4592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.273 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2017.084 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5288.052 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 586366.668 ops/s
[info]                  ·gc.alloc.rate:                   1710.391 MB/sec
[info]                  ·gc.alloc.rate.norm:              4592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.168 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.450 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3614.904 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 598476.562 ops/s
[info]                  ·gc.alloc.rate:                   1745.733 MB/sec
[info]                  ·gc.alloc.rate.norm:              4592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2022.055 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5318.840 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 597847.223 ops/s
[info]                  ·gc.alloc.rate:                   1744.054 MB/sec
[info]                  ·gc.alloc.rate.norm:              4592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024.909 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5331.475 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle":
[info]   596252.205 ±(99.9%) 21632.900 ops/s [Average]
[info]   (min, avg, max) = (586366.668, 596252.205, 600432.597), stdev = 5617.995
[info]   CI (99.9%): [574619.305, 617885.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.alloc.rate":
[info]   1739.255 ±(99.9%) 63.206 MB/sec [Average]
[info]   (min, avg, max) = (1710.391, 1739.255, 1751.581), stdev = 16.414
[info]   CI (99.9%): [1676.049, 1802.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   4592.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4592.001, 4592.001, 4592.001), stdev = 0.001
[info]   CI (99.9%): [4592.001, 4592.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.054, 0.104), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   0.143 ±(99.9%) 0.319 B/op [Average]
[info]   (min, avg, max) = (0.055, 0.143, 0.273), stdev = 0.083
[info]   CI (99.9%): [≈ 0, 0.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   1750.702 ±(99.9%) 1427.093 MB/sec [Average]
[info]   (min, avg, max) = (1343.012, 1750.702, 2024.909), stdev = 370.611
[info]   CI (99.9%): [323.609, 3177.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   4617.683 ±(99.9%) 3667.205 B/op [Average]
[info]   (min, avg, max) = (3535.144, 4617.683, 5331.475), stdev = 952.362
[info]   CI (99.9%): [950.478, 8284.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 98.80% complete, ETA 00:01:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 245720.220 ops/s
[info] # Warmup Iteration   2: 318545.159 ops/s
[info] # Warmup Iteration   3: 323149.629 ops/s
[info] # Warmup Iteration   4: 313101.637 ops/s
[info] # Warmup Iteration   5: 333493.963 ops/s
[info] Iteration   1: 333367.699 ops/s
[info]                  ·gc.alloc.rate:                   523.396 MB/sec
[info]                  ·gc.alloc.rate.norm:              2472.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.035 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.163 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.343 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2415.074 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 332980.165 ops/s
[info]                  ·gc.alloc.rate:                   522.900 MB/sec
[info]                  ·gc.alloc.rate.norm:              2472.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.498 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2418.098 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 327705.853 ops/s
[info]                  ·gc.alloc.rate:                   514.593 MB/sec
[info]                  ·gc.alloc.rate.norm:              2472.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.506 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16.840 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.915 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3237.353 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 327055.758 ops/s
[info]                  ·gc.alloc.rate:                   513.550 MB/sec
[info]                  ·gc.alloc.rate.norm:              2472.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.100 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.901 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3243.855 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 326564.035 ops/s
[info]                  ·gc.alloc.rate:                   512.811 MB/sec
[info]                  ·gc.alloc.rate.norm:              2472.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.952 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3239.140 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce":
[info]   329534.702 ±(99.9%) 12897.904 ops/s [Average]
[info]   (min, avg, max) = (326564.035, 329534.702, 333367.699), stdev = 3349.545
[info]   CI (99.9%): [316636.798, 342432.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   517.450 ±(99.9%) 20.188 MB/sec [Average]
[info]   (min, avg, max) = (512.811, 517.450, 523.396), stdev = 5.243
[info]   CI (99.9%): [497.262, 537.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2472.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2472.001, 2472.001, 2472.001), stdev = 0.001
[info]   CI (99.9%): [2472.001, 2472.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.712 ±(99.9%) 6.013 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.712, 3.506), stdev = 1.562
[info]   CI (99.9%): [≈ 0, 6.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3.421 ±(99.9%) 28.887 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.421, 16.840), stdev = 7.502
[info]   CI (99.9%): [≈ 0, 32.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   608.522 ±(99.9%) 341.339 MB/sec [Average]
[info]   (min, avg, max) = (511.343, 608.522, 673.915), stdev = 88.645
[info]   CI (99.9%): [267.183, 949.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2910.704 ±(99.9%) 1736.923 B/op [Average]
[info]   (min, avg, max) = (2415.074, 2910.704, 3243.855), stdev = 451.073
[info]   CI (99.9%): [1173.781, 4647.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.304
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 99.00% complete, ETA 00:01:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 419456.872 ops/s
[info] # Warmup Iteration   2: 710821.360 ops/s
[info] # Warmup Iteration   3: 712449.624 ops/s
[info] # Warmup Iteration   4: 713385.598 ops/s
[info] # Warmup Iteration   5: 713096.514 ops/s
[info] Iteration   1: 714803.767 ops/s
[info]                  ·gc.alloc.rate:      544.830 MB/sec
[info]                  ·gc.alloc.rate.norm: 1200.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 716021.015 ops/s
[info]                  ·gc.alloc.rate:                   545.737 MB/sec
[info]                  ·gc.alloc.rate.norm:              1200.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.270 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.595 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.497 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1480.926 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 713816.653 ops/s
[info]                  ·gc.alloc.rate:                   544.096 MB/sec
[info]                  ·gc.alloc.rate.norm:              1200.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.541 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1485.491 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 712093.321 ops/s
[info]                  ·gc.alloc.rate:                   542.798 MB/sec
[info]                  ·gc.alloc.rate.norm:              1200.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.598 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1491.381 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 714274.080 ops/s
[info]                  ·gc.alloc.rate:                   544.448 MB/sec
[info]                  ·gc.alloc.rate.norm:              1200.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.138 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.567 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1486.792 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala":
[info]   714201.767 ±(99.9%) 5537.152 ops/s [Average]
[info]   (min, avg, max) = (712093.321, 714201.767, 716021.015), stdev = 1437.981
[info]   CI (99.9%): [708664.616, 719738.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   544.382 ±(99.9%) 4.145 MB/sec [Average]
[info]   (min, avg, max) = (542.798, 544.382, 545.737), stdev = 1.076
[info]   CI (99.9%): [540.237, 548.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1200.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1200.001, 1200.001, 1200.001), stdev = 0.001
[info]   CI (99.9%): [1200.001, 1200.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.451 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.270), stdev = 0.117
[info]   CI (99.9%): [≈ 0, 0.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.146 ±(99.9%) 0.992 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.146, 0.595), stdev = 0.258
[info]   CI (99.9%): [≈ 0, 1.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   539.240 ±(99.9%) 1160.757 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.240, 674.598), stdev = 301.445
[info]   CI (99.9%): [≈ 0, 1699.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1188.918 ±(99.9%) 2559.276 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1188.918, 1491.381), stdev = 664.636
[info]   CI (99.9%): [≈ 0, 3748.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 99.20% complete, ETA 00:01:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1748534.235 ops/s
[info] # Warmup Iteration   2: 1908711.738 ops/s
[info] # Warmup Iteration   3: 1930205.494 ops/s
[info] # Warmup Iteration   4: 1945861.887 ops/s
[info] # Warmup Iteration   5: 1999378.673 ops/s
[info] Iteration   1: 2011735.327 ops/s
[info]                  ·gc.alloc.rate:                   930.377 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.625 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 526.315 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 2012948.224 ops/s
[info]                  ·gc.alloc.rate:                   930.946 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      672.577 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 525.956 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 2006264.359 ops/s
[info]                  ·gc.alloc.rate:                   927.740 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.082 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.445 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1053.420 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2016856.325 ops/s
[info]                  ·gc.alloc.rate:                   932.769 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      671.337 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 523.960 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 2011696.668 ops/s
[info]                  ·gc.alloc.rate:                   930.390 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1050.871 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala":
[info]   2011900.181 ±(99.9%) 14598.568 ops/s [Average]
[info]   (min, avg, max) = (2006264.359, 2011900.181, 2016856.325), stdev = 3791.202
[info]   CI (99.9%): [1997301.613, 2026498.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   930.444 ±(99.9%) 6.935 MB/sec [Average]
[info]   (min, avg, max) = (927.740, 930.444, 932.769), stdev = 1.801
[info]   CI (99.9%): [923.509, 937.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (728.000, 728.000, 728.000), stdev = 0.001
[info]   CI (99.9%): [728.000, 728.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.200 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.104), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.029 ±(99.9%) 0.156 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.082), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   940.401 ±(99.9%) 1414.255 MB/sec [Average]
[info]   (min, avg, max) = (671.337, 940.401, 1343.021), stdev = 367.278
[info]   CI (99.9%): [≈ 0, 2354.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   736.104 ±(99.9%) 1110.941 B/op [Average]
[info]   (min, avg, max) = (523.960, 736.104, 1053.420), stdev = 288.508
[info]   CI (99.9%): [≈ 0, 1847.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 99.40% complete, ETA 00:00:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1770679.818 ops/s
[info] # Warmup Iteration   2: 1904111.471 ops/s
[info] # Warmup Iteration   3: 1917532.096 ops/s
[info] # Warmup Iteration   4: 1915092.243 ops/s
[info] # Warmup Iteration   5: 1918479.228 ops/s
[info] Iteration   1: 1919101.920 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1921010.124 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1918694.224 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1909593.603 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1919861.242 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   1917652.222 ±(99.9%) 17675.674 ops/s [Average]
[info]   (min, avg, max) = (1909593.603, 1917652.222, 1921010.124), stdev = 4590.316
[info]   CI (99.9%): [1899976.549, 1935327.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 99.60% complete, ETA 00:00:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 285952.534 ops/s
[info] # Warmup Iteration   2: 361845.055 ops/s
[info] # Warmup Iteration   3: 368058.302 ops/s
[info] # Warmup Iteration   4: 366617.803 ops/s
[info] # Warmup Iteration   5: 365786.240 ops/s
[info] Iteration   1: 369191.971 ops/s
[info]                  ·gc.alloc.rate:                   545.946 MB/sec
[info]                  ·gc.alloc.rate.norm:              2328.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.412 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2180.741 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 369520.195 ops/s
[info]                  ·gc.alloc.rate:                   546.436 MB/sec
[info]                  ·gc.alloc.rate.norm:              2328.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4.065 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17.317 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.174 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2867.946 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 370954.133 ops/s
[info]                  ·gc.alloc.rate:      548.595 MB/sec
[info]                  ·gc.alloc.rate.norm: 2328.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 368794.808 ops/s
[info]                  ·gc.alloc.rate:                   545.322 MB/sec
[info]                  ·gc.alloc.rate.norm:              2328.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      673.181 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2873.839 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 372148.315 ops/s
[info]                  ·gc.alloc.rate:                   550.289 MB/sec
[info]                  ·gc.alloc.rate.norm:              2328.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.088 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      670.560 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2836.806 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson":
[info]   370121.885 ±(99.9%) 5372.636 ops/s [Average]
[info]   (min, avg, max) = (368794.808, 370121.885, 372148.315), stdev = 1395.256
[info]   CI (99.9%): [364749.249, 375494.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   547.318 ±(99.9%) 7.962 MB/sec [Average]
[info]   (min, avg, max) = (545.322, 547.318, 550.289), stdev = 2.068
[info]   CI (99.9%): [539.355, 555.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2328.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2328.001, 2328.001, 2328.001), stdev = 0.001
[info]   CI (99.9%): [2328.001, 2328.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.821 ±(99.9%) 6.982 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.821, 4.065), stdev = 1.813
[info]   CI (99.9%): [≈ 0, 7.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3.499 ±(99.9%) 29.744 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.499, 17.317), stdev = 7.725
[info]   CI (99.9%): [≈ 0, 33.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   505.665 ±(99.9%) 1121.062 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 505.665, 673.181), stdev = 291.136
[info]   CI (99.9%): [≈ 0, 1626.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2151.866 ±(99.9%) 4768.630 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2151.866, 2873.839), stdev = 1238.398
[info]   CI (99.9%): [≈ 0, 6920.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 99.80% complete, ETA 00:00:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 168545.484 ops/s
[info] # Warmup Iteration   2: 176939.382 ops/s
[info] # Warmup Iteration   3: 178244.210 ops/s
[info] # Warmup Iteration   4: 172741.791 ops/s
[info] # Warmup Iteration   5: 178053.985 ops/s
[info] Iteration   1: 178150.757 ops/s
[info]                  ·gc.alloc.rate:                   461.646 MB/sec
[info]                  ·gc.alloc.rate.norm:              4080.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.012 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.108 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.343 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4519.217 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 178496.319 ops/s
[info]                  ·gc.alloc.rate:                   462.646 MB/sec
[info]                  ·gc.alloc.rate.norm:              4080.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.087 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.503 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4510.863 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 178372.204 ops/s
[info]                  ·gc.alloc.rate:                   462.242 MB/sec
[info]                  ·gc.alloc.rate.norm:              4080.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.307 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29.192 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.508 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5953.577 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 178999.549 ops/s
[info]                  ·gc.alloc.rate:      463.918 MB/sec
[info]                  ·gc.alloc.rate.norm: 4080.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 178597.705 ops/s
[info]                  ·gc.alloc.rate:                   462.862 MB/sec
[info]                  ·gc.alloc.rate.norm:              4080.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.183 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      674.577 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5946.212 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle":
[info]   178523.307 ±(99.9%) 1209.580 ops/s [Average]
[info]   (min, avg, max) = (178150.757, 178523.307, 178999.549), stdev = 314.124
[info]   CI (99.9%): [177313.727, 179732.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.alloc.rate":
[info]   462.663 ±(99.9%) 3.236 MB/sec [Average]
[info]   (min, avg, max) = (461.646, 462.663, 463.918), stdev = 0.840
[info]   CI (99.9%): [459.427, 465.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   4080.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4080.002, 4080.002, 4080.002), stdev = 0.001
[info]   CI (99.9%): [4080.002, 4080.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   0.670 ±(99.9%) 5.677 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.670, 3.307), stdev = 1.474
[info]   CI (99.9%): [≈ 0, 6.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   5.914 ±(99.9%) 50.107 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.914, 29.192), stdev = 13.013
[info]   CI (99.9%): [≈ 0, 56.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   474.386 ±(99.9%) 1068.355 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474.386, 674.577), stdev = 277.448
[info]   CI (99.9%): [≈ 0, 1542.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   4185.974 ±(99.9%) 9424.611 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4185.974, 5953.577), stdev = 2447.542
[info]   CI (99.9%): [≈ 0, 13610.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.140
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # Run complete. Total time: 02:14:13
[info] REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
[info] why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
[info] experiments, perform baseline and negative tests that provide experimental control, make sure
[info] the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
[info] Do not assume the numbers tell you what you want them to tell.
[info] Benchmark                                                                                      (size)   Mode  Cnt         Score         Error   Units
[info] AdtBenchmark.readCirce                                                                            N/A  thrpt    5    755507.130 ±   30520.365   ops/s
[info] AdtBenchmark.readCirce:·gc.alloc.rate                                                             N/A  thrpt    5      1984.846 ±      80.587  MB/sec
[info] AdtBenchmark.readCirce:·gc.alloc.rate.norm                                                        N/A  thrpt    5      4136.001 ±       0.001    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                    N/A  thrpt    5         0.050 ±       0.072  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                               N/A  thrpt    5         0.104 ±       0.150    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                                N/A  thrpt    5      2019.351 ±      21.355  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                           N/A  thrpt    5      4208.309 ±     190.487    B/op
[info] AdtBenchmark.readCirce:·gc.count                                                                  N/A  thrpt    5        15.000                counts
[info] AdtBenchmark.readCirce:·gc.time                                                                   N/A  thrpt    5        11.000                    ms
[info] AdtBenchmark.readJacksonScala                                                                     N/A  thrpt    5   1605030.659 ±   52414.629   ops/s
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate                                                      N/A  thrpt    5      1288.669 ±      41.984  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                 N/A  thrpt    5      1264.000 ±       0.001    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5         0.058 ±       0.132  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5         0.057 ±       0.129    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5      1352.459 ±       6.481  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5      1326.645 ±      43.688    B/op
[info] AdtBenchmark.readJacksonScala:·gc.count                                                           N/A  thrpt    5        10.000                counts
[info] AdtBenchmark.readJacksonScala:·gc.time                                                            N/A  thrpt    5         9.000                    ms
[info] AdtBenchmark.readJsoniterScala                                                                    N/A  thrpt    5   3839442.503 ±  170720.735   ops/s
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate                                                     N/A  thrpt    5       253.642 ±      11.212  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                N/A  thrpt    5       104.000 ±       0.001    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5         0.002 ±       0.019  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5         0.001 ±       0.008    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5       204.591 ±    1078.748  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5        84.374 ±     444.923    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.count                                                          N/A  thrpt    5         2.000                counts
[info] AdtBenchmark.readJsoniterScala:·gc.time                                                           N/A  thrpt    5         4.000                    ms
[info] AdtBenchmark.readPlayJson                                                                         N/A  thrpt    5    171048.401 ±    5993.685   ops/s
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate                                                          N/A  thrpt    5      1438.596 ±      49.715  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate.norm                                                     N/A  thrpt    5     13240.002 ±       0.001    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                 N/A  thrpt    5         0.050 ±       0.122  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                            N/A  thrpt    5         0.461 ±       1.129    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                             N/A  thrpt    5      1353.060 ±       6.644  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                        N/A  thrpt    5     12453.536 ±     409.088    B/op
[info] AdtBenchmark.readPlayJson:·gc.count                                                               N/A  thrpt    5        10.000                counts
[info] AdtBenchmark.readPlayJson:·gc.time                                                                N/A  thrpt    5         8.000                    ms
[info] AdtBenchmark.writeCirce                                                                           N/A  thrpt    5    545471.636 ±   21869.621   ops/s
[info] AdtBenchmark.writeCirce:·gc.alloc.rate                                                            N/A  thrpt    5      1649.320 ±      66.267  MB/sec
[info] AdtBenchmark.writeCirce:·gc.alloc.rate.norm                                                       N/A  thrpt    5      4760.001 ±       0.001    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                   N/A  thrpt    5         0.050 ±       0.072  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                              N/A  thrpt    5         0.144 ±       0.209    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                               N/A  thrpt    5      1746.752 ±    1417.123  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                          N/A  thrpt    5      5045.122 ±    4168.884    B/op
[info] AdtBenchmark.writeCirce:·gc.count                                                                 N/A  thrpt    5        13.000                counts
[info] AdtBenchmark.writeCirce:·gc.time                                                                  N/A  thrpt    5         9.000                    ms
[info] AdtBenchmark.writeJacksonScala                                                                    N/A  thrpt    5   2049872.647 ±   15516.056   ops/s
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate                                                     N/A  thrpt    5       854.159 ±       6.482  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                N/A  thrpt    5       656.000 ±       0.001    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5         0.033 ±       0.122  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5         0.026 ±       0.093    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5       944.441 ±    1423.548  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5       724.966 ±    1088.052    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.count                                                          N/A  thrpt    5         7.000                counts
[info] AdtBenchmark.writeJacksonScala:·gc.time                                                           N/A  thrpt    5         5.000                    ms
[info] AdtBenchmark.writeJsoniterScala                                                                   N/A  thrpt    5  14700951.024 ±  798737.794   ops/s
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate                                                    N/A  thrpt    5       747.044 ±      40.432  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                               N/A  thrpt    5        80.000 ±       0.001    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5         0.671 ±       5.602  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5         0.071 ±       0.593    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5       673.105 ±       5.613  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5        72.094 ±       4.060    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.count                                                         N/A  thrpt    5         5.000                counts
[info] AdtBenchmark.writeJsoniterScala:·gc.time                                                          N/A  thrpt    5         5.000                    ms
[info] AdtBenchmark.writeJsoniterScalaPrealloc                                                           N/A  thrpt    5  18425396.512 ±  164728.025   ops/s
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                            N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                       N/A  thrpt    5        ≈ 10⁻⁵                  B/op
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                 N/A  thrpt    5           ≈ 0                counts
[info] AdtBenchmark.writePlayJson                                                                        N/A  thrpt    5    305025.558 ±    6221.490   ops/s
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate                                                         N/A  thrpt    5      1009.138 ±      20.660  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate.norm                                                    N/A  thrpt    5      5208.001 ±       0.001    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                                N/A  thrpt    5         0.042 ±       0.227  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                           N/A  thrpt    5         0.214 ±       1.167    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                            N/A  thrpt    5      1080.636 ±    1424.856  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                       N/A  thrpt    5      5571.620 ±    7286.244    B/op
[info] AdtBenchmark.writePlayJson:·gc.count                                                              N/A  thrpt    5         8.000                counts
[info] AdtBenchmark.writePlayJson:·gc.time                                                               N/A  thrpt    5         7.000                    ms
[info] AnyRefsBenchmark.readCirce                                                                        N/A  thrpt    5   1595427.507 ±   78080.160   ops/s
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate                                                         N/A  thrpt    5      2464.778 ±     119.730  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm                                                    N/A  thrpt    5      2432.000 ±       0.001    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                N/A  thrpt    5         0.075 ±       0.044  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                           N/A  thrpt    5         0.074 ±       0.043    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                            N/A  thrpt    5      2431.750 ±    1416.946  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                       N/A  thrpt    5      2396.048 ±    1287.991    B/op
[info] AnyRefsBenchmark.readCirce:·gc.count                                                              N/A  thrpt    5        18.000                counts
[info] AnyRefsBenchmark.readCirce:·gc.time                                                               N/A  thrpt    5        14.000                    ms
[info] AnyRefsBenchmark.readDslJsonJava                                                                  N/A  thrpt    5  10252755.371 ±  960259.223   ops/s
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate                                                   N/A  thrpt    5      1250.587 ±     117.356  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                              N/A  thrpt    5       192.000 ±       0.001    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5         0.058 ±       0.132  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5         0.009 ±       0.020    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5      1210.149 ±    1157.644  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5       185.377 ±     172.101    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.count                                                        N/A  thrpt    5         9.000                counts
[info] AnyRefsBenchmark.readDslJsonJava:·gc.time                                                         N/A  thrpt    5         8.000                    ms
[info] AnyRefsBenchmark.readJacksonScala                                                                 N/A  thrpt    5   2570402.394 ±  120846.551   ops/s
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate                                                  N/A  thrpt    5      1802.544 ±      84.406  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                             N/A  thrpt    5      1104.000 ±       0.001    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5         0.042 ±       0.080  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5         0.025 ±       0.049    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5      1897.280 ±    1166.446  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5      1162.788 ±     731.554    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.count                                                       N/A  thrpt    5        14.000                counts
[info] AnyRefsBenchmark.readJacksonScala:·gc.time                                                        N/A  thrpt    5        11.000                    ms
[info] AnyRefsBenchmark.readJsoniterScala                                                                N/A  thrpt    5  10671815.167 ±  119398.150   ops/s
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate                                                 N/A  thrpt    5      1355.867 ±      15.030  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                            N/A  thrpt    5       200.000 ±       0.001    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5         0.050 ±       0.108  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5         0.007 ±       0.016    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5      1344.779 ±       5.140  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5       198.366 ±       2.311    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.count                                                      N/A  thrpt    5        10.000                counts
[info] AnyRefsBenchmark.readJsoniterScala:·gc.time                                                       N/A  thrpt    5         9.000                    ms
[info] AnyRefsBenchmark.readPlayJson                                                                     N/A  thrpt    5    640692.823 ±   33921.632   ops/s
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate                                                      N/A  thrpt    5      1693.015 ±      89.654  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                 N/A  thrpt    5      4160.001 ±       0.001    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5         0.058 ±       0.104  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5         0.144 ±       0.260    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5      1625.465 ±    1433.255  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5      3989.009 ±    3397.808    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.count                                                           N/A  thrpt    5        12.000                counts
[info] AnyRefsBenchmark.readPlayJson:·gc.time                                                            N/A  thrpt    5        10.000                    ms
[info] AnyRefsBenchmark.writeCirce                                                                       N/A  thrpt    5   1829827.801 ±   75500.712   ops/s
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate                                                        N/A  thrpt    5      1562.232 ±      64.287  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm                                                   N/A  thrpt    5      1344.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5         0.054 ±       0.108  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5         0.047 ±       0.092    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5      1477.965 ±    1155.771  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5      1271.099 ±     979.848    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.count                                                             N/A  thrpt    5        11.000                counts
[info] AnyRefsBenchmark.writeCirce:·gc.time                                                              N/A  thrpt    5         8.000                    ms
[info] AnyRefsBenchmark.writeDslJsonJava                                                                 N/A  thrpt    5  18737631.524 ± 1339747.599   ops/s
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                  N/A  thrpt    5       571.321 ±      40.857  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                             N/A  thrpt    5        48.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5         0.514 ±       4.286  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5         0.043 ±       0.358    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5       505.987 ±    1121.927  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5        42.798 ±      95.309    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.count                                                       N/A  thrpt    5         4.000                counts
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.time                                                        N/A  thrpt    5         7.000                    ms
[info] AnyRefsBenchmark.writeJacksonScala                                                                N/A  thrpt    5   6410475.306 ±  420413.675   ops/s
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate                                                 N/A  thrpt    5      1759.191 ±     114.572  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                            N/A  thrpt    5       432.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5         0.067 ±       0.088  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5         0.016 ±       0.022    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5      1760.482 ±    1430.843  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5       431.504 ±     332.659    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.count                                                      N/A  thrpt    5        13.000                counts
[info] AnyRefsBenchmark.writeJacksonScala:·gc.time                                                       N/A  thrpt    5         9.000                    ms
[info] AnyRefsBenchmark.writeJsoniterScala                                                               N/A  thrpt    5  20927624.428 ±  389603.004   ops/s
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                N/A  thrpt    5       638.166 ±      11.932  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                           N/A  thrpt    5        48.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5         0.688 ±       5.657  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5         0.052 ±       0.429    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5       538.693 ±    1159.588  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5        40.571 ±      87.338    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.count                                                     N/A  thrpt    5         4.000                counts
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.time                                                      N/A  thrpt    5         5.000                    ms
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc                                                       N/A  thrpt    5  22230328.964 ±  902922.957   ops/s
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                        N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                   N/A  thrpt    5        ≈ 10⁻⁵                  B/op
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                             N/A  thrpt    5           ≈ 0                counts
[info] AnyRefsBenchmark.writePlayJson                                                                    N/A  thrpt    5   1172573.758 ±   51261.397   ops/s
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate                                                     N/A  thrpt    5      1769.767 ±      77.586  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                N/A  thrpt    5      2376.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5         0.046 ±       0.036  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5         0.061 ±       0.047    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5      1761.082 ±    1426.345  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5      2368.045 ±    1989.654    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.count                                                          N/A  thrpt    5        13.000                counts
[info] AnyRefsBenchmark.writePlayJson:·gc.time                                                           N/A  thrpt    5        10.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readCirce                                                          128  thrpt    5    381211.226 ±    7971.763   ops/s
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate                                           128  thrpt    5      2098.090 ±      44.314  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                      128  thrpt    5      8664.001 ±       0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.054 ±       0.122  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0.223 ±       0.501    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5      2158.399 ±    1179.649  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5      8918.302 ±    5075.501    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.count                                                128  thrpt    5        16.000                counts
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.time                                                 128  thrpt    5        11.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala                                                   128  thrpt    5    456620.641 ±    5730.838   ops/s
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                    128  thrpt    5       621.901 ±       7.775  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5      2144.001 ±       0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5         0.071 ±       0.437  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5         0.244 ±       1.509    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5       674.274 ±       2.484  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5      2324.576 ±      34.411    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.count                                         128  thrpt    5         5.000                counts
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.time                                          128  thrpt    5         5.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala                                                  128  thrpt    5   1010766.018 ±   28947.075   ops/s
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                   128  thrpt    5       672.932 ±      19.417  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5      1048.000 ±       0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5         0.687 ±       5.782  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5         1.070 ±       9.001    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5       672.909 ±       6.294  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5      1048.004 ±      26.836    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.count                                        128  thrpt    5         5.000                counts
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.time                                         128  thrpt    5         6.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readPlayJson                                                       128  thrpt    5    111766.207 ±    1407.433   ops/s
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                        128  thrpt    5      3865.507 ±      49.251  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                   128  thrpt    5     54448.004 ±       0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.075 ±       0.122  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         1.055 ±       1.705    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5      3809.120 ±    1429.963  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5     53647.047 ±   19809.273    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.count                                             128  thrpt    5        28.000                counts
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.time                                              128  thrpt    5        21.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readUPickle                                                        128  thrpt    5    606787.259 ±   26350.077   ops/s
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.alloc.rate                                         128  thrpt    5      1856.296 ±      80.594  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm                                    128  thrpt    5      4816.001 ±       0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                128  thrpt    5         0.058 ±       0.067  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         0.151 ±       0.178    B/op
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                            128  thrpt    5      1885.817 ±    1155.265  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5      4891.723 ±    2972.455    B/op
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.count                                              128  thrpt    5        14.000                counts
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.time                                               128  thrpt    5        12.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeCirce                                                         128  thrpt    5    380085.996 ±   13491.989   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                          128  thrpt    5       589.146 ±      21.049  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                     128  thrpt    5      2440.001 ±       0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.730 ±       5.992  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         3.002 ±      24.616    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5       640.682 ±     278.378  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5      2652.386 ±    1111.275    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.count                                               128  thrpt    5         5.000                counts
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.time                                                128  thrpt    5         8.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala                                                  128  thrpt    5    567404.541 ±   10966.851   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                   128  thrpt    5       418.105 ±       8.036  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5      1160.001 ±       0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5         0.071 ±       0.524  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5         0.197 ±       1.457    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5       474.016 ±    1067.114  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5      1316.083 ±    2960.865    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.count                                        128  thrpt    5         4.000                counts
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.time                                         128  thrpt    5         5.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala                                                 128  thrpt    5   2731360.162 ±  232843.819   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                  128  thrpt    5      1263.148 ±     107.724  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5       728.000 ±       0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5         0.083 ±       0.057  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5         0.048 ±       0.029    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5      1343.504 ±       4.231  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5       774.632 ±      69.479    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.count                                       128  thrpt    5        10.000                counts
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.time                                        128  thrpt    5         7.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc                                         128  thrpt    5   2937599.684 ±   14439.087   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                               128  thrpt    5           ≈ 0                counts
[info] ArrayBufferOfBooleansBenchmark.writePlayJson                                                      128  thrpt    5    383857.874 ±   30074.751   ops/s
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                       128  thrpt    5       552.063 ±      43.303  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                  128  thrpt    5      2264.001 ±       0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5         0.820 ±       6.966  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         3.317 ±      28.169    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5       505.603 ±    1120.859  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5      2086.806 ±    4645.383    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.count                                            128  thrpt    5         4.000                counts
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.time                                             128  thrpt    5         8.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeUPickle                                                       128  thrpt    5    180383.242 ±    2036.359   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.alloc.rate                                        128  thrpt    5       460.162 ±       5.192  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm                                   128  thrpt    5      4016.002 ±       0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.676 ±       5.671  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         5.910 ±      49.567    B/op
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                           128  thrpt    5       474.390 ±    1068.353  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5      4144.776 ±    9332.877    B/op
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.count                                             128  thrpt    5         4.000                counts
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.time                                              128  thrpt    5         9.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readCirce                                                             128  thrpt    5     17227.783 ±     531.754   ops/s
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate                                              128  thrpt    5      1077.940 ±      32.922  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm                                         128  thrpt    5     98480.028 ±       0.031    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.046 ±       0.183  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         4.192 ±      16.780    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5      1074.482 ±    1415.820  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5     98183.220 ±  129571.792    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.count                                                   128  thrpt    5         8.000                counts
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.time                                                    128  thrpt    5         6.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala                                                      128  thrpt    5     33588.124 ±     167.580   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate                                       128  thrpt    5       841.136 ±       3.924  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5     39424.013 ±       0.002    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         0.586 ±       3.363    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5       810.313 ±    1164.274  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5     37984.999 ±   54678.701    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count                                            128  thrpt    5         6.000                counts
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time                                             128  thrpt    5         5.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala                                                     128  thrpt    5     36102.926 ±    1989.550   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate                                      128  thrpt    5       537.771 ±      29.685  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5     23448.011 ±       0.001    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5         0.679 ±       5.720  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5        29.340 ±     247.189    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5       506.551 ±    1123.426  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5     21959.104 ±   48507.121    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count                                           128  thrpt    5         4.000                counts
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time                                            128  thrpt    5         6.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readPlayJson                                                          128  thrpt    5     26411.911 ±     321.770   ops/s
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate                                           128  thrpt    5      1399.275 ±      17.421  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     83400.016 ±       0.002    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.037 ±       0.119  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         2.233 ±       7.103    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5      1353.923 ±       6.977  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5     80697.339 ±     614.084    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count                                                128  thrpt    5        10.000                counts
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time                                                 128  thrpt    5         9.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeCirce                                                            128  thrpt    5     31136.713 ±    1519.462   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate                                             128  thrpt    5      1709.557 ±      83.327  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm                                        128  thrpt    5     86432.013 ±       0.002    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.021 ±       0.098  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         1.047 ±       4.928    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5      1748.516 ±    1422.096  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5     88549.607 ±   74864.876    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count                                                  128  thrpt    5        13.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time                                                   128  thrpt    5        10.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala                                                     128  thrpt    5     28830.938 ±    1104.385   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate                                      128  thrpt    5      1551.588 ±      59.774  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5     84720.014 ±       0.002    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5         0.029 ±       0.091  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5         1.594 ±       4.984    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5      1489.745 ±    1163.335  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5     81357.902 ±   63840.461    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count                                           128  thrpt    5        11.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time                                            128  thrpt    5        10.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala                                                    128  thrpt    5     34771.928 ±     294.211   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate                                     128  thrpt    5      1727.837 ±      14.475  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5     78224.012 ±       0.002    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5         0.062 ±       0.234  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5         2.828 ±      10.583    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5      1749.815 ±    1420.638  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5     79231.648 ±   64577.798    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count                                          128  thrpt    5        13.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time                                           128  thrpt    5         9.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc                                            128  thrpt    5     34515.494 ±     827.063   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             128  thrpt    5      1648.712 ±      39.952  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        128  thrpt    5     75192.012 ±       0.001    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                    128  thrpt    5         0.029 ±       0.122  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm               128  thrpt    5         1.335 ±       5.579    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                128  thrpt    5      1614.951 ±    1424.661  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm           128  thrpt    5     73728.746 ±   66669.294    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  128  thrpt    5        12.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                   128  thrpt    5        10.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writePlayJson                                                         128  thrpt    5      8993.687 ±     419.826   ops/s
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate                                          128  thrpt    5      1159.015 ±      54.906  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm                                     128  thrpt    5    202832.301 ±       2.204    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         1.444 ±       7.613    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5      1204.879 ±    1152.963  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5    210515.615 ±  197194.542    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count                                               128  thrpt    5         9.000                counts
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time                                                128  thrpt    5         8.000                    ms
[info] ArrayOfBigIntsBenchmark.readCirce                                                                 128  thrpt    5     21097.140 ±     366.188   ops/s
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      1611.359 ±      28.162  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5    120240.021 ±       0.008    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5         0.037 ±       0.215  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5         2.802 ±      16.108    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5      1613.742 ±    1415.078  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5    120440.811 ±  106093.136    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.count                                                       128  thrpt    5        12.000                counts
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.time                                                        128  thrpt    5         9.000                    ms
[info] ArrayOfBigIntsBenchmark.readJacksonScala                                                          128  thrpt    5     42937.580 ±    1541.725   ops/s
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5      1058.111 ±      38.359  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5     38792.010 ±       0.001    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.046 ±       0.200  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         1.671 ±       7.280    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5      1081.560 ±    1426.050  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5     39590.486 ±   51503.243    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         8.000                counts
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5         7.000                    ms
[info] ArrayOfBigIntsBenchmark.readJsoniterScala                                                         128  thrpt    5     58175.585 ±     270.040   ops/s
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       751.498 ±       3.376  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5     20336.007 ±       0.001    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.021 ±       0.098  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         0.564 ±       2.660    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5       672.164 ±       5.166  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5     18189.183 ±      92.676    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5         5.000                counts
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5         4.000                    ms
[info] ArrayOfBigIntsBenchmark.readPlayJson                                                              128  thrpt    5     32647.204 ±     498.995   ops/s
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      2180.637 ±      33.592  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5    105144.013 ±       0.002    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.075 ±       0.146  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         3.608 ±       6.988    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5      2170.968 ±    1163.375  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5    104654.270 ±   55087.669    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        16.000                counts
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        13.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJacksonScala                                                         128  thrpt    5     33161.107 ±    1945.222   ops/s
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5      1877.865 ±     109.673  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     89144.012 ±       0.001    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.071 ±       0.108  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         3.352 ±       4.993    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5      1898.935 ±    1170.703  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5     90200.362 ±   56798.582    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5        14.000                counts
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5        10.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala                                                        128  thrpt    5     48816.000 ±    1531.764   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5      1875.502 ±      59.861  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5     60480.008 ±       0.001    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5         0.046 ±       0.154  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         1.477 ±       4.990    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5      1886.769 ±    1169.904  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5     60808.781 ±   36874.360    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5        14.000                counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5        10.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5     48129.741 ±    1622.951   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5      1921.689 ±      64.935  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5     62856.008 ±       0.001    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                        128  thrpt    5         0.058 ±       0.088  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5         1.910 ±       2.910    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                    128  thrpt    5      1886.812 ±    1155.486  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5     61751.595 ±   38625.571    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5        14.000                counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                       128  thrpt    5        10.000                    ms
[info] ArrayOfBooleansBenchmark.readCirce                                                                128  thrpt    5    381795.638 ±    5384.441   ops/s
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                 128  thrpt    5      1930.563 ±      27.794  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                            128  thrpt    5      7960.001 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0.075 ±       0.091  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         0.309 ±       0.379    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5      1886.692 ±    1159.376  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5      7779.509 ±    4788.946    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.count                                                      128  thrpt    5        14.000                counts
[info] ArrayOfBooleansBenchmark.readCirce:·gc.time                                                       128  thrpt    5        10.000                    ms
[info] ArrayOfBooleansBenchmark.readDslJsonJava                                                          128  thrpt    5   1551948.624 ±   25686.374   ops/s
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate                                           128  thrpt    5       489.026 ±       8.272  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                      128  thrpt    5       496.000 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.508 ±       4.375  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0.518 ±       4.460    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                              128  thrpt    5       371.588 ±    1330.735  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5       377.953 ±    1353.993    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count                                                128  thrpt    5         3.000                counts
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time                                                 128  thrpt    5         6.000                    ms
[info] ArrayOfBooleansBenchmark.readJacksonScala                                                         128  thrpt    5    678099.366 ±    6474.734   ops/s
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                          128  thrpt    5       561.694 ±       5.442  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5      1304.001 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.046 ±       0.280  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         0.106 ±       0.650    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5       539.375 ±    1161.047  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5      1253.401 ±    2698.069    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.count                                               128  thrpt    5         4.000                counts
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.time                                                128  thrpt    5         3.000                    ms
[info] ArrayOfBooleansBenchmark.readJsoniterScala                                                        128  thrpt    5   1789157.372 ±   93020.875   ops/s
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       345.502 ±      17.943  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5       304.000 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5         0.004 ±       0.037  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         0.004 ±       0.033    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5       306.868 ±    1078.685  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5       268.693 ±     944.495    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count                                              128  thrpt    5         3.000                counts
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time                                               128  thrpt    5         7.000                    ms
[info] ArrayOfBooleansBenchmark.readPlayJson                                                             128  thrpt    5    103849.075 ±    2799.554   ops/s
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                              128  thrpt    5      3772.049 ±     100.199  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                         128  thrpt    5     57176.004 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.083 ±       0.057  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         1.263 ±       0.885    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5      3673.183 ±    1433.352  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5     55657.795 ±   20677.681    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.count                                                   128  thrpt    5        27.000                counts
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.time                                                    128  thrpt    5        20.000                    ms
[info] ArrayOfBooleansBenchmark.readUPickle                                                              128  thrpt    5    627923.717 ±   33887.513   ops/s
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.alloc.rate                                               128  thrpt    5      1640.188 ±      88.407  MB/sec
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm                                          128  thrpt    5      4112.001 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.067 ±       0.067  MB/sec
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         0.167 ±       0.170    B/op
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                  128  thrpt    5      1614.673 ±    1418.458  MB/sec
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5      4049.968 ±    3592.953    B/op
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.count                                                    128  thrpt    5        12.000                counts
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.time                                                     128  thrpt    5         9.000                    ms
[info] ArrayOfBooleansBenchmark.writeCirce                                                               128  thrpt    5    385096.149 ±    4063.661   ops/s
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                128  thrpt    5       600.785 ±       6.258  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                           128  thrpt    5      2456.001 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0.721 ±       6.204  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         2.943 ±      25.336    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5       640.357 ±     277.685  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5      2618.316 ±    1154.520    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.count                                                     128  thrpt    5         5.000                counts
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.time                                                      128  thrpt    5         8.000                    ms
[info] ArrayOfBooleansBenchmark.writeDslJsonJava                                                         128  thrpt    5   1166463.115 ±   21899.463   ops/s
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate                                          128  thrpt    5       539.455 ±      10.050  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                     128  thrpt    5       728.000 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.507 ±       4.354  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         0.683 ±       5.863    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                             128  thrpt    5       506.005 ±    1121.948  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5       683.420 ±    1512.702    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count                                               128  thrpt    5         4.000                counts
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time                                                128  thrpt    5         6.000                    ms
[info] ArrayOfBooleansBenchmark.writeJacksonScala                                                        128  thrpt    5   1000555.164 ±   58454.271   ops/s
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                         128  thrpt    5       706.778 ±      40.945  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5      1112.000 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5         0.021 ±       0.113  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         0.033 ±       0.179    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5       674.931 ±       3.105  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5      1062.077 ±      58.281    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count                                              128  thrpt    5         5.000                counts
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time                                               128  thrpt    5         4.000                    ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScala                                                       128  thrpt    5   1638381.296 ±   73017.251   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       757.720 ±      33.571  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5       728.000 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.029 ±       0.091  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         0.028 ±       0.086    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5       672.251 ±       4.929  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5       645.955 ±      30.364    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count                                             128  thrpt    5         5.000                counts
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time                                              128  thrpt    5         5.000                    ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc                                               128  thrpt    5   1875162.283 ±   10546.965   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                           128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                     128  thrpt    5           ≈ 0                counts
[info] ArrayOfBooleansBenchmark.writePlayJson                                                            128  thrpt    5    516189.585 ±    9314.892   ops/s
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                             128  thrpt    5       608.674 ±      10.851  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                        128  thrpt    5      1856.001 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.821 ±       6.937  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         2.502 ±      21.131    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5       639.701 ±     276.061  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5      1950.585 ±     840.601    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.count                                                  128  thrpt    5         5.000                counts
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.time                                                   128  thrpt    5         8.000                    ms
[info] ArrayOfBooleansBenchmark.writeUPickle                                                             128  thrpt    5    187908.191 ±    3075.925   ops/s
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.alloc.rate                                              128  thrpt    5       479.385 ±       7.923  MB/sec
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm                                         128  thrpt    5      4016.002 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.672 ±       5.688  MB/sec
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         5.622 ±      47.611    B/op
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                 128  thrpt    5       474.456 ±    1068.513  MB/sec
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5      3967.230 ±    8934.472    B/op
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.count                                                   128  thrpt    5         4.000                counts
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.time                                                    128  thrpt    5         8.000                    ms
[info] ArrayOfBytesBenchmark.readCirce                                                                   128  thrpt    5    141429.072 ±    4999.578   ops/s
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      1699.724 ±      59.730  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     18920.003 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5         0.062 ±       0.170  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5         0.696 ±       1.884    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5      1749.488 ±    1412.032  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5     19479.600 ±   15825.461    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.count                                                         128  thrpt    5        13.000                counts
[info] ArrayOfBytesBenchmark.readCirce:·gc.time                                                          128  thrpt    5        10.000                    ms
[info] ArrayOfBytesBenchmark.readJacksonScala                                                            128  thrpt    5    405978.338 ±    2754.980   ops/s
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5       336.264 ±       2.268  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5      1304.001 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.025 ±       0.215  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         0.097 ±       0.834    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5       339.273 ±    1219.542  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5      1316.489 ±    4731.352    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         3.000                counts
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5         4.000                    ms
[info] ArrayOfBytesBenchmark.readJsoniterScala                                                           128  thrpt    5   1087853.058 ±   43393.064   ops/s
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       210.072 ±       8.393  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5       304.000 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.007 ±       0.056  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0.010 ±       0.083    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5       204.577 ±    1078.676  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5       298.582 ±    1574.462    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         2.000                counts
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5         4.000                    ms
[info] ArrayOfBytesBenchmark.readPlayJson                                                                128  thrpt    5     88399.393 ±    1549.668   ops/s
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      3763.179 ±      66.364  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     67016.005 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0.071 ±       0.108  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         1.260 ±       1.909    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5      3811.491 ±    1432.033  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5     67900.424 ±   26595.961    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        28.000                counts
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        25.000                    ms
[info] ArrayOfBytesBenchmark.readUPickle                                                                 128  thrpt    5    245408.050 ±   12690.564   ops/s
[info] ArrayOfBytesBenchmark.readUPickle:·gc.alloc.rate                                                  128  thrpt    5      1119.902 ±      57.891  MB/sec
[info] ArrayOfBytesBenchmark.readUPickle:·gc.alloc.rate.norm                                             128  thrpt    5      7184.002 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                         128  thrpt    5         0.067 ±       0.143  MB/sec
[info] ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5         0.425 ±       0.915    B/op
[info] ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                     128  thrpt    5      1208.823 ±    1157.238  MB/sec
[info] ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5      7737.106 ±    7189.734    B/op
[info] ArrayOfBytesBenchmark.readUPickle:·gc.count                                                       128  thrpt    5         9.000                counts
[info] ArrayOfBytesBenchmark.readUPickle:·gc.time                                                        128  thrpt    5         8.000                    ms
[info] ArrayOfBytesBenchmark.writeCirce                                                                  128  thrpt    5    268536.248 ±    8395.071   ops/s
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5      1188.589 ±      37.045  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5      6968.002 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5         0.033 ±       0.166  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5         0.195 ±       0.978    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5      1207.849 ±    1154.333  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5      7085.692 ±    6828.321    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.count                                                        128  thrpt    5         9.000                counts
[info] ArrayOfBytesBenchmark.writeCirce:·gc.time                                                         128  thrpt    5         7.000                    ms
[info] ArrayOfBytesBenchmark.writeJacksonScala                                                           128  thrpt    5   1442504.683 ±   96040.127   ops/s
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       740.238 ±      49.383  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5       808.000 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.017 ±       0.067  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0.018 ±       0.073    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5       674.770 ±       2.899  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5       736.722 ±      50.894    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         5.000                counts
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5         4.000                    ms
[info] ArrayOfBytesBenchmark.writeJsoniterScala                                                          128  thrpt    5   1996561.913 ±   95234.795   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       537.746 ±      25.663  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5       424.000 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.663 ±       5.666  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0.514 ±       4.386    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5       506.629 ±    1123.695  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5       398.759 ±     885.874    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         4.000                counts
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5         8.000                    ms
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5   2008268.540 ±   14389.539   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ArrayOfBytesBenchmark.writePlayJson                                                               128  thrpt    5     45661.501 ±    2151.526   ops/s
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5      2013.319 ±      94.792  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     69408.009 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0.054 ±       0.044  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         1.866 ±       1.532    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5      2017.593 ±      22.989  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5     69561.955 ±    2631.908    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5        15.000                counts
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5        12.000                    ms
[info] ArrayOfBytesBenchmark.writeUPickle                                                                128  thrpt    5    148129.623 ±    2369.247   ops/s
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.alloc.rate                                                 128  thrpt    5       788.953 ±      12.640  MB/sec
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.alloc.rate.norm                                            128  thrpt    5      8384.003 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0.029 ±       0.176  MB/sec
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         0.309 ±       1.865    B/op
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                    128  thrpt    5       806.553 ±    1154.548  MB/sec
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5      8570.005 ±   12247.717    B/op
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.count                                                      128  thrpt    5         6.000                counts
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.time                                                       128  thrpt    5         4.000                    ms
[info] ArrayOfCharsBenchmark.readCirce                                                                   128  thrpt    5    225737.854 ±   11848.471   ops/s
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      2322.939 ±     121.620  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     16200.002 ±       0.001    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5         0.046 ±       0.104  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5         0.318 ±       0.726    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5      2296.064 ±    1431.820  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5     16014.111 ±    9988.537    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.count                                                         128  thrpt    5        17.000                counts
[info] ArrayOfCharsBenchmark.readCirce:·gc.time                                                          128  thrpt    5        12.000                    ms
[info] ArrayOfCharsBenchmark.readJacksonScala                                                            128  thrpt    5    356795.867 ±    1407.188   ops/s
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5      1718.843 ±       6.807  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5      7584.001 ±       0.001    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.033 ±       0.122  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         0.147 ±       0.536    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5      1627.142 ±    1430.073  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5      7180.155 ±    6327.283    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5        12.000                counts
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5        10.000                    ms
[info] ArrayOfCharsBenchmark.readJsoniterScala                                                           128  thrpt    5   1272724.474 ±    6917.980   ops/s
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       439.814 ±       2.427  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5       544.000 ±       0.001    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.659 ±       5.649  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0.817 ±       6.999    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5       474.462 ±    1068.534  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5       587.130 ±    1322.533    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         4.000                counts
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5         8.000                    ms
[info] ArrayOfCharsBenchmark.readPlayJson                                                                128  thrpt    5     84066.551 ±    4228.489   ops/s
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      3532.357 ±     177.805  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     66144.005 ±       0.001    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0.079 ±       0.067  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         1.484 ±       1.332    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5      3537.387 ±    1168.967  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5     66213.222 ±   19934.416    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        26.000                counts
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        22.000                    ms
[info] ArrayOfCharsBenchmark.readUPickle                                                                 128  thrpt    5    234406.141 ±   13786.370   ops/s
[info] ArrayOfCharsBenchmark.readUPickle:·gc.alloc.rate                                                  128  thrpt    5      2482.573 ±     146.760  MB/sec
[info] ArrayOfCharsBenchmark.readUPickle:·gc.alloc.rate.norm                                             128  thrpt    5     16672.002 ±       0.001    B/op
[info] ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                         128  thrpt    5         0.062 ±       0.113  MB/sec
[info] ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5         0.420 ±       0.769    B/op
[info] ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                     128  thrpt    5      2433.408 ±    1418.495  MB/sec
[info] ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5     16354.025 ±    9851.303    B/op
[info] ArrayOfCharsBenchmark.readUPickle:·gc.count                                                       128  thrpt    5        18.000                counts
[info] ArrayOfCharsBenchmark.readUPickle:·gc.time                                                        128  thrpt    5        14.000                    ms
[info] ArrayOfCharsBenchmark.writeCirce                                                                  128  thrpt    5    225511.269 ±    2306.709   ops/s
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5      1913.878 ±      20.023  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5     13360.002 ±       0.001    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5         0.042 ±       0.057  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5         0.291 ±       0.396    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5      2020.027 ±      21.888  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5     14101.049 ±     190.686    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.count                                                        128  thrpt    5        15.000                counts
[info] ArrayOfCharsBenchmark.writeCirce:·gc.time                                                         128  thrpt    5        10.000                    ms
[info] ArrayOfCharsBenchmark.writeJacksonScala                                                           128  thrpt    5   1157745.036 ±    7555.922   ops/s
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       676.595 ±       4.554  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5       920.000 ±       0.001    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.042 ±       0.150  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0.057 ±       0.204    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5       674.525 ±       3.241  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5       917.190 ±      10.289    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         5.000                counts
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5         4.000                    ms
[info] ArrayOfCharsBenchmark.writeJsoniterScala                                                          128  thrpt    5   2437711.381 ±   33567.833   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       830.058 ±      11.479  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5       536.000 ±       0.001    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.025 ±       0.088  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0.016 ±       0.056    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5       806.764 ±    1159.397  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5       521.172 ±     752.749    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         6.000                counts
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5         6.000                    ms
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5   2770398.705 ±   18696.516   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ArrayOfCharsBenchmark.writePlayJson                                                               128  thrpt    5    308168.213 ±   10886.373   ops/s
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5      2521.363 ±      88.834  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     12880.001 ±       0.001    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0.075 ±       0.146  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         0.382 ±       0.737    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5      2581.102 ±    1173.636  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5     13192.766 ±    6237.520    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5        19.000                counts
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5        16.000                    ms
[info] ArrayOfCharsBenchmark.writeUPickle                                                                128  thrpt    5     80853.033 ±     547.778   ops/s
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.alloc.rate                                                 128  thrpt    5       599.896 ±       4.238  MB/sec
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.alloc.rate.norm                                            128  thrpt    5     11680.005 ±       0.001    B/op
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0.682 ±       5.670  MB/sec
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5        13.255 ±     110.216    B/op
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                    128  thrpt    5       640.898 ±     278.878  MB/sec
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5     12477.305 ±    5392.675    B/op
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.count                                                      128  thrpt    5         5.000                counts
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.time                                                       128  thrpt    5         8.000                    ms
[info] ArrayOfDoublesBenchmark.readCirce                                                                 128  thrpt    5     27017.181 ±     777.800   ops/s
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      1547.148 ±      44.049  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5     90144.015 ±       0.002    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5         0.021 ±       0.057  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5         1.216 ±       3.325    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5      1479.079 ±    1153.804  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5     86233.960 ±   68835.882    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.count                                                       128  thrpt    5        11.000                counts
[info] ArrayOfDoublesBenchmark.readCirce:·gc.time                                                        128  thrpt    5         9.000                    ms
[info] ArrayOfDoublesBenchmark.readDslJsonJava                                                           128  thrpt    5     99934.346 ±     433.132   ops/s
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate                                            128  thrpt    5       899.885 ±       3.725  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                       128  thrpt    5     14176.004 ±       0.001    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.029 ±       0.122  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0.459 ±       1.917    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                               128  thrpt    5       940.918 ±    1416.005  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5     14825.184 ±   22345.655    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count                                                 128  thrpt    5         7.000                counts
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time                                                  128  thrpt    5         6.000                    ms
[info] ArrayOfDoublesBenchmark.readJacksonScala                                                          128  thrpt    5     61283.531 ±    3450.634   ops/s
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5      1012.588 ±      56.993  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5     26008.007 ±       0.001    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.017 ±       0.088  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0.428 ±       2.259    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5       946.075 ±    1424.847  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5     24314.405 ±   36796.367    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         7.000                counts
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5         6.000                    ms
[info] ArrayOfDoublesBenchmark.readJsoniterScala                                                         128  thrpt    5    133140.772 ±    2104.437   ops/s
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       857.886 ±      13.490  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5     10144.003 ±       0.001    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.025 ±       0.132  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         0.295 ±       1.556    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5       940.703 ±    1415.282  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5     11119.555 ±   16681.473    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5         7.000                counts
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5         6.000                    ms
[info] ArrayOfDoublesBenchmark.readPlayJson                                                              128  thrpt    5     35971.890 ±     724.403   ops/s
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      1879.583 ±      37.084  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     82248.012 ±       0.002    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.067 ±       0.119  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         2.910 ±       5.171    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5      1899.002 ±    1164.402  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5     83055.660 ±   49923.194    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        14.000                counts
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        11.000                    ms
[info] ArrayOfDoublesBenchmark.readUPickle                                                               128  thrpt    5     66663.815 ±    6033.154   ops/s
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.alloc.rate                                                128  thrpt    5      1198.973 ±     108.604  MB/sec
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.alloc.rate.norm                                           128  thrpt    5     28312.006 ±       0.001    B/op
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0.033 ±       0.146  MB/sec
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         0.791 ±       3.455    B/op
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                   128  thrpt    5      1208.964 ±    1157.273  MB/sec
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5     28621.554 ±   28243.901    B/op
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.count                                                     128  thrpt    5         9.000                counts
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.time                                                      128  thrpt    5         7.000                    ms
[info] ArrayOfDoublesBenchmark.writeCirce                                                                128  thrpt    5     38306.252 ±    1029.980   ops/s
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5       503.228 ±      13.525  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5     20680.011 ±       0.002    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0.728 ±       6.099  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5        30.277 ±     253.680    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5       474.181 ±    1067.595  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5     19504.056 ±   43979.215    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.count                                                      128  thrpt    5         4.000                counts
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.time                                                       128  thrpt    5         9.000                    ms
[info] ArrayOfDoublesBenchmark.writeJacksonScala                                                         128  thrpt    5     41709.431 ±     483.690   ops/s
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5       376.666 ±       4.513  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     14216.010 ±       0.001    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.012 ±       0.108  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         0.473 ±       4.076    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5       339.285 ±    1219.585  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5     12824.770 ±   46136.777    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         3.000                counts
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5         4.000                    ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScala                                                        128  thrpt    5     44539.117 ±    5102.995   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       391.343 ±      44.669  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5     13832.009 ±       0.002    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5         0.671 ±       5.775  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5        23.463 ±     201.757    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5       441.782 ±     989.105  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5     15665.926 ±   34923.296    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         4.000                counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5        10.000                    ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5     45651.542 ±     986.882   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5       348.928 ±       7.425  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5     12032.009 ±       0.001    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                        128  thrpt    5         0.009 ±       0.066  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5         0.313 ±       2.286    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                    128  thrpt    5       306.866 ±    1078.678  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5     10615.326 ±   37315.155    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5         3.000                counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                       128  thrpt    5         7.000                    ms
[info] ArrayOfDoublesBenchmark.writeUPickle                                                              128  thrpt    5     33296.324 ±     200.880   ops/s
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.alloc.rate                                               128  thrpt    5       497.437 ±       3.172  MB/sec
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.alloc.rate.norm                                          128  thrpt    5     23520.013 ±       0.002    B/op
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.684 ±       5.759  MB/sec
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5        32.368 ±     272.379    B/op
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                  128  thrpt    5       474.382 ±    1068.349  MB/sec
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5     22438.332 ±   50528.317    B/op
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.count                                                    128  thrpt    5         4.000                counts
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.time                                                     128  thrpt    5         8.000                    ms
[info] ArrayOfDurationsBenchmark.readCirce                                                               128  thrpt    5     19842.858 ±     291.312   ops/s
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5       744.326 ±      10.889  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5     59039.857 ±       1.411    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0.643 ±       5.450  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5        51.010 ±     432.113    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5       807.779 ±    1161.516  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5     64042.471 ±   91533.652    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.count                                                     128  thrpt    5         6.000                counts
[info] ArrayOfDurationsBenchmark.readCirce:·gc.time                                                      128  thrpt    5         6.000                    ms
[info] ArrayOfDurationsBenchmark.readJacksonScala                                                        128  thrpt    5     19593.475 ±    1157.727   ops/s
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5       555.816 ±      33.126  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5     44654.952 ±      54.157    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5         0.021 ±       0.139  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         1.683 ±      11.284    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5       539.288 ±    1160.859  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5     43490.684 ±   93653.022    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5         4.000                counts
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5         4.000                    ms
[info] ArrayOfDurationsBenchmark.readJsoniterScala                                                       128  thrpt    5     81140.591 ±    1167.980   ops/s
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       211.110 ±       3.050  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      4096.005 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         0.081 ±       0.697    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5       204.564 ±    1078.608  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5      3981.787 ±   20994.816    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5         2.000                counts
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5         4.000                    ms
[info] ArrayOfDurationsBenchmark.readPlayJson                                                            128  thrpt    5     15912.413 ±     368.725   ops/s
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      1031.517 ±      24.081  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5    102048.027 ±       0.015    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         0.823 ±       4.338    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5       946.368 ±    1426.039  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5     93597.186 ±  140672.415    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5         7.000                counts
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5         6.000                    ms
[info] ArrayOfDurationsBenchmark.readUPickle                                                             128  thrpt    5     16383.734 ±     784.208   ops/s
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.alloc.rate                                              128  thrpt    5       564.743 ±      27.354  MB/sec
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.alloc.rate.norm                                         128  thrpt    5     54264.420 ±      45.012    B/op
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.553 ±       4.717  MB/sec
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5        53.159 ±     453.392    B/op
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                 128  thrpt    5       507.423 ±    1125.925  MB/sec
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5     48739.568 ±  108721.665    B/op
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.count                                                   128  thrpt    5         4.000                counts
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.time                                                    128  thrpt    5         7.000                    ms
[info] ArrayOfDurationsBenchmark.writeCirce                                                              128  thrpt    5     62222.696 ±    1642.844   ops/s
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5       942.675 ±      24.501  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5     23848.007 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.029 ±       0.108  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         0.738 ±       2.721    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5       940.758 ±    1415.778  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5     23780.636 ±   35542.299    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.count                                                    128  thrpt    5         7.000                counts
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.time                                                     128  thrpt    5         6.000                    ms
[info] ArrayOfDurationsBenchmark.writeJacksonScala                                                       128  thrpt    5     90102.142 ±    4803.157   ops/s
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1068.099 ±      57.287  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5     18664.005 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.029 ±       0.107  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         0.511 ±       1.889    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5      1081.370 ±    1424.375  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5     18852.396 ±   24338.839    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5         8.000                counts
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5         7.000                    ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScala                                                      128  thrpt    5    201452.003 ±   15311.853   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       319.408 ±      24.035  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      2496.002 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5       306.881 ±    1078.731  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5      2416.686 ±    8499.248    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         3.000                counts
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5         7.000                    ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5    249286.352 ±    1344.465   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5         0.002 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5           ≈ 0                counts
[info] ArrayOfDurationsBenchmark.writePlayJson                                                           128  thrpt    5     82526.316 ±     374.628   ops/s
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5      1125.601 ±       5.159  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5     21472.005 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.025 ±       0.104  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0.476 ±       1.992    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5      1071.385 ±    1411.710  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5     20440.520 ±   26963.580    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5         8.000                counts
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5         7.000                    ms
[info] ArrayOfDurationsBenchmark.writeUPickle                                                            128  thrpt    5     18279.777 ±     201.102   ops/s
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.alloc.rate                                             128  thrpt    5       351.798 ±       3.772  MB/sec
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.alloc.rate.norm                                        128  thrpt    5     30296.024 ±       0.012    B/op
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.002 ±       0.018  MB/sec
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         0.180 ±       1.547    B/op
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                128  thrpt    5       306.867 ±    1078.680  MB/sec
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5     26476.347 ±   93068.253    B/op
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.count                                                  128  thrpt    5         3.000                counts
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.time                                                   128  thrpt    5         7.000                    ms
[info] ArrayOfEnumsBenchmark.readCirce                                                                   128  thrpt    5     27911.462 ±     302.910   ops/s
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5       580.440 ±       6.279  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     32736.015 ±       0.002    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5         0.709 ±       6.053  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5        39.934 ±     340.998    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5       506.277 ±    1122.752  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5     28573.356 ±   63378.834    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.count                                                         128  thrpt    5         4.000                counts
[info] ArrayOfEnumsBenchmark.readCirce:·gc.time                                                          128  thrpt    5         8.000                    ms
[info] ArrayOfEnumsBenchmark.readJacksonScala                                                            128  thrpt    5     28838.746 ±     276.051   ops/s
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5       378.410 ±       3.637  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5     20656.015 ±       0.002    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.029 ±       0.251  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         1.594 ±      13.729    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5       339.299 ±    1219.620  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5     18541.854 ±   66676.004    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         3.000                counts
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5         3.000                    ms
[info] ArrayOfEnumsBenchmark.readJsoniterScala                                                           128  thrpt    5    124618.686 ±     950.502   ops/s
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       486.349 ±       3.823  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5      6144.003 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.678 ±       5.710  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         8.554 ±      72.055    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5       474.381 ±    1068.364  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5      5993.812 ±   13487.828    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         4.000                counts
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5         9.000                    ms
[info] ArrayOfEnumsBenchmark.readPlayJson                                                                128  thrpt    5     22604.129 ±     134.658   ops/s
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      1248.128 ±       7.424  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     86920.019 ±       0.008    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         0.870 ±       4.999    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5      1217.060 ±    1162.704  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5     84772.176 ±   81172.790    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5         9.000                counts
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5         9.000                    ms
[info] ArrayOfEnumsBenchmark.readUPickle                                                                 128  thrpt    5     27180.700 ±     309.293   ops/s
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.alloc.rate                                                  128  thrpt    5       518.679 ±       5.901  MB/sec
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.alloc.rate.norm                                             128  thrpt    5     30040.015 ±       0.002    B/op
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                         128  thrpt    5         0.690 ±       5.853  MB/sec
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5        40.041 ±     339.606    B/op
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                     128  thrpt    5       506.525 ±    1123.421  MB/sec
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5     29353.451 ±   65046.258    B/op
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.count                                                       128  thrpt    5         4.000                counts
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.time                                                        128  thrpt    5         7.000                    ms
[info] ArrayOfEnumsBenchmark.writeCirce                                                                  128  thrpt    5    180018.843 ±    2472.115   ops/s
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5       625.798 ±       8.584  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5      5472.002 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5         0.718 ±       6.049  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5         6.273 ±      52.839    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5       538.430 ±    1159.017  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5      4702.054 ±   10121.599    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.count                                                        128  thrpt    5         4.000                counts
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.time                                                         128  thrpt    5         5.000                    ms
[info] ArrayOfEnumsBenchmark.writeJacksonScala                                                           128  thrpt    5    281933.175 ±    3734.716   ops/s
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       285.113 ±       3.809  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5      1592.001 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0.023 ±       0.201    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5       306.850 ±    1078.622  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5      1716.855 ±    6035.026    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         3.000                counts
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5         5.000                    ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScala                                                          128  thrpt    5    502113.577 ±   19578.281   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       385.324 ±      14.748  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      1208.001 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.671 ±       5.747  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         2.125 ±      18.197    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5       441.836 ±     989.355  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5      1390.854 ±    3122.295    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         4.000                counts
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5        10.000                    ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5    524575.806 ±    1767.869   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ArrayOfEnumsBenchmark.writePlayJson                                                               128  thrpt    5    272034.594 ±    2265.222   ops/s
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5       752.039 ±       5.845  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5      4352.002 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0.017 ±       0.088  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         0.096 ±       0.508    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5       809.505 ±    1162.787  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5      4686.088 ±    6758.517    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5         6.000                counts
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5         6.000                    ms
[info] ArrayOfEnumsBenchmark.writeUPickle                                                                128  thrpt    5     42662.058 ±    2684.323   ops/s
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.alloc.rate                                                 128  thrpt    5       197.737 ±      12.500  MB/sec
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.alloc.rate.norm                                            128  thrpt    5      7296.010 ±       0.002    B/op
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0.002 ±       0.011  MB/sec
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         0.067 ±       0.388    B/op
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                    128  thrpt    5       204.568 ±    1078.628  MB/sec
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5      7625.765 ±   40216.906    B/op
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.count                                                      128  thrpt    5         2.000                counts
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.time                                                       128  thrpt    5         5.000                    ms
[info] ArrayOfFloatsBenchmark.readCirce                                                                  128  thrpt    5     37948.779 ±    1455.223   ops/s
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate                                                   128  thrpt    5      1692.220 ±      64.711  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm                                              128  thrpt    5     70200.011 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5         0.054 ±       0.156  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5         2.238 ±       6.419    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5      1749.474 ±    1419.487  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5     72569.575 ±   58743.344    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.count                                                        128  thrpt    5        13.000                counts
[info] ArrayOfFloatsBenchmark.readCirce:·gc.time                                                         128  thrpt    5        11.000                    ms
[info] ArrayOfFloatsBenchmark.readDslJsonJava                                                            128  thrpt    5    303185.048 ±    8562.911   ops/s
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate                                             128  thrpt    5       314.306 ±       8.854  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                        128  thrpt    5      1632.001 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.001 ±       0.006  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         0.003 ±       0.029    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                128  thrpt    5       306.860 ±    1078.657  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5      1589.811 ±    5588.425    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count                                                  128  thrpt    5         3.000                counts
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time                                                   128  thrpt    5         7.000                    ms
[info] ArrayOfFloatsBenchmark.readJacksonScala                                                           128  thrpt    5    102581.123 ±    5194.777   ops/s
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate                                            128  thrpt    5      1131.238 ±      57.249  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5     17360.004 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.025 ±       0.132  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0.385 ±       2.028    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5      1082.050 ±    1427.950  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5     16640.734 ±   22336.236    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.count                                                 128  thrpt    5         8.000                counts
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.time                                                  128  thrpt    5         7.000                    ms
[info] ArrayOfFloatsBenchmark.readJsoniterScala                                                          128  thrpt    5    425831.786 ±   16446.129   ops/s
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       276.988 ±      10.735  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      1024.001 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.005 ±       0.027  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0.017 ±       0.099    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5       306.853 ±    1078.633  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5      1135.867 ±    3993.158    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count                                                128  thrpt    5         3.000                counts
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time                                                 128  thrpt    5         6.000                    ms
[info] ArrayOfFloatsBenchmark.readPlayJson                                                               128  thrpt    5     40849.589 ±    1543.794   ops/s
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate                                                128  thrpt    5      2180.093 ±      81.951  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     84016.010 ±       0.002    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0.067 ±       0.119  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         2.565 ±       4.546    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5      2172.489 ±    1177.305  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5     83821.220 ±   49109.212    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.count                                                     128  thrpt    5        16.000                counts
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.time                                                      128  thrpt    5        13.000                    ms
[info] ArrayOfFloatsBenchmark.readUPickle                                                                128  thrpt    5     79405.390 ±     540.121   ops/s
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.alloc.rate                                                 128  thrpt    5      1451.945 ±      10.087  MB/sec
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.alloc.rate.norm                                            128  thrpt    5     28784.005 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0.046 ±       0.132  MB/sec
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         0.907 ±       2.609    B/op
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                    128  thrpt    5      1344.184 ±       6.162  MB/sec
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5     26647.794 ±     276.065    B/op
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.count                                                      128  thrpt    5        10.000                counts
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.time                                                       128  thrpt    5         8.000                    ms
[info] ArrayOfFloatsBenchmark.writeCirce                                                                 128  thrpt    5     83022.600 ±     659.706   ops/s
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate                                                  128  thrpt    5       507.615 ±       4.233  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm                                             128  thrpt    5      9624.005 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5         0.731 ±       6.072  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5        13.850 ±     115.075    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5       474.204 ±    1067.698  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5      8992.054 ±   20251.764    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.count                                                       128  thrpt    5         4.000                counts
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.time                                                        128  thrpt    5         9.000                    ms
[info] ArrayOfFloatsBenchmark.writeDslJsonJava                                                           128  thrpt    5    114466.895 ±    1470.095   ops/s
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate                                            128  thrpt    5       350.199 ±       4.629  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                       128  thrpt    5      4816.004 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.505 ±       4.276  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         6.958 ±      58.913    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                               128  thrpt    5       441.518 ±     987.934  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5      6080.064 ±   13607.303    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count                                                 128  thrpt    5         4.000                counts
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time                                                  128  thrpt    5        10.000                    ms
[info] ArrayOfFloatsBenchmark.writeJacksonScala                                                          128  thrpt    5     98945.968 ±    1705.831   ops/s
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate                                           128  thrpt    5       326.849 ±       5.768  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5      5200.004 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0.066 ±       0.572    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5       204.586 ±    1078.725  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5      3254.850 ±   17161.969    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count                                                128  thrpt    5         2.000                counts
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time                                                 128  thrpt    5         3.000                    ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScala                                                         128  thrpt    5    115217.739 ±    2337.297   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       352.499 ±       7.240  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5      4816.004 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.007 ±       0.063  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         0.100 ±       0.860    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5       306.876 ±    1078.713  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5      4191.737 ±   14735.102    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count                                               128  thrpt    5         3.000                counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time                                                128  thrpt    5         8.000                    ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc                                                 128  thrpt    5    115674.373 ±    3606.935   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  128  thrpt    5       262.769 ±       8.253  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             128  thrpt    5      3576.004 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                         128  thrpt    5         0.001 ±       0.013  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5         0.020 ±       0.175    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                     128  thrpt    5       306.866 ±    1078.676  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5      4191.847 ±   14735.916    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       128  thrpt    5         3.000                counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                        128  thrpt    5         6.000                    ms
[info] ArrayOfInstantsBenchmark.readCirce                                                                128  thrpt    5      9980.976 ±     331.172   ops/s
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate                                                 128  thrpt    5      1641.349 ±      54.534  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm                                            128  thrpt    5    258850.662 ±      29.200    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0.046 ±       0.088  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         7.206 ±      13.723    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5      1615.467 ±    1418.989  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5    254619.816 ±  220145.408    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.count                                                      128  thrpt    5        12.000                counts
[info] ArrayOfInstantsBenchmark.readCirce:·gc.time                                                       128  thrpt    5         9.000                    ms
[info] ArrayOfInstantsBenchmark.readJacksonScala                                                         128  thrpt    5     10040.385 ±     394.837   ops/s
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate                                          128  thrpt    5      1553.169 ±      60.831  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5    243501.247 ±      58.531    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.037 ±       0.164  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         5.831 ±      25.508    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5      1625.664 ±    1430.800  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5    254632.253 ±  218641.899    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.count                                               128  thrpt    5        12.000                counts
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.time                                                128  thrpt    5         9.000                    ms
[info] ArrayOfInstantsBenchmark.readJsoniterScala                                                        128  thrpt    5    188183.143 ±    6608.129   ops/s
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       489.619 ±      17.242  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      4096.002 ±       0.001    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5         0.555 ±       4.557  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         4.626 ±      37.970    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5       474.946 ±    1070.281  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5      3974.766 ±    8931.301    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count                                              128  thrpt    5         4.000                counts
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time                                               128  thrpt    5         8.000                    ms
[info] ArrayOfInstantsBenchmark.readPlayJson                                                             128  thrpt    5      6015.231 ±      80.853   ops/s
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate                                              128  thrpt    5      1597.618 ±      21.152  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm                                         128  thrpt    5    418040.071 ±       0.018    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.042 ±       0.278  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5        10.858 ±      72.414    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5      1625.631 ±    1424.745  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5    425426.455 ±  374048.124    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.count                                                   128  thrpt    5        12.000                counts
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.time                                                    128  thrpt    5        10.000                    ms
[info] ArrayOfInstantsBenchmark.readUPickle                                                              128  thrpt    5      9635.833 ±     324.388   ops/s
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.alloc.rate                                               128  thrpt    5      1549.641 ±      52.188  MB/sec
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.alloc.rate.norm                                          128  thrpt    5    253167.861 ±      44.209    B/op
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.037 ±       0.119  MB/sec
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         6.110 ±      19.272    B/op
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                  128  thrpt    5      1482.531 ±    1159.880  MB/sec
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5    242083.404 ±  185535.192    B/op
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.count                                                    128  thrpt    5        11.000                counts
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.time                                                     128  thrpt    5         9.000                    ms
[info] ArrayOfInstantsBenchmark.writeCirce                                                               128  thrpt    5     25864.196 ±    1147.402   ops/s
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate                                                128  thrpt    5      1340.557 ±      59.317  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm                                           128  thrpt    5     81592.016 ±       0.002    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0.042 ±       0.204  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         2.533 ±      12.412    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5      1209.680 ±    1158.854  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5     73564.297 ±   69714.244    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.count                                                     128  thrpt    5         9.000                counts
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.time                                                      128  thrpt    5         8.000                    ms
[info] ArrayOfInstantsBenchmark.writeJacksonScala                                                        128  thrpt    5     31277.367 ±    1518.528   ops/s
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate                                         128  thrpt    5      1528.705 ±      74.307  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5     76944.013 ±       0.002    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5         0.050 ±       0.091  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         2.526 ±       4.742    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5      1490.058 ±    1163.112  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5     75144.002 ±   62670.138    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count                                              128  thrpt    5        11.000                counts
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time                                               128  thrpt    5         9.000                    ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScala                                                       128  thrpt    5    356993.945 ±   26212.189   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       789.178 ±      57.916  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      3480.001 ±       0.001    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.025 ±       0.132  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         0.112 ±       0.602    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5       808.717 ±    1157.548  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5      3587.496 ±    5499.605    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count                                             128  thrpt    5         6.000                counts
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time                                              128  thrpt    5         4.000                    ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc                                               128  thrpt    5    404093.601 ±   35810.642   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                           128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                     128  thrpt    5           ≈ 0                counts
[info] ArrayOfInstantsBenchmark.writePlayJson                                                            128  thrpt    5     28730.345 ±    1158.599   ops/s
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate                                             128  thrpt    5      1511.464 ±      61.200  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     82824.014 ±       0.002    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.067 ±       0.143  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         3.662 ±       8.035    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5      1474.787 ±    1158.999  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5     80855.306 ±   64600.540    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.count                                                  128  thrpt    5        11.000                counts
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.time                                                   128  thrpt    5         9.000                    ms
[info] ArrayOfInstantsBenchmark.writeUPickle                                                             128  thrpt    5     10695.472 ±     112.708   ops/s
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.alloc.rate                                              128  thrpt    5       597.973 ±       6.421  MB/sec
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.alloc.rate.norm                                         128  thrpt    5     88016.041 ±       0.017    B/op
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.570 ±       4.683  MB/sec
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5        83.694 ±     687.700    B/op
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                 128  thrpt    5       642.207 ±     281.610  MB/sec
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5     94516.304 ±   41057.683    B/op
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.count                                                   128  thrpt    5         5.000                counts
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.time                                                    128  thrpt    5         7.000                    ms
[info] ArrayOfIntsBenchmark.readCirce                                                                    128  thrpt    5     96484.862 ±    4530.647   ops/s
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate                                                     128  thrpt    5      1571.498 ±      73.600  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                128  thrpt    5     25640.004 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5         0.042 ±       0.113  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5         0.680 ±       1.846    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5      1613.865 ±    1415.385  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5     26361.297 ±   23735.611    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.count                                                          128  thrpt    5        12.000                counts
[info] ArrayOfIntsBenchmark.readCirce:·gc.time                                                           128  thrpt    5        10.000                    ms
[info] ArrayOfIntsBenchmark.readDslJsonJava                                                              128  thrpt    5    486989.308 ±    7203.418   ops/s
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate                                               128  thrpt    5       504.914 ±       7.644  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                          128  thrpt    5      1632.001 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.513 ±       4.367  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         1.663 ±      14.146    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                  128  thrpt    5       506.033 ±    1122.076  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5      1637.903 ±    3630.420    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.count                                                    128  thrpt    5         4.000                counts
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.time                                                     128  thrpt    5         7.000                    ms
[info] ArrayOfIntsBenchmark.readJacksonScala                                                             128  thrpt    5    276465.137 ±    1926.858   ops/s
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                              128  thrpt    5       390.540 ±       2.688  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5      2224.001 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.033 ±       0.244  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         0.190 ±       1.395    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5       339.263 ±    1219.507  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5      1934.343 ±    6955.510    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.count                                                   128  thrpt    5         3.000                counts
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.time                                                    128  thrpt    5         4.000                    ms
[info] ArrayOfIntsBenchmark.readJsoniterScala                                                            128  thrpt    5    620900.646 ±   24662.855   ops/s
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       403.910 ±      15.998  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5      1024.001 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.668 ±       5.752  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         1.686 ±      14.516    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5       441.833 ±     989.289  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5      1123.358 ±    2507.703    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.count                                                  128  thrpt    5         4.000                counts
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.time                                                   128  thrpt    5         9.000                    ms
[info] ArrayOfIntsBenchmark.readPlayJson                                                                 128  thrpt    5     76505.675 ±    2236.018   ops/s
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                                  128  thrpt    5      3349.406 ±      97.871  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     68920.005 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5         0.062 ±       0.160  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5         1.287 ±       3.321    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5      3265.650 ±    1179.043  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5     67217.139 ±   25114.293    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.count                                                       128  thrpt    5        24.000                counts
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.time                                                        128  thrpt    5        22.000                    ms
[info] ArrayOfIntsBenchmark.readUPickle                                                                  128  thrpt    5    193058.792 ±   13498.130   ops/s
[info] ArrayOfIntsBenchmark.readUPickle:·gc.alloc.rate                                                   128  thrpt    5      1465.652 ±     102.723  MB/sec
[info] ArrayOfIntsBenchmark.readUPickle:·gc.alloc.rate.norm                                              128  thrpt    5     11952.002 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                          128  thrpt    5         0.054 ±       0.072  MB/sec
[info] ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5         0.440 ±       0.570    B/op
[info] ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                      128  thrpt    5      1479.265 ±    1167.045  MB/sec
[info] ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5     12058.994 ±    9333.789    B/op
[info] ArrayOfIntsBenchmark.readUPickle:·gc.count                                                        128  thrpt    5        11.000                counts
[info] ArrayOfIntsBenchmark.readUPickle:·gc.time                                                         128  thrpt    5         8.000                    ms
[info] ArrayOfIntsBenchmark.writeCirce                                                                   128  thrpt    5    241339.080 ±   10498.682   ops/s
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                    128  thrpt    5      1433.754 ±      61.775  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                               128  thrpt    5      9352.002 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5         0.029 ±       0.072  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5         0.191 ±       0.471    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5      1477.132 ±    1153.182  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5      9641.243 ±    7691.285    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.count                                                         128  thrpt    5        11.000                counts
[info] ArrayOfIntsBenchmark.writeCirce:·gc.time                                                          128  thrpt    5         9.000                    ms
[info] ArrayOfIntsBenchmark.writeDslJsonJava                                                             128  thrpt    5    961604.322 ±   65331.572   ops/s
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate                                              128  thrpt    5       522.897 ±      35.405  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                         128  thrpt    5       856.000 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.514 ±       4.428  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         0.858 ±       7.387    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                 128  thrpt    5       506.013 ±    1121.986  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5       831.208 ±    1838.124    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count                                                   128  thrpt    5         4.000                counts
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time                                                    128  thrpt    5         7.000                    ms
[info] ArrayOfIntsBenchmark.writeJacksonScala                                                            128  thrpt    5    810047.237 ±    8180.620   ops/s
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                             128  thrpt    5       638.040 ±       6.625  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5      1240.001 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.033 ±       0.166  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         0.065 ±       0.324    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5       674.498 ±       3.420  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5      1310.863 ±      15.709    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.count                                                  128  thrpt    5         5.000                counts
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.time                                                   128  thrpt    5         4.000                    ms
[info] ArrayOfIntsBenchmark.writeJsoniterScala                                                           128  thrpt    5   1080716.781 ±   23414.820   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       587.615 ±      12.761  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5       856.000 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.690 ±       5.607  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         1.004 ±       8.155    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5       640.869 ±     278.768  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5       933.140 ±     389.517    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count                                                 128  thrpt    5         5.000                counts
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time                                                  128  thrpt    5         7.000                    ms
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc                                                   128  thrpt    5   1089425.138 ±    3711.254   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                    128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                               128  thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                         128  thrpt    5           ≈ 0                counts
[info] ArrayOfIntsBenchmark.writePlayJson                                                                128  thrpt    5     33867.720 ±    1348.249   ops/s
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                                 128  thrpt    5      1831.363 ±      72.736  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     85128.012 ±       0.002    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0.058 ±       0.183  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         2.722 ±       8.586    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5      1746.475 ±    1412.647  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5     81262.046 ±   67287.063    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.count                                                      128  thrpt    5        13.000                counts
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.time                                                       128  thrpt    5         9.000                    ms
[info] ArrayOfIntsBenchmark.writeUPickle                                                                 128  thrpt    5    133887.727 ±    1088.766   ops/s
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.alloc.rate                                                  128  thrpt    5      1165.508 ±       9.735  MB/sec
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.alloc.rate.norm                                             128  thrpt    5     13704.003 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                         128  thrpt    5         0.050 ±       0.108  MB/sec
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5         0.587 ±       1.264    B/op
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                     128  thrpt    5      1208.923 ±    1156.642  MB/sec
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5     14214.788 ±   13603.804    B/op
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.count                                                       128  thrpt    5         9.000                counts
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.time                                                        128  thrpt    5         7.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readCirce                                                               128  thrpt    5    120179.601 ±    7764.724   ops/s
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5      1482.844 ±      95.375  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5     19424.003 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0.042 ±       0.098  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         0.548 ±       1.300    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5      1477.915 ±    1165.758  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5     19390.599 ±   16106.019    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.count                                                     128  thrpt    5        11.000                counts
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.time                                                      128  thrpt    5        10.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala                                                        128  thrpt    5    192505.797 ±    1253.791   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5      1023.347 ±       6.840  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5      8368.002 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5         0.021 ±       0.113  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         0.170 ±       0.928    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5       946.112 ±    1425.602  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5      7736.650 ±   11660.099    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5         7.000                counts
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5         5.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala                                                       128  thrpt    5    273812.536 ±    3122.743   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       712.396 ±       8.359  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      4096.002 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.688 ±       5.610  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         3.969 ±      32.386    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5       807.351 ±    1151.997  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5      4641.384 ±    6612.017    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5         6.000                counts
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5         7.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readPlayJson                                                            128  thrpt    5     71149.131 ±     734.235   ops/s
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      3003.191 ±      32.475  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     66448.006 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.092 ±       0.091  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         2.026 ±       2.021    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5      2991.013 ±    1441.217  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5     66189.408 ±   32313.140    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        22.000                counts
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5        17.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readUPickle                                                             128  thrpt    5    146290.062 ±    8457.114   ops/s
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.alloc.rate                                              128  thrpt    5      1649.686 ±      95.040  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.alloc.rate.norm                                         128  thrpt    5     17752.003 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.050 ±       0.091  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         0.535 ±       0.954    B/op
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                 128  thrpt    5      1614.556 ±    1415.060  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5     17373.291 ±   15182.261    B/op
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.count                                                   128  thrpt    5        12.000                counts
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.time                                                    128  thrpt    5        10.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeCirce                                                              128  thrpt    5    174922.553 ±   12128.860   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5       608.058 ±      41.784  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5      5472.002 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.725 ±       6.105  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         6.730 ±      56.754    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5       640.440 ±     277.801  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5      5766.941 ±    2608.887    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count                                                    128  thrpt    5         5.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time                                                     128  thrpt    5         9.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala                                                       128  thrpt    5    548147.788 ±    3479.998   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5       554.297 ±       3.482  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5      1592.001 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.050 ±       0.343  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         0.144 ±       0.987    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5       539.250 ±    1160.779  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5      1548.741 ±    3333.804    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5         4.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5         3.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala                                                      128  thrpt    5    489008.240 ±    5178.471   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       375.231 ±       4.089  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      1208.001 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5         0.667 ±       5.700  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         2.152 ±      18.377    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5       441.797 ±     989.134  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5      1423.594 ±    3188.022    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         4.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5         9.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5    535780.894 ±    1263.104   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5           ≈ 0                counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson                                                           128  thrpt    5    299553.504 ±   11333.375   ops/s
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5       825.050 ±      31.197  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5      4336.001 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.029 ±       0.122  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0.152 ±       0.634    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5       810.260 ±    1165.631  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5      4254.512 ±    6048.663    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5         6.000                counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5         4.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeUPickle                                                            128  thrpt    5     43419.769 ±     818.952   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.alloc.rate                                             128  thrpt    5       201.237 ±       3.818  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.alloc.rate.norm                                        128  thrpt    5      7296.010 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.008 ±       0.065  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         0.277 ±       2.385    B/op
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                128  thrpt    5       204.559 ±    1078.583  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5      7452.166 ±   39293.223    B/op
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.count                                                  128  thrpt    5         2.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.time                                                   128  thrpt    5         5.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readCirce                                                          128  thrpt    5     10254.941 ±     314.250   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate                                           128  thrpt    5      1311.171 ±      40.054  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                      128  thrpt    5    201280.041 ±       0.007    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.033 ±       0.166  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         5.103 ±      25.397    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5      1344.518 ±       4.551  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5    206410.100 ±    6615.502    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count                                                128  thrpt    5        10.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time                                                 128  thrpt    5         9.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala                                                   128  thrpt    5     11287.020 ±     256.229   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                    128  thrpt    5      1337.929 ±      29.921  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5    186576.315 ±       1.894    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5         0.021 ±       0.057  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5         2.903 ±       7.876    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5      1353.986 ±       7.707  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5    188819.568 ±    3516.090    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count                                         128  thrpt    5        10.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time                                          128  thrpt    5         9.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala                                                  128  thrpt    5    201563.379 ±    4685.342   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                   128  thrpt    5      1311.112 ±      30.660  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5     10240.002 ±       0.001    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5         0.062 ±       0.227  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5         0.488 ±       1.773    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5      1347.205 ±       3.847  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5     10522.180 ±     226.136    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count                                        128  thrpt    5        10.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time                                         128  thrpt    5         9.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson                                                       128  thrpt    5      8775.363 ±     467.739   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                        128  thrpt    5      1633.812 ±      86.786  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                   128  thrpt    5    293096.067 ±       0.171    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.017 ±       0.104  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         2.983 ±      18.661    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5      1626.345 ±    1429.048  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5    291911.841 ±  259290.529    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count                                             128  thrpt    5        12.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time                                              128  thrpt    5        10.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readUPickle                                                        128  thrpt    5     10360.888 ±     114.834   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.alloc.rate                                         128  thrpt    5      1223.950 ±      13.104  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.alloc.rate.norm                                    128  thrpt    5    185962.154 ±      40.031    B/op
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                128  thrpt    5         0.025 ±       0.132  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         3.791 ±      19.987    B/op
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                            128  thrpt    5      1212.144 ±    1160.323  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5    184213.308 ±  176872.767    B/op
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.count                                              128  thrpt    5         9.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.time                                               128  thrpt    5         7.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeCirce                                                         128  thrpt    5     22767.089 ±     795.637   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate                                          128  thrpt    5       955.694 ±      33.103  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                     128  thrpt    5     66080.148 ±       1.115    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.021 ±       0.080  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         1.436 ±       5.539    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5       940.376 ±    1416.804  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5     65059.055 ±   98484.495    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count                                               128  thrpt    5         7.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time                                                128  thrpt    5         7.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala                                                  128  thrpt    5     25392.469 ±    1748.349   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                   128  thrpt    5       976.761 ±      66.957  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5     60552.016 ±       0.003    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5         0.025 ±       0.088  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5         1.545 ±       5.431    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5      1081.211 ±    1425.175  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5     66982.644 ±   87724.689    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count                                        128  thrpt    5         8.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time                                         128  thrpt    5         6.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala                                                 128  thrpt    5    736379.268 ±    5515.209   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                  128  thrpt    5      1328.435 ±      10.182  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5      2840.001 ±       0.001    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5         0.054 ±       0.134  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5         0.116 ±       0.286    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5      1347.489 ±       4.364  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5      2880.740 ±      17.186    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count                                       128  thrpt    5        10.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time                                        128  thrpt    5         8.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc                                         128  thrpt    5    833541.848 ±    5095.844   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     128  thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                               128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson                                                      128  thrpt    5     24698.459 ±     312.489   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                       128  thrpt    5      1042.008 ±      13.063  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                  128  thrpt    5     66416.017 ±       0.002    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5         0.037 ±       0.143  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         2.389 ±       9.132    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5      1071.101 ±    1412.734  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5     68240.900 ±   89678.897    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count                                            128  thrpt    5         8.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time                                             128  thrpt    5         7.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle                                                       128  thrpt    5     13525.318 ±      94.615   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.alloc.rate                                        128  thrpt    5       543.936 ±       3.917  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.alloc.rate.norm                                   128  thrpt    5     63312.033 ±       0.012    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.557 ±       4.598  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5        64.676 ±     533.528    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                           128  thrpt    5       507.412 ±    1125.916  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5     59066.261 ±  131052.246    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.count                                             128  thrpt    5         4.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.time                                              128  thrpt    5         7.000                    ms
[info] ArrayOfLocalDatesBenchmark.readCirce                                                              128  thrpt    5     30268.683 ±    1168.664   ops/s
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate                                               128  thrpt    5      1505.180 ±      58.619  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm                                          128  thrpt    5     78272.014 ±       0.002    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.025 ±       0.088  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         1.304 ±       4.584    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5      1480.645 ±    1161.918  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5     77051.428 ±   61957.435    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.count                                                    128  thrpt    5        11.000                counts
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.time                                                     128  thrpt    5         9.000                    ms
[info] ArrayOfLocalDatesBenchmark.readJacksonScala                                                       128  thrpt    5     32393.057 ±    1620.038   ops/s
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1373.233 ±      68.579  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5     66736.013 ±       0.002    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.029 ±       0.072  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         1.408 ±       3.463    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5      1353.652 ±       7.138  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5     65792.695 ±    3092.962    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count                                             128  thrpt    5        10.000                counts
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time                                              128  thrpt    5         8.000                    ms
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala                                                      128  thrpt    5    368706.218 ±   17419.802   ops/s
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       959.372 ±      45.397  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      4096.001 ±       0.001    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         0.036 ±       0.309    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5       942.874 ±    1420.545  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5      4026.463 ±    6074.233    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count                                            128  thrpt    5         7.000                counts
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time                                             128  thrpt    5         7.000                    ms
[info] ArrayOfLocalDatesBenchmark.readPlayJson                                                           128  thrpt    5     17646.977 ±     415.687   ops/s
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate                                            128  thrpt    5      1816.372 ±      42.771  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm                                       128  thrpt    5    162024.025 ±       0.010    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.029 ±       0.091  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         2.600 ±       8.168    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5      1898.825 ±    1166.499  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5    169363.576 ±  103664.379    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count                                                 128  thrpt    5        14.000                counts
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time                                                  128  thrpt    5        12.000                    ms
[info] ArrayOfLocalDatesBenchmark.readUPickle                                                            128  thrpt    5     27021.802 ±     241.504   ops/s
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.alloc.rate                                             128  thrpt    5      1396.662 ±      12.246  MB/sec
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.alloc.rate.norm                                        128  thrpt    5     81368.015 ±       0.002    B/op
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.017 ±       0.067  MB/sec
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         0.971 ±       3.913    B/op
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                128  thrpt    5      1347.284 ±       3.975  MB/sec
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5     78491.651 ±     738.018    B/op
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.count                                                  128  thrpt    5        10.000                counts
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.time                                                   128  thrpt    5         8.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeCirce                                                             128  thrpt    5     54473.366 ±     472.146   ops/s
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate                                              128  thrpt    5      1321.042 ±      11.694  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm                                         128  thrpt    5     38176.008 ±       0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.050 ±       0.091  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         1.443 ±       2.635    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5      1343.614 ±       5.298  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5     38828.474 ±     386.214    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.count                                                   128  thrpt    5        10.000                counts
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.time                                                    128  thrpt    5         7.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala                                                      128  thrpt    5    163955.834 ±    1665.360   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate                                       128  thrpt    5      1068.961 ±      10.684  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5     10264.003 ±       0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5         0.025 ±       0.132  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         0.240 ±       1.264    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5      1081.783 ±    1425.154  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5     10390.287 ±   13723.081    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count                                            128  thrpt    5         8.000                counts
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time                                             128  thrpt    5         6.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala                                                     128  thrpt    5   1016801.909 ±   39050.571   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate                                      128  thrpt    5      1090.309 ±      42.152  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      1688.000 ±       0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5         0.050 ±       0.209  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5         0.078 ±       0.326    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5      1077.525 ±    1419.718  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5      1670.201 ±    2221.914    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count                                           128  thrpt    5         8.000                counts
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time                                            128  thrpt    5         6.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc                                             128  thrpt    5    912730.933 ±    3893.013   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                              128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                         128  thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                   128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson                                                          128  thrpt    5     61421.765 ±    2742.230   ops/s
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate                                           128  thrpt    5      1428.995 ±      62.976  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     36624.007 ±       0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.037 ±       0.104  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0.957 ±       2.646    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5      1474.632 ±    1152.959  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5     37772.573 ±   28831.973    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count                                                128  thrpt    5        11.000                counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time                                                 128  thrpt    5        10.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeUPickle                                                           128  thrpt    5     22873.027 ±     577.971   ops/s
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.alloc.rate                                            128  thrpt    5       328.258 ±       8.334  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.alloc.rate.norm                                       128  thrpt    5     22592.018 ±       0.003    B/op
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                               128  thrpt    5       306.848 ±    1078.615  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5     21196.086 ±   74509.008    B/op
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.count                                                 128  thrpt    5         3.000                counts
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.time                                                  128  thrpt    5         7.000                    ms
[info] ArrayOfLocalTimesBenchmark.readCirce                                                              128  thrpt    5     16343.427 ±     930.938   ops/s
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate                                               128  thrpt    5      1458.425 ±      82.224  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm                                          128  thrpt    5    140480.033 ±       0.048    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.037 ±       0.088  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         3.590 ±       8.271    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5      1480.034 ±    1155.579  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5    142469.204 ±  108002.705    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.count                                                    128  thrpt    5        11.000                counts
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.time                                                     128  thrpt    5         9.000                    ms
[info] ArrayOfLocalTimesBenchmark.readJacksonScala                                                       128  thrpt    5     17205.694 ±     924.322   ops/s
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1389.827 ±      74.981  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5    127163.931 ±      63.067    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.029 ±       0.122  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         2.680 ±      11.340    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5      1353.727 ±       7.523  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5    123881.493 ±    7071.000    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count                                             128  thrpt    5        10.000                counts
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time                                              128  thrpt    5         9.000                    ms
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala                                                      128  thrpt    5    422109.799 ±    2297.654   ops/s
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                       128  thrpt    5      1098.371 ±       5.541  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      4096.001 ±       0.001    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5         0.029 ±       0.156  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         0.109 ±       0.582    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5      1077.563 ±    1419.702  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5      4017.946 ±    5288.652    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count                                            128  thrpt    5         8.000                counts
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time                                             128  thrpt    5         6.000                    ms
[info] ArrayOfLocalTimesBenchmark.readPlayJson                                                           128  thrpt    5     12581.158 ±     594.235   ops/s
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate                                            128  thrpt    5      1736.772 ±      81.800  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                       128  thrpt    5    217320.036 ±       0.019    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.025 ±       0.104  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         3.133 ±      13.034    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5      1626.798 ±    1430.079  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5    203750.083 ±  183068.008    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count                                                 128  thrpt    5        12.000                counts
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time                                                  128  thrpt    5        13.000                    ms
[info] ArrayOfLocalTimesBenchmark.readUPickle                                                            128  thrpt    5     16516.586 ±     885.580   ops/s
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.alloc.rate                                             128  thrpt    5      1379.652 ±      74.476  MB/sec
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.alloc.rate.norm                                        128  thrpt    5    131488.888 ±      47.000    B/op
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.017 ±       0.104  MB/sec
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         1.592 ±      10.032    B/op
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                128  thrpt    5      1347.391 ±       5.172  MB/sec
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5    128434.427 ±    6962.264    B/op
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.count                                                  128  thrpt    5        10.000                counts
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.time                                                   128  thrpt    5         7.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeCirce                                                             128  thrpt    5     39189.564 ±     329.115   ops/s
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate                                              128  thrpt    5      1218.021 ±       9.822  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                         128  thrpt    5     48928.011 ±       0.001    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.042 ±       0.160  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         1.670 ±       6.433    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5      1343.592 ±       4.192  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5     53972.428 ±     459.720    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.count                                                   128  thrpt    5        10.000                counts
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.time                                                    128  thrpt    5         9.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala                                                      128  thrpt    5     45391.073 ±     434.490   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                       128  thrpt    5      1203.842 ±      11.629  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5     41752.009 ±       0.001    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5         0.046 ±       0.154  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         1.588 ±       5.345    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5      1217.827 ±    1165.061  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5     42240.626 ±   40452.770    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count                                            128  thrpt    5         9.000                counts
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time                                             128  thrpt    5         7.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala                                                     128  thrpt    5   1206697.185 ±   38896.152   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                      128  thrpt    5      1097.619 ±      35.645  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      1432.000 ±       0.001    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5         0.042 ±       0.170  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5         0.055 ±       0.223    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5      1077.432 ±    1419.503  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5      1408.745 ±    1889.072    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count                                           128  thrpt    5         8.000                counts
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time                                            128  thrpt    5         6.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc                                             128  thrpt    5   1418058.982 ±    9891.581   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                              128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                         128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                   128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson                                                          128  thrpt    5     35377.439 ±     241.936   ops/s
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate                                           128  thrpt    5      1070.043 ±       7.410  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     47616.012 ±       0.002    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.025 ±       0.143  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         1.111 ±       6.377    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5      1071.198 ±    1410.711  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5     47645.940 ±   62509.546    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count                                                128  thrpt    5         8.000                counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time                                                 128  thrpt    5         6.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeUPickle                                                           128  thrpt    5     29302.003 ±    1886.684   ops/s
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.alloc.rate                                            128  thrpt    5       410.956 ±      26.465  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.alloc.rate.norm                                       128  thrpt    5     22080.014 ±       0.002    B/op
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.549 ±       4.725  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5        29.337 ±     252.604    B/op
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                               128  thrpt    5       339.725 ±    1221.843  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5     18356.496 ±   65845.337    B/op
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.count                                                 128  thrpt    5         3.000                counts
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.time                                                  128  thrpt    5         7.000                    ms
[info] ArrayOfLongsBenchmark.readCirce                                                                   128  thrpt    5     77936.539 ±    1019.235   ops/s
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      1335.496 ±      17.424  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     26976.005 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5         0.046 ±       0.132  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5         0.926 ±       2.662    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5      1209.053 ±    1154.943  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5     24432.521 ±   23464.561    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.count                                                         128  thrpt    5         9.000                counts
[info] ArrayOfLongsBenchmark.readCirce:·gc.time                                                          128  thrpt    5         8.000                    ms
[info] ArrayOfLongsBenchmark.readDslJsonJava                                                             128  thrpt    5    332224.499 ±   15549.973   ops/s
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate                                              128  thrpt    5       665.209 ±      31.041  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                         128  thrpt    5      3152.001 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.511 ±       4.311  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         2.466 ±      20.811    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                 128  thrpt    5       672.490 ±       2.895  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5      3186.892 ±     155.264    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.count                                                   128  thrpt    5         5.000                counts
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.time                                                    128  thrpt    5         6.000                    ms
[info] ArrayOfLongsBenchmark.readJacksonScala                                                            128  thrpt    5    259443.302 ±    9599.836   ops/s
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5       569.565 ±      21.025  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5      3456.002 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.025 ±       0.174  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         0.151 ±       1.047    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5       539.245 ±    1160.768  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5      3258.839 ±    7015.145    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         4.000                counts
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5         4.000                    ms
[info] ArrayOfLongsBenchmark.readJsoniterScala                                                           128  thrpt    5    466208.200 ±   18595.500   ops/s
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       587.597 ±      23.494  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5      1984.001 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.684 ±       5.626  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         2.336 ±      19.230    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5       640.931 ±     278.931  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5      2163.268 ±     909.479    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         5.000                counts
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5         7.000                    ms
[info] ArrayOfLongsBenchmark.readPlayJson                                                                128  thrpt    5     70798.406 ±     810.525   ops/s
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      3158.366 ±      35.920  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     70232.006 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0.117 ±       0.146  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         2.592 ±       3.247    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5      3128.123 ±    1432.916  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5     69576.085 ±   32490.107    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        23.000                counts
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        19.000                    ms
[info] ArrayOfLongsBenchmark.writeCirce                                                                  128  thrpt    5    129517.659 ±   10001.806   ops/s
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5       913.660 ±      70.764  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5     11104.003 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5         0.021 ±       0.139  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5         0.250 ±       1.655    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5       805.360 ±    1154.288  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5      9759.040 ±   13425.341    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.count                                                        128  thrpt    5         6.000                counts
[info] ArrayOfLongsBenchmark.writeCirce:·gc.time                                                         128  thrpt    5         6.000                    ms
[info] ArrayOfLongsBenchmark.writeDslJsonJava                                                            128  thrpt    5    684948.072 ±    7485.583   ops/s
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate                                             128  thrpt    5       536.059 ±       5.942  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                        128  thrpt    5      1232.001 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.509 ±       4.341  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         1.170 ±       9.970    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                128  thrpt    5       505.976 ±    1121.926  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5      1163.006 ±    2577.244    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count                                                  128  thrpt    5         4.000                counts
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time                                                   128  thrpt    5         7.000                    ms
[info] ArrayOfLongsBenchmark.writeJacksonScala                                                           128  thrpt    5    460277.700 ±    2839.767   ops/s
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       472.487 ±       2.847  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5      1616.001 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.025 ±       0.174  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0.086 ±       0.595    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5       506.671 ±    1123.856  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5      1733.228 ±    3846.454    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         4.000                counts
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5         5.000                    ms
[info] ArrayOfLongsBenchmark.writeJsoniterScala                                                          128  thrpt    5    581458.078 ±   38639.196   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       455.071 ±      30.144  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      1232.001 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.669 ±       5.659  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         1.791 ±      15.139    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5       474.446 ±    1068.543  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5      1289.021 ±    2905.268    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         4.000                counts
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5         8.000                    ms
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5    706252.375 ±    3548.548   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ArrayOfLongsBenchmark.writePlayJson                                                               128  thrpt    5     30181.454 ±    1064.725   ops/s
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5      1547.031 ±      53.922  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     80688.014 ±       0.003    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0.029 ±       0.091  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         1.515 ±       4.765    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5      1475.267 ±    1153.662  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5     76952.869 ±   60312.189    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5        11.000                counts
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5        10.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readCirce                                                         128  thrpt    5      7849.643 ±     452.331   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate                                          128  thrpt    5      1208.169 ±      69.439  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                     128  thrpt    5    242296.061 ±       0.071    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.033 ±       0.091  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         6.640 ±      18.160    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5      1209.831 ±    1156.677  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5    242107.891 ±  224922.569    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count                                               128  thrpt    5         9.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time                                                128  thrpt    5         9.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala                                                  128  thrpt    5      8176.057 ±     479.662   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                   128  thrpt    5      1178.246 ±      69.226  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5    226864.051 ±       0.008    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5         0.017 ±       0.104  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5         3.240 ±      20.345    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5      1081.918 ±    1425.980  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5    208589.487 ±  277678.246    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count                                        128  thrpt    5         8.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time                                         128  thrpt    5         6.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala                                                 128  thrpt    5    158482.999 ±    2081.927   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                  128  thrpt    5      1535.160 ±      20.736  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5     15248.003 ±       0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5         0.029 ±       0.072  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5         0.290 ±       0.714    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5      1618.223 ±    1425.145  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5     16072.316 ±   14137.365    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count                                       128  thrpt    5        12.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time                                        128  thrpt    5        10.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson                                                      128  thrpt    5      7876.837 ±      34.757   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                       128  thrpt    5      1432.392 ±       6.359  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                  128  thrpt    5    286280.405 ±       3.020    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5         0.033 ±       0.091  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         6.651 ±      18.245    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5      1489.572 ±    1162.893  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5    297686.590 ±  231753.453    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count                                            128  thrpt    5        11.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time                                             128  thrpt    5         9.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle                                                       128  thrpt    5      7683.625 ±     433.512   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.alloc.rate                                        128  thrpt    5      1154.561 ±      64.989  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.alloc.rate.norm                                   128  thrpt    5    236512.184 ±      44.021    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.017 ±       0.104  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         3.423 ±      21.659    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                           128  thrpt    5      1212.194 ±    1160.077  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5    248237.501 ±  236584.645    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.count                                             128  thrpt    5         9.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.time                                              128  thrpt    5         8.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce                                                        128  thrpt    5     18570.669 ±     307.455   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate                                         128  thrpt    5       842.486 ±      14.010  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                    128  thrpt    5     71413.887 ±      40.043    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                128  thrpt    5         0.021 ±       0.098  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         1.762 ±       8.284    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            128  thrpt    5       806.755 ±    1156.412  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5     68336.946 ±   97072.104    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count                                              128  thrpt    5         6.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time                                               128  thrpt    5         6.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala                                                 128  thrpt    5     20666.011 ±     926.242   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                  128  thrpt    5       875.529 ±      39.234  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             128  thrpt    5     66696.021 ±       0.008    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         128  thrpt    5         0.017 ±       0.067  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5         1.278 ±       5.196    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5       810.259 ±    1162.621  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5     61947.613 ±   92779.553    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count                                       128  thrpt    5         6.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time                                        128  thrpt    5         5.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala                                                128  thrpt    5    474443.497 ±    2955.404   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                 128  thrpt    5      1075.354 ±       6.499  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            128  thrpt    5      3568.001 ±       0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        128  thrpt    5         0.042 ±       0.188  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5         0.138 ±       0.623    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5      1077.520 ±    1420.119  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5      3575.698 ±    4718.191    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count                                      128  thrpt    5         8.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time                                       128  thrpt    5         6.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc                                        128  thrpt    5    484126.995 ±    1815.371   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                              128  thrpt    5           ≈ 0                counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson                                                     128  thrpt    5     19882.364 ±     214.955   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                      128  thrpt    5       916.095 ±      10.176  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                 128  thrpt    5     72538.745 ±      23.400    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             128  thrpt    5         0.033 ±       0.176  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5         2.643 ±      13.936    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         128  thrpt    5       938.199 ±    1415.856  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5     74345.757 ±  112902.137    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count                                           128  thrpt    5         7.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time                                            128  thrpt    5         7.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle                                                      128  thrpt    5     10431.174 ±      49.802   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.alloc.rate                                       128  thrpt    5       584.832 ±       2.876  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.alloc.rate.norm                                  128  thrpt    5     88264.682 ±       5.507    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                              128  thrpt    5         0.570 ±       4.681  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5        86.024 ±     707.093    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                          128  thrpt    5       642.135 ±     281.554  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5     96913.548 ±   42511.244    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.count                                            128  thrpt    5         5.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.time                                             128  thrpt    5         7.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readCirce                                                             128  thrpt    5     12835.048 ±     608.774   ops/s
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate                                              128  thrpt    5      1289.039 ±      61.039  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm                                         128  thrpt    5    158112.043 ±       0.079    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.025 ±       0.088  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         3.057 ±      10.684    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5      1342.909 ±       3.555  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5    164739.998 ±    7997.997    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.count                                                   128  thrpt    5        10.000                counts
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.time                                                    128  thrpt    5         9.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala                                                      128  thrpt    5     13599.746 ±     120.946   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate                                       128  thrpt    5      1244.732 ±      10.868  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5    144078.920 ±      51.889    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5         0.025 ±       0.067  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         2.891 ±       7.764    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5      1217.598 ±    1163.304  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5    140941.010 ±  134687.039    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count                                            128  thrpt    5         9.000                counts
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time                                             128  thrpt    5         7.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala                                                     128  thrpt    5    251699.477 ±    9515.661   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                      128  thrpt    5      1455.645 ±      55.327  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      9104.002 ±       0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5         0.029 ±       0.122  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5         0.181 ±       0.757    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5      1344.450 ±       6.902  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5      8409.303 ±     364.253    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count                                           128  thrpt    5        10.000                counts
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time                                            128  thrpt    5         8.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readPlayJson                                                          128  thrpt    5     12038.009 ±     674.903   ops/s
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate                                           128  thrpt    5      1506.738 ±      84.202  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                      128  thrpt    5    197016.036 ±       0.016    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.025 ±       0.088  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         3.271 ±      11.630    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5      1489.434 ±    1170.486  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5    194970.400 ±  158855.693    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count                                                128  thrpt    5        11.000                counts
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time                                                 128  thrpt    5         8.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readUPickle                                                           128  thrpt    5     13094.217 ±     573.818   ops/s
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.alloc.rate                                            128  thrpt    5      1235.506 ±      53.405  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.alloc.rate.norm                                       128  thrpt    5    148529.671 ±      40.140    B/op
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.037 ±       0.132  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         4.502 ±      15.826    B/op
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                               128  thrpt    5      1208.757 ±    1156.634  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5    145185.814 ±  137355.264    B/op
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.count                                                 128  thrpt    5         9.000                counts
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.time                                                  128  thrpt    5         7.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeCirce                                                            128  thrpt    5     29486.072 ±    1979.875   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate                                             128  thrpt    5      1017.328 ±      68.401  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                        128  thrpt    5     54312.014 ±       0.002    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.033 ±       0.122  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         1.767 ±       6.452    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5      1073.237 ±    1415.181  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5     57418.745 ±   77024.941    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count                                                  128  thrpt    5         8.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time                                                   128  thrpt    5         5.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala                                                     128  thrpt    5     79567.026 ±    3428.929   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                      128  thrpt    5      1421.606 ±      61.209  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5     28128.005 ±       0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5         0.037 ±       0.104  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5         0.740 ±       2.065    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5      1354.334 ±       7.169  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5     26799.412 ±    1055.276    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count                                           128  thrpt    5        10.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time                                            128  thrpt    5         8.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala                                                    128  thrpt    5    739258.331 ±   27915.551   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                     128  thrpt    5      1014.384 ±      37.635  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5      2160.001 ±       0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5         0.046 ±       0.174  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5         0.097 ±       0.369    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5      1074.441 ±    1416.232  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5      2284.828 ±    2976.549    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count                                          128  thrpt    5         8.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time                                           128  thrpt    5         6.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc                                            128  thrpt    5    806298.990 ±   19179.441   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  128  thrpt    5           ≈ 0                counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson                                                         128  thrpt    5     67078.164 ±    3318.936   ops/s
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate                                          128  thrpt    5      1315.344 ±      65.140  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                     128  thrpt    5     30872.006 ±       0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.029 ±       0.091  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         0.684 ±       2.135    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5      1352.914 ±       6.648  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5     31758.372 ±    1710.614    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count                                               128  thrpt    5        10.000                counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time                                                128  thrpt    5         9.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeUPickle                                                          128  thrpt    5     20326.751 ±     497.349   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.alloc.rate                                           128  thrpt    5       409.717 ±      10.036  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.alloc.rate.norm                                      128  thrpt    5     31728.021 ±       0.009    B/op
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.690 ±       5.883  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5        53.279 ±     454.086    B/op
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                              128  thrpt    5       339.560 ±    1220.839  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5     26336.394 ±   94569.423    B/op
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.count                                                128  thrpt    5         3.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.time                                                 128  thrpt    5         8.000                    ms
[info] ArrayOfPeriodsBenchmark.readCirce                                                                 128  thrpt    5     20211.391 ±    1176.965   ops/s
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5       757.113 ±      44.277  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5     58968.022 ±       0.013    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5         0.659 ±       5.319  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5        52.677 ±     425.913    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5       807.660 ±    1155.684  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5     62880.109 ±   89364.129    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.count                                                       128  thrpt    5         6.000                counts
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.time                                                        128  thrpt    5         7.000                    ms
[info] ArrayOfPeriodsBenchmark.readJacksonScala                                                          128  thrpt    5     16474.988 ±     114.892   ops/s
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5       461.416 ±       3.038  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5     44088.196 ±       1.450    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.029 ±       0.176  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         2.788 ±      16.805    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5       371.741 ±    1331.360  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5     35537.833 ±  127288.718    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         3.000                counts
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5         4.000                    ms
[info] ArrayOfPeriodsBenchmark.readJsoniterScala                                                         128  thrpt    5     94025.038 ±     953.306   ops/s
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       236.032 ±       2.386  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5      3952.004 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.003 ±       0.030  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         0.057 ±       0.494    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5       204.565 ±    1078.611  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5      3432.929 ±   18100.902    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5         2.000                counts
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5         4.000                    ms
[info] ArrayOfPeriodsBenchmark.readPlayJson                                                              128  thrpt    5     15139.439 ±     128.909   ops/s
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5       955.894 ±       8.064  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     99392.404 ±       3.219    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.021 ±       0.057  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         2.165 ±       5.892    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5       946.015 ±    1427.209  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5     98402.249 ±  148915.634    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5         7.000                counts
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5         7.000                    ms
[info] ArrayOfPeriodsBenchmark.readUPickle                                                               128  thrpt    5     17898.070 ±     622.982   ops/s
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.alloc.rate                                                128  thrpt    5       610.972 ±      20.990  MB/sec
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.alloc.rate.norm                                           128  thrpt    5     53736.157 ±      44.031    B/op
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0.559 ±       4.706  MB/sec
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5        49.166 ±     413.542    B/op
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                   128  thrpt    5       642.251 ±     281.777  MB/sec
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5     56444.708 ±   23135.755    B/op
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.count                                                     128  thrpt    5         5.000                counts
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.time                                                      128  thrpt    5         7.000                    ms
[info] ArrayOfPeriodsBenchmark.writeCirce                                                                128  thrpt    5     59754.014 ±     468.260   ops/s
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5      1065.571 ±       8.171  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5     28072.007 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         0.219 ±       1.156    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5       940.257 ±    1415.336  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5     24769.592 ±   37270.906    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.count                                                      128  thrpt    5         7.000                counts
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.time                                                       128  thrpt    5         6.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJacksonScala                                                         128  thrpt    5     80871.432 ±    4062.834   ops/s
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5      1306.839 ±      65.466  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     25440.005 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.054 ±       0.091  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         1.053 ±       1.795    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5      1353.775 ±       7.271  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5     26357.215 ±    1308.600    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5        10.000                counts
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5         8.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala                                                        128  thrpt    5    241646.190 ±    1747.123   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       462.960 ±       3.298  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      3016.002 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5         0.555 ±       4.579  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         3.622 ±      29.884    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5       474.946 ±    1070.272  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5      3095.720 ±    6979.315    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         4.000                counts
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5         8.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5    315116.582 ±    1898.379   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5           ≈ 0                counts
[info] ArrayOfPeriodsBenchmark.writePlayJson                                                             128  thrpt    5     70295.473 ±     484.093   ops/s
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5      1261.374 ±       8.574  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5     28248.006 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.029 ±       0.108  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         0.653 ±       2.409    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5      1205.260 ±    1152.269  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5     26996.701 ±   25873.617    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5         9.000                counts
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5         8.000                    ms
[info] ArrayOfPeriodsBenchmark.writeUPickle                                                              128  thrpt    5     15598.687 ±     407.980   ops/s
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.alloc.rate                                               128  thrpt    5       342.051 ±       8.884  MB/sec
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.alloc.rate.norm                                          128  thrpt    5     34520.028 ±       0.010    B/op
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.023 ±       0.156  MB/sec
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         2.310 ±      15.721    B/op
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                  128  thrpt    5       306.864 ±    1078.669  MB/sec
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5     31088.324 ±  109283.125    B/op
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.count                                                    128  thrpt    5         3.000                counts
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.time                                                     128  thrpt    5         8.000                    ms
[info] ArrayOfShortsBenchmark.readCirce                                                                  128  thrpt    5    125391.122 ±    4262.343   ops/s
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate                                                   128  thrpt    5      1816.097 ±      62.188  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm                                              128  thrpt    5     22800.003 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5         0.042 ±       0.098  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5         0.522 ±       1.218    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5      1750.719 ±    1417.025  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5     21988.737 ±   17978.948    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.count                                                        128  thrpt    5        13.000                counts
[info] ArrayOfShortsBenchmark.readCirce:·gc.time                                                         128  thrpt    5        11.000                    ms
[info] ArrayOfShortsBenchmark.readDslJsonJava                                                            128  thrpt    5    683448.163 ±   23680.460   ops/s
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate                                             128  thrpt    5       378.585 ±      13.081  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                        128  thrpt    5       872.001 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.510 ±       4.357  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         1.173 ±      10.009    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                128  thrpt    5       339.242 ±    1219.291  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5       784.301 ±    2814.281    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.count                                                  128  thrpt    5         3.000                counts
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.time                                                   128  thrpt    5         7.000                    ms
[info] ArrayOfShortsBenchmark.readJacksonScala                                                           128  thrpt    5    365779.337 ±    8865.429   ops/s
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate                                            128  thrpt    5       373.619 ±       9.118  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5      1608.001 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.033 ±       0.244  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0.145 ±       1.063    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5       339.272 ±    1219.536  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5      1465.881 ±    5278.177    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.count                                                 128  thrpt    5         3.000                counts
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.time                                                  128  thrpt    5         4.000                    ms
[info] ArrayOfShortsBenchmark.readJsoniterScala                                                          128  thrpt    5    755749.254 ±   40379.265   ops/s
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       261.197 ±      13.867  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5       544.001 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.013 ±       0.074  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0.027 ±       0.153    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5       306.910 ±    1078.831  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5       638.747 ±    2245.756    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.count                                                128  thrpt    5         3.000                counts
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.time                                                 128  thrpt    5         7.000                    ms
[info] ArrayOfShortsBenchmark.readPlayJson                                                               128  thrpt    5     80731.239 ±    1912.143   ops/s
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate                                                128  thrpt    5      3460.078 ±      81.592  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     67472.005 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0.100 ±       0.132  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         1.947 ±       2.553    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5      3401.700 ±      12.601  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5     66335.784 ±    1711.197    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.count                                                     128  thrpt    5        25.000                counts
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.time                                                      128  thrpt    5        20.000                    ms
[info] ArrayOfShortsBenchmark.readUPickle                                                                128  thrpt    5    223703.226 ±    2082.113   ops/s
[info] ArrayOfShortsBenchmark.readUPickle:·gc.alloc.rate                                                 128  thrpt    5      1413.037 ±      12.963  MB/sec
[info] ArrayOfShortsBenchmark.readUPickle:·gc.alloc.rate.norm                                            128  thrpt    5      9944.002 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0.029 ±       0.122  MB/sec
[info] ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         0.205 ±       0.855    B/op
[info] ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                    128  thrpt    5      1478.690 ±    1155.819  MB/sec
[info] ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5     10407.881 ±    8188.693    B/op
[info] ArrayOfShortsBenchmark.readUPickle:·gc.count                                                      128  thrpt    5        11.000                counts
[info] ArrayOfShortsBenchmark.readUPickle:·gc.time                                                       128  thrpt    5         8.000                    ms
[info] ArrayOfShortsBenchmark.writeCirce                                                                 128  thrpt    5    283373.343 ±   12340.088   ops/s
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate                                                  128  thrpt    5      1476.030 ±      64.424  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm                                             128  thrpt    5      8200.001 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5         0.042 ±       0.098  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5         0.231 ±       0.543    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5      1477.595 ±    1151.006  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5      8209.423 ±    6399.135    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.count                                                       128  thrpt    5        11.000                counts
[info] ArrayOfShortsBenchmark.writeCirce:·gc.time                                                        128  thrpt    5         7.000                    ms
[info] ArrayOfShortsBenchmark.writeDslJsonJava                                                           128  thrpt    5   1390554.790 ±  105779.214   ops/s
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate                                            128  thrpt    5       473.528 ±      35.757  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                       128  thrpt    5       536.000 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.508 ±       4.377  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0.576 ±       4.956    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                               128  thrpt    5       371.643 ±    1330.946  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5       419.940 ±    1511.447    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count                                                 128  thrpt    5         3.000                counts
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time                                                  128  thrpt    5         6.000                    ms
[info] ArrayOfShortsBenchmark.writeJacksonScala                                                          128  thrpt    5   1313111.305 ±   78648.136   ops/s
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate                                           128  thrpt    5       767.379 ±      46.394  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5       920.000 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.029 ±       0.156  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0.035 ±       0.184    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5       810.113 ±    1162.457  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5       967.007 ±    1308.411    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.count                                                128  thrpt    5         6.000                counts
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.time                                                 128  thrpt    5         5.000                    ms
[info] ArrayOfShortsBenchmark.writeJsoniterScala                                                         128  thrpt    5   1307800.947 ±   36598.235   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       445.282 ±      12.546  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5       536.000 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.664 ±       5.662  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         0.795 ±       6.780    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5       474.414 ±    1068.427  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5       571.653 ±    1285.997    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count                                               128  thrpt    5         4.000                counts
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time                                                128  thrpt    5         7.000                    ms
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc                                                 128  thrpt    5   1403776.317 ±   12866.242   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       128  thrpt    5           ≈ 0                counts
[info] ArrayOfShortsBenchmark.writePlayJson                                                              128  thrpt    5     39680.365 ±     566.836   ops/s
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate                                               128  thrpt    5      1908.517 ±      27.567  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     75712.010 ±       0.002    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.058 ±       0.104  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         2.310 ±       4.111    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5      2016.187 ±      24.292  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5     79984.000 ±    1246.910    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.count                                                    128  thrpt    5        15.000                counts
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.time                                                     128  thrpt    5        13.000                    ms
[info] ArrayOfShortsBenchmark.writeUPickle                                                               128  thrpt    5    140794.200 ±    5396.643   ops/s
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.alloc.rate                                                128  thrpt    5       950.314 ±      36.062  MB/sec
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.alloc.rate.norm                                           128  thrpt    5     10624.003 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0.025 ±       0.132  MB/sec
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         0.281 ±       1.482    B/op
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                   128  thrpt    5       940.311 ±    1416.169  MB/sec
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5     10532.488 ±   16113.902    B/op
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.count                                                     128  thrpt    5         7.000                counts
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.time                                                      128  thrpt    5         5.000                    ms
[info] ArrayOfUUIDsBenchmark.readCirce                                                                   128  thrpt    5     36294.077 ±     610.969   ops/s
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5       724.447 ±      12.221  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     31424.011 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5         0.691 ±       5.818  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5        30.155 ±     253.868    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5       807.088 ±    1155.259  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5     34981.892 ±   49580.735    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.count                                                         128  thrpt    5         6.000                counts
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.time                                                          128  thrpt    5         7.000                    ms
[info] ArrayOfUUIDsBenchmark.readJacksonScala                                                            128  thrpt    5     84272.909 ±     591.632   ops/s
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5       886.403 ±       5.998  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5     16560.005 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.037 ±       0.164  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         0.700 ±       3.068    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5       810.379 ±    1161.909  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5     15139.403 ±   21700.627    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         6.000                counts
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5         6.000                    ms
[info] ArrayOfUUIDsBenchmark.readJsoniterScala                                                           128  thrpt    5    265899.511 ±    2169.059   ops/s
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       864.800 ±       7.461  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5      5120.002 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.037 ±       0.143  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0.222 ±       0.848    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5       940.670 ±    1419.065  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5      5569.958 ±    8412.416    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         7.000                counts
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5         6.000                    ms
[info] ArrayOfUUIDsBenchmark.readPlayJson                                                                128  thrpt    5     23952.360 ±     297.535   ops/s
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      1094.038 ±      13.185  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     71896.018 ±       0.005    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0.033 ±       0.072  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         2.189 ±       4.711    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5      1081.826 ±    1423.670  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5     71110.785 ±   93772.203    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5         8.000                counts
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5         6.000                    ms
[info] ArrayOfUUIDsBenchmark.readUPickle                                                                 128  thrpt    5     31990.379 ±     272.596   ops/s
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.alloc.rate                                                  128  thrpt    5       533.736 ±       4.841  MB/sec
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.alloc.rate.norm                                             128  thrpt    5     26264.013 ±       0.002    B/op
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                         128  thrpt    5         0.683 ±       5.746  MB/sec
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5        33.477 ±     281.669    B/op
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                     128  thrpt    5       506.536 ±    1123.469  MB/sec
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5     24927.305 ±   55287.570    B/op
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.count                                                       128  thrpt    5         4.000                counts
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.time                                                        128  thrpt    5         7.000                    ms
[info] ArrayOfUUIDsBenchmark.writeCirce                                                                  128  thrpt    5     59718.541 ±     640.176   ops/s
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5       885.848 ±       9.682  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5     23352.007 ±       0.002    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5         0.033 ±       0.184  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5         0.879 ±       4.870    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5       939.987 ±    1417.959  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5     24793.501 ±   37578.721    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.count                                                        128  thrpt    5         7.000                counts
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.time                                                         128  thrpt    5         6.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJacksonScala                                                           128  thrpt    5     95171.087 ±    3685.016   ops/s
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5      1303.497 ±      49.768  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5     21560.004 ±       0.058    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.062 ±       0.150  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         1.036 ±       2.508    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5      1217.800 ±    1162.711  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5     20155.808 ±   19400.668    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         9.000                counts
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5         8.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala                                                          128  thrpt    5    280097.403 ±    1424.393   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       892.396 ±       4.730  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      5016.001 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.017 ±       0.104  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0.094 ±       0.588    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5       805.694 ±    1155.114  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5      4530.123 ±    6520.907    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         6.000                counts
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5         5.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5    325476.455 ±    1774.892   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ArrayOfUUIDsBenchmark.writePlayJson                                                               128  thrpt    5     71799.106 ±    3325.166   ops/s
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5      1064.708 ±      49.095  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     23344.006 ±       0.076    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0.021 ±       0.080  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         0.454 ±       1.747    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5      1071.077 ±    1411.342  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5     23440.928 ±   30393.759    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5         8.000                counts
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5         8.000                    ms
[info] ArrayOfUUIDsBenchmark.writeUPickle                                                                128  thrpt    5     10488.759 ±     178.763   ops/s
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.alloc.rate                                                 128  thrpt    5       259.911 ±       4.443  MB/sec
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.alloc.rate.norm                                            128  thrpt    5     39008.041 ±       0.017    B/op
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0.006 ±       0.054  MB/sec
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         0.947 ±       8.158    B/op
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                    128  thrpt    5       306.845 ±    1078.603  MB/sec
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5     46193.594 ±  162377.488    B/op
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.count                                                      128  thrpt    5         3.000                counts
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.time                                                       128  thrpt    5         7.000                    ms
[info] ArrayOfYearMonthsBenchmark.readCirce                                                              128  thrpt    5     26165.704 ±     434.927   ops/s
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate                                               128  thrpt    5      1362.725 ±      23.187  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate.norm                                          128  thrpt    5     81984.016 ±       0.002    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.021 ±       0.080  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         1.248 ±       4.801    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5      1343.601 ±       4.869  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5     80834.859 ±    1522.459    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.count                                                    128  thrpt    5        10.000                counts
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.time                                                     128  thrpt    5         9.000                    ms
[info] ArrayOfYearMonthsBenchmark.readJacksonScala                                                       128  thrpt    5     29245.489 ±    1318.012   ops/s
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1145.239 ±      51.544  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5     61648.014 ±       0.002    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.042 ±       0.188  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         2.248 ±      10.193    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5      1081.935 ±    1427.134  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5     58236.275 ±   76759.665    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.count                                             128  thrpt    5         8.000                counts
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.time                                              128  thrpt    5         6.000                    ms
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala                                                      128  thrpt    5    502898.202 ±   25615.782   ops/s
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate                                       128  thrpt    5      1308.454 ±      66.633  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      4096.001 ±       0.001    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5         0.046 ±       0.154  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         0.143 ±       0.478    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5      1209.189 ±    1157.084  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5      3787.889 ±    3656.251    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.count                                            128  thrpt    5         9.000                counts
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.time                                             128  thrpt    5         7.000                    ms
[info] ArrayOfYearMonthsBenchmark.readPlayJson                                                           128  thrpt    5     22170.402 ±     954.266   ops/s
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate                                            128  thrpt    5      1685.528 ±      72.632  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate.norm                                       128  thrpt    5    119680.020 ±       0.011    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.033 ±       0.091  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         2.353 ±       6.456    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5      1625.543 ±    1429.251  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5    115329.665 ±   99223.106    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.count                                                 128  thrpt    5        12.000                counts
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.time                                                  128  thrpt    5        11.000                    ms
[info] ArrayOfYearMonthsBenchmark.readUPickle                                                            128  thrpt    5     28776.710 ±     136.075   ops/s
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.alloc.rate                                             128  thrpt    5      1298.536 ±       6.421  MB/sec
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.alloc.rate.norm                                        128  thrpt    5     71032.014 ±       0.002    B/op
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.042 ±       0.113  MB/sec
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         2.278 ±       6.205    B/op
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                128  thrpt    5      1343.413 ±       4.263  MB/sec
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5     73486.971 ±     450.993    B/op
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.count                                                  128  thrpt    5        10.000                counts
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.time                                                   128  thrpt    5         7.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeCirce                                                             128  thrpt    5     71097.702 ±    3351.504   ops/s
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate                                              128  thrpt    5      1504.488 ±      70.816  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate.norm                                         128  thrpt    5     33312.006 ±       0.001    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.046 ±       0.183  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         1.013 ±       4.028    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5      1477.731 ±    1160.507  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5     32744.840 ±   26370.926    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.count                                                   128  thrpt    5        11.000                counts
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.time                                                    128  thrpt    5         8.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala                                                      128  thrpt    5    162519.566 ±    1300.334   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate                                       128  thrpt    5      1231.352 ±       9.706  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5     11928.003 ±       0.001    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5         0.021 ±       0.113  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         0.201 ±       1.097    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5      1218.105 ±    1167.954  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5     11801.398 ±   11335.764    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.count                                            128  thrpt    5         9.000                counts
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.time                                             128  thrpt    5         8.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala                                                     128  thrpt    5   1321241.992 ±    5449.697   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate                                      128  thrpt    5      1094.527 ±       4.393  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      1304.000 ±       0.001    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5         0.058 ±       0.222  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5         0.069 ±       0.265    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5      1074.664 ±    1416.681  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5      1280.664 ±    1691.848    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.count                                           128  thrpt    5         8.000                counts
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.time                                            128  thrpt    5         7.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc                                             128  thrpt    5   1472163.799 ±   11371.857   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                              128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                         128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                   128  thrpt    5           ≈ 0                counts
[info] ArrayOfYearMonthsBenchmark.writePlayJson                                                          128  thrpt    5    123316.739 ±    4456.058   ops/s
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate                                           128  thrpt    5      1390.014 ±      49.301  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     17744.003 ±       0.001    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.050 ±       0.146  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0.640 ±       1.873    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5      1488.208 ±    1168.900  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5     19025.515 ±   15726.863    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.count                                                128  thrpt    5        11.000                counts
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.time                                                 128  thrpt    5        10.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeUPickle                                                           128  thrpt    5     34313.337 ±    1008.124   ops/s
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.alloc.rate                                            128  thrpt    5       453.366 ±      13.347  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.alloc.rate.norm                                       128  thrpt    5     20800.012 ±       0.002    B/op
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.691 ±       5.883  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5        31.595 ±     269.076    B/op
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                               128  thrpt    5       474.405 ±    1068.414  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5     21798.982 ±   49236.832    B/op
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.count                                                 128  thrpt    5         4.000                counts
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.time                                                  128  thrpt    5         8.000                    ms
[info] ArrayOfYearsBenchmark.readJacksonScala                                                            128  thrpt    5     36844.588 ±    1485.828   ops/s
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5      1322.358 ±      53.749  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5     56496.011 ±       0.002    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.042 ±       0.150  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         1.776 ±       6.353    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5      1353.706 ±       7.379  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5     57839.854 ±    2075.538    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5        10.000                counts
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5         9.000                    ms
[info] ArrayOfYearsBenchmark.readJsoniterScala                                                           128  thrpt    5    744593.153 ±    7962.961   ops/s
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5      1453.087 ±      15.001  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5      3072.001 ±       0.001    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.037 ±       0.104  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0.079 ±       0.221    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5      1344.482 ±       6.804  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5      2842.411 ±      29.069    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5        10.000                counts
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5         8.000                    ms
[info] ArrayOfYearsBenchmark.readPlayJson                                                                128  thrpt    5     27021.856 ±     775.547   ops/s
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      1966.708 ±      56.304  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5    114576.015 ±       0.002    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0.067 ±       0.154  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         3.875 ±       8.924    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5      1898.370 ±    1170.477  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5    110594.586 ±   68165.023    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        14.000                counts
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        12.000                    ms
[info] ArrayOfYearsBenchmark.readUPickle                                                                 128  thrpt    5     37716.327 ±     368.498   ops/s
[info] ArrayOfYearsBenchmark.readUPickle:·gc.alloc.rate                                                  128  thrpt    5      1574.533 ±      15.435  MB/sec
[info] ArrayOfYearsBenchmark.readUPickle:·gc.alloc.rate.norm                                             128  thrpt    5     65720.011 ±       0.001    B/op
[info] ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                         128  thrpt    5         0.025 ±       0.067  MB/sec
[info] ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5         1.043 ±       2.798    B/op
[info] ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                     128  thrpt    5      1613.691 ±    1420.597  MB/sec
[info] ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5     67364.640 ±   59523.210    B/op
[info] ArrayOfYearsBenchmark.readUPickle:·gc.count                                                       128  thrpt    5        12.000                counts
[info] ArrayOfYearsBenchmark.readUPickle:·gc.time                                                        128  thrpt    5        10.000                    ms
[info] ArrayOfYearsBenchmark.writeJacksonScala                                                           128  thrpt    5    356098.943 ±   19912.321   ops/s
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       989.977 ±      55.226  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5      4376.001 ±       0.001    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.025 ±       0.132  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0.111 ±       0.583    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5       946.329 ±    1426.003  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5      4185.016 ±    6326.732    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         7.000                counts
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5         7.000                    ms
[info] ArrayOfYearsBenchmark.writeJsoniterScala                                                          128  thrpt    5   1574957.434 ±   62512.517   ops/s
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       920.489 ±      36.273  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5       920.000 ±       0.001    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.033 ±       0.176  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0.033 ±       0.176    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5       940.227 ±    1416.989  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5       940.839 ±    1431.506    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         7.000                counts
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5         5.000                    ms
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5   1866239.486 ±    9785.670   ops/s
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ArrayOfYearsBenchmark.writePlayJson                                                               128  thrpt    5    243110.224 ±    1662.192   ops/s
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5      1573.924 ±      10.894  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     10192.002 ±       0.001    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0.054 ±       0.166  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         0.350 ±       1.075    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5      1625.083 ±    1425.342  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5     10523.227 ±    9228.317    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5        12.000                counts
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5        10.000                    ms
[info] ArrayOfYearsBenchmark.writeUPickle                                                                128  thrpt    5     54790.131 ±     350.481   ops/s
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.alloc.rate                                                 128  thrpt    5       366.968 ±       2.307  MB/sec
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.alloc.rate.norm                                            128  thrpt    5     10544.008 ±       0.001    B/op
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0.002 ±       0.008  MB/sec
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         0.044 ±       0.231    B/op
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                    128  thrpt    5       306.849 ±    1078.616  MB/sec
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5      8823.464 ±   31015.784    B/op
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.count                                                      128  thrpt    5         3.000                counts
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.time                                                       128  thrpt    5         8.000                    ms
[info] ArrayOfZoneIdsBenchmark.readCirce                                                                 128  thrpt    5     79520.078 ±     373.207   ops/s
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      1519.499 ±       6.976  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5     30080.005 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5         0.062 ±       0.160  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5         1.236 ±       3.173    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5      1474.836 ±    1153.309  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5     29198.422 ±   22907.355    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.count                                                       128  thrpt    5        11.000                counts
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.time                                                        128  thrpt    5         9.000                    ms
[info] ArrayOfZoneIdsBenchmark.readJacksonScala                                                          128  thrpt    5     86144.373 ±     336.150   ops/s
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5       972.713 ±       3.732  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5     17776.005 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.029 ±       0.108  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0.533 ±       1.966    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5      1079.686 ±    1422.801  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5     19728.573 ±   25972.297    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         8.000                counts
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5         6.000                    ms
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala                                                         128  thrpt    5    108402.100 ±    3530.293   ops/s
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5      1141.407 ±      37.277  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5     16576.004 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.037 ±       0.119  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         0.542 ±       1.702    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5      1205.477 ±    1154.284  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5     17503.243 ±   16720.731    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5         9.000                counts
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5         8.000                    ms
[info] ArrayOfZoneIdsBenchmark.readPlayJson                                                              128  thrpt    5     47941.085 ±     344.715   ops/s
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      2289.885 ±      16.608  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     75192.009 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.067 ±       0.132  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         2.186 ±       4.321    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5      2307.490 ±    1426.774  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5     75775.901 ±   47030.270    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        17.000                counts
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        16.000                    ms
[info] ArrayOfZoneIdsBenchmark.readUPickle                                                               128  thrpt    5     75501.978 ±    2672.780   ops/s
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.alloc.rate                                                128  thrpt    5      1310.295 ±      46.333  MB/sec
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.alloc.rate.norm                                           128  thrpt    5     27320.006 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0.029 ±       0.044  MB/sec
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         0.607 ±       0.915    B/op
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                   128  thrpt    5      1339.459 ±       5.762  MB/sec
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5     27930.029 ±    1029.290    B/op
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.count                                                     128  thrpt    5        10.000                counts
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.time                                                      128  thrpt    5         8.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeCirce                                                                128  thrpt    5    135261.628 ±    1226.225   ops/s
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5       600.065 ±       5.567  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5      6984.003 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0.878 ±       7.378  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5        10.230 ±      86.009    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5       639.047 ±     274.708  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5      7437.304 ±    3181.768    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.count                                                      128  thrpt    5         5.000                counts
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.time                                                       128  thrpt    5         8.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala                                                         128  thrpt    5    168171.375 ±    2141.002   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5       249.534 ±       3.147  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5      2336.003 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         0.039 ±       0.336    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5       204.578 ±    1078.683  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5      1919.710 ±   10122.078    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         2.000                counts
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5         2.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala                                                        128  thrpt    5    691437.813 ±   18971.274   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       857.358 ±      23.366  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      1952.001 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5         0.029 ±       0.108  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         0.067 ±       0.247    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5       937.982 ±    1410.019  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5      2134.378 ±    3192.917    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         7.000                counts
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5         7.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5    712301.458 ±    4951.375   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5           ≈ 0                counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson                                                             128  thrpt    5    202332.728 ±    8935.680   ops/s
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5       661.197 ±      28.936  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5      5144.002 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.974 ±       8.249  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         7.574 ±      64.167    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5       669.457 ±       6.582  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5      5208.700 ±     188.528    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5         5.000                counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5         7.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeUPickle                                                              128  thrpt    5     26999.238 ±     639.647   ops/s
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.alloc.rate                                               128  thrpt    5       150.658 ±       3.580  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.alloc.rate.norm                                          128  thrpt    5      8784.015 ±       0.002    B/op
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.003 ±       0.027  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         0.188 ±       1.617    B/op
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                  128  thrpt    5       204.571 ±    1078.645  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5     11971.170 ±   63123.075    B/op
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.count                                                    128  thrpt    5         2.000                counts
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.time                                                     128  thrpt    5         6.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readCirce                                                             128  thrpt    5    128657.067 ±    1217.005   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate                                              128  thrpt    5      1751.543 ±      17.194  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm                                         128  thrpt    5     21432.003 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.071 ±       0.231  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         0.866 ±       2.829    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5      1748.144 ±    1414.871  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5     21385.545 ±   17207.847    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count                                                   128  thrpt    5        13.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time                                                    128  thrpt    5        10.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala                                                      128  thrpt    5    180998.306 ±   11917.682   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate                                       128  thrpt    5       962.045 ±      63.585  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5      8368.002 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5         0.033 ±       0.184  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         0.291 ±       1.601    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5      1080.896 ±    1425.184  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5      9409.773 ±   12486.352    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count                                            128  thrpt    5         8.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time                                             128  thrpt    5         7.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala                                                     128  thrpt    5    485871.839 ±    3596.622   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate                                      128  thrpt    5       943.206 ±       7.002  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      3056.001 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5         0.021 ±       0.113  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5         0.067 ±       0.367    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5       940.141 ±    1416.068  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5      3045.361 ±    4578.033    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count                                           128  thrpt    5         7.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time                                            128  thrpt    5         5.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson                                                          128  thrpt    5     69800.450 ±    1208.390   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate                                           128  thrpt    5      2946.227 ±      51.410  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     66448.006 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.067 ±       0.119  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         1.501 ±       2.684    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5      2990.393 ±    1427.662  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5     67448.178 ±   32336.571    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count                                                128  thrpt    5        22.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time                                                 128  thrpt    5        20.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readUPickle                                                           128  thrpt    5    121744.743 ±    7962.398   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.alloc.rate                                            128  thrpt    5      1370.433 ±      89.602  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.alloc.rate.norm                                       128  thrpt    5     17720.003 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.042 ±       0.127  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0.542 ±       1.666    B/op
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                               128  thrpt    5      1343.764 ±       5.720  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5     17379.000 ±    1087.913    B/op
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.count                                                 128  thrpt    5        10.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.time                                                  128  thrpt    5         6.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeCirce                                                            128  thrpt    5    177036.331 ±     839.270   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate                                             128  thrpt    5       606.362 ±       3.182  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm                                        128  thrpt    5      5392.002 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.717 ±       6.088  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         6.382 ±      54.154    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5       640.657 ±     278.415  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5      5696.422 ±    2455.641    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count                                                  128  thrpt    5         5.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time                                                   128  thrpt    5         9.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala                                                     128  thrpt    5    293165.315 ±    2399.716   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate                                      128  thrpt    5       289.037 ±       2.325  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5      1552.001 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5       306.917 ±    1078.856  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5      1646.727 ±    5788.508    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count                                           128  thrpt    5         3.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time                                            128  thrpt    5         4.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala                                                    128  thrpt    5   1151929.309 ±   62562.199   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       854.672 ±      46.576  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5      1168.000 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5         0.037 ±       0.119  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5         0.051 ±       0.161    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5       940.698 ±    1419.314  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5      1288.174 ±    1975.798    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count                                          128  thrpt    5         7.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time                                           128  thrpt    5         5.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc                                            128  thrpt    5   1185954.239 ±    3645.445   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        128  thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  128  thrpt    5           ≈ 0                counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson                                                         128  thrpt    5    307116.894 ±   13574.773   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate                                          128  thrpt    5       838.082 ±      37.009  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm                                     128  thrpt    5      4296.001 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.033 ±       0.146  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         0.171 ±       0.750    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5       810.146 ±    1163.956  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5      4160.587 ±    6110.569    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count                                               128  thrpt    5         6.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time                                                128  thrpt    5         4.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle                                                          128  thrpt    5     44744.535 ±     336.701   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.alloc.rate                                           128  thrpt    5       139.154 ±       1.019  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.alloc.rate.norm                                      128  thrpt    5      4896.009 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                              128  thrpt    5       102.286 ±     880.715  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5      3608.488 ±   31070.174    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.count                                                128  thrpt    5         1.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.time                                                 128  thrpt    5         2.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readCirce                                                          128  thrpt    5      5235.469 ±      39.901   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate                                           128  thrpt    5      1031.174 ±       7.713  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                      128  thrpt    5    310024.080 ±       0.013    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.017 ±       0.104  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         5.017 ±      31.497    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5      1063.697 ±    1404.032  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5    319937.465 ±  423782.817    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count                                                128  thrpt    5         8.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time                                                 128  thrpt    5         8.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala                                                   128  thrpt    5      5252.756 ±      37.274   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                    128  thrpt    5       975.877 ±       7.035  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5    292456.081 ±       0.013    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5         0.021 ±       0.113  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5         6.237 ±      33.983    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5       941.294 ±    1413.526  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5    282195.331 ±  425061.242    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count                                         128  thrpt    5         7.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time                                          128  thrpt    5         6.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala                                                  128  thrpt    5     39064.550 ±     927.911   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                   128  thrpt    5       641.150 ±      15.282  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5     25840.011 ±       0.002    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5         1.114 ±       9.550  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5        44.992 ±     385.573    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5       534.308 ±    1150.165  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5     21541.936 ±   46379.821    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count                                        128  thrpt    5         4.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time                                         128  thrpt    5         6.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson                                                       128  thrpt    5      4615.291 ±     158.639   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                        128  thrpt    5      1175.770 ±      40.458  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                   128  thrpt    5    401024.091 ±       0.025    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         1.411 ±      12.146    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5      1077.853 ±    1421.363  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5    367292.054 ±  480522.647    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count                                             128  thrpt    5         8.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time                                              128  thrpt    5         8.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readUPickle                                                        128  thrpt    5      5006.391 ±      85.572   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.alloc.rate                                         128  thrpt    5       960.963 ±      15.841  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.alloc.rate.norm                                    128  thrpt    5    302160.083 ±       0.011    B/op
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                128  thrpt    5         0.021 ±       0.098  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         6.533 ±      30.766    B/op
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                            128  thrpt    5       930.872 ±    1401.867  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5    292600.697 ±  439397.815    B/op
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.count                                              128  thrpt    5         7.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.time                                               128  thrpt    5         6.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeCirce                                                         128  thrpt    5     14526.575 ±     477.509   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate                                          128  thrpt    5       813.862 ±      26.711  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                     128  thrpt    5     88197.119 ±      47.152    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.012 ±       0.108  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         1.346 ±      11.589    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5       797.245 ±    1142.193  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5     86307.330 ±  121979.053    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count                                               128  thrpt    5         6.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time                                                128  thrpt    5         4.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala                                                  128  thrpt    5     16719.939 ±     596.420   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                   128  thrpt    5       870.269 ±      31.382  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5     81944.026 ±       0.295    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5         0.033 ±       0.166  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5         3.165 ±      15.895    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5       806.777 ±    1157.075  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5     76172.391 ±  112863.685    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count                                        128  thrpt    5         6.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time                                         128  thrpt    5         5.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala                                                 128  thrpt    5    255487.568 ±   16566.779   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                  128  thrpt    5       925.790 ±      59.674  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5      5704.002 ±       0.001    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5         0.037 ±       0.164  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5         0.229 ±       1.009    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5       931.128 ±    1402.203  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5      5728.107 ±    8503.466    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count                                       128  thrpt    5         7.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time                                        128  thrpt    5         5.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc                                         128  thrpt    5    300438.622 ±    1705.119   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                               128  thrpt    5           ≈ 0                counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson                                                      128  thrpt    5     15479.071 ±     330.764   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                       128  thrpt    5       883.348 ±      18.904  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                  128  thrpt    5     89840.027 ±      30.695    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5         0.012 ±       0.044  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         1.272 ±       4.470    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5       931.488 ±    1405.084  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5     94686.855 ±  142192.190    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count                                            128  thrpt    5         7.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time                                             128  thrpt    5         6.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle                                                       128  thrpt    5      7591.790 ±     657.766   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.alloc.rate                                        128  thrpt    5       483.892 ±      42.093  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.alloc.rate.norm                                   128  thrpt    5    100336.925 ±       7.493    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                               128  thrpt    5         1.125 ±       9.686  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5       230.912 ±    1988.219    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                           128  thrpt    5       472.546 ±    1062.000  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5     98158.867 ±  218726.827    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.count                                             128  thrpt    5         4.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.time                                              128  thrpt    5        11.000                    ms
[info] BitSetBenchmark.readJsoniterScala                                                                 128  thrpt    5    939612.128 ±    7077.033   ops/s
[info] BitSetBenchmark.readJsoniterScala:·gc.alloc.rate                                                  128  thrpt    5        38.201 ±       0.298  MB/sec
[info] BitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                             128  thrpt    5        64.000 ±       0.001    B/op
[info] BitSetBenchmark.readJsoniterScala:·gc.count                                                       128  thrpt    5           ≈ 0                counts
[info] BitSetBenchmark.readPlayJson                                                                      128  thrpt    5     73762.551 ±     718.478   ops/s
[info] BitSetBenchmark.readPlayJson:·gc.alloc.rate                                                       128  thrpt    5      3327.404 ±      30.722  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.alloc.rate.norm                                                  128  thrpt    5     71008.006 ±       0.001    B/op
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                              128  thrpt    5         0.071 ±       0.091  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                         128  thrpt    5         1.510 ±       1.946    B/op
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                          128  thrpt    5      3264.114 ±    1166.051  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                     128  thrpt    5     69651.486 ±   24610.362    B/op
[info] BitSetBenchmark.readPlayJson:·gc.count                                                            128  thrpt    5        24.000                counts
[info] BitSetBenchmark.readPlayJson:·gc.time                                                             128  thrpt    5        18.000                    ms
[info] BitSetBenchmark.writeJacksonScala                                                                 128  thrpt    5   1055536.503 ±   36879.168   ops/s
[info] BitSetBenchmark.writeJacksonScala:·gc.alloc.rate                                                  128  thrpt    5       606.129 ±      20.933  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                             128  thrpt    5       904.000 ±       0.001    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                         128  thrpt    5         0.054 ±       0.292  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5         0.080 ±       0.433    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                     128  thrpt    5       674.329 ±       2.927  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5      1005.785 ±      36.995    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.count                                                       128  thrpt    5         5.000                counts
[info] BitSetBenchmark.writeJacksonScala:·gc.time                                                        128  thrpt    5         4.000                    ms
[info] BitSetBenchmark.writeJsoniterScala                                                                128  thrpt    5    670936.689 ±    5867.544   ops/s
[info] BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate                                                 128  thrpt    5       180.707 ±       1.599  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                            128  thrpt    5       424.001 ±       0.001    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                    128  thrpt    5       204.556 ±    1078.566  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5       481.007 ±    2536.216    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.count                                                      128  thrpt    5         2.000                counts
[info] BitSetBenchmark.writeJsoniterScala:·gc.time                                                       128  thrpt    5         4.000                    ms
[info] BitSetBenchmark.writeJsoniterScalaPrealloc                                                        128  thrpt    5   1437751.213 ±   11766.816   ops/s
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                         128  thrpt    5        14.612 ±       0.120  MB/sec
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                    128  thrpt    5        16.000 ±       0.001    B/op
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count                                              128  thrpt    5           ≈ 0                counts
[info] BitSetBenchmark.writePlayJson                                                                     128  thrpt    5     45508.602 ±     308.778   ops/s
[info] BitSetBenchmark.writePlayJson:·gc.alloc.rate                                                      128  thrpt    5      1925.800 ±      12.876  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.alloc.rate.norm                                                 128  thrpt    5     66616.009 ±       0.001    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                             128  thrpt    5         0.071 ±       0.134  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5         2.448 ±       4.642    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                         128  thrpt    5      1898.365 ±    1173.206  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5     65669.721 ±   40646.914    B/op
[info] BitSetBenchmark.writePlayJson:·gc.count                                                           128  thrpt    5        14.000                counts
[info] BitSetBenchmark.writePlayJson:·gc.time                                                            128  thrpt    5        11.000                    ms
[info] ExtractFieldsBenchmark.readCirce                                                                  N/A  thrpt    5    775836.243 ±   18255.559   ops/s
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate                                                   N/A  thrpt    5      2464.090 ±      58.108  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm                                              N/A  thrpt    5      5000.001 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5         0.046 ±       0.067  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5         0.093 ±       0.134    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5      2431.452 ±    1433.632  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5      4934.254 ±    2921.879    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.count                                                        N/A  thrpt    5        18.000                counts
[info] ExtractFieldsBenchmark.readCirce:·gc.time                                                         N/A  thrpt    5        14.000                    ms
[info] ExtractFieldsBenchmark.readDslJsonJava                                                            N/A  thrpt    5   5489182.062 ±  385833.051   ops/s
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate                                             N/A  thrpt    5       334.746 ±      23.542  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                        N/A  thrpt    5        96.000 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5         0.006 ±       0.044  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5         0.002 ±       0.012    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5       306.881 ±    1078.730  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5        87.930 ±     309.195    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.count                                                  N/A  thrpt    5         3.000                counts
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.time                                                   N/A  thrpt    5         7.000                    ms
[info] ExtractFieldsBenchmark.readJacksonScala                                                           N/A  thrpt    5    963253.002 ±   35635.378   ops/s
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate                                            N/A  thrpt    5      1194.452 ±      44.208  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       N/A  thrpt    5      1952.000 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5         0.067 ±       0.207  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5         0.109 ±       0.336    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5      1216.798 ±    1162.159  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5      1988.299 ±    1896.494    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.count                                                 N/A  thrpt    5         9.000                counts
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.time                                                  N/A  thrpt    5         7.000                    ms
[info] ExtractFieldsBenchmark.readJsoniterScala                                                          N/A  thrpt    5   8195396.157 ±  320581.541   ops/s
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate                                           N/A  thrpt    5       374.856 ±      14.705  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      N/A  thrpt    5        72.000 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5         0.653 ±       5.486  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5         0.125 ±       1.053    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5       441.819 ±     989.145  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5        85.064 ±     190.215    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.count                                                N/A  thrpt    5         4.000                counts
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.time                                                 N/A  thrpt    5         9.000                    ms
[info] ExtractFieldsBenchmark.readPlayJson                                                               N/A  thrpt    5    308077.400 ±    9293.950   ops/s
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate                                                N/A  thrpt    5      1726.990 ±      52.597  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm                                           N/A  thrpt    5      8824.001 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5         0.033 ±       0.072  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5         0.170 ±       0.365    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5      1760.248 ±    1424.612  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5      8998.314 ±    7368.062    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.count                                                     N/A  thrpt    5        13.000                counts
[info] ExtractFieldsBenchmark.readPlayJson:·gc.time                                                      N/A  thrpt    5        13.000                    ms
[info] ExtractFieldsBenchmark.readUPickle                                                                N/A  thrpt    5    719534.249 ±   21173.627   ops/s
[info] ExtractFieldsBenchmark.readUPickle:·gc.alloc.rate                                                 N/A  thrpt    5      1206.603 ±      35.616  MB/sec
[info] ExtractFieldsBenchmark.readUPickle:·gc.alloc.rate.norm                                            N/A  thrpt    5      2640.001 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5         0.037 ±       0.104  MB/sec
[info] ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5         0.082 ±       0.230    B/op
[info] ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5      1208.603 ±    1156.742  MB/sec
[info] ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5      2646.528 ±    2558.260    B/op
[info] ExtractFieldsBenchmark.readUPickle:·gc.count                                                      N/A  thrpt    5         9.000                counts
[info] ExtractFieldsBenchmark.readUPickle:·gc.time                                                       N/A  thrpt    5         8.000                    ms
[info] GeoJSONBenchmark.readCirce                                                                        N/A  thrpt    5      3847.831 ±     141.271   ops/s
[info] GeoJSONBenchmark.readCirce:·gc.alloc.rate                                                         N/A  thrpt    5      1816.895 ±      66.818  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.alloc.rate.norm                                                    N/A  thrpt    5    743312.109 ±       0.019    B/op
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                N/A  thrpt    5         0.125 ±       0.443  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                           N/A  thrpt    5        51.219 ±     181.867    B/op
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                            N/A  thrpt    5      1762.789 ±    1427.557  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                       N/A  thrpt    5    721902.188 ±  598818.341    B/op
[info] GeoJSONBenchmark.readCirce:·gc.count                                                              N/A  thrpt    5        13.000                counts
[info] GeoJSONBenchmark.readCirce:·gc.time                                                               N/A  thrpt    5        13.000                    ms
[info] GeoJSONBenchmark.readJacksonScala                                                                 N/A  thrpt    5      5228.438 ±     196.638   ops/s
[info] GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate                                                  N/A  thrpt    5      2160.097 ±      81.462  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate.norm                                             N/A  thrpt    5    650392.079 ±       0.012    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5         0.071 ±       0.072  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5        21.297 ±      21.559    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5      2169.227 ±    1173.673  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5    652787.654 ±  337575.662    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.count                                                       N/A  thrpt    5        16.000                counts
[info] GeoJSONBenchmark.readJacksonScala:·gc.time                                                        N/A  thrpt    5        14.000                    ms
[info] GeoJSONBenchmark.readJsoniterScala                                                                N/A  thrpt    5     42926.537 ±    3185.364   ops/s
[info] GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate                                                 N/A  thrpt    5       714.030 ±      53.177  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                            N/A  thrpt    5     26184.010 ±       0.001    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5         0.567 ±       4.791  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5        21.374 ±     180.760    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5       809.003 ±    1159.856  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5     29594.302 ±   41001.372    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.count                                                      N/A  thrpt    5         6.000                counts
[info] GeoJSONBenchmark.readJsoniterScala:·gc.time                                                       N/A  thrpt    5         6.000                    ms
[info] GeoJSONBenchmark.writeCirce                                                                       N/A  thrpt    5      4186.578 ±      20.977   ops/s
[info] GeoJSONBenchmark.writeCirce:·gc.alloc.rate                                                        N/A  thrpt    5       769.671 ±       3.763  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.alloc.rate.norm                                                   N/A  thrpt    5    289408.100 ±       0.016    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5         0.029 ±       0.209  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5        10.972 ±      78.739    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5       808.045 ±    1159.865  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5    303941.182 ±  438128.947    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.count                                                             N/A  thrpt    5         6.000                counts
[info] GeoJSONBenchmark.writeCirce:·gc.time                                                              N/A  thrpt    5         5.000                    ms
[info] GeoJSONBenchmark.writeJacksonScala                                                                N/A  thrpt    5      4693.176 ±      41.309   ops/s
[info] GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate                                                 N/A  thrpt    5       548.679 ±       4.816  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                            N/A  thrpt    5    184037.439 ±       0.977    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5         0.179 ±       1.499  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5        60.336 ±     504.615    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5       506.423 ±    1123.168  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5    169994.229 ±  377229.114    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.count                                                      N/A  thrpt    5         4.000                counts
[info] GeoJSONBenchmark.writeJacksonScala:·gc.time                                                       N/A  thrpt    5         6.000                    ms
[info] GeoJSONBenchmark.writeJsoniterScala                                                               N/A  thrpt    5      6467.976 ±      48.711   ops/s
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate                                                N/A  thrpt    5       172.798 ±       1.328  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                           N/A  thrpt    5     42056.064 ±       0.008    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5         0.004 ±       0.036  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5         1.007 ±       8.675    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5       204.564 ±    1078.606  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5     49895.071 ±  263082.328    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.count                                                     N/A  thrpt    5         2.000                counts
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.time                                                      N/A  thrpt    5         4.000                    ms
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc                                                       N/A  thrpt    5      6624.786 ±      18.768   ops/s
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                        N/A  thrpt    5       128.572 ±       0.332  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                   N/A  thrpt    5     30552.069 ±       0.051    B/op
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                           N/A  thrpt    5       102.280 ±     880.663  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                      N/A  thrpt    5     24325.823 ±  209452.672    B/op
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.count                                             N/A  thrpt    5         1.000                counts
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.time                                              N/A  thrpt    5         2.000                    ms
[info] GoogleMapsAPIBenchmark.readCirce                                                                  N/A  thrpt    5      7480.123 ±     268.681   ops/s
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate                                                   N/A  thrpt    5      1741.873 ±      63.258  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm                                              N/A  thrpt    5    366550.726 ±      40.434    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5         0.012 ±       0.074  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5         2.479 ±      15.694    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5      1748.033 ±    1418.296  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5    367833.807 ±  297912.566    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.count                                                        N/A  thrpt    5        13.000                counts
[info] GoogleMapsAPIBenchmark.readCirce:·gc.time                                                         N/A  thrpt    5        11.000                    ms
[info] GoogleMapsAPIBenchmark.readDslJsonJava                                                            N/A  thrpt    5     11286.385 ±      95.688   ops/s
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate                                             N/A  thrpt    5       260.120 ±       2.192  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                        N/A  thrpt    5     36280.039 ±       0.015    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5         0.003 ±       0.026  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5         0.416 ±       3.583    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5       204.582 ±    1078.702  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5     28594.990 ±  150773.130    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.count                                                  N/A  thrpt    5         2.000                counts
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.time                                                   N/A  thrpt    5         5.000                    ms
[info] GoogleMapsAPIBenchmark.readJacksonScala                                                           N/A  thrpt    5     15083.761 ±     798.614   ops/s
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate                                            N/A  thrpt    5       383.222 ±      20.374  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       N/A  thrpt    5     39992.029 ±       0.010    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5         0.104 ±       0.851  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5        10.838 ±      88.620    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5       339.311 ±    1219.650  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5     35592.449 ±  127696.619    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.count                                                 N/A  thrpt    5         3.000                counts
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.time                                                  N/A  thrpt    5         5.000                    ms
[info] GoogleMapsAPIBenchmark.readJsoniterScala                                                          N/A  thrpt    5     22322.365 ±    1388.579   ops/s
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                           N/A  thrpt    5       418.273 ±      25.915  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      N/A  thrpt    5     29496.018 ±       0.001    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5         0.683 ±       5.785  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5        48.721 ±     412.564    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5       339.526 ±    1220.782  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5     23934.486 ±   86344.642    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count                                                N/A  thrpt    5         3.000                counts
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time                                                 N/A  thrpt    5         7.000                    ms
[info] GoogleMapsAPIBenchmark.readPlayJson                                                               N/A  thrpt    5      2444.916 ±      30.844   ops/s
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate                                                N/A  thrpt    5      1552.961 ±      19.861  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                           N/A  thrpt    5    999800.169 ±       0.024    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5         0.025 ±       0.088  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5        16.074 ±      56.503    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5      1487.682 ±    1164.784  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5    958071.499 ±  758687.804    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.count                                                     N/A  thrpt    5        11.000                counts
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.time                                                      N/A  thrpt    5         9.000                    ms
[info] GoogleMapsAPIBenchmark.readUPickle                                                                N/A  thrpt    5      8015.980 ±     291.581   ops/s
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.alloc.rate                                                 N/A  thrpt    5       984.138 ±      35.766  MB/sec
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.alloc.rate.norm                                            N/A  thrpt    5    193258.892 ±      47.276    B/op
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5         0.021 ±       0.098  MB/sec
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5         4.067 ±      19.091    B/op
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5       939.460 ±    1416.196  MB/sec
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5    184585.008 ±  279456.049    B/op
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.count                                                      N/A  thrpt    5         7.000                counts
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.time                                                       N/A  thrpt    5         6.000                    ms
[info] GoogleMapsAPIBenchmark.writeCirce                                                                 N/A  thrpt    5      7970.616 ±     334.879   ops/s
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate                                                  N/A  thrpt    5      1534.920 ±      63.261  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm                                             N/A  thrpt    5    303109.344 ±     112.459    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5         0.058 ±       0.207  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5        11.458 ±      40.819    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5      1618.443 ±    1418.320  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5    319691.905 ±  281791.120    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.count                                                       N/A  thrpt    5        12.000                counts
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.time                                                        N/A  thrpt    5        11.000                    ms
[info] GoogleMapsAPIBenchmark.writeDslJsonJava                                                           N/A  thrpt    5     54840.696 ±    1337.306   ops/s
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate                                            N/A  thrpt    5       512.526 ±      12.546  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                       N/A  thrpt    5     14712.008 ±       0.001    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5         0.591 ±       5.042  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5        16.815 ±     143.490    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5       506.236 ±    1122.619  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5     14518.812 ±   32230.317    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count                                                 N/A  thrpt    5         4.000                counts
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time                                                  N/A  thrpt    5         7.000                    ms
[info] GoogleMapsAPIBenchmark.writeJacksonScala                                                          N/A  thrpt    5     39842.934 ±     176.444   ops/s
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                           N/A  thrpt    5       593.073 ±       2.623  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      N/A  thrpt    5     23431.821 ±       0.361    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5         0.159 ±       1.235  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5         6.252 ±      48.694    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5       539.030 ±    1160.302  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5     21296.230 ±   45841.945    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count                                                N/A  thrpt    5         4.000                counts
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time                                                 N/A  thrpt    5         4.000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScala                                                         N/A  thrpt    5     72569.265 ±     890.463   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                          N/A  thrpt    5       545.480 ±       6.711  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     N/A  thrpt    5     11832.006 ±       0.001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 N/A  thrpt    5         0.700 ±       5.846  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            N/A  thrpt    5        15.248 ±     127.443    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             N/A  thrpt    5       506.333 ±    1122.886  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        N/A  thrpt    5     10985.478 ±   24358.367    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count                                               N/A  thrpt    5         4.000                counts
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time                                                N/A  thrpt    5         7.000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc                                                 N/A  thrpt    5     99730.602 ±     720.896   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             N/A  thrpt    5         0.004 ±       0.001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       N/A  thrpt    5           ≈ 0                counts
[info] GoogleMapsAPIBenchmark.writePlayJson                                                              N/A  thrpt    5      5584.206 ±     114.905   ops/s
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate                                               N/A  thrpt    5      1644.894 ±      33.749  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm                                          N/A  thrpt    5    463663.682 ±       2.648    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5         0.025 ±       0.104  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5         7.035 ±      29.338    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5      1624.116 ±    1433.224  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5    458201.219 ±  412795.197    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.count                                                    N/A  thrpt    5        12.000                counts
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.time                                                     N/A  thrpt    5        11.000                    ms
[info] GoogleMapsAPIBenchmark.writeUPickle                                                               N/A  thrpt    5      4454.958 ±     386.202   ops/s
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.alloc.rate                                                N/A  thrpt    5       247.044 ±      21.392  MB/sec
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.alloc.rate.norm                                           N/A  thrpt    5     87296.093 ±       0.013    B/op
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5         0.004 ±       0.033  MB/sec
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5         1.346 ±      11.592    B/op
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5       204.563 ±    1078.603  MB/sec
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5     73725.272 ±  388863.360    B/op
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.count                                                     N/A  thrpt    5         2.000                counts
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.time                                                      N/A  thrpt    5         4.000                    ms
[info] IntBenchmark.readCirce                                                                            N/A  thrpt    5   5278142.134 ±  127636.664   ops/s
[info] IntBenchmark.readCirce:·gc.alloc.rate                                                             N/A  thrpt    5      3272.203 ±      79.942  MB/sec
[info] IntBenchmark.readCirce:·gc.alloc.rate.norm                                                        N/A  thrpt    5       976.000 ±       0.001    B/op
[info] IntBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                    N/A  thrpt    5         0.075 ±       0.108  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                               N/A  thrpt    5         0.022 ±       0.032    B/op
[info] IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                                N/A  thrpt    5      3254.343 ±    1176.888  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                           N/A  thrpt    5       971.014 ±     365.293    B/op
[info] IntBenchmark.readCirce:·gc.count                                                                  N/A  thrpt    5        24.000                counts
[info] IntBenchmark.readCirce:·gc.time                                                                   N/A  thrpt    5        20.000                    ms
[info] IntBenchmark.readDslJsonJava                                                                      N/A  thrpt    5  42676092.591 ±  381506.870   ops/s
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate                                                       N/A  thrpt    5       433.746 ±       3.823  MB/sec
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                  N/A  thrpt    5        16.000 ±       0.001    B/op
[info] IntBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5         0.511 ±       4.380  MB/sec
[info] IntBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5         0.019 ±       0.162    B/op
[info] IntBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5       339.247 ±    1219.328  MB/sec
[info] IntBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5        12.528 ±      45.050    B/op
[info] IntBenchmark.readDslJsonJava:·gc.count                                                            N/A  thrpt    5         3.000                counts
[info] IntBenchmark.readDslJsonJava:·gc.time                                                             N/A  thrpt    5         7.000                    ms
[info] IntBenchmark.readJacksonScala                                                                     N/A  thrpt    5   8887239.666 ±  283979.979   ops/s
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate                                                      N/A  thrpt    5      3341.903 ±     106.821  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                 N/A  thrpt    5       592.000 ±       0.001    B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5         0.079 ±       0.132  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5         0.014 ±       0.023    B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5      3261.468 ±    1160.870  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5       577.887 ±     211.161    B/op
[info] IntBenchmark.readJacksonScala:·gc.count                                                           N/A  thrpt    5        24.000                counts
[info] IntBenchmark.readJacksonScala:·gc.time                                                            N/A  thrpt    5        17.000                    ms
[info] IntBenchmark.readJsoniterScala                                                                    N/A  thrpt    5  52536331.097 ±  516506.807   ops/s
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate                                                     N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                N/A  thrpt    5        ≈ 10⁻⁵                  B/op
[info] IntBenchmark.readJsoniterScala:·gc.count                                                          N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.readNaiveScala                                                                       N/A  thrpt    5  35797918.583 ±  763010.982   ops/s
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate                                                        N/A  thrpt    5      1273.417 ±      27.184  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate.norm                                                   N/A  thrpt    5        56.000 ±       0.001    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5         0.046 ±       0.104  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5         0.002 ±       0.005    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5      1209.562 ±    1156.604  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5        53.178 ±      50.680    B/op
[info] IntBenchmark.readNaiveScala:·gc.count                                                             N/A  thrpt    5         9.000                counts
[info] IntBenchmark.readNaiveScala:·gc.time                                                              N/A  thrpt    5         6.000                    ms
[info] IntBenchmark.readPlayJson                                                                         N/A  thrpt    5   7594652.685 ±  294478.621   ops/s
[info] IntBenchmark.readPlayJson:·gc.alloc.rate                                                          N/A  thrpt    5      3666.492 ±     141.742  MB/sec
[info] IntBenchmark.readPlayJson:·gc.alloc.rate.norm                                                     N/A  thrpt    5       760.000 ±       0.001    B/op
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                 N/A  thrpt    5         0.092 ±       0.044  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                            N/A  thrpt    5         0.019 ±       0.009    B/op
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                             N/A  thrpt    5      3662.254 ±    1443.120  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                        N/A  thrpt    5       759.806 ±     329.557    B/op
[info] IntBenchmark.readPlayJson:·gc.count                                                               N/A  thrpt    5        27.000                counts
[info] IntBenchmark.readPlayJson:·gc.time                                                                N/A  thrpt    5        21.000                    ms
[info] IntBenchmark.readUPickle                                                                          N/A  thrpt    5  10180279.291 ±  276087.617   ops/s
[info] IntBenchmark.readUPickle:·gc.alloc.rate                                                           N/A  thrpt    5      4294.107 ±     115.307  MB/sec
[info] IntBenchmark.readUPickle:·gc.alloc.rate.norm                                                      N/A  thrpt    5       664.000 ±       0.001    B/op
[info] IntBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                                  N/A  thrpt    5         0.079 ±       0.088  MB/sec
[info] IntBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                             N/A  thrpt    5         0.012 ±       0.013    B/op
[info] IntBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                              N/A  thrpt    5      4351.370 ±    1425.657  MB/sec
[info] IntBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                         N/A  thrpt    5       672.806 ±     216.736    B/op
[info] IntBenchmark.readUPickle:·gc.count                                                                N/A  thrpt    5        32.000                counts
[info] IntBenchmark.readUPickle:·gc.time                                                                 N/A  thrpt    5        22.000                    ms
[info] IntBenchmark.writeCirce                                                                           N/A  thrpt    5  21280068.341 ±  943708.681   ops/s
[info] IntBenchmark.writeCirce:·gc.alloc.rate                                                            N/A  thrpt    5      2379.097 ±     104.817  MB/sec
[info] IntBenchmark.writeCirce:·gc.alloc.rate.norm                                                       N/A  thrpt    5       176.000 ±       0.001    B/op
[info] IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                   N/A  thrpt    5         0.062 ±       0.160  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                              N/A  thrpt    5         0.005 ±       0.012    B/op
[info] IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                               N/A  thrpt    5      2429.543 ±    1422.908  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                          N/A  thrpt    5       179.896 ±     109.819    B/op
[info] IntBenchmark.writeCirce:·gc.count                                                                 N/A  thrpt    5        18.000                counts
[info] IntBenchmark.writeCirce:·gc.time                                                                  N/A  thrpt    5        14.000                    ms
[info] IntBenchmark.writeDslJsonJava                                                                     N/A  thrpt    5  57868299.044 ±  496136.702   ops/s
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate                                                      N/A  thrpt    5      1764.450 ±      15.370  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                 N/A  thrpt    5        48.000 ±       0.001    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5         0.104 ±       0.057  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5         0.003 ±       0.002    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5      1751.077 ±    1417.414  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5        47.644 ±      38.732    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.count                                                           N/A  thrpt    5        13.000                counts
[info] IntBenchmark.writeDslJsonJava:·gc.time                                                            N/A  thrpt    5        11.000                    ms
[info] IntBenchmark.writeJacksonScala                                                                    N/A  thrpt    5  13064840.470 ±  519759.407   ops/s
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate                                                     N/A  thrpt    5      2589.290 ±     103.073  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                N/A  thrpt    5       312.000 ±       0.001    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5         0.075 ±       0.044  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5         0.009 ±       0.005    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5      2716.993 ±      17.291  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5       327.416 ±      13.240    B/op
[info] IntBenchmark.writeJacksonScala:·gc.count                                                          N/A  thrpt    5        20.000                counts
[info] IntBenchmark.writeJacksonScala:·gc.time                                                           N/A  thrpt    5        14.000                    ms
[info] IntBenchmark.writeJsoniterScala                                                                   N/A  thrpt    5  46091601.760 ± 3223775.865   ops/s
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate                                                    N/A  thrpt    5       936.880 ±      65.639  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                               N/A  thrpt    5        32.000 ±       0.001    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5         0.033 ±       0.176  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5         0.001 ±       0.006    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5       940.055 ±    1415.116  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5        32.005 ±      46.794    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.count                                                         N/A  thrpt    5         7.000                counts
[info] IntBenchmark.writeJsoniterScala:·gc.time                                                          N/A  thrpt    5         6.000                    ms
[info] IntBenchmark.writeJsoniterScalaPrealloc                                                           N/A  thrpt    5  52334080.555 ±  705714.087   ops/s
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                            N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                       N/A  thrpt    5        ≈ 10⁻⁵                  B/op
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                 N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.writeNaiveScala                                                                      N/A  thrpt    5  40754616.736 ± 1171952.776   ops/s
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate                                                       N/A  thrpt    5      2071.344 ±      58.985  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm                                                  N/A  thrpt    5        80.000 ±       0.001    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5         0.092 ±       0.072  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5         0.004 ±       0.003    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5      2159.971 ±    1154.517  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5        83.402 ±      43.633    B/op
[info] IntBenchmark.writeNaiveScala:·gc.count                                                            N/A  thrpt    5        16.000                counts
[info] IntBenchmark.writeNaiveScala:·gc.time                                                             N/A  thrpt    5        11.000                    ms
[info] IntBenchmark.writePlayJson                                                                        N/A  thrpt    5   2522830.001 ±  140167.917   ops/s
[info] IntBenchmark.writePlayJson:·gc.alloc.rate                                                         N/A  thrpt    5      2064.075 ±     114.649  MB/sec
[info] IntBenchmark.writePlayJson:·gc.alloc.rate.norm                                                    N/A  thrpt    5      1288.000 ±       0.001    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                                N/A  thrpt    5         0.067 ±       0.104  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                           N/A  thrpt    5         0.042 ±       0.065    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                            N/A  thrpt    5      2153.643 ±    1148.408  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                       N/A  thrpt    5      1344.053 ±     717.957    B/op
[info] IntBenchmark.writePlayJson:·gc.count                                                              N/A  thrpt    5        16.000                counts
[info] IntBenchmark.writePlayJson:·gc.time                                                               N/A  thrpt    5        13.000                    ms
[info] IntBenchmark.writeUPickle                                                                         N/A  thrpt    5  12428231.104 ±   86696.556   ops/s
[info] IntBenchmark.writeUPickle:·gc.alloc.rate                                                          N/A  thrpt    5      2399.955 ±      17.251  MB/sec
[info] IntBenchmark.writeUPickle:·gc.alloc.rate.norm                                                     N/A  thrpt    5       304.000 ±       0.001    B/op
[info] IntBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                                 N/A  thrpt    5         0.050 ±       0.091  MB/sec
[info] IntBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                            N/A  thrpt    5         0.006 ±       0.012    B/op
[info] IntBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                             N/A  thrpt    5      2432.262 ±    1441.341  MB/sec
[info] IntBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                                        N/A  thrpt    5       308.061 ±     181.654    B/op
[info] IntBenchmark.writeUPickle:·gc.count                                                               N/A  thrpt    5        18.000                counts
[info] IntBenchmark.writeUPickle:·gc.time                                                                N/A  thrpt    5        14.000                    ms
[info] IntMapOfBooleansBenchmark.readJsoniterScala                                                       128  thrpt    5    154909.543 ±    2696.415   ops/s
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5      2841.175 ±      49.749  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5     28872.003 ±       0.001    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.071 ±       0.072  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         0.719 ±       0.730    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5      2844.675 ±    1179.476  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5     28908.443 ±   12015.882    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5        21.000                counts
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5        17.000                    ms
[info] IntMapOfBooleansBenchmark.readPlayJson                                                            128  thrpt    5     23893.530 ±    1235.954   ops/s
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      1858.164 ±      96.288  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5    122416.018 ±       0.004    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.021 ±       0.057  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         1.366 ±       3.683    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5      1762.024 ±    1426.963  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5    116185.057 ±   96035.388    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        13.000                counts
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5        12.000                    ms
[info] IntMapOfBooleansBenchmark.writeJacksonScala                                                       128  thrpt    5    148028.276 ±    4470.137   ops/s
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1375.714 ±      41.506  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5     14632.003 ±       0.001    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.046 ±       0.143  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         0.485 ±       1.518    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5      1352.884 ±       7.018  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5     14389.822 ±     397.671    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5        10.000                counts
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5         7.000                    ms
[info] IntMapOfBooleansBenchmark.writeJsoniterScala                                                      128  thrpt    5    494079.226 ±    3583.686   ops/s
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5      1021.925 ±       7.540  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      3256.001 ±       0.001    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5         0.021 ±       0.113  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         0.066 ±       0.361    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5       940.045 ±    1415.549  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5      2996.078 ±    4523.596    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         7.000                counts
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5         6.000                    ms
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5    538085.085 ±   21337.117   ops/s
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5       525.032 ±      20.801  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5      1536.001 ±       0.001    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                      128  thrpt    5         0.677 ±       5.737  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5         1.968 ±      16.688    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                  128  thrpt    5       506.517 ±    1123.391  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5      1483.266 ±    3276.651    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5         4.000                counts
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time                                     128  thrpt    5         7.000                    ms
[info] IntMapOfBooleansBenchmark.writePlayJson                                                           128  thrpt    5     20867.356 ±     324.814   ops/s
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5       456.340 ±       7.337  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5     34424.179 ±       1.363    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.075 ±       0.557  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         5.661 ±      42.071    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5       371.831 ±    1331.782  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5     28122.818 ±  100732.983    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5         3.000                counts
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5         4.000                    ms
[info] ListOfBooleansBenchmark.readCirce                                                                 128  thrpt    5    391818.385 ±    6764.002   ops/s
[info] ListOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      2658.121 ±      46.522  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5     10680.001 ±       0.001    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5         0.058 ±       0.132  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5         0.234 ±       0.526    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5      2705.954 ±      30.252  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5     10872.301 ±     152.086    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.count                                                       128  thrpt    5        20.000                counts
[info] ListOfBooleansBenchmark.readCirce:·gc.time                                                        128  thrpt    5        16.000                    ms
[info] ListOfBooleansBenchmark.readJacksonScala                                                          128  thrpt    5    324193.236 ±   16046.623   ops/s
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5       858.301 ±      42.469  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5      4168.001 ±       0.001    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.012 ±       0.044  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0.061 ±       0.214    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5       809.867 ±    1163.858  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5      3941.343 ±    5809.263    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         6.000                counts
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5         5.000                    ms
[info] ListOfBooleansBenchmark.readJsoniterScala                                                         128  thrpt    5    416910.869 ±   14063.999   ops/s
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       822.135 ±      27.323  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5      3104.001 ±       0.001    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.025 ±       0.105  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         0.095 ±       0.399    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5       806.848 ±    1159.944  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5      3046.364 ±    4378.522    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5         6.000                counts
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5         5.000                    ms
[info] ListOfBooleansBenchmark.readPlayJson                                                              128  thrpt    5    110180.076 ±    2949.716   ops/s
[info] ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      3988.181 ±     106.957  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     56984.004 ±       0.001    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.075 ±       0.072  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         1.070 ±       1.009    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5      3945.728 ±    1175.701  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5     56388.226 ±   17342.169    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        29.000                counts
[info] ListOfBooleansBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        23.000                    ms
[info] ListOfBooleansBenchmark.readUPickle                                                               128  thrpt    5    574977.876 ±   17829.182   ops/s
[info] ListOfBooleansBenchmark.readUPickle:·gc.alloc.rate                                                128  thrpt    5      2509.881 ±      77.780  MB/sec
[info] ListOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm                                           128  thrpt    5      6872.001 ±       0.001    B/op
[info] ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0.054 ±       0.122  MB/sec
[info] ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         0.148 ±       0.336    B/op
[info] ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                   128  thrpt    5      2569.008 ±    1163.382  MB/sec
[info] ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5      7031.661 ±    3101.498    B/op
[info] ListOfBooleansBenchmark.readUPickle:·gc.count                                                     128  thrpt    5        19.000                counts
[info] ListOfBooleansBenchmark.readUPickle:·gc.time                                                      128  thrpt    5        13.000                    ms
[info] ListOfBooleansBenchmark.writeCirce                                                                128  thrpt    5    325520.215 ±    5070.261   ops/s
[info] ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5       496.248 ±       7.781  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5      2400.001 ±       0.001    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5         0.723 ±       6.088  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5         3.495 ±      29.411    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5       474.125 ±    1067.447  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5      2291.916 ±    5168.039    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.count                                                      128  thrpt    5         4.000                counts
[info] ListOfBooleansBenchmark.writeCirce:·gc.time                                                       128  thrpt    5         8.000                    ms
[info] ListOfBooleansBenchmark.writeJacksonScala                                                         128  thrpt    5    763870.968 ±    6876.127   ops/s
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5       558.970 ±       4.927  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5      1152.001 ±       0.001    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.067 ±       0.451  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         0.137 ±       0.928    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5       539.126 ±    1160.509  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5      1111.884 ±    2393.435    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         4.000                counts
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5         3.000                    ms
[info] ListOfBooleansBenchmark.writeJsoniterScala                                                        128  thrpt    5   1984811.055 ±    8826.566   ops/s
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       917.944 ±       4.612  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5       728.000 ±       0.001    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5         0.042 ±       0.188  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         0.033 ±       0.149    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5       940.248 ±    1416.532  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5       745.589 ±    1122.004    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         7.000                counts
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5         6.000                    ms
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5   2383307.017 ±   10657.319   ops/s
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5           ≈ 0                counts
[info] ListOfBooleansBenchmark.writePlayJson                                                             128  thrpt    5    383724.803 ±   12461.969   ops/s
[info] ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5       551.848 ±      17.928  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5      2264.001 ±       0.001    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.816 ±       6.928  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         3.332 ±      28.301    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5       505.708 ±    1121.186  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5      2078.092 ±    4610.783    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5         4.000                counts
[info] ListOfBooleansBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5         8.000                    ms
[info] ListOfBooleansBenchmark.writeUPickle                                                              128  thrpt    5    177902.976 ±    1738.928   ops/s
[info] ListOfBooleansBenchmark.writeUPickle:·gc.alloc.rate                                               128  thrpt    5       453.874 ±       4.242  MB/sec
[info] ListOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm                                          128  thrpt    5      4016.002 ±       0.001    B/op
[info] ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.683 ±       5.741  MB/sec
[info] ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         6.053 ±      50.878    B/op
[info] ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                  128  thrpt    5       474.482 ±    1068.607  MB/sec
[info] ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5      4203.079 ±    9471.103    B/op
[info] ListOfBooleansBenchmark.writeUPickle:·gc.count                                                    128  thrpt    5         4.000                counts
[info] ListOfBooleansBenchmark.writeUPickle:·gc.time                                                     128  thrpt    5         8.000                    ms
[info] MapOfIntsToBooleansBenchmark.readCirce                                                            128  thrpt    5     59427.592 ±    2439.129   ops/s
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate                                             128  thrpt    5      2001.300 ±      82.525  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                        128  thrpt    5     53016.007 ±       0.001    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.062 ±       0.160  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         1.661 ±       4.320    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5      2021.685 ±      20.733  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5     53560.128 ±    1891.412    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.count                                                  128  thrpt    5        15.000                counts
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.time                                                   128  thrpt    5        12.000                    ms
[info] MapOfIntsToBooleansBenchmark.readJacksonScala                                                     128  thrpt    5     89097.328 ±     745.883   ops/s
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                      128  thrpt    5      1601.954 ±      13.951  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5     28304.005 ±       0.001    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5         0.050 ±       0.146  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5         0.882 ±       2.572    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5      1625.118 ±    1424.904  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5     28719.800 ±   25323.442    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count                                           128  thrpt    5        12.000                counts
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time                                            128  thrpt    5        10.000                    ms
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala                                                    128  thrpt    5     99447.128 ±    1069.958   ops/s
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                     128  thrpt    5      1523.627 ±      16.129  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5     24120.004 ±       0.001    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5         0.037 ±       0.119  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5         0.592 ±       1.875    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5      1478.941 ±    1153.416  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5     23409.594 ±   18165.238    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count                                          128  thrpt    5        11.000                counts
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time                                           128  thrpt    5         8.000                    ms
[info] MapOfIntsToBooleansBenchmark.readPlayJson                                                         128  thrpt    5     17825.011 ±     306.343   ops/s
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate                                          128  thrpt    5      1242.370 ±      21.318  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                     128  thrpt    5    109712.025 ±       0.010    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.029 ±       0.134  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         2.580 ±      11.873    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5      1217.120 ±    1162.822  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5    107549.767 ±  103553.802    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.count                                               128  thrpt    5         9.000                counts
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.time                                                128  thrpt    5         8.000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala                                                    128  thrpt    5    122710.934 ±     914.643   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                     128  thrpt    5      1129.973 ±       8.269  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5     14496.003 ±       0.001    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5         0.050 ±       0.122  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5         0.641 ±       1.561    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5      1216.059 ±    1162.069  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5     15598.911 ±   14888.672    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count                                          128  thrpt    5         9.000                counts
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time                                           128  thrpt    5         7.000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala                                                   128  thrpt    5    473204.611 ±    5314.114   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                    128  thrpt    5       521.821 ±       5.928  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5      1736.001 ±       0.001    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5         0.677 ±       5.784  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5         2.253 ±      19.249    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5       506.502 ±    1123.379  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5      1683.326 ±    3730.439    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count                                         128  thrpt    5         4.000                counts
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time                                          128  thrpt    5         6.000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc                                           128  thrpt    5    574155.932 ±    8020.645   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            128  thrpt    5         5.836 ±       0.082  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       128  thrpt    5        16.001 ±       0.001    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 128  thrpt    5           ≈ 0                counts
[info] MapOfIntsToBooleansBenchmark.writePlayJson                                                        128  thrpt    5     21073.087 ±     194.658   ops/s
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate                                         128  thrpt    5       402.245 ±       3.789  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                    128  thrpt    5     30048.177 ±       1.351    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5         0.067 ±       0.489  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         4.973 ±      36.509    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5       474.006 ±    1067.022  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5     35435.476 ±   79780.828    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.count                                              128  thrpt    5         4.000                counts
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.time                                               128  thrpt    5         5.000                    ms
[info] MissingReqFieldBenchmark.readCirce                                                                N/A  thrpt    5   2251503.133 ±   61366.102   ops/s
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate                                                 N/A  thrpt    5      3089.339 ±      84.241  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm                                            N/A  thrpt    5      2160.000 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5         0.058 ±       0.067  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5         0.041 ±       0.047    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5      3115.806 ±    1426.088  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5      2179.145 ±    1020.313    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.count                                                      N/A  thrpt    5        23.000                counts
[info] MissingReqFieldBenchmark.readCirce:·gc.time                                                       N/A  thrpt    5        17.000                    ms
[info] MissingReqFieldBenchmark.readDslJsonJava                                                          N/A  thrpt    5    852225.958 ±   19233.467   ops/s
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate                                           N/A  thrpt    5       541.397 ±      12.396  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                      N/A  thrpt    5      1000.000 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5         0.502 ±       4.279  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5         0.927 ±       7.899    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5       506.024 ±    1122.037  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5       935.759 ±    2070.898    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.count                                                N/A  thrpt    5         4.000                counts
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.time                                                 N/A  thrpt    5         7.000                    ms
[info] MissingReqFieldBenchmark.readJacksonScala                                                         N/A  thrpt    5    304884.073 ±    2507.875   ops/s
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate                                          N/A  thrpt    5       571.717 ±       4.815  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     N/A  thrpt    5      2952.001 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 N/A  thrpt    5         0.062 ±       0.367  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            N/A  thrpt    5         0.322 ±       1.893    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             N/A  thrpt    5       641.569 ±     280.216  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        N/A  thrpt    5      3312.061 ±    1424.314    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.count                                               N/A  thrpt    5         5.000                counts
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.time                                                N/A  thrpt    5         5.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterScala                                                        N/A  thrpt    5    807134.973 ±   23306.026   ops/s
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate                                         N/A  thrpt    5       607.048 ±      17.739  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    N/A  thrpt    5      1184.001 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                N/A  thrpt    5         0.660 ±       5.552  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           N/A  thrpt    5         1.276 ±      10.732    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            N/A  thrpt    5       641.181 ±     279.490  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       N/A  thrpt    5      1249.993 ±     522.678    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.count                                              N/A  thrpt    5         5.000                counts
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.time                                               N/A  thrpt    5         7.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStackless                                                    N/A  thrpt    5   4557097.105 ±  221283.745   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate                                     N/A  thrpt    5      1459.027 ±      71.084  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm                                N/A  thrpt    5       504.000 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space                            N/A  thrpt    5         0.067 ±       0.104  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm                       N/A  thrpt    5         0.023 ±       0.036    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space                        N/A  thrpt    5      1345.087 ±       5.323  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm                   N/A  thrpt    5       464.705 ±      24.367    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.count                                          N/A  thrpt    5        10.000                counts
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.time                                           N/A  thrpt    5         7.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump                                              N/A  thrpt    5   8813704.959 ±  132868.494   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate                               N/A  thrpt    5       716.636 ±      10.597  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm                          N/A  thrpt    5       128.000 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space                      N/A  thrpt    5         0.673 ±       5.486  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm                 N/A  thrpt    5         0.120 ±       0.977    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space                  N/A  thrpt    5       807.652 ±    1155.935  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm             N/A  thrpt    5       144.244 ±     206.195    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count                                    N/A  thrpt    5         6.000                counts
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time                                     N/A  thrpt    5         6.000                    ms
[info] MissingReqFieldBenchmark.readPlayJson                                                             N/A  thrpt    5    192062.681 ±    4974.702   ops/s
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate                                              N/A  thrpt    5      1298.133 ±      34.561  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm                                         N/A  thrpt    5     10640.002 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5         0.046 ±       0.132  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5         0.374 ±       1.072    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5      1216.952 ±    1162.471  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5      9969.101 ±    9456.025    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.count                                                   N/A  thrpt    5         9.000                counts
[info] MissingReqFieldBenchmark.readPlayJson:·gc.time                                                    N/A  thrpt    5         7.000                    ms
[info] MissingReqFieldBenchmark.readUPickle                                                              N/A  thrpt    5    316101.030 ±    3967.301   ops/s
[info] MissingReqFieldBenchmark.readUPickle:·gc.alloc.rate                                               N/A  thrpt    5       624.885 ±       8.003  MB/sec
[info] MissingReqFieldBenchmark.readUPickle:·gc.alloc.rate.norm                                          N/A  thrpt    5      3112.001 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5         0.704 ±       5.883  MB/sec
[info] MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5         3.494 ±      29.193    B/op
[info] MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5       640.624 ±     278.255  MB/sec
[info] MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5      3190.444 ±    1387.508    B/op
[info] MissingReqFieldBenchmark.readUPickle:·gc.count                                                    N/A  thrpt    5         5.000                counts
[info] MissingReqFieldBenchmark.readUPickle:·gc.time                                                     N/A  thrpt    5        10.000                    ms
[info] MutableBitSetBenchmark.readJsoniterScala                                                          128  thrpt    5    940768.907 ±   18535.699   ops/s
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate                                           128  thrpt    5        52.592 ±       1.007  MB/sec
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5        88.000 ±       0.001    B/op
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5       102.317 ±     880.981  MB/sec
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5       172.713 ±    1487.108    B/op
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.count                                                128  thrpt    5         1.000                counts
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.time                                                 128  thrpt    5         2.000                    ms
[info] MutableBitSetBenchmark.readPlayJson                                                               128  thrpt    5     63666.239 ±    1724.824   ops/s
[info] MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate                                                128  thrpt    5      2957.427 ±      79.545  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     73120.007 ±       0.001    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0.092 ±       0.238  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         2.261 ±       5.833    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5      2855.043 ±    1172.534  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5     70565.972 ±   27713.880    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.count                                                     128  thrpt    5        21.000                counts
[info] MutableBitSetBenchmark.readPlayJson:·gc.time                                                      128  thrpt    5        19.000                    ms
[info] MutableBitSetBenchmark.writeJacksonScala                                                          128  thrpt    5   1050125.497 ±   48603.970   ops/s
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate                                           128  thrpt    5       603.022 ±      27.800  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5       904.000 ±       0.001    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.050 ±       0.303  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0.074 ±       0.452    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5       539.281 ±    1160.845  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5       805.878 ±    1735.150    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.count                                                128  thrpt    5         4.000                counts
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.time                                                 128  thrpt    5         3.000                    ms
[info] MutableBitSetBenchmark.writeJsoniterScala                                                         128  thrpt    5    690163.436 ±   11192.219   ops/s
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       192.900 ±       3.191  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5       440.001 ±       0.001    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5       204.557 ±    1078.571  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5       467.795 ±    2466.547    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.count                                               128  thrpt    5         2.000                counts
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.time                                                128  thrpt    5         4.000                    ms
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc                                                 128  thrpt    5   1478331.407 ±    6566.962   ops/s
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  128  thrpt    5        15.026 ±       0.070  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             128  thrpt    5        16.000 ±       0.001    B/op
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       128  thrpt    5           ≈ 0                counts
[info] MutableBitSetBenchmark.writePlayJson                                                              128  thrpt    5     46501.155 ±     404.339   ops/s
[info] MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate                                               128  thrpt    5      1967.908 ±      17.292  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     66616.009 ±       0.001    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.079 ±       0.104  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         2.677 ±       3.527    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5      1898.721 ±    1163.036  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5     64278.301 ±   39472.957    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.count                                                    128  thrpt    5        14.000                counts
[info] MutableBitSetBenchmark.writePlayJson:·gc.time                                                     128  thrpt    5        11.000                    ms
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala                                               128  thrpt    5    243413.829 ±    2802.625   ops/s
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                128  thrpt    5       952.577 ±      11.297  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           128  thrpt    5      6160.002 ±       0.001    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       128  thrpt    5         0.037 ±       0.200  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5         0.242 ±       1.292    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5       940.221 ±    1416.147  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5      6080.044 ±    9156.697    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.count                                     128  thrpt    5         7.000                counts
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.time                                      128  thrpt    5         5.000                    ms
[info] MutableLongMapOfBooleansBenchmark.readPlayJson                                                    128  thrpt    5     27394.515 ±     217.020   ops/s
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                     128  thrpt    5      1496.007 ±      12.178  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                128  thrpt    5     85960.015 ±       0.002    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            128  thrpt    5         0.050 ±       0.156  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5         2.872 ±       8.998    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        128  thrpt    5      1489.313 ±    1172.748  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5     85601.819 ±   68169.856    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.count                                          128  thrpt    5        11.000                counts
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.time                                           128  thrpt    5         8.000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala                                               128  thrpt    5    138646.740 ±    2244.485   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                128  thrpt    5      1693.863 ±      27.553  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                           128  thrpt    5     19232.003 ±       0.001    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                       128  thrpt    5         0.046 ±       0.067  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5         0.520 ±       0.763    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5      1761.084 ±    1428.146  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5     20006.515 ±   16448.486    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.count                                     128  thrpt    5        13.000                counts
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.time                                      128  thrpt    5        10.000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala                                              128  thrpt    5    355743.712 ±    5187.613   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                               128  thrpt    5      1693.926 ±      24.971  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                          128  thrpt    5      7496.001 ±       0.001    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                      128  thrpt    5         0.087 ±       0.088  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5         0.387 ±       0.385    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                  128  thrpt    5      1749.808 ±    1419.544  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5      7744.641 ±    6309.070    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.count                                    128  thrpt    5        13.000                counts
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.time                                     128  thrpt    5        10.000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc                                      128  thrpt    5    426711.351 ±    8383.947   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                       128  thrpt    5      1461.556 ±      28.652  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                  128  thrpt    5      5392.001 ±       0.001    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space              128  thrpt    5         0.067 ±       0.067  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm         128  thrpt    5         0.246 ±       0.245    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space          128  thrpt    5      1479.271 ±    1166.873  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm     128  thrpt    5      5457.308 ±    4300.993    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                            128  thrpt    5        11.000                counts
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time                             128  thrpt    5         9.000                    ms
[info] MutableLongMapOfBooleansBenchmark.writePlayJson                                                   128  thrpt    5     19831.451 ±     168.446   ops/s
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                    128  thrpt    5       497.505 ±       4.264  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                               128  thrpt    5     39496.353 ±       2.851    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                           128  thrpt    5         0.083 ±       0.631  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5         6.625 ±      50.240    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                       128  thrpt    5       506.604 ±    1123.711  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5     40246.803 ±   89260.610    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.count                                         128  thrpt    5         4.000                counts
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.time                                          128  thrpt    5         5.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readCirce                                                     128  thrpt    5     81025.294 ±      71.205   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate                                      128  thrpt    5      1674.141 ±       1.802  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                 128  thrpt    5     32528.005 ±       0.001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                             128  thrpt    5         0.012 ±       0.044  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5         0.243 ±       0.853    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                         128  thrpt    5      1614.431 ±    1417.895  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5     31366.431 ±   27516.442    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.count                                           128  thrpt    5        12.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.time                                            128  thrpt    5        10.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala                                              128  thrpt    5    127285.383 ±     761.922   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate                               128  thrpt    5       629.445 ±       3.657  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                          128  thrpt    5      7784.003 ±       0.001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                      128  thrpt    5         0.054 ±       0.378  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5         0.668 ±       4.673    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                  128  thrpt    5       674.242 ±       2.077  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5      8338.004 ±      70.720    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count                                    128  thrpt    5         5.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time                                     128  thrpt    5         4.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala                                             128  thrpt    5    230744.609 ±    1970.144   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                              128  thrpt    5       949.846 ±       7.989  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                         128  thrpt    5      6480.002 ±       0.001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                     128  thrpt    5         0.012 ±       0.072  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                128  thrpt    5         0.085 ±       0.487    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                 128  thrpt    5       940.166 ±    1416.425  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm            128  thrpt    5      6411.578 ±    9629.408    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count                                   128  thrpt    5         7.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time                                    128  thrpt    5         6.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson                                                  128  thrpt    5     17495.952 ±     709.047   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate                                   128  thrpt    5      1001.751 ±      40.414  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                              128  thrpt    5     90128.025 ±       0.014    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                          128  thrpt    5         0.021 ±       0.080  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5         1.863 ±       7.174    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                      128  thrpt    5      1080.696 ±    1424.469  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5     97087.440 ±  126323.571    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.count                                        128  thrpt    5         8.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.time                                         128  thrpt    5         5.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala                                             128  thrpt    5    165748.996 ±    1657.447   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                              128  thrpt    5      1066.304 ±      10.468  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                         128  thrpt    5     10128.002 ±       0.001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                     128  thrpt    5         0.037 ±       0.143  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                128  thrpt    5         0.356 ±       1.364    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                 128  thrpt    5      1080.654 ±    1423.570  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm            128  thrpt    5     10266.261 ±   13545.316    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count                                   128  thrpt    5         8.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time                                    128  thrpt    5         6.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala                                            128  thrpt    5    530168.597 ±   22077.054   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                             128  thrpt    5       590.027 ±      24.460  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                        128  thrpt    5      1752.001 ±       0.001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                    128  thrpt    5         0.686 ±       5.680  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm               128  thrpt    5         2.015 ±      16.680    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                128  thrpt    5       641.179 ±     279.443  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm           128  thrpt    5      1905.207 ±     873.339    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count                                  128  thrpt    5         5.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time                                   128  thrpt    5         8.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc                                    128  thrpt    5    568695.053 ±    3276.239   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                     128  thrpt    5        11.560 ±       0.066  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                128  thrpt    5        32.001 ±       0.001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                          128  thrpt    5           ≈ 0                counts
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson                                                 128  thrpt    5     21582.924 ±     472.993   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate                                  128  thrpt    5       442.111 ±       9.763  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                             128  thrpt    5     32248.020 ±       0.009    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                         128  thrpt    5         0.054 ±       0.466  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5         3.947 ±      33.982    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                     128  thrpt    5       371.681 ±    1331.166  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5     27066.552 ±   96980.810    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.count                                       128  thrpt    5         3.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.time                                        128  thrpt    5         4.000                    ms
[info] MutableSetOfIntsBenchmark.readCirce                                                               128  thrpt    5     76021.331 ±     991.256   ops/s
[info] MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5      1329.411 ±      17.696  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5     27528.005 ±       0.001    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0.042 ±       0.160  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         0.862 ±       3.315    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5      1343.311 ±       4.444  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5     27816.061 ±     347.870    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.count                                                     128  thrpt    5        10.000                counts
[info] MutableSetOfIntsBenchmark.readCirce:·gc.time                                                      128  thrpt    5         8.000                    ms
[info] MutableSetOfIntsBenchmark.readJacksonScala                                                        128  thrpt    5    140038.588 ±    6724.865   ops/s
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5       598.504 ±      28.656  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5      6728.003 ±       0.001    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5         0.050 ±       0.343  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         0.560 ±       3.831    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5       539.169 ±    1160.602  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5      6070.022 ±   13071.345    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5         4.000                counts
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5         4.000                    ms
[info] MutableSetOfIntsBenchmark.readJsoniterScala                                                       128  thrpt    5    208373.043 ±    2281.550   ops/s
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       742.306 ±       8.353  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      5608.002 ±       0.001    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.690 ±       5.763  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         5.235 ±      43.731    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5       807.121 ±    1166.595  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5      6102.251 ±    8901.146    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5         6.000                counts
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5         6.000                    ms
[info] MutableSetOfIntsBenchmark.readPlayJson                                                            128  thrpt    5     42005.011 ±     241.304   ops/s
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      1741.029 ±      10.009  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     65248.010 ±       0.001    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.037 ±       0.200  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         1.403 ±       7.470    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5      1627.315 ±    1429.746  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5     60977.944 ±   53388.450    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        12.000                counts
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5        11.000                    ms
[info] MutableSetOfIntsBenchmark.readUPickle                                                             128  thrpt    5    122047.950 ±    5715.486   ops/s
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.alloc.rate                                              128  thrpt    5      1130.693 ±      53.003  MB/sec
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.alloc.rate.norm                                         128  thrpt    5     14584.003 ±       0.001    B/op
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.021 ±       0.057  MB/sec
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         0.269 ±       0.744    B/op
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                 128  thrpt    5      1208.876 ±    1157.354  MB/sec
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5     15595.432 ±   14967.196    B/op
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.count                                                   128  thrpt    5         9.000                counts
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.time                                                    128  thrpt    5         8.000                    ms
[info] MutableSetOfIntsBenchmark.writeCirce                                                              128  thrpt    5    265253.183 ±   11070.163   ops/s
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5      1248.211 ±      52.347  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5      7408.002 ±       0.001    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.062 ±       0.196  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         0.373 ±       1.177    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5      1208.077 ±    1155.516  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5      7178.274 ±    6964.577    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.count                                                    128  thrpt    5         9.000                counts
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.time                                                     128  thrpt    5         7.000                    ms
[info] MutableSetOfIntsBenchmark.writeJacksonScala                                                       128  thrpt    5    517260.110 ±    7128.755   ops/s
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5       415.353 ±       5.744  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5      1264.001 ±       0.001    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.067 ±       0.573  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         0.203 ±       1.747    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5       474.069 ±    1067.124  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5      1443.563 ±    3255.533    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5         4.000                counts
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5         5.000                    ms
[info] MutableSetOfIntsBenchmark.writeJsoniterScala                                                      128  thrpt    5    604317.872 ±   30060.566   ops/s
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       319.402 ±      15.931  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5       832.001 ±       0.001    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5         0.008 ±       0.061  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         0.022 ±       0.162    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5       306.865 ±    1078.673  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5       799.563 ±    2811.039    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         3.000                counts
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5         7.000                    ms
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5    709236.843 ±    4013.553   ops/s
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5         0.001 ±       0.001    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5           ≈ 0                counts
[info] MutableSetOfIntsBenchmark.writePlayJson                                                           128  thrpt    5     34458.697 ±     540.122   ops/s
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5      1784.789 ±      27.807  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5     81536.012 ±       0.001    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.050 ±       0.091  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         2.285 ±       4.213    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5      1879.900 ±    1156.659  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5     85910.609 ±   53527.549    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5        14.000                counts
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5        11.000                    ms
[info] MutableSetOfIntsBenchmark.writeUPickle                                                            128  thrpt    5    139152.500 ±    1924.019   ops/s
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.alloc.rate                                             128  thrpt    5      1034.646 ±      14.050  MB/sec
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.alloc.rate.norm                                        128  thrpt    5     11704.003 ±       0.001    B/op
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.033 ±       0.176  MB/sec
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         0.377 ±       1.985    B/op
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                128  thrpt    5       940.115 ±    1415.616  MB/sec
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5     10633.461 ±   15995.677    B/op
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.count                                                  128  thrpt    5         7.000                counts
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.time                                                   128  thrpt    5         5.000                    ms
[info] NestedStructsBenchmark.readCirce                                                                  128  thrpt    5     61308.204 ±    1051.502   ops/s
[info] NestedStructsBenchmark.readCirce:·gc.alloc.rate                                                   128  thrpt    5      2776.438 ±      47.400  MB/sec
[info] NestedStructsBenchmark.readCirce:·gc.alloc.rate.norm                                              128  thrpt    5     71288.007 ±       0.001    B/op
[info] NestedStructsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5         0.092 ±       0.217  MB/sec
[info] NestedStructsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5         2.346 ±       5.544    B/op
[info] NestedStructsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5      2706.870 ±      30.490  MB/sec
[info] NestedStructsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5     69503.354 ±    1819.850    B/op
[info] NestedStructsBenchmark.readCirce:·gc.count                                                        128  thrpt    5        20.000                counts
[info] NestedStructsBenchmark.readCirce:·gc.time                                                         128  thrpt    5        17.000                    ms
[info] NestedStructsBenchmark.readJacksonScala                                                           128  thrpt    5    137672.597 ±    8472.047   ops/s
[info] NestedStructsBenchmark.readJacksonScala:·gc.alloc.rate                                            128  thrpt    5      1233.410 ±      76.013  MB/sec
[info] NestedStructsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5     14104.003 ±       0.001    B/op
[info] NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.025 ±       0.088  MB/sec
[info] NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0.286 ±       1.006    B/op
[info] NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5      1217.156 ±    1162.974  MB/sec
[info] NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5     13931.130 ±   13466.201    B/op
[info] NestedStructsBenchmark.readJacksonScala:·gc.count                                                 128  thrpt    5         9.000                counts
[info] NestedStructsBenchmark.readJacksonScala:·gc.time                                                  128  thrpt    5         6.000                    ms
[info] NestedStructsBenchmark.readJsoniterScala                                                          128  thrpt    5    493698.598 ±    9904.427   ops/s
[info] NestedStructsBenchmark.readJsoniterScala:·gc.alloc.rate                                           128  thrpt    5      1289.520 ±      25.457  MB/sec
[info] NestedStructsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      4112.001 ±       0.001    B/op
[info] NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.067 ±       0.104  MB/sec
[info] NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0.213 ±       0.334    B/op
[info] NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5      1343.965 ±       4.580  MB/sec
[info] NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5      4285.695 ±      75.713    B/op
[info] NestedStructsBenchmark.readJsoniterScala:·gc.count                                                128  thrpt    5        10.000                counts
[info] NestedStructsBenchmark.readJsoniterScala:·gc.time                                                 128  thrpt    5         8.000                    ms
[info] NestedStructsBenchmark.readPlayJson                                                               128  thrpt    5     16419.248 ±     418.561   ops/s
[info] NestedStructsBenchmark.readPlayJson:·gc.alloc.rate                                                128  thrpt    5      2145.135 ±      53.948  MB/sec
[info] NestedStructsBenchmark.readPlayJson:·gc.alloc.rate.norm                                           128  thrpt    5    205664.026 ±       0.014    B/op
[info] NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0.037 ±       0.088  MB/sec
[info] NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         3.589 ±       8.395    B/op
[info] NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5      2170.555 ±    1169.196  MB/sec
[info] NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5    208097.151 ±  111734.284    B/op
[info] NestedStructsBenchmark.readPlayJson:·gc.count                                                     128  thrpt    5        16.000                counts
[info] NestedStructsBenchmark.readPlayJson:·gc.time                                                      128  thrpt    5        16.000                    ms
[info] NestedStructsBenchmark.writeCirce                                                                 128  thrpt    5     40350.278 ±     268.950   ops/s
[info] NestedStructsBenchmark.writeCirce:·gc.alloc.rate                                                  128  thrpt    5      2250.376 ±      15.482  MB/sec
[info] NestedStructsBenchmark.writeCirce:·gc.alloc.rate.norm                                             128  thrpt    5     87792.010 ±       0.001    B/op
[info] NestedStructsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5         0.100 ±       0.200  MB/sec
[info] NestedStructsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5         3.899 ±       7.792    B/op
[info] NestedStructsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5      2158.339 ±    1163.129  MB/sec
[info] NestedStructsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5     84203.446 ±   45452.335    B/op
[info] NestedStructsBenchmark.writeCirce:·gc.count                                                       128  thrpt    5        16.000                counts
[info] NestedStructsBenchmark.writeCirce:·gc.time                                                        128  thrpt    5        13.000                    ms
[info] NestedStructsBenchmark.writeJacksonScala                                                          128  thrpt    5    224490.372 ±   27735.860   ops/s
[info] NestedStructsBenchmark.writeJacksonScala:·gc.alloc.rate                                           128  thrpt    5      1043.930 ±     128.525  MB/sec
[info] NestedStructsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5      7320.002 ±       0.001    B/op
[info] NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.037 ±       0.104  MB/sec
[info] NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0.264 ±       0.726    B/op
[info] NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5      1080.523 ±    1424.574  MB/sec
[info] NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5      7586.855 ±   10085.258    B/op
[info] NestedStructsBenchmark.writeJacksonScala:·gc.count                                                128  thrpt    5         8.000                counts
[info] NestedStructsBenchmark.writeJacksonScala:·gc.time                                                 128  thrpt    5         6.000                    ms
[info] NestedStructsBenchmark.writeJsoniterScala                                                         128  thrpt    5   1123112.627 ±   46221.525   ops/s
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       565.036 ±      23.371  MB/sec
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5       792.000 ±       0.001    B/op
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.671 ±       5.646  MB/sec
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         0.943 ±       7.938    B/op
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5       506.626 ±    1123.677  MB/sec
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5       710.942 ±    1570.701    B/op
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.count                                               128  thrpt    5         4.000                counts
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.time                                                128  thrpt    5         7.000                    ms
[info] NestedStructsBenchmark.writeJsoniterScalaPrealloc                                                 128  thrpt    5   1172021.586 ±    7528.565   ops/s
[info] NestedStructsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] NestedStructsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             128  thrpt    5        ≈ 10⁻³                  B/op
[info] NestedStructsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       128  thrpt    5           ≈ 0                counts
[info] NestedStructsBenchmark.writePlayJson                                                              128  thrpt    5     51930.305 ±    3043.549   ops/s
[info] NestedStructsBenchmark.writePlayJson:·gc.alloc.rate                                               128  thrpt    5      2712.652 ±     158.403  MB/sec
[info] NestedStructsBenchmark.writePlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     82232.008 ±       0.001    B/op
[info] NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.087 ±       0.154  MB/sec
[info] NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         2.654 ±       4.779    B/op
[info] NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5      2716.634 ±      15.514  MB/sec
[info] NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5     82368.414 ±    5000.451    B/op
[info] NestedStructsBenchmark.writePlayJson:·gc.count                                                    128  thrpt    5        20.000                counts
[info] NestedStructsBenchmark.writePlayJson:·gc.time                                                     128  thrpt    5        17.000                    ms
[info] PrimitivesBenchmark.readCirce                                                                     N/A  thrpt    5    691774.516 ±   24126.674   ops/s
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate                                                      N/A  thrpt    5      2098.751 ±      72.665  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm                                                 N/A  thrpt    5      4776.001 ±       0.001    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5         0.067 ±       0.067  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5         0.151 ±       0.149    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5      2157.033 ±    1179.541  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5      4906.588 ±    2593.021    B/op
[info] PrimitivesBenchmark.readCirce:·gc.count                                                           N/A  thrpt    5        16.000                counts
[info] PrimitivesBenchmark.readCirce:·gc.time                                                            N/A  thrpt    5        13.000                    ms
[info] PrimitivesBenchmark.readJacksonScala                                                              N/A  thrpt    5   1538926.980 ±    7966.162   ops/s
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate                                               N/A  thrpt    5      1165.278 ±       5.770  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          N/A  thrpt    5      1192.000 ±       0.001    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5         0.058 ±       0.174  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5         0.060 ±       0.178    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5      1216.662 ±    1164.062  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5      1244.814 ±    1193.992    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.count                                                    N/A  thrpt    5         9.000                counts
[info] PrimitivesBenchmark.readJacksonScala:·gc.time                                                     N/A  thrpt    5         7.000                    ms
[info] PrimitivesBenchmark.readJsoniterScala                                                             N/A  thrpt    5   7365068.342 ±  111757.608   ops/s
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate                                              N/A  thrpt    5       224.564 ±       3.399  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         N/A  thrpt    5        48.000 ±       0.001    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5         0.003 ±       0.026  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5         0.001 ±       0.006    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5       204.576 ±    1078.672  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5        43.849 ±     231.206    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.count                                                   N/A  thrpt    5         2.000                counts
[info] PrimitivesBenchmark.readJsoniterScala:·gc.time                                                    N/A  thrpt    5         4.000                    ms
[info] PrimitivesBenchmark.readPlayJson                                                                  N/A  thrpt    5    227621.189 ±   11978.514   ops/s
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate                                                   N/A  thrpt    5      1612.477 ±      84.582  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm                                              N/A  thrpt    5     11152.002 ±       0.001    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5         0.058 ±       0.088  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5         0.403 ±       0.601    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5      1624.819 ±    1430.492  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5     11232.052 ±    9748.211    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.count                                                        N/A  thrpt    5        12.000                counts
[info] PrimitivesBenchmark.readPlayJson:·gc.time                                                         N/A  thrpt    5         9.000                    ms
[info] PrimitivesBenchmark.writeCirce                                                                    N/A  thrpt    5    949621.977 ±   26246.528   ops/s
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate                                                     N/A  thrpt    5      1418.899 ±      38.770  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm                                                N/A  thrpt    5      2352.000 ±       0.001    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5         0.050 ±       0.122  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5         0.083 ±       0.200    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5      1477.005 ±    1151.843  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5      2447.068 ±    1869.481    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.count                                                          N/A  thrpt    5        11.000                counts
[info] PrimitivesBenchmark.writeCirce:·gc.time                                                           N/A  thrpt    5         8.000                    ms
[info] PrimitivesBenchmark.writeJacksonScala                                                             N/A  thrpt    5   2469266.085 ±   28428.361   ops/s
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate                                              N/A  thrpt    5      1016.386 ±      11.809  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         N/A  thrpt    5       648.000 ±       0.001    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5         0.033 ±       0.184  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5         0.021 ±       0.118    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5      1080.069 ±    1423.772  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5       689.162 ±     914.571    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.count                                                   N/A  thrpt    5         8.000                counts
[info] PrimitivesBenchmark.writeJacksonScala:·gc.time                                                    N/A  thrpt    5         7.000                    ms
[info] PrimitivesBenchmark.writeJsoniterScala                                                            N/A  thrpt    5   5837852.794 ±   77181.890   ops/s
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate                                             N/A  thrpt    5       652.635 ±       8.611  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        N/A  thrpt    5       176.000 ±       0.001    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5         0.675 ±       5.677  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5         0.182 ±       1.529    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5       538.585 ±    1159.356  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5       145.382 ±     312.946    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.count                                                  N/A  thrpt    5         4.000                counts
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.time                                                   N/A  thrpt    5         5.000                    ms
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc                                                    N/A  thrpt    5   5731292.313 ±  257830.476   ops/s
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     N/A  thrpt    5       349.498 ±      15.691  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                N/A  thrpt    5        96.000 ±       0.001    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                            N/A  thrpt    5         0.009 ±       0.062  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                       N/A  thrpt    5         0.003 ±       0.017    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                        N/A  thrpt    5       306.846 ±    1078.606  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                   N/A  thrpt    5        83.995 ±     295.308    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          N/A  thrpt    5         3.000                counts
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                           N/A  thrpt    5         7.000                    ms
[info] PrimitivesBenchmark.writePlayJson                                                                 N/A  thrpt    5    342116.293 ±    6058.705   ops/s
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate                                                  N/A  thrpt    5      1987.243 ±      35.594  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm                                             N/A  thrpt    5      9144.001 ±       0.001    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5         0.071 ±       0.044  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5         0.326 ±       0.204    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5      2033.776 ±      13.488  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5      9358.256 ±     157.251    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.count                                                       N/A  thrpt    5        15.000                counts
[info] PrimitivesBenchmark.writePlayJson:·gc.time                                                        N/A  thrpt    5        12.000                    ms
[info] SetOfIntsBenchmark.readCirce                                                                      128  thrpt    5     67165.542 ±    2512.604   ops/s
[info] SetOfIntsBenchmark.readCirce:·gc.alloc.rate                                                       128  thrpt    5      1919.938 ±      71.955  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                  128  thrpt    5     44992.006 ±       0.001    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                              128  thrpt    5         0.062 ±       0.170  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                         128  thrpt    5         1.465 ±       3.972    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                          128  thrpt    5      1886.843 ±    1161.029  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                     128  thrpt    5     44250.042 ±   27970.424    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.count                                                            128  thrpt    5        14.000                counts
[info] SetOfIntsBenchmark.readCirce:·gc.time                                                             128  thrpt    5        11.000                    ms
[info] SetOfIntsBenchmark.readJacksonScala                                                               128  thrpt    5    108593.032 ±    4243.527   ops/s
[info] SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                                128  thrpt    5      1672.092 ±      65.432  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                           128  thrpt    5     24240.004 ±       0.001    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0.058 ±       0.067  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         0.844 ±       0.960    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                   128  thrpt    5      1625.847 ±    1429.506  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5     23552.957 ±   20314.352    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.count                                                     128  thrpt    5        12.000                counts
[info] SetOfIntsBenchmark.readJacksonScala:·gc.time                                                      128  thrpt    5        10.000                    ms
[info] SetOfIntsBenchmark.readJsoniterScala                                                              128  thrpt    5    164229.617 ±    5739.478   ops/s
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                               128  thrpt    5      2412.099 ±      83.212  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                          128  thrpt    5     23120.002 ±       0.001    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.046 ±       0.036  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         0.439 ±       0.342    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5      2433.612 ±    1438.702  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5     23333.176 ±   13972.744    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.count                                                    128  thrpt    5        18.000                counts
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.time                                                     128  thrpt    5        13.000                    ms
[info] SetOfIntsBenchmark.readPlayJson                                                                   128  thrpt    5     59474.159 ±    1860.131   ops/s
[info] SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                                    128  thrpt    5      3126.705 ±      97.930  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                               128  thrpt    5     82760.007 ±       0.001    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                           128  thrpt    5         0.067 ±       0.104  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5         1.763 ±       2.763    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                       128  thrpt    5      3128.326 ±    1432.225  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5     82857.477 ±   39891.885    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.count                                                         128  thrpt    5        23.000                counts
[info] SetOfIntsBenchmark.readPlayJson:·gc.time                                                          128  thrpt    5        18.000                    ms
[info] SetOfIntsBenchmark.readUPickle                                                                    128  thrpt    5     79612.206 ±    4541.623   ops/s
[info] SetOfIntsBenchmark.readUPickle:·gc.alloc.rate                                                     128  thrpt    5      1623.261 ±      93.004  MB/sec
[info] SetOfIntsBenchmark.readUPickle:·gc.alloc.rate.norm                                                128  thrpt    5     32096.005 ±       0.001    B/op
[info] SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                            128  thrpt    5         0.050 ±       0.166  MB/sec
[info] SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5         0.991 ±       3.295    B/op
[info] SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                        128  thrpt    5      1614.952 ±    1422.382  MB/sec
[info] SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5     31982.012 ±   29212.026    B/op
[info] SetOfIntsBenchmark.readUPickle:·gc.count                                                          128  thrpt    5        12.000                counts
[info] SetOfIntsBenchmark.readUPickle:·gc.time                                                           128  thrpt    5        10.000                    ms
[info] SetOfIntsBenchmark.writeCirce                                                                     128  thrpt    5    260323.100 ±   10919.973   ops/s
[info] SetOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                      128  thrpt    5      1238.293 ±      51.763  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                                 128  thrpt    5      7488.002 ±       0.001    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                             128  thrpt    5         0.042 ±       0.150  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5         0.250 ±       0.896    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                         128  thrpt    5      1208.049 ±    1156.204  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5      7296.257 ±    6874.302    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.count                                                           128  thrpt    5         9.000                counts
[info] SetOfIntsBenchmark.writeCirce:·gc.time                                                            128  thrpt    5         8.000                    ms
[info] SetOfIntsBenchmark.writeJacksonScala                                                              128  thrpt    5    572779.893 ±    8383.001   ops/s
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                               128  thrpt    5       494.831 ±       7.142  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5      1360.001 ±       0.001    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.083 ±       0.584  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         0.229 ±       1.608    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5       506.671 ±    1123.818  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5      1392.982 ±    3094.640    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.count                                                    128  thrpt    5         4.000                counts
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.time                                                     128  thrpt    5         4.000                    ms
[info] SetOfIntsBenchmark.writeJsoniterScala                                                             128  thrpt    5    790477.881 ±   81615.112   ops/s
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                              128  thrpt    5       425.793 ±      44.005  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5       848.001 ±       0.001    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.667 ±       5.651  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         1.354 ±      11.479    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5       339.470 ±    1220.546  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5       686.818 ±    2473.013    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.count                                                   128  thrpt    5         3.000                counts
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.time                                                    128  thrpt    5         7.000                    ms
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc                                                     128  thrpt    5    612100.337 ±    4438.881   ops/s
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                      128  thrpt    5         6.222 ±       0.046  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                 128  thrpt    5        16.001 ±       0.001    B/op
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                           128  thrpt    5           ≈ 0                counts
[info] SetOfIntsBenchmark.writePlayJson                                                                  128  thrpt    5     34190.332 ±    1020.776   ops/s
[info] SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                                   128  thrpt    5      1764.757 ±      52.569  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                              128  thrpt    5     81248.012 ±       0.002    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5         0.046 ±       0.036  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5         2.110 ±       1.705    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5      1880.005 ±    1157.165  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5     86623.895 ±   54873.071    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.count                                                        128  thrpt    5        14.000                counts
[info] SetOfIntsBenchmark.writePlayJson:·gc.time                                                         128  thrpt    5        12.000                    ms
[info] SetOfIntsBenchmark.writeUPickle                                                                   128  thrpt    5    139143.804 ±    7277.061   ops/s
[info] SetOfIntsBenchmark.writeUPickle:·gc.alloc.rate                                                    128  thrpt    5      1041.585 ±      54.546  MB/sec
[info] SetOfIntsBenchmark.writeUPickle:·gc.alloc.rate.norm                                               128  thrpt    5     11784.003 ±       0.001    B/op
[info] SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                           128  thrpt    5         0.025 ±       0.132  MB/sec
[info] SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5         0.281 ±       1.480    B/op
[info] SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                       128  thrpt    5       940.082 ±    1415.941  MB/sec
[info] SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5     10616.678 ±   15736.664    B/op
[info] SetOfIntsBenchmark.writeUPickle:·gc.count                                                         128  thrpt    5         7.000                counts
[info] SetOfIntsBenchmark.writeUPickle:·gc.time                                                          128  thrpt    5         6.000                    ms
[info] StringOfAsciiCharsBenchmark.readCirce                                                             128  thrpt    5   5270374.558 ±   59960.303   ops/s
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                              128  thrpt    5      3883.620 ±      43.774  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                         128  thrpt    5      1160.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.083 ±       0.127  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         0.025 ±       0.038    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5      3940.311 ±    1167.167  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5      1176.963 ±     350.156    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.count                                                   128  thrpt    5        29.000                counts
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.time                                                    128  thrpt    5        22.000                    ms
[info] StringOfAsciiCharsBenchmark.readDslJsonJava                                                       128  thrpt    5   7574359.942 ±  111512.068   ops/s
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                                        128  thrpt    5       808.319 ±      11.833  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                   128  thrpt    5       168.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.025 ±       0.215  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         0.005 ±       0.045    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                           128  thrpt    5       806.581 ±    1156.593  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5       167.807 ±     243.624    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count                                             128  thrpt    5         6.000                counts
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time                                              128  thrpt    5         6.000                    ms
[info] StringOfAsciiCharsBenchmark.readJacksonScala                                                      128  thrpt    5   4623742.155 ±  130551.905   ops/s
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                                       128  thrpt    5      2396.632 ±      67.050  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5       816.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5         0.054 ±       0.122  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         0.018 ±       0.042    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5      2440.283 ±    1428.387  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5       831.402 ±     501.745    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count                                            128  thrpt    5        18.000                counts
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time                                             128  thrpt    5        15.000                    ms
[info] StringOfAsciiCharsBenchmark.readJsoniterScala                                                     128  thrpt    5   8309758.266 ±   57882.907   ops/s
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                      128  thrpt    5       886.781 ±       6.419  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5       168.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5         0.029 ±       0.156  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5         0.006 ±       0.030    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5       940.927 ±    1419.428  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5       178.312 ±     269.661    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count                                           128  thrpt    5         7.000                counts
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time                                            128  thrpt    5         5.000                    ms
[info] StringOfAsciiCharsBenchmark.readPlayJson                                                          128  thrpt    5   5461562.116 ±  198026.899   ops/s
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                           128  thrpt    5      2942.013 ±     105.090  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                      128  thrpt    5       848.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.075 ±       0.044  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0.022 ±       0.012    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5      2976.456 ±    1438.906  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5       858.337 ±     429.806    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.count                                                128  thrpt    5        22.000                counts
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.time                                                 128  thrpt    5        17.000                    ms
[info] StringOfAsciiCharsBenchmark.readUPickle                                                           128  thrpt    5   4568749.163 ±  154944.312   ops/s
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.alloc.rate                                            128  thrpt    5      2391.321 ±      81.426  MB/sec
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.alloc.rate.norm                                       128  thrpt    5       824.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.062 ±       0.080  MB/sec
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         0.021 ±       0.027    B/op
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                               128  thrpt    5      2432.473 ±    1410.592  MB/sec
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5       838.861 ±     505.486    B/op
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.count                                                 128  thrpt    5        18.000                counts
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.time                                                  128  thrpt    5        13.000                    ms
[info] StringOfAsciiCharsBenchmark.writeCirce                                                            128  thrpt    5   3143958.273 ±   29115.232   ops/s
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                             128  thrpt    5       750.886 ±       7.095  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                        128  thrpt    5       376.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.718 ±       6.004  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         0.361 ±       3.019    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5       806.801 ±    1160.140  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5       404.019 ±     581.268    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.count                                                  128  thrpt    5         6.000                counts
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.time                                                   128  thrpt    5         7.000                    ms
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava                                                      128  thrpt    5   7308774.789 ±  100947.420   ops/s
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                                       128  thrpt    5       705.731 ±       9.750  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                  128  thrpt    5       152.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                              128  thrpt    5         0.524 ±       4.424  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         0.113 ±       0.956    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                          128  thrpt    5       672.515 ±       2.848  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5       144.848 ±       2.613    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                            128  thrpt    5         5.000                counts
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                             128  thrpt    5         6.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJacksonScala                                                     128  thrpt    5   1991652.427 ±   21948.257   ops/s
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                      128  thrpt    5       617.412 ±       6.916  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5       488.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5         0.021 ±       0.098  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5         0.016 ±       0.078    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5       671.347 ±       2.703  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5       530.633 ±       5.021    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count                                           128  thrpt    5         5.000                counts
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time                                            128  thrpt    5         5.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala                                                    128  thrpt    5   9386697.532 ±  197856.681   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       906.311 ±      19.314  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5       152.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5         0.037 ±       0.174  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5         0.006 ±       0.029    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5       805.721 ±    1155.338  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5       135.102 ±     193.182    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                          128  thrpt    5         6.000                counts
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                           128  thrpt    5         5.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                            128  thrpt    5   9222533.891 ±   77682.129   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  128  thrpt    5           ≈ 0                counts
[info] StringOfAsciiCharsBenchmark.writePlayJson                                                         128  thrpt    5   3519907.922 ±   78441.546   ops/s
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                          128  thrpt    5      1126.929 ±      25.436  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                     128  thrpt    5       504.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.037 ±       0.143  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         0.017 ±       0.064    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5      1071.439 ±    1411.961  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5       479.467 ±     634.956    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.count                                               128  thrpt    5         8.000                counts
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.time                                                128  thrpt    5         6.000                    ms
[info] StringOfAsciiCharsBenchmark.writeUPickle                                                          128  thrpt    5    408683.850 ±    3800.181   ops/s
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.alloc.rate                                           128  thrpt    5       197.315 ±       1.887  MB/sec
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.alloc.rate.norm                                      128  thrpt    5       760.001 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.005 ±       0.041  MB/sec
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0.019 ±       0.160    B/op
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                              128  thrpt    5       102.295 ±     880.790  MB/sec
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5       395.697 ±    3407.069    B/op
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.count                                                128  thrpt    5         1.000                counts
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.time                                                 128  thrpt    5         2.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readCirce                                                          128  thrpt    5    774708.836 ±    8476.208   ops/s
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                           128  thrpt    5      1358.295 ±      15.139  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                      128  thrpt    5      2760.001 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5         0.042 ±       0.113  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5         0.084 ±       0.230    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5      1343.769 ±       5.288  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5      2730.503 ±      33.093    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.count                                                128  thrpt    5        10.000                counts
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.time                                                 128  thrpt    5         8.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava                                                    128  thrpt    5   2200245.885 ±   13294.410   ops/s
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                                     128  thrpt    5       614.957 ±       3.692  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                128  thrpt    5       440.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                            128  thrpt    5         0.519 ±       4.324  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5         0.371 ±       3.090    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                        128  thrpt    5       640.357 ±     277.562  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5       458.128 ±     196.905    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count                                          128  thrpt    5         5.000                counts
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time                                           128  thrpt    5         7.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala                                                   128  thrpt    5   1030107.110 ±   31898.507   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                                    128  thrpt    5       759.043 ±      23.341  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5      1160.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5         0.037 ±       0.143  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5         0.057 ±       0.220    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5       806.362 ±    1158.764  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5      1233.536 ±    1793.719    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count                                         128  thrpt    5         6.000                counts
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time                                          128  thrpt    5         5.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala                                                  128  thrpt    5   2572400.958 ±   26563.062   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                   128  thrpt    5       718.965 ±       7.412  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5       440.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5         0.668 ±       5.532  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5         0.409 ±       3.382    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5       807.634 ±    1155.641  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5       494.490 ±     711.592    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count                                        128  thrpt    5         6.000                counts
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time                                         128  thrpt    5         6.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readPlayJson                                                       128  thrpt    5   1267215.859 ±   15575.393   ops/s
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                        128  thrpt    5       901.634 ±      10.982  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                   128  thrpt    5      1120.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.025 ±       0.105  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         0.031 ±       0.130    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5       938.119 ±    1416.416  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5      1166.243 ±    1772.289    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count                                             128  thrpt    5         7.000                counts
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time                                              128  thrpt    5         6.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readUPickle                                                        128  thrpt    5   1109889.843 ±   13632.255   ops/s
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.alloc.rate                                         128  thrpt    5      1506.002 ±      18.385  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.alloc.rate.norm                                    128  thrpt    5      2136.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                128  thrpt    5         0.062 ±       0.098  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         0.089 ±       0.140    B/op
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                            128  thrpt    5      1479.434 ±    1162.484  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5      2097.860 ±    1634.711    B/op
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.count                                              128  thrpt    5        11.000                counts
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.time                                               128  thrpt    5         9.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeCirce                                                         128  thrpt    5   1773098.866 ±   18067.192   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                          128  thrpt    5      1486.938 ±      15.043  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                     128  thrpt    5      1320.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5         0.050 ±       0.156  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5         0.044 ±       0.139    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5      1477.632 ±    1152.033  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5      1312.272 ±    1038.607    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count                                               128  thrpt    5        11.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time                                                128  thrpt    5         8.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava                                                   128  thrpt    5   2566129.118 ±   53762.373   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                                    128  thrpt    5       665.125 ±      13.807  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                               128  thrpt    5       408.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                           128  thrpt    5         0.507 ±       4.273  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5         0.312 ±       2.630    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                       128  thrpt    5       672.523 ±       2.770  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5       412.547 ±       8.417    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                         128  thrpt    5         5.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                          128  thrpt    5         6.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala                                                  128  thrpt    5   2571910.694 ±    8386.647   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                   128  thrpt    5      1215.508 ±       3.680  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5       744.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5         0.050 ±       0.156  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5         0.031 ±       0.096    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5      1212.812 ±    1159.732  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5       742.292 ±     709.107    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count                                        128  thrpt    5         9.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time                                         128  thrpt    5         7.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala                                                 128  thrpt    5   2739358.892 ±   35197.060   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                  128  thrpt    5       709.986 ±       9.254  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5       408.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5         0.674 ±       5.624  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5         0.389 ±       3.249    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5       673.152 ±       5.548  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5       386.837 ±       6.236    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                       128  thrpt    5         5.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                        128  thrpt    5         6.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                         128  thrpt    5   2782436.369 ±   42428.493   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                               128  thrpt    5           ≈ 0                counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson                                                      128  thrpt    5   2489863.332 ±   85714.048   ops/s
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                       128  thrpt    5      1252.813 ±      42.771  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                  128  thrpt    5       792.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5         0.050 ±       0.146  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         0.031 ±       0.092    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5      1206.550 ±    1154.778  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5       761.504 ±     713.368    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count                                            128  thrpt    5         9.000                counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time                                             128  thrpt    5         7.000                    ms
[info] TwitterAPIBenchmark.readCirce                                                                     N/A  thrpt    5     13003.727 ±     187.929   ops/s
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate                                                      N/A  thrpt    5      1890.327 ±      27.435  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm                                                 N/A  thrpt    5    228823.134 ±      51.718    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5         0.058 ±       0.242  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5         7.045 ±      29.272    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5      1882.520 ±    1148.061  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5    227931.451 ±  140215.535    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.count                                                           N/A  thrpt    5        14.000                counts
[info] TwitterAPIBenchmark.readCirce:·gc.time                                                            N/A  thrpt    5        12.000                    ms
[info] TwitterAPIBenchmark.readJacksonScala                                                              N/A  thrpt    5     15426.323 ±     293.992   ops/s
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate                                               N/A  thrpt    5       217.974 ±       3.651  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          N/A  thrpt    5     22242.170 ±      64.314    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5         0.004 ±       0.036  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5         0.427 ±       3.672    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5       306.871 ±    1078.696  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5     31387.613 ±  110334.034    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.count                                                    N/A  thrpt    5         3.000                counts
[info] TwitterAPIBenchmark.readJacksonScala:·gc.time                                                     N/A  thrpt    5         4.000                    ms
[info] TwitterAPIBenchmark.readJsoniterScala                                                             N/A  thrpt    5     37098.719 ±     967.825   ops/s
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                              N/A  thrpt    5       343.524 ±       8.964  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         N/A  thrpt    5     14576.011 ±       0.001    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5         0.007 ±       0.058  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5         0.287 ±       2.471    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5       409.201 ±     880.837  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5     17378.938 ±   37413.377    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.count                                                   N/A  thrpt    5         4.000                counts
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.time                                                    N/A  thrpt    5        10.000                    ms
[info] TwitterAPIBenchmark.readPlayJson                                                                  N/A  thrpt    5      3880.413 ±     108.171   ops/s
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate                                                   N/A  thrpt    5      1235.071 ±      34.454  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                              N/A  thrpt    5    500744.107 ±       0.013    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5         0.029 ±       0.134  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5        11.807 ±      54.324    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5      1215.719 ±    1161.975  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5    493317.462 ±  476470.931    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.count                                                        N/A  thrpt    5         9.000                counts
[info] TwitterAPIBenchmark.readPlayJson:·gc.time                                                         N/A  thrpt    5        13.000                    ms
[info] TwitterAPIBenchmark.writeJacksonScala                                                             N/A  thrpt    5     58389.243 ±    3065.024   ops/s
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                              N/A  thrpt    5       745.489 ±      39.422  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         N/A  thrpt    5     20099.995 ±       0.135    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5         0.021 ±       0.080  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5         0.564 ±       2.170    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5       673.841 ±       0.833  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5     18170.942 ±     951.734    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.count                                                   N/A  thrpt    5         5.000                counts
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.time                                                    N/A  thrpt    5         5.000                    ms
[info] TwitterAPIBenchmark.writeJsoniterScala                                                            N/A  thrpt    5     80805.050 ±    1324.894   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                             N/A  thrpt    5       529.722 ±       8.639  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        N/A  thrpt    5     10320.005 ±       0.001    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5         0.694 ±       5.781  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5        13.493 ±     112.410    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5       506.477 ±    1123.330  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5      9849.845 ±   21821.639    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.count                                                  N/A  thrpt    5         4.000                counts
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.time                                                   N/A  thrpt    5         7.000                    ms
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc                                                    N/A  thrpt    5     87163.423 ±     504.158   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     N/A  thrpt    5        12.402 ±       0.073  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                N/A  thrpt    5       224.005 ±       0.001    B/op
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          N/A  thrpt    5           ≈ 0                counts
[info] VectorOfBooleansBenchmark.readCirce                                                               128  thrpt    5    396627.002 ±    2179.660   ops/s
[info] VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5      2124.555 ±      11.288  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5      8432.001 ±       0.001    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5         0.079 ±       0.105  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5         0.314 ±       0.416    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5      2158.616 ±    1162.235  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5      8567.495 ±    4625.079    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.count                                                     128  thrpt    5        16.000                counts
[info] VectorOfBooleansBenchmark.readCirce:·gc.time                                                      128  thrpt    5        12.000                    ms
[info] VectorOfBooleansBenchmark.readJacksonScala                                                        128  thrpt    5    434132.708 ±    2410.582   ops/s
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5       529.476 ±       2.896  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5      1920.001 ±       0.001    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5         0.050 ±       0.387  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5         0.181 ±       1.400    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5       506.531 ±    1123.447  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5      1836.259 ±    4071.457    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5         4.000                counts
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5         4.000                    ms
[info] VectorOfBooleansBenchmark.readJsoniterScala                                                       128  thrpt    5   1189834.308 ±    9477.091   ops/s
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       622.837 ±       5.013  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5       824.000 ±       0.001    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.679 ±       5.666  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         0.900 ±       7.511    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5       538.896 ±    1160.020  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5       713.487 ±    1535.848    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5         4.000                counts
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5         4.000                    ms
[info] VectorOfBooleansBenchmark.readPlayJson                                                            128  thrpt    5    111793.693 ±    2616.160   ops/s
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      3884.761 ±      90.910  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     54704.004 ±       0.001    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.062 ±       0.127  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         0.880 ±       1.796    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5      3945.271 ±    1167.845  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5     55572.718 ±   17315.029    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        29.000                counts
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5        22.000                    ms
[info] VectorOfBooleansBenchmark.readUPickle                                                             128  thrpt    5    596252.205 ±   21632.900   ops/s
[info] VectorOfBooleansBenchmark.readUPickle:·gc.alloc.rate                                              128  thrpt    5      1739.255 ±      63.206  MB/sec
[info] VectorOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm                                         128  thrpt    5      4592.001 ±       0.001    B/op
[info] VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                     128  thrpt    5         0.054 ±       0.122  MB/sec
[info] VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5         0.143 ±       0.319    B/op
[info] VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                 128  thrpt    5      1750.702 ±    1427.093  MB/sec
[info] VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5      4617.683 ±    3667.205    B/op
[info] VectorOfBooleansBenchmark.readUPickle:·gc.count                                                   128  thrpt    5        13.000                counts
[info] VectorOfBooleansBenchmark.readUPickle:·gc.time                                                    128  thrpt    5        10.000                    ms
[info] VectorOfBooleansBenchmark.writeCirce                                                              128  thrpt    5    329534.702 ±   12897.904   ops/s
[info] VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5       517.450 ±      20.188  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5      2472.001 ±       0.001    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5         0.712 ±       6.013  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5         3.421 ±      28.887    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5       608.522 ±     341.339  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5      2910.704 ±    1736.923    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.count                                                    128  thrpt    5         5.000                counts
[info] VectorOfBooleansBenchmark.writeCirce:·gc.time                                                     128  thrpt    5         9.000                    ms
[info] VectorOfBooleansBenchmark.writeJacksonScala                                                       128  thrpt    5    714201.767 ±    5537.152   ops/s
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5       544.382 ±       4.145  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5      1200.001 ±       0.001    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5         0.067 ±       0.451  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5         0.146 ±       0.992    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5       539.240 ±    1160.757  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5      1188.918 ±    2559.276    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5         4.000                counts
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5         4.000                    ms
[info] VectorOfBooleansBenchmark.writeJsoniterScala                                                      128  thrpt    5   2011900.181 ±   14598.568   ops/s
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       930.444 ±       6.935  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5       728.000 ±       0.001    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5         0.037 ±       0.200  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5         0.029 ±       0.156    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5       940.401 ±    1414.255  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5       736.104 ±    1110.941    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         7.000                counts
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5         6.000                    ms
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5   1917652.222 ±   17675.674   ops/s
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5           ≈ 0                counts
[info] VectorOfBooleansBenchmark.writePlayJson                                                           128  thrpt    5    370121.885 ±    5372.636   ops/s
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5       547.318 ±       7.962  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5      2328.001 ±       0.001    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5         0.821 ±       6.982  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5         3.499 ±      29.744    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5       505.665 ±    1121.062  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5      2151.866 ±    4768.630    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5         4.000                counts
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5         9.000                    ms
[info] VectorOfBooleansBenchmark.writeUPickle                                                            128  thrpt    5    178523.307 ±    1209.580   ops/s
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.alloc.rate                                             128  thrpt    5       462.663 ±       3.236  MB/sec
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm                                        128  thrpt    5      4080.002 ±       0.001    B/op
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                    128  thrpt    5         0.670 ±       5.677  MB/sec
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5         5.914 ±      50.107    B/op
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                128  thrpt    5       474.386 ±    1068.355  MB/sec
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5      4185.974 ±    9424.611    B/op
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.count                                                  128  thrpt    5         4.000                counts
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.time                                                   128  thrpt    5         8.000                    ms
[info] Benchmark result is saved to jdk10.json
[success] Total time: 8242 s, completed Jun 1, 2018 5:06:01 AM
